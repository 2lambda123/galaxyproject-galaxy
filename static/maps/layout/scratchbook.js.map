{"version":3,"sources":["layout/scratchbook.js"],"names":["define","Frames","Backbone","View","extend","initialize","options","this","self","visible","frames","$el","id","setElement","icon","buttonActive","_l","tooltip","active","onclick","set","toggle","note_cls","hide","onbeforeunload","length","buttonLoad","collection","add","show_note","e","show","on","note","history_cache","addDataset","dataset_id","current_dataset","Galaxy","currHistoryPanel","history_id","historyId","name","model","get","dataset_ids","each","push","_findDataset","history_details","dataset","dataset_list","pos","offset","_loadDatasetOffset","frame","new_dataset_id","new_dataset","config","trigger","menu","disabled","_loadDataset","callback","title","require","DATA","is_tabular","then","url","_","find","data_type","content","createTabularDatasetChunkedView","embedded","height","TabularDataset","toJSON","viz_id","trackster","root","visualization","dbkey","stand_alone","ui","TracksterUI","frame_config","viz","d","parent_elt","container","create_visualization","latest_revision","drawables","view","hda_ldda","target","$galaxy_main","$","window","viewport","location","bookmarks","open","noscratchbook","parent","document","indexOf","attr"],"mappings":"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","file":"../../scripts/layout/scratchbook.js","sourcesContent":["/** Frame manager uses the ui-frames to create the scratch book masthead icon and functionality **/\ndefine([\"mvc/ui/ui-frames\"], function(Frames) {\n    return Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            options = options || {};\n            this.frames = new Frames.View({ visible: false });\n            this.setElement(this.frames.$el);\n            this.buttonActive = options.collection.add({\n                id: \"enable-scratchbook\",\n                icon: \"fa-th\",\n                tooltip: _l(\"Enable/Disable Scratchbook\"),\n                onclick: function() {\n                    self.active = !self.active;\n                    self.buttonActive.set({\n                        toggle: self.active,\n                        show_note: self.active,\n                        note_cls: self.active && \"fa fa-check\"\n                    });\n                    !self.active && self.frames.hide();\n                },\n                onbeforeunload: function() {\n                    if (self.frames.length() > 0) {\n                        return \"You opened \" + self.frames.length() + \" frame(s) which will be lost.\";\n                    }\n                }\n            });\n            this.buttonLoad = options.collection.add({\n                id: \"show-scratchbook\",\n                icon: \"fa-eye\",\n                tooltip: _l(\"Show/Hide Scratchbook\"),\n                show_note: true,\n                visible: false,\n                onclick: function(e) {\n                    self.frames.visible ? self.frames.hide() : self.frames.show();\n                }\n            });\n            this.frames\n                .on(\"add remove\", function() {\n                    this.visible && this.length() == 0 && this.hide();\n                    self.buttonLoad.set({\n                        note: this.length(),\n                        visible: this.length() > 0\n                    });\n                })\n                .on(\"show hide \", function() {\n                    self.buttonLoad.set({\n                        toggle: this.visible,\n                        icon: (this.visible && \"fa-eye\") || \"fa-eye-slash\"\n                    });\n                });\n            this.history_cache = {};\n        },\n\n        /** Add a dataset to the frames */\n        addDataset: function(dataset_id) {\n            var self = this;\n            var current_dataset = null;\n            if (Galaxy && Galaxy.currHistoryPanel) {\n                var history_id = Galaxy.currHistoryPanel.collection.historyId;\n                this.history_cache[history_id] = {\n                    name: Galaxy.currHistoryPanel.model.get(\"name\"),\n                    dataset_ids: []\n                };\n                Galaxy.currHistoryPanel.collection.each(function(model) {\n                    !model.get(\"deleted\") &&\n                        model.get(\"visible\") &&\n                        self.history_cache[history_id].dataset_ids.push(model.get(\"id\"));\n                });\n            }\n            var _findDataset = function(dataset, offset) {\n                if (dataset) {\n                    var history_details = self.history_cache[dataset.get(\"history_id\")];\n                    if (history_details && history_details.dataset_ids) {\n                        var dataset_list = history_details.dataset_ids;\n                        var pos = dataset_list.indexOf(dataset.get(\"id\"));\n                        if (pos !== -1 && pos + offset >= 0 && pos + offset < dataset_list.length) {\n                            return dataset_list[pos + offset];\n                        }\n                    }\n                }\n            };\n            var _loadDatasetOffset = function(dataset, offset, frame) {\n                var new_dataset_id = _findDataset(dataset, offset);\n                if (new_dataset_id) {\n                    self._loadDataset(new_dataset_id, function(new_dataset, config) {\n                        current_dataset = new_dataset;\n                        frame.model.set(config);\n                    });\n                } else {\n                    frame.model.trigger(\"change\");\n                }\n            };\n            this._loadDataset(dataset_id, function(dataset, config) {\n                current_dataset = dataset;\n                self.add(\n                    _.extend(\n                        {\n                            menu: [\n                                {\n                                    icon: \"fa fa-chevron-circle-left\",\n                                    tooltip: \"Previous in History\",\n                                    onclick: function(frame) {\n                                        _loadDatasetOffset(current_dataset, -1, frame);\n                                    },\n                                    disabled: function() {\n                                        return !_findDataset(current_dataset, -1);\n                                    }\n                                },\n                                {\n                                    icon: \"fa fa-chevron-circle-right\",\n                                    tooltip: \"Next in History\",\n                                    onclick: function(frame) {\n                                        _loadDatasetOffset(current_dataset, 1, frame);\n                                    },\n                                    disabled: function() {\n                                        return !_findDataset(current_dataset, 1);\n                                    }\n                                }\n                            ]\n                        },\n                        config\n                    )\n                );\n            });\n        },\n\n        _loadDataset: function(dataset_id, callback) {\n            var self = this;\n            require([\"mvc/dataset/data\"], function(DATA) {\n                var dataset = new DATA.Dataset({ id: dataset_id });\n                $.when(dataset.fetch()).then(function() {\n                    var is_tabular = _.find([\"tabular\", \"interval\"], function(data_type) {\n                        return dataset.get(\"data_type\").indexOf(data_type) !== -1;\n                    });\n                    var title = dataset.get(\"name\");\n                    var history_details = self.history_cache[dataset.get(\"history_id\")];\n                    if (history_details) {\n                        title = history_details.name + \": \" + title;\n                    }\n                    callback(\n                        dataset,\n                        is_tabular\n                            ? {\n                                  title: title,\n                                  url: null,\n                                  content: DATA.createTabularDatasetChunkedView({\n                                      model: new DATA.TabularDataset(dataset.toJSON()),\n                                      embedded: true,\n                                      height: \"100%\"\n                                  }).$el\n                              }\n                            : {\n                                  title: title,\n                                  url: Galaxy.root + \"datasets/\" + dataset_id + \"/display/?preview=True\",\n                                  content: null\n                              }\n                    );\n                });\n            });\n        },\n\n        /** Add a trackster visualization to the frames. */\n        addTrackster: function(viz_id) {\n            var self = this;\n            require([\"viz/visualization\", \"viz/trackster\"], function(visualization, trackster) {\n                var viz = new visualization.Visualization({ id: viz_id });\n                $.when(viz.fetch()).then(function() {\n                    var ui = new trackster.TracksterUI(Galaxy.root);\n\n                    // Construct frame config based on dataset's type.\n                    var frame_config = {\n                        title: viz.get(\"name\"),\n                        type: \"other\",\n                        content: function(parent_elt) {\n                            // Create view config.\n                            var view_config = {\n                                    container: parent_elt,\n                                    name: viz.get(\"title\"),\n                                    id: viz.id,\n                                    // FIXME: this will not work with custom builds b/c the dbkey needed to be encoded.\n                                    dbkey: viz.get(\"dbkey\"),\n                                    stand_alone: false\n                                },\n                                latest_revision = viz.get(\"latest_revision\"),\n                                drawables = latest_revision.config.view.drawables;\n\n                            // Set up datasets in drawables.\n                            _.each(drawables, function(d) {\n                                d.dataset = {\n                                    hda_ldda: d.hda_ldda,\n                                    id: d.dataset_id\n                                };\n                            });\n                            view = ui.create_visualization(\n                                view_config,\n                                latest_revision.config.viewport,\n                                latest_revision.config.view.drawables,\n                                latest_revision.config.bookmarks,\n                                false\n                            );\n                        }\n                    };\n                    self.add(frame_config);\n                });\n            });\n        },\n\n        /** Add and display a new frame/window based on options. */\n        add: function(options) {\n            if (options.target == \"_blank\") {\n                window.open(options.url);\n            } else if (options.target == \"_top\" || options.target == \"_parent\" || options.target == \"_self\") {\n                window.location = options.url;\n            } else if (!this.active || options.noscratchbook) {\n                var $galaxy_main = $(window.parent.document).find(\"#galaxy_main\");\n                if (options.target == \"galaxy_main\" || options.target == \"center\") {\n                    if ($galaxy_main.length === 0) {\n                        window.location =\n                            options.url + (options.url.indexOf(\"?\") == -1 ? \"?\" : \"&\") + \"use_panels=True\";\n                    } else {\n                        $galaxy_main.attr(\"src\", options.url);\n                    }\n                } else window.location = options.url;\n            } else {\n                this.frames.add(options);\n            }\n        }\n    });\n});\n"]}