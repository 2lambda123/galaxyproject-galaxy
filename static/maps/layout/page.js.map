{"version":3,"sources":["layout/page.js"],"names":["define","Masthead","Panel","Modal","Utils","View","Backbone","extend","el","_panelids","options","self","this","initialize","_","defaults","message_box_content","message_box_visible","message_box_class","Galaxy","modal","display","view","title","setWindowTitle","allow_title_display","Router","masthead","config","router","$el","attr","html","_template","replaceWith","append","center","$","panels","each","panel_id","charAt","toUpperCase","slice","panel_class","panel_class_name","toString","panel_instance","id","render","history","start","root","remove","renderMessageBox","renderInactivityBox","renderPanels","_checkCommunicationServerOnline","content","level","$messagebox","removeClass","hide","verificationLink","addClass","$inactivebox","toggle","panel","css","port","preferences","$chat_icon_element","url","join","host","window","communication_server_host","communication_server_port","user","attributes","indexOf","communication_server","ajax","success","data","error"],"mappings":"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","file":"../../scripts/layout/page.js","sourcesContent":["define([\"layout/masthead\", \"layout/panel\", \"mvc/ui/ui-modal\", \"utils/utils\"], function(Masthead, Panel, Modal, Utils) {\n    var View = Backbone.View.extend({\n        el: \"body\",\n        className: \"full-content\",\n        _panelids: [\"left\", \"right\"],\n\n        initialize: function(options) {\n            var self = this;\n            this.config = _.defaults(options.config || {}, {\n                message_box_visible: false,\n                message_box_content: \"\",\n                message_box_class: \"info\",\n                show_inactivity_warning: false,\n                inactivity_box_content: \"\"\n            });\n\n            // attach global objects, build mastheads\n            Galaxy.modal = this.modal = new Modal.View();\n            Galaxy.display = this.display = function(view) {\n                if (view.title) {\n                    Utils.setWindowTitle(view.title);\n                    view.allow_title_display = false;\n                } else {\n                    Utils.setWindowTitle();\n                    view.allow_title_display = true;\n                }\n                self.center.display(view);\n            };\n            Galaxy.router = this.router = options.Router && new options.Router(self, options);\n            this.masthead = new Masthead.View(this.config);\n            this.center = new Panel.CenterPanel();\n\n            // build page template\n            this.$el.attr(\"scroll\", \"no\");\n            this.$el.html(this._template());\n            this.$(\"#masthead\").replaceWith(this.masthead.$el);\n            this.$(\"#center\").append(this.center.$el);\n            this.$el.append(this.masthead.frame.$el);\n            this.$el.append(this.modal.$el);\n            this.$messagebox = this.$(\"#messagebox\");\n            this.$inactivebox = this.$(\"#inactivebox\");\n\n            // build panels\n            this.panels = {};\n            _.each(this._panelids, function(panel_id) {\n                var panel_class_name = panel_id.charAt(0).toUpperCase() + panel_id.slice(1);\n                var panel_class = options[panel_class_name];\n                if (panel_class) {\n                    var panel_instance = new panel_class(self, options);\n                    self[panel_instance.toString()] = panel_instance;\n                    self.panels[panel_id] = new Panel.SidePanel({\n                        id: panel_id,\n                        el: self.$(\"#\" + panel_id),\n                        view: panel_instance\n                    });\n                }\n            });\n            this.render();\n\n            // start the router\n            this.router &&\n                Backbone.history.start({\n                    root: Galaxy.root,\n                    pushState: true\n                });\n        },\n\n        render: function() {\n            // TODO: Remove this line after select2 update\n            $(\".select2-hidden-accessible\").remove();\n            this.masthead.render();\n            this.renderMessageBox();\n            this.renderInactivityBox();\n            this.renderPanels();\n            this._checkCommunicationServerOnline();\n            return this;\n        },\n\n        /** Render message box */\n        renderMessageBox: function() {\n            if (this.config.message_box_visible) {\n                var content = this.config.message_box_content || \"\";\n                var level = this.config.message_box_class || \"info\";\n                this.$el.addClass(\"has-message-box\");\n                this.$messagebox\n                    .attr(\"class\", \"panel-\" + level + \"-message\")\n                    .html(content)\n                    .toggle(!!content)\n                    .show();\n            } else {\n                this.$el.removeClass(\"has-message-box\");\n                this.$messagebox.hide();\n            }\n            return this;\n        },\n\n        /** Render inactivity warning */\n        renderInactivityBox: function() {\n            if (this.config.show_inactivity_warning) {\n                var content = this.config.inactivity_box_content || \"\";\n                var verificationLink = $(\"<a/>\")\n                    .attr(\"href\", Galaxy.root + \"user/resend_verification\")\n                    .text(\"Resend verification\");\n                this.$el.addClass(\"has-inactivity-box\");\n                this.$inactivebox\n                    .html(content + \" \")\n                    .append(verificationLink)\n                    .toggle(!!content)\n                    .show();\n            } else {\n                this.$el.removeClass(\"has-inactivity-box\");\n                this.$inactivebox.hide();\n            }\n            return this;\n        },\n\n        /** Render panels */\n        renderPanels: function() {\n            var self = this;\n            _.each(this._panelids, function(panel_id) {\n                var panel = self.panels[panel_id];\n                if (panel) {\n                    panel.render();\n                } else {\n                    self.$(\"#center\").css(panel_id, 0);\n                    self.$(\"#\" + panel_id).hide();\n                }\n            });\n            return this;\n        },\n\n        /** body template */\n        _template: function() {\n            return [\n                '<div id=\"everything\">',\n                '<div id=\"background\"/>',\n                '<div id=\"masthead\"/>',\n                '<div id=\"messagebox\"/>',\n                '<div id=\"inactivebox\" class=\"panel-warning-message\" />',\n                '<div id=\"left\" />',\n                '<div id=\"center\" />',\n                '<div id=\"right\" />',\n                \"</div>\",\n                '<div id=\"dd-helper\" />'\n            ].join(\"\");\n        },\n\n        toString: function() {\n            return \"PageLayoutView\";\n        },\n\n        /** Check if the communication server is online and show the icon otherwise hide the icon */\n        _checkCommunicationServerOnline: function() {\n            var host = window.Galaxy.config.communication_server_host,\n                port = window.Galaxy.config.communication_server_port,\n                preferences = window.Galaxy.user.attributes.preferences,\n                $chat_icon_element = $(\"#show-chat-online\");\n            /** Check if the user has deactivated the communication in it's personal settings */\n            if (preferences && [\"1\", \"true\"].indexOf(preferences.communication_server) != -1) {\n                // See if the configured communication server is available\n                $.ajax({\n                    url: host + \":\" + port\n                })\n                    .success(function(data) {\n                        // enable communication only when a user is logged in\n                        if (window.Galaxy.user.id !== null) {\n                            if ($chat_icon_element.css(\"visibility\") === \"hidden\") {\n                                $chat_icon_element.css(\"visibility\", \"visible\");\n                            }\n                        }\n                    })\n                    .error(function(data) {\n                        // hide the communication icon if the communication server is not available\n                        $chat_icon_element.css(\"visibility\", \"hidden\");\n                    });\n            } else {\n                $chat_icon_element.css(\"visibility\", \"hidden\");\n            }\n        }\n    });\n\n    return { View: View };\n});\n"]}