{"version":3,"sources":["galaxy.interactive_environments.js"],"names":["append_notebook","url","clear_main_area","$","remove","display_spinner","make_spin_state","s","type","ajax_timeout","sleep_step","log_attempts","count","ajax_timeout_max","ajax_timeout_step","sleep_init","sleep_max","user_msg","toastr","ajax_timeout_init","closeButton","timeOut","extendedTimeOut","tapToDismiss","spin_state","sleep","console","log","console_msg","clear","window","setTimeout","spin_again","ajax_params","xhrFields","timeout","success","success_callback","error","spin","bool_response","timeout_callback","error_callback","spinner","ajax","withCredentials","data","status","jqxhr","message_once","message","wrapped_success","spin_until","messages","warn_at","unknown_response","waiting","timeout_error","wait_warn","warning","load_when_ready","not_ready","test_ie_availability"],"mappings":"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","file":"../scripts/galaxy.interactive_environments.js","sourcesContent":["/**\n * Internal function to remove content from the main area and add the notebook.\n * Not idempotent\n */\nfunction append_notebook(url) {\n    clear_main_area();\n    $(\"#main\").append(\n        '<iframe frameBorder=\"0\" seamless=\"seamless\" style=\"width: 100%; height: 100%; overflow:hidden;\" scrolling=\"no\" src=\"' +\n            url +\n            '\"></iframe>'\n    );\n}\n\nfunction clear_main_area() {\n    $(\"#spinner\").remove();\n    $(\"#main\")\n        .children()\n        .remove();\n}\n\nfunction display_spinner() {\n    $(\"#main\").append(\n        '<img id=\"spinner\" src=\"' +\n            galaxy_root +\n            'static/style/largespinner.gif\" style=\"position:absolute;margin:auto;top:0;left:0;right:0;bottom:0;\">'\n    );\n}\n\n/* Create a spin_state object used by spin() and spin_again() */\nfunction make_spin_state(\n    type,\n    ajax_timeout_init,\n    ajax_timeout_max,\n    ajax_timeout_step,\n    sleep_init,\n    sleep_max,\n    sleep_step,\n    log_attempts\n) {\n    var s = {\n        type: typeof type !== \"undefined\" ? type : \"GIE spin\",\n        ajax_timeout: typeof ajax_timeout_init !== \"undefined\" ? ajax_timeout_init : 2000,\n        ajax_timeout_max: typeof ajax_timeout_max !== \"undefined\" ? ajax_timeout_max : 16000,\n        ajax_timeout_step: typeof ajax_timeout_step !== \"undefined\" ? ajax_timeout_step : 500,\n        sleep: typeof sleep_init !== \"undefined\" ? sleep_init : 500,\n        sleep_max: typeof sleep_max !== \"undefined\" ? sleep_max : 8000,\n        sleep_step: typeof sleep_step !== \"undefined\" ? sleep_step : 100,\n        log_attempts: typeof log_attempts !== \"undefined\" ? log_attempts : true,\n        count: 0\n    };\n    return s;\n}\n\n/* Log/display an error when spinning fails. */\nfunction spin_error(console_msg, user_msg, clear) {\n    console.log(console_msg);\n    if (clear) clear_main_area();\n    if (typeof user_msg == \"string\") {\n        toastr.clear();\n        toastr.error(user_msg, \"Error\", {\n            closeButton: true,\n            timeOut: 0,\n            extendedTimeOut: 0,\n            tapToDismiss: false\n        });\n    }\n}\n\n/* Increase sleep time and spin again. */\nfunction spin_again(spin_state) {\n    if (spin_state.sleep < spin_state.sleep_max) {\n        spin_state.sleep += spin_state.sleep_step;\n    }\n    if (spin_state.log_attempts) {\n        console.log(\n            spin_state.type +\n                \" request \" +\n                spin_state.count +\n                \" request timeout \" +\n                spin_state.ajax_timeout +\n                \"ms sleeping \" +\n                spin_state.sleep / 1000 +\n                \"s\"\n        );\n    }\n    window.setTimeout(spin_state.spinner, spin_state.sleep);\n}\n\n/*\n * Spin on a URL as long as it times out, otherwise, call the provided success or error callback. If the callback\n * returns `true`, the condition is considered \"resolved\" and spinning stops. Otherwise, continue spinning, increasing\n * AJAX timeouts and/or sleep values as configured in the spin_state.\n */\nfunction spin(url, bool_response, success_callback, timeout_callback, error_callback, spin_state) {\n    var spinner = function() {\n        var ajax_params = {\n            url: url,\n            xhrFields: {\n                withCredentials: true\n            },\n            type: \"GET\",\n            timeout: spin_state.ajax_timeout,\n            success: function(data, status, jqxhr) {\n                if (!success_callback(data, status, jqxhr)) {\n                    spin_state.count++;\n                    spin_again(spin_state);\n                }\n            },\n            error: function(jqxhr, status, error) {\n                if (status == \"timeout\") {\n                    if (spin_state.ajax_timeout < spin_state.ajax_timeout_max) {\n                        spin_state.ajax_timeout += spin_state.ajax_timeout_step;\n                    }\n                    spin_state.count++;\n                    if (!timeout_callback(jqxhr, status, error)) spin_again(spin_state);\n                } else {\n                    spin_state.count++;\n                    if (!error_callback(jqxhr, status, error)) spin_again(spin_state);\n                }\n            }\n        };\n        if (bool_response) ajax_params[\"dataType\"] = \"json\";\n        $.ajax(ajax_params);\n    };\n    console.log(\"Setting up new spinner for \" + spin_state.type + \" on \" + url);\n    spin_state.spinner = spinner;\n    window.setTimeout(spinner, spin_state.sleep);\n}\n\n/*\n * Spin on a URL forever until there is an acceptable response. \n * @param {String} url: URL to test response of. Must return a 200 (302->200 is OK).\n * @param {Boolean} bool_response: If set to `true`, do not stop spinning until the response is `true`. Otherwise, stop\n *     as soon as a successful response is received.\n */\nfunction spin_until(url, bool_response, messages, success_callback, spin_state) {\n    var warn_at = 40; // ~2 mins\n    var message_once = function(message, spin_state) {\n        if (spin_state.count == 1) {\n            display_spinner();\n            toastr.info(message, null, {\n                closeButton: true,\n                timeOut: 0,\n                extendedTimeOut: 0,\n                tapToDismiss: false\n            });\n        }\n    };\n    var wrapped_success = function(data) {\n        if (!bool_response || (bool_response && data == true)) {\n            console.log(messages[\"success\"]);\n            clear_main_area();\n            toastr.clear();\n            success_callback();\n        } else if (bool_response && data == false) {\n            message_once(messages[\"not_ready\"], spin_state);\n            return false; // keep spinning\n        } else {\n            spin_error(\"Invalid response to \" + spin_state.type + \" request\", messages[\"invalid_response\"], true);\n        }\n        return true; // stop spinning\n    };\n    var timeout_error = function(jqxhr, status, error) {\n        message_once(messages[\"waiting\"], spin_state);\n        if (spin_state.count == warn_at) {\n            toastr.warning(messages[\"wait_warn\"], \"Warning\", {\n                closeButton: true,\n                timeOut: 0,\n                extendedTimeOut: 0,\n                tapToDismiss: false\n            });\n        }\n        return false; // keep spinning\n    };\n    spin(url, bool_response, wrapped_success, timeout_error, timeout_error, spin_state);\n}\n\n/**\n * Test a boolean (json) response from a URL, and call a callback when done.\n * http://stackoverflow.com/q/25390206/347368\n * @param {String} url: URL to test response of. Must return a 200 (302->200 is OK) and either `true` or `false`.\n * @param {String} callback: function to call once successfully connected.\n *\n */\nfunction load_when_ready(url, success_callback) {\n    var messages = {\n        success: \"Galaxy reports IE container ready, returning\",\n        not_ready: \"Galaxy is launching a container in which to run this interactive environment. Please wait...\",\n        unknown_response:\n            \"Galaxy failed to launch a container in which to run this interactive environment, contact a Galaxy administrator.\",\n        waiting: \"Galaxy is launching a container in which to run this interactive environment. Please wait...\",\n        wait_warn:\n            \"It is taking an usually long time to start a container. Attempts will continue but you may want to report this condition to a Galaxy administrator if it does not succeed soon.\",\n        error:\n            \"Galaxy encountered an error while attempting to determine the readiness of this interactive environment's container, contact a Galaxy administrator.\"\n    };\n    var spin_state = make_spin_state(\"IE container readiness\");\n    spin_until(url, true, messages, success_callback, spin_state);\n}\n\n/**\n * Test availability of a URL, and call a callback when done.\n * http://stackoverflow.com/q/25390206/347368\n * @param {String} url: URL to test availability of. Must return a 200 (302->200 is OK).\n * @param {String} callback: function to call once successfully connected.\n *\n */\nfunction test_ie_availability(url, success_callback) {\n    var messages = {\n        success: \"IE connection succeeded, returning\",\n        waiting: \"Interactive environment container is running, attempting to connect to the IE. Please wait...\",\n        wait_warn:\n            \"It is taking an usually long time to connect to the interactive environment. Attempts will continue but you may want to report this condition to a Galaxy administrator if it does not succeed soon.\",\n        error:\n            \"An error was encountered while attempting to connect to the interactive environment, contact your administrator.\"\n    };\n    var spin_state = make_spin_state(\"IE availability\");\n    spin_until(url, false, messages, success_callback, spin_state);\n}\n"]}