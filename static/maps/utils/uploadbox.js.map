{"version":3,"sources":["utils/uploadbox.js"],"names":["$","jQuery","props","push","uploadpost","config","extend","data","success","error","progress","url","maxfilesize","error_filesize","error_default","error_server","error_login","cnf","error_message","form","append","FormData","key","payload","sizes","d","name","file","size","xhr","setRequestHeader","onreadystatechange","response","DONE","responseText","extra_info","parseJSON","status","text","e","lengthComputable","Math","round","loaded","total","Galaxy","emit","debug","uploadinput","onchange","options","opts","change","target","multiple","$input","files","this","val","stopPropagation","ondragleave","dataTransfer","preventDefault","trigger","ondragover","el","on","dragover","dragleave","complete","add","length","queue_running","index","undefined","_","each","mode","filter","queue","f","queue_length","duplicate","String","queue_index","queue_stop","remove","initialize","process","message","dialog","reset","percentage","m","select","start","stop","configure","compatible","window","File","XMLHttpRequest","FileList"],"mappings":"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","file":"../../scripts/utils/uploadbox.js","sourcesContent":["/*\n    galaxy upload plugins - requires FormData and XMLHttpRequest\n*/\n(function($) {\n    // add event properties\n    jQuery.event.props.push(\"dataTransfer\");\n\n    /**\n        Posts file data to the API\n    */\n    $.uploadpost = function(config) {\n        // parse options\n        var cnf = $.extend(\n            {},\n            {\n                data: {},\n                success: function() {},\n                error: function() {},\n                progress: function() {},\n                url: null,\n                maxfilesize: 2048,\n                error_filesize: \"File exceeds 2GB. Please use a FTP client.\",\n                error_default: \"Please make sure the file is available.\",\n                error_server: \"Upload request failed.\",\n                error_login: \"Uploads require you to log in.\"\n            },\n            config\n        );\n\n        // link data\n        var data = cnf.data;\n\n        // check errors\n        if (data.error_message) {\n            cnf.error(data.error_message);\n            return;\n        }\n\n        // construct form data\n        var form = new FormData();\n        for (var key in data.payload) {\n            form.append(key, data.payload[key]);\n        }\n\n        // add files to submission\n        var sizes = 0;\n        for (var key in data.files) {\n            var d = data.files[key];\n            form.append(d.name, d.file, d.file.name);\n            sizes += d.file.size;\n        }\n\n        // check file size, unless it's an ftp file\n        if (sizes > 1048576 * cnf.maxfilesize) {\n            cnf.error(cnf.error_filesize);\n            return;\n        }\n\n        // prepare request\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", cnf.url, true);\n        xhr.setRequestHeader(\"Accept\", \"application/json\");\n        xhr.setRequestHeader(\"Cache-Control\", \"no-cache\");\n        xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\");\n\n        // captures state changes\n        xhr.onreadystatechange = function() {\n            // check for request completed, server connection closed\n            if (xhr.readyState == xhr.DONE) {\n                // parse response\n                var response = null;\n                var extra_info = \"\";\n                if (xhr.responseText) {\n                    try {\n                        response = jQuery.parseJSON(xhr.responseText);\n                        extra_info = response.err_msg;\n                    } catch (e) {\n                        response = xhr.responseText;\n                        extra_info = response;\n                    }\n                }\n                // pass any error to the error option\n                if (xhr.status < 200 || xhr.status > 299) {\n                    var text = xhr.statusText;\n                    if (xhr.status == 403) {\n                        text = cnf.error_login;\n                    } else if (xhr.status == 0) {\n                        text = cnf.error_server;\n                    } else if (!text) {\n                        text = cnf.error_default;\n                    }\n                    cnf.error(text + \" (\" + xhr.status + \"). \" + extra_info);\n                } else {\n                    cnf.success(response);\n                }\n            }\n        };\n\n        // prepare upload progress\n        xhr.upload.addEventListener(\n            \"progress\",\n            function(e) {\n                if (e.lengthComputable) {\n                    cnf.progress(Math.round(e.loaded * 100 / e.total));\n                }\n            },\n            false\n        );\n\n        // send request\n        Galaxy.emit.debug(\"uploadbox::uploadpost()\", \"Posting following data.\", cnf);\n        xhr.send(form);\n    };\n\n    /**\n        Handles the upload events drag/drop etc.\n    */\n    $.fn.uploadinput = function(options) {\n        // initialize\n        var el = this;\n        var opts = $.extend(\n            {},\n            {\n                ondragover: function() {},\n                ondragleave: function() {},\n                onchange: function() {},\n                multiple: false\n            },\n            options\n        );\n\n        // append hidden upload field\n        var $input = $('<input type=\"file\" style=\"display: none\" ' + ((opts.multiple && \"multiple\") || \"\") + \"/>\");\n        el.append(\n            $input.change(function(e) {\n                opts.onchange(e.target.files);\n                $(this).val(\"\");\n            })\n        );\n\n        // drag/drop events\n        el.on(\"drop\", function(e) {\n            opts.ondragleave(e);\n            if (e.dataTransfer) {\n                opts.onchange(e.dataTransfer.files);\n                e.preventDefault();\n            }\n        });\n        el.on(\"dragover\", function(e) {\n            e.preventDefault();\n            opts.ondragover(e);\n        });\n        el.on(\"dragleave\", function(e) {\n            e.stopPropagation();\n            opts.ondragleave(e);\n        });\n\n        // exports\n        return {\n            dialog: function() {\n                $input.trigger(\"click\");\n            }\n        };\n    };\n\n    /**\n        Handles the upload queue and events such as drag/drop etc.\n    */\n    $.fn.uploadbox = function(options) {\n        // parse options\n        var opts = $.extend(\n            {},\n            {\n                dragover: function() {},\n                dragleave: function() {},\n                announce: function(d) {},\n                initialize: function(d) {},\n                progress: function(d, m) {},\n                success: function(d, m) {},\n                error: function(d, m) {\n                    alert(m);\n                },\n                complete: function() {}\n            },\n            options\n        );\n\n        // file queue\n        var queue = {};\n\n        // queue index/length counter\n        var queue_index = 0;\n        var queue_length = 0;\n\n        // indicates if queue is currently running\n        var queue_running = false;\n        var queue_stop = false;\n\n        // element\n        var uploadinput = $(this).uploadinput({\n            multiple: true,\n            onchange: function(files) {\n                add(files);\n            },\n            ondragover: options.ondragover,\n            ondragleave: options.ondragleave\n        });\n\n        // add new files to upload queue\n        function add(files) {\n            if (files && files.length && !queue_running) {\n                var index = undefined;\n                _.each(files, function(file, key) {\n                    if (\n                        file.mode !== \"new\" &&\n                        _.filter(queue, function(f) {\n                            return f.name === file.name && f.size === file.size;\n                        }).length\n                    ) {\n                        file.duplicate = true;\n                    }\n                });\n                _.each(files, function(file) {\n                    if (!file.duplicate) {\n                        index = String(queue_index++);\n                        queue[index] = file;\n                        opts.announce(index, queue[index]);\n                        queue_length++;\n                    }\n                });\n                return index;\n            }\n        }\n\n        // remove file from queue\n        function remove(index) {\n            if (queue[index]) {\n                delete queue[index];\n                queue_length--;\n            }\n        }\n\n        // process an upload, recursive\n        function process() {\n            // validate\n            if (queue_length == 0 || queue_stop) {\n                queue_stop = false;\n                queue_running = false;\n                opts.complete();\n                return;\n            } else {\n                queue_running = true;\n            }\n\n            // get an identifier from the queue\n            var index = -1;\n            for (var key in queue) {\n                index = key;\n                break;\n            }\n\n            // get current file from queue\n            var file = queue[index];\n\n            // remove from queue\n            remove(index);\n\n            // create and submit data\n            $.uploadpost({\n                url: opts.url,\n                data: opts.initialize(index),\n                success: function(message) {\n                    opts.success(index, message);\n                    process();\n                },\n                error: function(message) {\n                    opts.error(index, message);\n                    process();\n                },\n                progress: function(percentage) {\n                    opts.progress(index, percentage);\n                }\n            });\n        }\n\n        /*\n            public interface\n        */\n\n        // open file browser for selection\n        function select() {\n            uploadinput.dialog();\n        }\n\n        // remove all entries from queue\n        function reset(index) {\n            for (index in queue) {\n                remove(index);\n            }\n        }\n\n        // initiate upload process\n        function start() {\n            if (!queue_running) {\n                queue_running = true;\n                process();\n            }\n        }\n\n        // stop upload process\n        function stop() {\n            queue_stop = true;\n        }\n\n        // set options\n        function configure(options) {\n            opts = $.extend({}, opts, options);\n            return opts;\n        }\n\n        // verify browser compatibility\n        function compatible() {\n            return window.File && window.FormData && window.XMLHttpRequest && window.FileList;\n        }\n\n        // export functions\n        return {\n            select: select,\n            add: add,\n            remove: remove,\n            start: start,\n            stop: stop,\n            reset: reset,\n            configure: configure,\n            compatible: compatible\n        };\n    };\n})(jQuery);\n"]}