{"version":3,"sources":["utils/utils.js"],"names":["define","_l","deepeach","dict","callback","i","_","isObject","d","new_dict","type","options","url","contentType","ajaxConfig","$","isEmptyObject","data","indexOf","dataType","param","JSON","ajax","done","stringify","response","console","replace","success","response_text","debug","e","fail","error","always","complete","responseText","status","roundToDecimalPlaces","number","numPlaces","kb","placesMultiplier","mb","tb","gb","round","bytesToString","numberPlaces","cssLoadFile","length","Galaxy","root","appendTo","cssGetAttribute","classname","name","el","value","css","remove","get","window","__utils__get__","cache_key","request","cache","top","merge","optionsDefault","defaults","iframe","src","normal_font","size","undefined","unit","rounded","__utils__uid__","uid","hours","getHours","minutes","getMinutes","time","appendScriptStyle","getDate","getMonth","text","sanitize","content","html","textify","pos","lst","substr","toString","lastIndexOf","isEmpty","Array","isJSON","test","clone","obj","parse","linkify","inputText","replacedText","replacePattern1","replacePattern2","replacePattern3","script","getQueryString","styles","setWindowTitle","title","document","key","decodeURIComponent","encodeURIComponent","config","brand"],"mappings":"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","file":"../../scripts/utils/utils.js","sourcesContent":["/**\n * Galaxy utilities comprises small functions, which at this point\n * do not require their own classes/files\n*/\ndefine([\"utils/localization\"], function(_l) {\n    /** Builds a basic iframe */\n    function iframe(src) {\n        return '<iframe src=\"' + src + '\" frameborder=\"0\" style=\"width: 100%; height: 100%;\"/>';\n    }\n\n    /** Traverse through json */\n    function deepeach(dict, callback) {\n        for (var i in dict) {\n            var d = dict[i];\n            if (_.isObject(d)) {\n                var new_dict = callback(d);\n                new_dict && (dict[i] = new_dict);\n                deepeach(d, callback);\n            }\n        }\n    }\n\n    /** Identifies urls and replaces them with anchors */\n    function linkify(inputText) {\n        var replacedText, replacePattern1, replacePattern2, replacePattern3;\n\n        // URLs starting with http://, https://, or ftp://\n        replacePattern1 = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim;\n        replacedText = inputText.replace(replacePattern1, '<a href=\"$1\" target=\"_blank\">$1</a>');\n\n        // URLs starting with \"www.\" (without // before it, or it'd re-link the ones done above).\n        replacePattern2 = /(^|[^\\/])(www\\.[\\S]+(\\b|$))/gim;\n        replacedText = replacedText.replace(replacePattern2, '$1<a href=\"http://$2\" target=\"_blank\">$2</a>');\n\n        // Change email addresses to mailto:: links.\n        replacePattern3 = /(([a-zA-Z0-9\\-\\_\\.])+@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\n        replacedText = replacedText.replace(replacePattern3, '<a href=\"mailto:$1\">$1</a>');\n\n        return replacedText;\n    }\n\n    /** Clone */\n    function clone(obj) {\n        return JSON.parse(JSON.stringify(obj) || null);\n    }\n\n    /**\n     * Check if a string is a json string\n     * @param{String}   text - Content to be validated\n     */\n    function isJSON(text) {\n        return /^[\\],:{}\\s]*$/.test(\n            text\n                .replace(/\\\\[\"\\\\\\/bfnrtu]/g, \"@\")\n                .replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, \"]\")\n                .replace(/(?:^|:|,)(?:\\s*\\[)+/g, \"\")\n        );\n    }\n\n    /**\n     * Sanitize/escape a string\n     * @param{String}   content - Content to be sanitized\n     */\n    function sanitize(content) {\n        return $(\"<div/>\")\n            .text(content)\n            .html();\n    }\n\n    /**\n     * Checks if a value or list of values is `empty`\n     * usually used for selectable options\n     * @param{String}   value - Value or list to be validated\n     */\n    function isEmpty(value) {\n        if (!(value instanceof Array)) {\n            value = [value];\n        }\n        if (value.length === 0) {\n            return true;\n        }\n        for (var i in value) {\n            if ([\"__null__\", \"__undefined__\", null, undefined].indexOf(value[i]) > -1) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Convert list to pretty string\n     * @param{String}   lst - List of strings to be converted in human readable list sentence\n     */\n    function textify(lst) {\n        if ($.isArray(lst)) {\n            var lst = lst.toString().replace(/,/g, \", \");\n            var pos = lst.lastIndexOf(\", \");\n            if (pos != -1) {\n                lst = lst.substr(0, pos) + \" or \" + lst.substr(pos + 2);\n            }\n            return lst;\n        }\n        return \"\";\n    }\n\n    /**\n     * Request handler for GET\n     * @param{String}   url     - Url request is made to\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     * @param{Boolean}  cache   - Use cached data if available\n     */\n    function get(options) {\n        top.__utils__get__ = top.__utils__get__ || {};\n        var cache_key = JSON.stringify(options);\n        if (options.cache && top.__utils__get__[cache_key]) {\n            options.success && options.success(top.__utils__get__[cache_key]);\n            window.console.debug(\"utils.js::get() - Fetching from cache [\" + options.url + \"].\");\n        } else {\n            request({\n                url: options.url,\n                data: options.data,\n                success: function(response) {\n                    top.__utils__get__[cache_key] = response;\n                    options.success && options.success(response);\n                },\n                error: function(response, status) {\n                    options.error && options.error(response, status);\n                }\n            });\n        }\n    }\n\n    /**\n     * Request handler\n     * @param{String}   method  - Request method ['GET', 'POST', 'DELETE', 'PUT']\n     * @param{String}   url     - Url request is made to\n     * @param{Object}   data    - Data send to url\n     * @param{Function} success - Callback on success\n     * @param{Function} error   - Callback on error\n     */\n    function request(options) {\n        // prepare ajax\n        var ajaxConfig = {\n            contentType: \"application/json\",\n            type: options.type || \"GET\",\n            data: options.data || {},\n            url: options.url\n        };\n        // encode data into url\n        if (ajaxConfig.type == \"GET\" || ajaxConfig.type == \"DELETE\") {\n            if (!$.isEmptyObject(ajaxConfig.data)) {\n                ajaxConfig.url += ajaxConfig.url.indexOf(\"?\") == -1 ? \"?\" : \"&\";\n                ajaxConfig.url += $.param(ajaxConfig.data, true);\n            }\n            ajaxConfig.data = null;\n        } else {\n            ajaxConfig.dataType = \"json\";\n            ajaxConfig.url = ajaxConfig.url;\n            ajaxConfig.data = JSON.stringify(ajaxConfig.data);\n        }\n\n        // make request\n        $.ajax(ajaxConfig)\n            .done(function(response) {\n                if (typeof response === \"string\") {\n                    try {\n                        response = response.replace(\"Infinity,\", '\"Infinity\",');\n                        response = jQuery.parseJSON(response);\n                    } catch (e) {\n                        console.debug(e);\n                    }\n                }\n                options.success && options.success(response);\n            })\n            .fail(function(response) {\n                var response_text = null;\n                try {\n                    response_text = jQuery.parseJSON(response.responseText);\n                } catch (e) {\n                    response_text = response.responseText;\n                }\n                options.error && options.error(response_text, response.status);\n            })\n            .always(function() {\n                options.complete && options.complete();\n            });\n    }\n\n    /**\n     * Read a property value from CSS\n     * @param{String}   classname   - CSS class\n     * @param{String}   name        - CSS property\n     */\n    function cssGetAttribute(classname, name) {\n        var el = $('<div class=\"' + classname + '\"></div>');\n        el.appendTo(\":eq(0)\");\n        var value = el.css(name);\n        el.remove();\n        return value;\n    }\n\n    /**\n     * Load a CSS file\n     * @param{String}   url - Url of CSS file\n     */\n    function cssLoadFile(url) {\n        if (!$('link[href^=\"' + url + '\"]').length) {\n            $('<link href=\"' + Galaxy.root + url + '\" rel=\"stylesheet\">').appendTo(\"head\");\n        }\n    }\n\n    /**\n     * Safely merge to dictionaries\n     * @param{Object}   options         - Target dictionary\n     * @param{Object}   optionsDefault  - Source dictionary\n     */\n    function merge(options, optionsDefault) {\n        if (options) {\n            return _.defaults(options, optionsDefault);\n        } else {\n            return optionsDefault;\n        }\n    }\n\n    /**\n     * Round floaing point 'number' to 'numPlaces' number of decimal places.\n     * @param{Object}   number      a floaing point number\n     * @param{Object}   numPlaces   number of decimal places\n     */\n    function roundToDecimalPlaces(number, numPlaces) {\n        var placesMultiplier = 1;\n        for (var i = 0; i < numPlaces; i++) {\n            placesMultiplier *= 10;\n        }\n        return Math.round(number * placesMultiplier) / placesMultiplier;\n    }\n\n    // calculate on import\n    var kb = 1024,\n        mb = kb * kb,\n        gb = mb * kb,\n        tb = gb * kb;\n    /**\n     * Format byte size to string with units\n     * @param{Integer}   size           - Size in bytes\n     * @param{Boolean}   normal_font    - Switches font between normal and bold\n     */\n    function bytesToString(size, normal_font, numberPlaces) {\n        numberPlaces = numberPlaces !== undefined ? numberPlaces : 1;\n        // identify unit\n        var unit = \"\";\n        if (size >= tb) {\n            size = size / tb;\n            unit = \"TB\";\n        } else if (size >= gb) {\n            size = size / gb;\n            unit = \"GB\";\n        } else if (size >= mb) {\n            size = size / mb;\n            unit = \"MB\";\n        } else if (size >= kb) {\n            size = size / kb;\n            unit = \"KB\";\n        } else if (size > 0) {\n            unit = \"b\";\n        } else {\n            return normal_font ? \"0 b\" : \"<strong>-</strong>\";\n        }\n        // return formatted string\n        var rounded = unit == \"b\" ? size : roundToDecimalPlaces(size, numberPlaces);\n        if (normal_font) {\n            return rounded + \" \" + unit;\n        } else {\n            return \"<strong>\" + rounded + \"</strong> \" + unit;\n        }\n    }\n\n    /** Create a unique id */\n    function uid() {\n        top.__utils__uid__ = top.__utils__uid__ || 0;\n        return \"uid-\" + top.__utils__uid__++;\n    }\n\n    /** Create a time stamp */\n    function time() {\n        var d = new Date();\n        var hours = (d.getHours() < 10 ? \"0\" : \"\") + d.getHours();\n        var minutes = (d.getMinutes() < 10 ? \"0\" : \"\") + d.getMinutes();\n        return d.getDate() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getFullYear() + \", \" + hours + \":\" + minutes;\n    }\n\n    /** Append script and style tags to Galaxy main application */\n    function appendScriptStyle(data) {\n        // create a script tag inside head tag\n        if (data.script && data.script !== \"\") {\n            $(\"<script/>\", { type: \"text/javascript\" })\n                .text(data.script)\n                .appendTo(\"head\");\n        }\n        // create a style tag inside head tag\n        if (data.styles && data.styles !== \"\") {\n            $(\"<style/>\", { type: \"text/css\" })\n                .text(data.styles)\n                .appendTo(\"head\");\n        }\n    }\n\n    /** Get querystrings from url */\n    function getQueryString(key) {\n        return decodeURIComponent(\n            window.location.search.replace(\n                new RegExp(\n                    \"^(?:.*[&\\\\?]\" + encodeURIComponent(key).replace(/[\\.\\+\\*]/g, \"\\\\$&\") + \"(?:\\\\=([^&]*))?)?.*$\",\n                    \"i\"\n                ),\n                \"$1\"\n            )\n        );\n    }\n\n    function setWindowTitle(title) {\n        if (title) {\n            window.document.title =\n                \"Galaxy \" + (window.Galaxy.config.brand ? \" | \" + window.Galaxy.config.brand : \"\") + \" | \" + _l(title);\n        } else {\n            window.document.title = \"Galaxy \" + (window.Galaxy.config.brand ? \" | \" + window.Galaxy.config.brand : \"\");\n        }\n    }\n\n    return {\n        cssLoadFile: cssLoadFile,\n        cssGetAttribute: cssGetAttribute,\n        get: get,\n        merge: merge,\n        iframe: iframe,\n        bytesToString: bytesToString,\n        uid: uid,\n        time: time,\n        request: request,\n        sanitize: sanitize,\n        textify: textify,\n        isEmpty: isEmpty,\n        deepeach: deepeach,\n        isJSON: isJSON,\n        clone: clone,\n        linkify: linkify,\n        appendScriptStyle: appendScriptStyle,\n        getQueryString: getQueryString,\n        setWindowTitle: setWindowTitle\n    };\n});\n"]}