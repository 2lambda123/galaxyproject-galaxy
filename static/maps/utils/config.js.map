{"version":3,"sources":["utils/config.js"],"names":["define","_","util_mod","config_mod","ConfigSetting","Backbone","Model","extend","initialize","options","this","get","set","key","defaults","find","label","type","default_value","mode","set_value","s","value","undefined","get_random_color","ConfigSettingCollection","parseFloat","parseInt","each","Collection","model","to_key_value_dict","setting","rval","get_value","set_default_value","m","from_models_and_saved_values","models","saved_values","map","container","$el","param","ConfigSettingCollectionView","View","row","render","append","collection","index","select","$","appendTo","attr","id","removeClass","tip","left","position","top","click","e","stopPropagation","option","new_color_icon","container_div","input","tip_inner","tip_arrow","farb_obj","width","height","callback","siblings","addClass","fixed_farb_obj","show","document","bind","hide","unbind","update_from_form","check_enter_esc","keyCode","which","ok_fn","color","length","css","modal","title","setColor","Cancel","val","self","help","render_in_modal","cancel_fn","Galaxy","window","children","body","buttons","OK","is"],"mappings":"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","file":"../../scripts/utils/config.js","sourcesContent":["define([\"libs/underscore\", \"viz/trackster/util\", \"utils/config\"], function(_, util_mod, config_mod) {\n    /**\n * A configuration setting. Currently key is used as id.\n */\n    var ConfigSetting = Backbone.Model.extend({\n        initialize: function(options) {\n            // Use key as id for now.\n            var key = this.get(\"key\");\n            this.set(\"id\", key);\n\n            // Set defaults based on key.\n            var defaults = _.find(\n                [\n                    {\n                        key: \"name\",\n                        label: \"Name\",\n                        type: \"text\",\n                        default_value: \"\"\n                    },\n                    {\n                        key: \"color\",\n                        label: \"Color\",\n                        type: \"color\",\n                        default_value: null\n                    },\n                    {\n                        key: \"min_value\",\n                        label: \"Min Value\",\n                        type: \"float\",\n                        default_value: null\n                    },\n                    {\n                        key: \"max_value\",\n                        label: \"Max Value\",\n                        type: \"float\",\n                        default_value: null\n                    },\n                    {\n                        key: \"mode\",\n                        type: \"string\",\n                        default_value: this.mode,\n                        hidden: true\n                    },\n                    {\n                        key: \"height\",\n                        type: \"int\",\n                        default_value: 32,\n                        hidden: true\n                    },\n                    {\n                        key: \"pos_color\",\n                        label: \"Positive Color\",\n                        type: \"color\",\n                        default_value: \"#FF8C00\"\n                    },\n                    {\n                        key: \"neg_color\",\n                        label: \"Negative Color\",\n                        type: \"color\",\n                        default_value: \"#4169E1\"\n                    },\n                    {\n                        key: \"block_color\",\n                        label: \"Block color\",\n                        type: \"color\",\n                        default_value: null\n                    },\n                    {\n                        key: \"label_color\",\n                        label: \"Label color\",\n                        type: \"color\",\n                        default_value: \"black\"\n                    },\n                    {\n                        key: \"show_insertions\",\n                        label: \"Show insertions\",\n                        type: \"bool\",\n                        default_value: false\n                    },\n                    {\n                        key: \"show_counts\",\n                        label: \"Show summary counts\",\n                        type: \"bool\",\n                        default_value: true\n                    },\n                    {\n                        key: \"reverse_strand_color\",\n                        label: \"Antisense strand color\",\n                        type: \"color\",\n                        default_value: null\n                    },\n                    {\n                        key: \"show_differences\",\n                        label: \"Show differences only\",\n                        type: \"bool\",\n                        default_value: true\n                    }\n                ],\n                function(s) {\n                    return s.key === key;\n                }\n            );\n            if (defaults) {\n                this.set(_.extend({}, defaults, options));\n            }\n\n            if (this.get(\"value\") === undefined && this.get(\"default_value\") !== undefined) {\n                // Use default to set value (if present).\n                this.set_value(this.get(\"default_value\"));\n\n                // If no default value for color config, set random color.\n                if (!this.get(\"value\") && this.get(\"type\") === \"color\") {\n                    // For color setting, set random color.\n                    this.set(\"value\", util_mod.get_random_color());\n                }\n            }\n        },\n\n        /**\n     * Cast and set value. This should be instead of\n     *  setting.set('value', new_value)\n     */\n        set_value: function(value, options) {\n            var type = this.get(\"type\");\n\n            if (type === \"float\") {\n                value = parseFloat(value);\n            } else if (type === \"int\") {\n                value = parseInt(value, 10);\n            }\n            // TODO: handle casting from string to bool?\n\n            this.set({ value: value }, options);\n        }\n    });\n\n    /**\n * Collection of config settings.\n */\n    var ConfigSettingCollection = Backbone.Collection.extend(\n        {\n            model: ConfigSetting,\n\n            /**\n     * Save settings as a dictionary of key-value pairs.\n     * This function is needed for backwards compatibility.\n     */\n            to_key_value_dict: function() {\n                var rval = {};\n                this.each(function(setting) {\n                    rval[setting.get(\"key\")] = setting.get(\"value\");\n                });\n\n                return rval;\n            },\n\n            /**\n     * Returns value for a given key. Returns undefined if there is no setting with the specified key.\n     */\n            get_value: function(key) {\n                var s = this.get(key);\n                if (s) {\n                    return s.get(\"value\");\n                }\n\n                return undefined;\n            },\n\n            /**\n     * Set value for a setting.\n     */\n            set_value: function(key, value, options) {\n                var s = this.get(key);\n                if (s) {\n                    return s.set_value(value, options);\n                }\n\n                return undefined;\n            },\n\n            /**\n      * Set default value for a setting.\n      */\n            set_default_value: function(key, default_value) {\n                var s = this.get(key);\n                if (s) {\n                    return s.set(\"default_value\", default_value);\n                }\n\n                return undefined;\n            }\n        },\n        {\n            /**\n     * Utility function that creates a ConfigSettingsCollection from a set of models\n     * and a saved_values dictionary.\n     */\n            from_models_and_saved_values: function(models, saved_values) {\n                // If there are saved values, copy models and update with saved values.\n                if (saved_values) {\n                    models = _.map(models, function(m) {\n                        return _.extend({}, m, { value: saved_values[m.key] });\n                    });\n                }\n\n                return new ConfigSettingCollection(models);\n            }\n        }\n    );\n\n    /**\n * Viewer for config settings collection.\n */\n    var ConfigSettingCollectionView = Backbone.View.extend({\n        className: \"config-settings-view\",\n\n        /**\n     * Renders form for editing configuration settings.\n     */\n        render: function() {\n            var container = this.$el;\n\n            this.collection.each(function(param, index) {\n                // Hidden params have no representation in the form\n                if (param.get(\"hidden\")) {\n                    return;\n                }\n\n                // Build row for param.\n                var id = \"param_\" + index,\n                    type = param.get(\"type\"),\n                    value = param.get(\"value\");\n                var row = $(\"<div class='form-row' />\").appendTo(container);\n                row.append(\n                    $(\"<label />\")\n                        .attr(\"for\", id)\n                        .text(param.get(\"label\") + \":\")\n                );\n                // Draw parameter as checkbox\n                if (type === \"bool\") {\n                    row.append(\n                        $('<input type=\"checkbox\" />')\n                            .attr(\"id\", id)\n                            .attr(\"name\", id)\n                            .attr(\"checked\", value)\n                    );\n                } else if (type === \"text\") {\n                    // Draw parameter as textbox\n                    row.append(\n                        $('<input type=\"text\"/>')\n                            .attr(\"id\", id)\n                            .val(value)\n                            .click(function() {\n                                $(this).select();\n                            })\n                    );\n                } else if (type === \"select\") {\n                    // Draw parameter as select area\n                    var select = $(\"<select />\").attr(\"id\", id);\n                    _.each(param.get(\"options\"), function(option) {\n                        $(\"<option/>\")\n                            .text(option.label)\n                            .attr(\"value\", option.value)\n                            .appendTo(select);\n                    });\n                    select.val(value);\n                    row.append(select);\n                } else if (type === \"color\") {\n                    // Draw parameter as color picker\n                    var container_div = $(\"<div/>\").appendTo(row),\n                        input = $(\"<input />\")\n                            .attr(\"id\", id)\n                            .attr(\"name\", id)\n                            .val(value)\n                            .css(\"float\", \"left\")\n                            .appendTo(container_div)\n                            .click(function(e) {\n                                // Hide other pickers.\n                                $(\".tooltip\").removeClass(\"in\");\n\n                                // Show input's color picker.\n                                var tip = $(this)\n                                    .siblings(\".tooltip\")\n                                    .addClass(\"in\");\n                                tip\n                                    .css({\n                                        // left: $(this).position().left + ( $(input).width() / 2 ) - 60,\n                                        // top: $(this).position().top + $(this.height)\n                                        left: $(this).position().left + $(this).width() + 5,\n                                        top: $(this).position().top - $(tip).height() / 2 + $(this).height() / 2\n                                    })\n                                    .show();\n\n                                // Click management:\n\n                                // Keep showing tip if clicking in tip.\n                                tip.click(function(e) {\n                                    e.stopPropagation();\n                                });\n\n                                // Hide tip if clicking outside of tip.\n                                $(document).bind(\"click.color-picker\", function() {\n                                    tip.hide();\n                                    $(document).unbind(\"click.color-picker\");\n                                });\n\n                                // No propagation to avoid triggering document click (and tip hiding) above.\n                                e.stopPropagation();\n                            }),\n                        // Icon for setting a new random color; behavior set below.\n                        new_color_icon = $(\"<a href='javascript:void(0)'/>\")\n                            .addClass(\"icon-button arrow-circle\")\n                            .appendTo(container_div)\n                            .attr(\"title\", \"Set new random color\")\n                            .tooltip(),\n                        // Color picker in tool tip style.\n                        tip = $(\"<div class='tooltip right' style='position: absolute;' />\")\n                            .appendTo(container_div)\n                            .hide(),\n                        // Inner div for padding purposes\n                        tip_inner = $(\"<div class='tooltip-inner' style='text-align: inherit'></div>\").appendTo(tip),\n                        tip_arrow = $(\"<div class='tooltip-arrow'></div>\").appendTo(tip),\n                        farb_obj = $.farbtastic(tip_inner, {\n                            width: 100,\n                            height: 100,\n                            callback: input,\n                            color: value\n                        });\n\n                    // Clear floating.\n                    container_div.append($(\"<div/>\").css(\"clear\", \"both\"));\n\n                    // Use function to fix farb_obj value.\n                    (function(fixed_farb_obj) {\n                        new_color_icon.click(function() {\n                            fixed_farb_obj.setColor(util_mod.get_random_color());\n                        });\n                    })(farb_obj);\n                } else {\n                    row.append(\n                        $(\"<input />\")\n                            .attr(\"id\", id)\n                            .attr(\"name\", id)\n                            .val(value)\n                    );\n                }\n                // Help text\n                if (param.help) {\n                    row.append($(\"<div class='help'/>\").text(param.help));\n                }\n            });\n\n            return this;\n        },\n\n        /**\n     * Render view in modal.\n     */\n        render_in_modal: function(title) {\n            // Set up handlers for cancel, ok button and for handling esc key.\n            var self = this,\n                cancel_fn = function() {\n                    Galaxy.modal.hide();\n                    $(window).unbind(\"keypress.check_enter_esc\");\n                },\n                ok_fn = function() {\n                    Galaxy.modal.hide();\n                    $(window).unbind(\"keypress.check_enter_esc\");\n                    self.update_from_form();\n                },\n                check_enter_esc = function(e) {\n                    if ((e.keyCode || e.which) === 27) {\n                        // Escape key\n                        cancel_fn();\n                    } else if ((e.keyCode || e.which) === 13) {\n                        // Enter key\n                        ok_fn();\n                    }\n                };\n\n            // Set keypress handler.\n            $(window).bind(\"keypress.check_enter_esc\", check_enter_esc);\n\n            // Show modal.\n            if (this.$el.children().length === 0) {\n                this.render();\n            }\n            Galaxy.modal.show({\n                title: title || \"Configure\",\n                body: this.$el,\n                buttons: {\n                    Cancel: cancel_fn,\n                    OK: ok_fn\n                }\n            });\n        },\n\n        /**\n     * Update settings with new values entered via form.\n     */\n        update_from_form: function() {\n            var self = this;\n            this.collection.each(function(setting, index) {\n                if (!setting.get(\"hidden\")) {\n                    // Set value from view.\n                    var id = \"param_\" + index;\n                    var value = self.$el.find(\"#\" + id).val();\n                    if (setting.get(\"type\") === \"bool\") {\n                        value = self.$el.find(\"#\" + id).is(\":checked\");\n                    }\n                    setting.set_value(value);\n                }\n            });\n        }\n    });\n\n    return {\n        ConfigSetting: ConfigSetting,\n        ConfigSettingCollection: ConfigSettingCollection,\n        ConfigSettingCollectionView: ConfigSettingCollectionView\n    };\n});\n"]}