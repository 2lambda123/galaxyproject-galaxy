{"version":3,"sources":["onload.js"],"names":["replace_big_select_inputs","min_length","max_length","select_elts","refresh_select2","element","options","select_elt","$","is","placeholder","closeOnSelect","containerCssClass","jQuery","fn","select2","undefined","this","not","find","length","num_options","hasClass","init_refresh_on_change","change","select_field","select_val","val","ref_on_change_vals","attr","split","last_selected_value","inArray","trigger","window","document","get","form","submit","off","click","confirm","_","Backbone","panels","require","async_save_text","extend","POPUPMENU","make_popupmenu","make_popup_menus","init_tag_click_function","ready","onloadWebhooks","Galaxy","root","getJSON","webhooks","each","webhook","activate","script","type","text","appendTo","styles","setTimeout","tooltip","placement","href","anchor","parent","frames","galaxy_main","galaxy_main_exists","indexOf","et","steps","tour","restart","self","top","tour_opts","init"],"mappings":"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","file":"../scripts/onload.js","sourcesContent":["// ============================================================================\n// Globals (temporary)\n// ============================================================================\n// HACK: add these to global scope until we stop asking for them there...\n// Via webpack: these are required here automatically by the provider plugin\n// Via script tag: these are redundant (identities) since they're already global\nwindow[\"jQuery\"] = jQuery; // a weird form to prevent webpack from sub'ing 'window.jQuery' in the provider plugin\nwindow.$ = jQuery;\nwindow._ = _;\nwindow.Backbone = Backbone;\n// console.debug('globals loaded:', window.jQuery, window.Backbone, '...');\n\n// these are galaxy globals not defined in the provider (although they could be - but why encourage that?)\nwindow.panels = require(\"layout/panel\");\n// using extend bc there are multiple fns/objs to decorate the window with\n_.extend(window, require(\"layout/modal\"));\nwindow.async_save_text = require(\"utils/async-save-text\");\nvar POPUPMENU = require(\"ui/popupmenu\");\nwindow.make_popupmenu = POPUPMENU.make_popupmenu;\nwindow.make_popup_menus = POPUPMENU.make_popup_menus;\nwindow.init_tag_click_function = require(\"ui/autocom_tagging\");\nvar TOURS = require(\"mvc/tours\");\nvar QUERY_STRING = require(\"utils/query-string-parsing\");\n// console.debug( 'galaxy globals loaded' );\n\n// ============================================================================\n// jquery on document ready\n// ============================================================================\n// Replace select box with a text input box + autocomplete.\nfunction replace_big_select_inputs(min_length, max_length, select_elts) {\n    function refresh_select2(element) {\n        var select_elt = $(element);\n        var options = {\n            placeholder: \"Click to select\",\n            closeOnSelect: !select_elt.is(\"[MULTIPLE]\"),\n            dropdownAutoWidth: true,\n            containerCssClass: \"select2-minwidth\"\n        };\n        return element.select2(options);\n    }\n\n    // To do replace, the select2 plugin must be loaded.\n    if (!jQuery.fn.select2) {\n        return;\n    }\n\n    // Set default for min_length and max_length\n    if (min_length === undefined) {\n        min_length = 20;\n    }\n    if (max_length === undefined) {\n        max_length = 3000;\n    }\n\n    select_elts = select_elts || $(\"select\");\n\n    select_elts.each(function() {\n        var select_elt = $(this).not(\"[multiple]\");\n        // Make sure that options is within range.\n        var num_options = select_elt.find(\"option\").length;\n        if (num_options < min_length || num_options > max_length) {\n            return;\n        }\n\n        if (select_elt.hasClass(\"no-autocomplete\")) {\n            return;\n        }\n\n        /* Replaced jQuery.autocomplete with select2, notes:\n         * - multiple selects are supported\n         * - the original element is updated with the value, convert_to_values should not be needed\n         * - events are fired when updating the original element, so refresh_on_change should just work\n         *\n         * - should we still sort dbkey fields here?\n         */\n        refresh_select2(select_elt);\n    });\n}\n\n// Initialize refresh events.\nfunction init_refresh_on_change() {\n    $(\"select[refresh_on_change='true']\")\n        .off(\"change\")\n        .change(function() {\n            var select_field = $(this),\n                select_val = select_field.val(),\n                refresh = false,\n                ref_on_change_vals = select_field.attr(\"refresh_on_change_values\");\n            if (ref_on_change_vals) {\n                ref_on_change_vals = ref_on_change_vals.split(\",\");\n                var last_selected_value = select_field.attr(\"last_selected_value\");\n                if (\n                    $.inArray(select_val, ref_on_change_vals) === -1 &&\n                    $.inArray(last_selected_value, ref_on_change_vals) === -1\n                ) {\n                    return;\n                }\n            }\n            $(window).trigger(\"refresh_on_change\");\n            $(document).trigger(\"convert_to_values\"); // Convert autocomplete text to values\n            select_field.get(0).form.submit();\n        });\n\n    // checkboxes refresh on change\n    $(\":checkbox[refresh_on_change='true']\")\n        .off(\"click\")\n        .click(function() {\n            var select_field = $(this),\n                select_val = select_field.val(),\n                refresh = false,\n                ref_on_change_vals = select_field.attr(\"refresh_on_change_values\");\n            if (ref_on_change_vals) {\n                ref_on_change_vals = ref_on_change_vals.split(\",\");\n                var last_selected_value = select_field.attr(\"last_selected_value\");\n                if (\n                    $.inArray(select_val, ref_on_change_vals) === -1 &&\n                    $.inArray(last_selected_value, ref_on_change_vals) === -1\n                ) {\n                    return;\n                }\n            }\n            $(window).trigger(\"refresh_on_change\");\n            select_field.get(0).form.submit();\n        });\n\n    // Links with confirmation\n    $(\"a[confirm]\")\n        .off(\"click\")\n        .click(function() {\n            return confirm($(this).attr(\"confirm\"));\n        });\n}\n// used globally in grid-view\nwindow.init_refresh_on_change = init_refresh_on_change;\n\n$(document).ready(function() {\n    // Refresh events for form fields.\n    init_refresh_on_change();\n\n    // Tooltips\n    if ($.fn.tooltip) {\n        // Put tooltips below items in panel header so that they do not overlap masthead.\n        $(\".unified-panel-header [title]\").tooltip({ placement: \"bottom\" });\n\n        // default tooltip initialization, it will follow the data-placement tag for tooltip location\n        // and fallback to 'top' if not present\n        $(\"[title]\").tooltip();\n    }\n    // Make popup menus.\n    make_popup_menus();\n\n    // Replace big selects.\n    replace_big_select_inputs(20, 1500);\n\n    // If galaxy_main frame does not exist and link targets galaxy_main,\n    // add use_panels=True and set target to self.\n    $(\"a\").click(function() {\n        var anchor = $(this);\n        var galaxy_main_exists = parent.frames && parent.frames.galaxy_main;\n        if (anchor.attr(\"target\") == \"galaxy_main\" && !galaxy_main_exists) {\n            var href = anchor.attr(\"href\");\n            if (href.indexOf(\"?\") == -1) {\n                href += \"?\";\n            } else {\n                href += \"&\";\n            }\n            href += \"use_panels=True\";\n            anchor.attr(\"href\", href);\n            anchor.attr(\"target\", \"_self\");\n        }\n        return anchor;\n    });\n\n    var et = JSON.parse(sessionStorage.getItem(\"activeGalaxyTour\"));\n    if (et) {\n        et = TOURS.hooked_tour_from_data(et);\n        if (et && et.steps) {\n            if (window && window.self === window.top) {\n                // Only kick off a new tour if this is the toplevel window (non-iframe).  This\n                // functionality actually *could* be useful, but we'd need to handle it better and\n                // come up with some design guidelines for tours jumping between windows.\n                // Disabling for now.\n                var tour = new Tour(\n                    _.extend(\n                        {\n                            steps: et.steps\n                        },\n                        TOURS.tour_opts\n                    )\n                );\n                tour.init();\n                tour.restart();\n            }\n        }\n    }\n\n    function onloadWebhooks() {\n        if (Galaxy.root !== undefined) {\n            // Load all webhooks with the type 'onload'\n            $.getJSON(Galaxy.root + \"api/webhooks/onload/all\", function(webhooks) {\n                _.each(webhooks, function(webhook) {\n                    if (webhook.activate && webhook.script) {\n                        $(\"<script/>\", { type: \"text/javascript\" })\n                            .text(webhook.script)\n                            .appendTo(\"head\");\n                        $(\"<style/>\", { type: \"text/css\" })\n                            .text(webhook.styles)\n                            .appendTo(\"head\");\n                    }\n                });\n            });\n        } else {\n            setTimeout(onloadWebhooks, 100);\n        }\n    }\n    onloadWebhooks();\n});\n"]}