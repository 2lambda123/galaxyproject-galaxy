{"version":3,"sources":["galaxy.library.js"],"names":["define","LibraryRouter","initialize","Backbone","mod_masthead","mod_utils","mod_toastr","routes","mod_library_model","mod_folderlist_view","mod_librarylist_view","mod_librarytoolbar_view","mod_foldertoolbar_view","mod_library_dataset_view","mod_library_library_view","mod_library_folder_view","Router","extend","this","routesHit","history","on","bind","trackPageview","url","library/:library_id/permissions","folders/:folder_id/permissions","folders/:id/page/:show_page","folders/:folder_id/datasets/:dataset_id","ga","folders/:folder_id/datasets/:dataset_id/versions/:ldda_id","folders/:folder_id/download/:format","folders/:folder_id/import/:source","sort_by","library_page_size","folder_page_size","back","navigate","trigger","replace","GalaxyLibrary","libraryToolbarView","getFragment","library_router","test","libraryView","datasetView","Galaxy","root","i","SessionStorageModel","defaults","with_deleted","a","createElement","m","insertBefore","document","GalaxyApp","View","libraryListView","libraries","folderToolbarView","o","r","show_page","render","arguments","l","Date","s","getElementsByTagName","async","src","ga_code","unbind","LibraryPrefs","id","$el","folderListView","LibraryToolbarView","LibraryListView","folder_id","FolderToolbarView","FolderListView","LibraryDatasetView","dataset_id","show_version","show_permissions","ldda_id","format","find","length","info","download","library_id","folderView","source","LibraryView","FolderView","showImportModal","start","pushState"],"mappings":"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","file":"../scripts/galaxy.library.js","sourcesContent":["// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n// === MAIN GALAXY LIBRARY MODULE ====\n// MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\n\ndefine(\n    [\n        \"layout/masthead\",\n        \"utils/utils\",\n        \"libs/toastr\",\n        \"mvc/base-mvc\",\n        \"mvc/library/library-model\",\n        \"mvc/library/library-folderlist-view\",\n        \"mvc/library/library-librarylist-view\",\n        \"mvc/library/library-librarytoolbar-view\",\n        \"mvc/library/library-foldertoolbar-view\",\n        \"mvc/library/library-dataset-view\",\n        \"mvc/library/library-library-view\",\n        \"mvc/library/library-folder-view\"\n    ],\n    function(\n        mod_masthead,\n        mod_utils,\n        mod_toastr,\n        mod_baseMVC,\n        mod_library_model,\n        mod_folderlist_view,\n        mod_librarylist_view,\n        mod_librarytoolbar_view,\n        mod_foldertoolbar_view,\n        mod_library_dataset_view,\n        mod_library_library_view,\n        mod_library_folder_view\n    ) {\n        // ============================================================================\n        /**\n * The Data Libraries router. Takes care about triggering routes\n * and sends users to proper pieces of the application.\n */\n        var LibraryRouter = Backbone.Router.extend({\n            initialize: function() {\n                this.routesHit = 0;\n                // keep count of number of routes handled by the application\n                Backbone.history.on(\n                    \"route\",\n                    function() {\n                        this.routesHit++;\n                    },\n                    this\n                );\n\n                this.bind(\"route\", this.trackPageview);\n            },\n\n            routes: {\n                \"\": \"libraries\",\n                \"page/:show_page\": \"libraries_page\",\n                \"library/:library_id/permissions\": \"library_permissions\",\n                \"folders/:folder_id/permissions\": \"folder_permissions\",\n                \"folders/:id\": \"folder_content\",\n                \"folders/:id/page/:show_page\": \"folder_page\",\n                \"folders/:folder_id/datasets/:dataset_id\": \"dataset_detail\",\n                \"folders/:folder_id/datasets/:dataset_id/permissions\": \"dataset_permissions\",\n                \"folders/:folder_id/datasets/:dataset_id/versions/:ldda_id\": \"dataset_version\",\n                \"folders/:folder_id/download/:format\": \"download\",\n                \"folders/:folder_id/import/:source\": \"import_datasets\"\n            },\n\n            /**\n   * If more than one route has been hit the user did not land on current\n   * page directly so we can go back safely. Otherwise go to the home page.\n   * Use replaceState if available so the navigation doesn't create an\n   * extra history entry\n   */\n            back: function() {\n                if (this.routesHit > 1) {\n                    window.history.back();\n                } else {\n                    this.navigate(\"#\", { trigger: true, replace: true });\n                }\n            },\n\n            /**\n   * Track every route change as a page view in Google Analytics.\n   */\n            trackPageview: function() {\n                var url = Backbone.history.getFragment();\n                //prepend slash\n                if (!/^\\//.test(url) && url != \"\") {\n                    url = \"/\" + url;\n                }\n                if (typeof ga !== \"undefined\") {\n                    ga(\"send\", \"pageview\", Galaxy.root + \"library/list\" + url);\n                }\n            }\n        });\n\n        // ============================================================================\n        /** session storage for library preferences */\n        var LibraryPrefs = mod_baseMVC.SessionStorageModel.extend({\n            defaults: {\n                with_deleted: false,\n                without_restricted: false,\n                sort_order: \"asc\",\n                sort_by: \"name\",\n                library_page_size: 20,\n                folder_page_size: 15\n            }\n        });\n\n        // ============================================================================\n        /**\n * Main view of the Galaxy Data Libraries. Stores pointers to other subviews\n * and defines what router should do on the route triggers.\n */\n        var GalaxyLibrary = Backbone.View.extend({\n            libraryToolbarView: null,\n            libraryListView: null,\n            library_router: null,\n            libraryView: null,\n            folderToolbarView: null,\n            folderListView: null,\n            datasetView: null,\n\n            initialize: function() {\n                // This should go upstream in the js app once available\n                if (window.Galaxy.config.ga_code) {\n                    (function(i, s, o, g, r, a, m) {\n                        i[\"GoogleAnalyticsObject\"] = r;\n                        (i[r] =\n                            i[r] ||\n                            function() {\n                                (i[r].q = i[r].q || []).push(arguments);\n                            }),\n                            (i[r].l = 1 * new Date());\n                        (a = s.createElement(o)), (m = s.getElementsByTagName(o)[0]);\n                        a.async = 1;\n                        a.src = g;\n                        m.parentNode.insertBefore(a, m);\n                    })(window, document, \"script\", \"//www.google-analytics.com/analytics.js\", \"ga\");\n                    ga(\"create\", window.Galaxy.config.ga_code, \"auto\");\n                    ga(\"send\", \"pageview\");\n                }\n\n                Galaxy.libraries = this;\n\n                this.preferences = new LibraryPrefs({ id: \"global-lib-prefs\" });\n\n                this.library_router = new LibraryRouter();\n\n                this.library_router.on(\"route:libraries\", function() {\n                    if (Galaxy.libraries.libraryToolbarView) {\n                        Galaxy.libraries.libraryToolbarView.$el.unbind(\"click\");\n                    }\n                    Galaxy.libraries.libraryToolbarView = new mod_librarytoolbar_view.LibraryToolbarView();\n                    Galaxy.libraries.libraryListView = new mod_librarylist_view.LibraryListView();\n                });\n\n                this.library_router.on(\"route:libraries_page\", function(show_page) {\n                    if (Galaxy.libraries.libraryToolbarView === null) {\n                        Galaxy.libraries.libraryToolbarView = new mod_librarytoolbar_view.LibraryToolbarView();\n                        Galaxy.libraries.libraryListView = new mod_librarylist_view.LibraryListView({\n                            show_page: show_page\n                        });\n                    } else {\n                        Galaxy.libraries.libraryListView.render({\n                            show_page: show_page\n                        });\n                    }\n                });\n\n                this.library_router.on(\"route:folder_content\", function(id) {\n                    if (Galaxy.libraries.folderToolbarView) {\n                        Galaxy.libraries.folderToolbarView.$el.unbind(\"click\");\n                    }\n                    Galaxy.libraries.folderToolbarView = new mod_foldertoolbar_view.FolderToolbarView({ id: id });\n                    Galaxy.libraries.folderListView = new mod_folderlist_view.FolderListView({ id: id });\n                });\n\n                this.library_router.on(\"route:folder_page\", function(id, show_page) {\n                    if (Galaxy.libraries.folderToolbarView === null) {\n                        Galaxy.libraries.folderToolbarView = new mod_foldertoolbar_view.FolderToolbarView({ id: id });\n                        Galaxy.libraries.folderListView = new mod_folderlist_view.FolderListView({\n                            id: id,\n                            show_page: show_page\n                        });\n                    } else {\n                        Galaxy.libraries.folderListView.render({\n                            id: id,\n                            show_page: parseInt(show_page)\n                        });\n                    }\n                });\n\n                this.library_router.on(\"route:download\", function(folder_id, format) {\n                    if ($(\"#folder_list_body\").find(\":checked\").length === 0) {\n                        mod_toastr.info(\"You must select at least one dataset to download\");\n                        Galaxy.libraries.library_router.navigate(\"folders/\" + folder_id, {\n                            trigger: true,\n                            replace: true\n                        });\n                    } else {\n                        Galaxy.libraries.folderToolbarView.download(folder_id, format);\n                        Galaxy.libraries.library_router.navigate(\"folders/\" + folder_id, {\n                            trigger: false,\n                            replace: true\n                        });\n                    }\n                });\n\n                this.library_router.on(\"route:dataset_detail\", function(folder_id, dataset_id) {\n                    if (Galaxy.libraries.datasetView) {\n                        Galaxy.libraries.datasetView.$el.unbind(\"click\");\n                    }\n                    Galaxy.libraries.datasetView = new mod_library_dataset_view.LibraryDatasetView({\n                        id: dataset_id,\n                        show_version: false,\n                        show_permissions: false\n                    });\n                });\n\n                this.library_router.on(\"route:dataset_version\", function(folder_id, dataset_id, ldda_id) {\n                    if (Galaxy.libraries.datasetView) {\n                        Galaxy.libraries.datasetView.$el.unbind(\"click\");\n                    }\n                    Galaxy.libraries.datasetView = new mod_library_dataset_view.LibraryDatasetView({\n                        id: dataset_id,\n                        ldda_id: ldda_id,\n                        show_version: true\n                    });\n                });\n\n                this.library_router.on(\"route:dataset_permissions\", function(folder_id, dataset_id) {\n                    if (Galaxy.libraries.datasetView) {\n                        Galaxy.libraries.datasetView.$el.unbind(\"click\");\n                    }\n                    Galaxy.libraries.datasetView = new mod_library_dataset_view.LibraryDatasetView({\n                        id: dataset_id,\n                        show_permissions: true\n                    });\n                });\n\n                this.library_router.on(\"route:library_permissions\", function(library_id) {\n                    if (Galaxy.libraries.libraryView) {\n                        Galaxy.libraries.libraryView.$el.unbind(\"click\");\n                    }\n                    Galaxy.libraries.libraryView = new mod_library_library_view.LibraryView({\n                        id: library_id,\n                        show_permissions: true\n                    });\n                });\n\n                this.library_router.on(\"route:folder_permissions\", function(folder_id) {\n                    if (Galaxy.libraries.folderView) {\n                        Galaxy.libraries.folderView.$el.unbind(\"click\");\n                    }\n                    Galaxy.libraries.folderView = new mod_library_folder_view.FolderView({\n                        id: folder_id,\n                        show_permissions: true\n                    });\n                });\n\n                this.library_router.on(\"route:import_datasets\", function(folder_id, source) {\n                    if (Galaxy.libraries.folderToolbarView && Galaxy.libraries.folderListView) {\n                        Galaxy.libraries.folderToolbarView.showImportModal({\n                            source: source\n                        });\n                    } else {\n                        Galaxy.libraries.folderToolbarView = new mod_foldertoolbar_view.FolderToolbarView({\n                            id: folder_id\n                        });\n                        Galaxy.libraries.folderListView = new mod_folderlist_view.FolderListView({ id: folder_id });\n                        Galaxy.libraries.folderToolbarView.showImportModal({\n                            source: source\n                        });\n                    }\n                });\n\n                Backbone.history.start({ pushState: false });\n            }\n        });\n\n        return {\n            GalaxyApp: GalaxyLibrary\n        };\n    }\n);\n"]}