{"version":3,"sources":["viz/trackster/tracks.js"],"names":["define","extend","html_elt_js_obj_dict","_","visualization","viz_views","util","slotting","painters","filters_mod","data","tools_mod","config_mod","bbi","round","num","places","promise","Math","pow","val","supportsByteRanges","url","$","Deferred","ajax","type","beforeSend","xhr","setRequestHeader","success","result","status","resolve","is_container","moveable","element","obj","attr","children","parent","handle_class","container_selector","element_js_obj","bind","handle","relative","e","d","this","container","bottom","cur_container","offsetY","parents","remove_drawable","insertAfter","add_drawable","outerHeight","top","insertBefore","this_obj","length","add_drawable_before","position","i","child","is","get","prepend","find","hasClass","move_drawable","append","deltaY","DEFAULT_DATA_QUERY_WAIT","addClass","MAX_CHROMS_SELECTABLE","DATA_ERROR","removeClass","Drawable","view","obj_dict","id_counter","header_div","drag_handle_class","header_view","config","ConfigSettingCollection","from_models_and_saved_values","config_params","icons_div","action_icons","on","config_onchange","container_div","build_container_div","header","TrackHeaderView","model","id","drawable","toggle_icon","hide_contents","set_value","show_contents","show","hide","collection","name","title","css_class","on_click_fn","get_value","remove","default_value","hidden","ConfigSettingCollectionView","render_in_modal","can_draw","enabled","prototype","key","label","init","changed","old_name","_draw","options","update_intro_div","set_name","new_name","revert_name","get_drawables","obj_type","update_icons","DrawableCollection","call","drawables","unpack_drawables","drawables_array","to_dict","dictified_drawables","push","prefs","to_key_value_dict","replace_drawable","index","other","splice","indexOf","old_drawable","new_position","new_drawable","replaceWith","track_type","tracks","get_tracks","content_div","slice","queue","filters_manager","parent_div","saved_filters_managers","DrawableGroup","group","old_manager","action_icons_def","FiltersManager","after","filters","visible","tiles_div","request_draw","clear_filters","_restore_filter_managers","composite_icon","filters_icon","toggle","num_feature_tracks","can_composite","num_drawables","CompositeTrack","j","get_type","filter","shared_filters","FeatureTrack","remove_all","LineTrack","new_filter","filter_name","NumberFilter","add_filter","show_composite_track","setup_multitrack_filtering","init_filters","composite_track","TracksterView","View","initialize","chrom","stand_alone","tracks_to_be_redrawn","max_low","min_separation","has_changes","canvas_manager","reset","Backbone","vis_id","dbkey","undefined","label_tracks","load_chroms_deferred","render","requested_redraw","CanvasManager","ownerDocument","browser_content_div","bottom_container","viewport_container","add_tracks_button","select_datasets","nav_container","overview_viewport","overview_close","overview_box","chrom_select","location_span","stopPropagation","nav_input","parent_element","top_container","autocomplete","source","all_features","feature_search_deferreds","appendTo","text","response","click","value","feature","track","object_from_template","hidden_input","nav","zo_link","zi_link","zoom_in","change_chrom","overview","overview_highlight","overview_box_background","default_overview_height","height","nav_controls","keyCode","which","offsetX","delta_chrom","delta","reset_overview","original_low","current_height","clientY","current_x","new_scroll","low","high","move_delta","focus","request","map","t","data_manager","search_features","term","dataset_features","concat","when","apply","done","startX","width","min","max","pageX","span","old_low","proxy","request_redraw","tooltip","placement","zoom_out","load_chroms","document","redraw","trigger","max_high","intro_div","timer","clientX","self","new_chrom","scrollTop","update_location","commatize","top_labeltrack","Galaxy","url_parms","css","left","offset","abs","ref_track","ReferenceTrack","add_label_track","reference_track","chrom_data","html","len","chrom_option","prev_chroms","LabelTrack","window","resize_timer","clearTimeout","chrom_start_index","resize_window","get_base_color","base","toLowerCase","trigger_navigate","delay","setTimeout","new_low","new_high","root","dataType","chrom_info","reference","replace","chrom_pos","parseInt","fraction","next_chroms","current_chrom_span","start_index","alert","redraw_on_move_fn","found","grep","v","label_track","track_list","track_options","then","go_to","str","split","move_fraction","resolution_px_b","left_px","width_px","each","cur_center","new_half","zoom_factor","point","resize_viewport","set_overview","to","overview_drawable","_redraw","TracksterTool","floor","ceil","remove_inputs","label_div","html_div","update_value","TracksterToolView","set_visible","tool","keydown","param_view","ToolParameterView","run_on_dataset_button","run_on_region_button","run_on_region","dataset","run_on_dataset","copy","is_overview","postdraw_actions","is_visible","params","target_dataset_id","action","body","Tool","buttons","Close","tool_state","set","start","get_inputs_dict","end","events","change :input","param_div","$el","param","current_track","update_event","target","new_track","init_for_tool_data","change_mode","set_filters_manager","track_data","set_dataset","Dataset","inputs","ajax_settings","interval","success_fn","ss_deferred","run_tool_row","success_callback","Scaler","update_params","Tile","html_elt","tool_id","predisplay_actions","LineTrackTile","region","w_scale","modal","GenomeRegion","url_params","regions","toJSON","track_name","tool_region_and_parameters_str","FeatureTrackTile","hda_ldda","mode","run","ServerStateDeferred","JSON","stringify","contentType","go","DATA_NOCONVERTER","error","message","FilterScaler","default_val","gen_val","feature_data","Number","MAX_VALUE","parseFloat","canvas","stale","Track","all_slotted","incomplete_features","seq_data","data_url_extra_params","data_query_wait","feature_mapper","genome","add_resize_handle","in_handle","drag_control","Model","dataset_check_type","in_drag","original_height","GenomeDataManager","new_height","on_resize","Genome","tile_cache","data_mode_compatible","data_and_mode_compatible","can_subset","min_height_px","max_height_px","visible_height_px","resize","VariantTrack","clear","cancel_fn","regions_to_use","elt","from_str","bookmarked_regions","location","valid_chroms","dataset_id","Collection","init_deferred","No","Yes","ok_fn","predraw_init","data_type","stats","max_value","hover","TiledTrack","tool_view","dynamic_tool_div","ReadTrack","show_message","msg_html","retry","getJSON","min_value","kind","_gen_tile_cache_key","clear_tile_cache","new_mode","msg_elt","clear_after","resolution","mean","sd","set_default_value","tile_promise","tile_promises","tile_region","tiles","filters_available","Cache","pref_name","on_change","make_text_editable","help_text","slotters","max_rows","line_track_tiles","constructor","tile","draw_helper","force","icons_present","has_icons","state_dict","isNaN","display_mode","_get_drawables","is_tile","mode_icon","show_tile","get_tile_data","tools_icon","param_space_viz_icon","tile_data","tracks_data","tile_drawn","drawing_modes","get_mode","ctx","translate","tile_index","tile_width","draw_tile","get_canvas_height","_draw_line_track_tile","_add_yaxis_label","num_cols","on_finish","new_val","left_offset","tile_element","track_height","param_str","entry","update_auto_mode","get_elt","o","data_fetch","CONTINUOUS_DATA_MODES","m","get_data","data_mode","set_elt","is_deferred","subset_entry","pop","drawing_heights","new_canvas","build_config_params","tile_high","tile_low","union","globalAlpha","canvas_width","visible_height","LinePainter","ref_seq","before_draw","toString","values","join","dataset_type","extra_info","new_visible","range","tickDistance","log","cur_visible","screenPosition","new_div","subset","default_font","textAlign","fillText","show_group","init_deferreds","start_end_dct","set_painter_from_config","max_height","update_all_min_max","char_width_px","data_url","ArcLinkedFeaturePainter","GenomeReferenceDataManager","painter","all_incomplete_features","tile_incomplete_features","new_canvas_ctx","font","manager","c","str_len","fillStyle","example_feature","BBIDataManager","applies_to","DiagonalHeatmapTrack","display_modes","rows_required","filtered","f","flen","update_attrs","hide_feature","slots","filter_alpha_scaler","filter_height_scaler","draw_results","VariantPainter","summary_draw_height","help","num_samples","inc_features","omit","dummy_painter","get_required_height","deferreds","size","features","getContext","new_tile","other_tiles_features_drawn","show_more_rows_icon","incremental_slots","level","dummy_context","slotter","FeatureSlotter","x","measureText","addable_objects","cur_tile","keep","alpha_filter","height_filter","b","draw","translation","get_metadata","match","fetch","sample_names","font_size","font-size","samples_div_html","line-height","ReadPainter","VcfTrack","template","drawable_type"],"mappings":"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","file":"../../../scripts/viz/trackster/tracks.js","sourcesContent":["define(\n    [\n        \"libs/underscore\",\n        \"viz/visualization\",\n        \"viz/viz_views\",\n        \"viz/trackster/util\",\n        \"viz/trackster/slotting\",\n        \"viz/trackster/painters\",\n        \"viz/trackster/filters\",\n        \"mvc/dataset/data\",\n        \"mvc/tool/tools\",\n        \"utils/config\",\n        \"viz/bbi-data-manager\",\n        \"ui/editable-text\"\n    ],\n    function(_, visualization, viz_views, util, slotting, painters, filters_mod, data, tools_mod, config_mod, bbi) {\n        var extend = _.extend;\n\n        // ---- Web UI specific utilities ----\n\n        /**\n * Dictionary of HTML element-JavaScript object relationships.\n */\n        // TODO: probably should separate moveable objects from containers.\n        var html_elt_js_obj_dict = {};\n\n        /**\n * Designates an HTML as a container.\n */\n        var is_container = function(element, obj) {\n            html_elt_js_obj_dict[element.attr(\"id\")] = obj;\n        };\n\n        /**\n * Make `element` moveable within parent and sibling elements by dragging `handle` (a selector).\n * Function manages JS objects, containers as well.\n *\n * @param element HTML element to make moveable\n * @param handle_class classname that denotes HTML element to be used as handle\n * @param container_selector selector used to identify possible containers for this element\n * @param element_js_obj JavaScript object associated with element; used\n */\n        var moveable = function(element, handle_class, container_selector, element_js_obj) {\n            // HACK: set default value for container selector.\n            container_selector = \".group\";\n\n            // Register element with its object.\n            html_elt_js_obj_dict[element.attr(\"id\")] = element_js_obj;\n\n            // Need to provide selector for handle, not class.\n            element\n                .bind(\"drag\", { handle: \".\" + handle_class, relative: true }, function(e, d) {\n                    var element = $(this),\n                        parent = $(this).parent(),\n                        // Only sorting amongst tracks and groups.\n                        children = parent.children(\".track,.group\"),\n                        this_obj = html_elt_js_obj_dict[$(this).attr(\"id\")],\n                        child,\n                        container,\n                        top,\n                        bottom,\n                        i;\n\n                    //\n                    // Enable three types of dragging: (a) out of container; (b) into container;\n                    // (c) sibling movement, aka sorting. Handle in this order for simplicity.\n                    //\n\n                    // Handle dragging out of container.\n                    container = $(this).parents(container_selector);\n                    if (container.length !== 0) {\n                        top = container.position().top;\n                        bottom = top + container.outerHeight();\n                        var cur_container = html_elt_js_obj_dict[container.attr(\"id\")];\n                        if (d.offsetY < top) {\n                            // Moving above container.\n                            $(this).insertBefore(container);\n                            cur_container.remove_drawable(this_obj);\n                            cur_container.container.add_drawable_before(this_obj, cur_container);\n                            return;\n                        } else if (d.offsetY > bottom) {\n                            // Moving below container.\n                            $(this).insertAfter(container);\n                            cur_container.remove_drawable(this_obj);\n                            cur_container.container.add_drawable(this_obj);\n                            return;\n                        }\n                    }\n\n                    // Handle dragging into container. Child is appended to container's content_div.\n                    container = null;\n                    for (i = 0; i < children.length; i++) {\n                        child = $(children.get(i));\n                        top = child.position().top;\n                        bottom = top + child.outerHeight();\n                        // Dragging into container if child is a container and offset is inside container.\n                        if (\n                            child.is(container_selector) &&\n                            this !== child.get(0) &&\n                            d.offsetY >= top &&\n                            d.offsetY <= bottom\n                        ) {\n                            // Append/prepend based on where offsetY is closest to and return.\n                            if (d.offsetY - top < bottom - d.offsetY) {\n                                child.find(\".content-div\").prepend(this);\n                            } else {\n                                child.find(\".content-div\").append(this);\n                            }\n                            // Update containers. Object may not have container if it is being moved quickly.\n                            if (this_obj.container) {\n                                this_obj.container.remove_drawable(this_obj);\n                            }\n                            html_elt_js_obj_dict[child.attr(\"id\")].add_drawable(this_obj);\n                            return;\n                        }\n                    }\n\n                    // Handle sibling movement, aka sorting.\n\n                    // Determine new position\n                    for (i = 0; i < children.length; i++) {\n                        child = $(children.get(i));\n                        if (\n                            d.offsetY < child.position().top &&\n                            // Cannot move tracks above reference track or intro div.\n                            !(child.hasClass(\"reference-track\") || child.hasClass(\"intro\"))\n                        ) {\n                            break;\n                        }\n                    }\n\n                    // If not already in the right place, move. Need\n                    // to handle the end specially since we don't have\n                    // insert at index\n                    if (i === children.length) {\n                        if (this !== children.get(i - 1)) {\n                            parent.append(this);\n                            html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, i);\n                        }\n                    } else if (this !== children.get(i)) {\n                        $(this).insertBefore(children.get(i));\n                        // Need to adjust insert position if moving down because move is changing\n                        // indices of all list items.\n                        html_elt_js_obj_dict[parent.attr(\"id\")].move_drawable(this_obj, d.deltaY > 0 ? i - 1 : i);\n                    }\n                })\n                .bind(\"dragstart\", function() {\n                    $(this).addClass(\"dragging\");\n                })\n                .bind(\"dragend\", function() {\n                    $(this).removeClass(\"dragging\");\n                });\n        };\n\n        /**\n * Init constants & functions used throughout trackster.\n */\n        var // Padding at the top of tracks for error messages\n            ERROR_PADDING = 20,\n            // Maximum number of rows un a slotted track\n            MAX_FEATURE_DEPTH = 100,\n            // Minimum width for window for squish to be used.\n            MIN_SQUISH_VIEW_WIDTH = 12000,\n            // Number of pixels per tile, not including left offset.\n            TILE_SIZE = 400,\n            DEFAULT_DATA_QUERY_WAIT = 5000,\n            // Maximum number of chromosomes that are selectable at any one time.\n            MAX_CHROMS_SELECTABLE = 100,\n            DATA_ERROR = \"Cannot display dataset due to an error. \",\n            DATA_NOCONVERTER =\n                \"A converter for this dataset is not installed. Please check your datatypes_conf.xml file.\",\n            DATA_NONE = \"No data for this chrom/contig.\",\n            DATA_PENDING =\n                \"Preparing data. This can take a while for a large dataset. \" +\n                \"If the visualization is saved and closed, preparation will continue in the background.\",\n            DATA_CANNOT_RUN_TOOL = \"Tool cannot be rerun: \",\n            DATA_LOADING = \"Loading data...\",\n            DATA_OK = \"Ready for display\",\n            TILE_CACHE_SIZE = 10,\n            DATA_CACHE_SIZE = 20,\n            // Numerical/continuous data display modes.\n            CONTINUOUS_DATA_MODES = [\"Histogram\", \"Line\", \"Filled\", \"Intensity\"];\n\n        /**\n * Round a number to a given number of decimal places.\n */\n        function round(num, places) {\n            // Default rounding is to integer.\n            if (!places) {\n                places = 0;\n            }\n\n            var val = Math.pow(10, places);\n            return Math.round(num * val) / val;\n        }\n\n        /**\n * Check if a server can do byte range requests.\n */\n        function supportsByteRanges(url) {\n            var promise = $.Deferred();\n            $.ajax({\n                type: \"HEAD\",\n                url: url,\n                beforeSend: function(xhr) {\n                    xhr.setRequestHeader(\"Range\", \"bytes=0-10\");\n                },\n                success: function(result, status, xhr) {\n                    promise.resolve(xhr.status === 206);\n                }\n            });\n\n            return promise;\n        }\n\n        /**\n * Drawables hierarchy:\n *\n * Drawable\n *    --> DrawableCollection\n *        --> DrawableGroup\n *        --> View\n *    --> Track\n */\n\n        /**\n * Base class for all drawable objects. Drawable objects are associated with a view and live in a\n * container. They have the following HTML elements and structure:\n *  <container_div>\n *      <header_div>\n *      <content_div>\n *\n * They optionally have a drag handle class.\n */\n        var Drawable = function(view, container, obj_dict) {\n            if (!Drawable.id_counter) {\n                Drawable.id_counter = 0;\n            }\n            this.id = Drawable.id_counter++;\n            this.view = view;\n            this.container = container;\n            this.drag_handle_class = obj_dict.drag_handle_class;\n            this.is_overview = false;\n            this.action_icons = {};\n\n            // -- Set up drawable configuration. --\n            this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(\n                this.config_params,\n                obj_dict.prefs\n            );\n\n            // If there's no saved name, use object name.\n            if (!this.config.get_value(\"name\")) {\n                this.config.set_value(\"name\", obj_dict.name);\n            }\n            if (this.config_onchange) {\n                this.config.on(\"change\", this.config_onchange, this);\n            }\n\n            // Build Drawable HTML and behaviors.\n            this.container_div = this.build_container_div();\n            this.header_div = null;\n\n            // Use opt-out policy on header creation because this is the more frequent approach:\n            // unless flag set, create header.\n            if (obj_dict.header !== false) {\n                var header_view = new viz_views.TrackHeaderView({\n                    model: this,\n                    id: this.id\n                });\n\n                this.header_div = header_view.$el;\n                this.container_div.append(this.header_div);\n\n                // Show icons when users is hovering over track.\n                var icons_div = header_view.icons_div;\n                this.action_icons = header_view.action_icons;\n                this.container_div.hover(\n                    function() {\n                        icons_div.show();\n                    },\n                    function() {\n                        icons_div.hide();\n                    }\n                );\n            }\n        };\n\n        Drawable.prototype.action_icons_def = [\n            // Hide/show drawable content.\n            // FIXME: make this an odict for easier lookup.\n            {\n                name: \"toggle_icon\",\n                title: \"Hide/show content\",\n                css_class: \"toggle\",\n                on_click_fn: function(drawable) {\n                    if (drawable.config.get_value(\"content_visible\")) {\n                        drawable.action_icons.toggle_icon.addClass(\"toggle-expand\").removeClass(\"toggle\");\n                        drawable.hide_contents();\n                        drawable.config.set_value(\"content_visible\", false);\n                    } else {\n                        drawable.action_icons.toggle_icon.addClass(\"toggle\").removeClass(\"toggle-expand\");\n                        drawable.config.set_value(\"content_visible\", true);\n                        drawable.show_contents();\n                    }\n                }\n            },\n            // Edit settings.\n            {\n                name: \"settings_icon\",\n                title: \"Edit settings\",\n                css_class: \"gear\",\n                on_click_fn: function(drawable) {\n                    var view = new config_mod.ConfigSettingCollectionView({\n                        collection: drawable.config\n                    });\n                    view.render_in_modal(\"Configure Track\");\n                }\n            },\n            // Remove.\n            {\n                name: \"remove_icon\",\n                title: \"Remove\",\n                css_class: \"remove-icon\",\n                on_click_fn: function(drawable) {\n                    // Tooltip for remove icon must be deleted when drawable is deleted.\n                    $(\".tooltip\").remove();\n                    drawable.remove();\n                }\n            }\n        ];\n\n        extend(Drawable.prototype, {\n            config_params: [\n                { key: \"name\", label: \"Name\", type: \"text\", default_value: \"\" },\n                {\n                    key: \"content_visible\",\n                    type: \"bool\",\n                    default_value: true,\n                    hidden: true\n                }\n            ],\n\n            config_onchange: function() {},\n\n            init: function() {},\n\n            changed: function() {\n                this.view.changed();\n            },\n\n            can_draw: function() {\n                if (this.enabled && this.config.get_value(\"content_visible\")) {\n                    return true;\n                }\n\n                return false;\n            },\n\n            request_draw: function() {},\n\n            _draw: function(options) {},\n\n            /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n            to_dict: function() {},\n\n            /**\n     * Set drawable name.\n     */\n            set_name: function(new_name) {\n                this.old_name = this.config.get_value(\"name\");\n                this.config.set_value(\"name\", new_name);\n            },\n\n            /**\n     * Revert track name; currently name can be reverted only once.\n     */\n            revert_name: function() {\n                if (this.old_name) {\n                    this.config.set_value(\"name\", this.old_name);\n                }\n            },\n\n            /**\n     * Remove drawable (a) from its container and (b) from the HTML.\n     */\n            remove: function() {\n                this.changed();\n\n                this.container.remove_drawable(this);\n                var view = this.view;\n                this.container_div.hide(0, function() {\n                    $(this).remove();\n                    // HACK: is there a better way to update the view?\n                    view.update_intro_div();\n                });\n            },\n\n            /**\n     * Build drawable's container div; this is the parent div for all drawable's elements.\n     */\n            build_container_div: function() {},\n\n            /**\n     * Update icons.\n     */\n            update_icons: function() {},\n\n            /**\n     * Hide drawable's contents.\n     */\n            hide_contents: function() {},\n\n            /**\n     * Show drawable's contents.\n     */\n            show_contents: function() {},\n\n            /**\n     * Returns a shallow copy of all drawables in this drawable.\n     */\n            get_drawables: function() {}\n        });\n\n        /**\n * A collection of drawable objects.\n */\n        var DrawableCollection = function(view, container, obj_dict) {\n            Drawable.call(this, view, container, obj_dict);\n\n            // Attribute init.\n            this.obj_type = obj_dict.obj_type;\n            this.drawables = [];\n        };\n\n        extend(DrawableCollection.prototype, Drawable.prototype, {\n            /**\n     * Unpack and add drawables to the collection.\n     */\n            unpack_drawables: function(drawables_array) {\n                // Add drawables to collection.\n                this.drawables = [];\n                var drawable;\n                for (var i = 0; i < drawables_array.length; i++) {\n                    drawable = object_from_template(drawables_array[i], this.view, this);\n                    this.add_drawable(drawable);\n                }\n            },\n\n            /**\n     * Init each drawable in the collection.\n     */\n            init: function() {\n                for (var i = 0; i < this.drawables.length; i++) {\n                    this.drawables[i].init();\n                }\n            },\n\n            /**\n     * Draw each drawable in the collection.\n     */\n            _draw: function(options) {\n                for (var i = 0; i < this.drawables.length; i++) {\n                    this.drawables[i]._draw(options);\n                }\n            },\n\n            /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n            to_dict: function() {\n                var dictified_drawables = [];\n                for (var i = 0; i < this.drawables.length; i++) {\n                    dictified_drawables.push(this.drawables[i].to_dict());\n                }\n                return {\n                    prefs: this.config.to_key_value_dict(),\n                    obj_type: this.obj_type,\n                    drawables: dictified_drawables\n                };\n            },\n\n            /**\n     * Add a drawable to the end of the collection.\n     */\n            add_drawable: function(drawable) {\n                this.drawables.push(drawable);\n                drawable.container = this;\n                this.changed();\n            },\n\n            /**\n     * Add a drawable before another drawable.\n     */\n            add_drawable_before: function(drawable, other) {\n                this.changed();\n                var index = this.drawables.indexOf(other);\n                if (index !== -1) {\n                    this.drawables.splice(index, 0, drawable);\n                    return true;\n                }\n                return false;\n            },\n\n            /**\n     * Replace one drawable with another.\n     */\n            replace_drawable: function(old_drawable, new_drawable, update_html) {\n                var index = this.drawables.indexOf(old_drawable);\n                if (index !== -1) {\n                    this.drawables[index] = new_drawable;\n                    if (update_html) {\n                        old_drawable.container_div.replaceWith(new_drawable.container_div);\n                    }\n                    this.changed();\n                }\n                return index;\n            },\n\n            /**\n     * Remove drawable from this collection.\n     */\n            remove_drawable: function(drawable) {\n                var index = this.drawables.indexOf(drawable);\n                if (index !== -1) {\n                    // Found drawable to remove.\n                    this.drawables.splice(index, 1);\n                    drawable.container = null;\n                    this.changed();\n                    return true;\n                }\n                return false;\n            },\n\n            /**\n     * Move drawable to another location in collection.\n     */\n            move_drawable: function(drawable, new_position) {\n                var index = this.drawables.indexOf(drawable);\n                if (index !== -1) {\n                    // Remove from current position:\n                    this.drawables.splice(index, 1);\n                    // insert into new position:\n                    this.drawables.splice(new_position, 0, drawable);\n                    this.changed();\n                    return true;\n                }\n                return false;\n            },\n\n            /**\n     * Returns all drawables in this drawable.\n     */\n            get_drawables: function() {\n                return this.drawables;\n            },\n\n            /**\n     * Returns all <track_type> tracks in collection.\n     */\n            get_tracks: function(track_type) {\n                // Initialize queue with copy of drawables array.\n                var queue = this.drawables.slice(0),\n                    tracks = [],\n                    drawable;\n                while (queue.length !== 0) {\n                    drawable = queue.shift();\n                    if (drawable instanceof track_type) {\n                        tracks.push(drawable);\n                    } else if (drawable.drawables) {\n                        queue = queue.concat(drawable.drawables);\n                    }\n                }\n                return tracks;\n            }\n        });\n\n        /**\n * A group of drawables that are moveable, visible.\n */\n        var DrawableGroup = function(view, container, obj_dict) {\n            extend(obj_dict, {\n                obj_type: \"DrawableGroup\",\n                drag_handle_class: \"group-handle\"\n            });\n            DrawableCollection.call(this, view, container, obj_dict);\n\n            // Set up containers/moving for group: register both container_div and content div as container\n            // because both are used as containers (container div to recognize container, content_div to\n            // store elements). Group can be moved.\n            this.content_div = $(\"<div/>\")\n                .addClass(\"content-div\")\n                .attr(\"id\", \"group_\" + this.id + \"_content_div\")\n                .appendTo(this.container_div);\n            is_container(this.container_div, this);\n            is_container(this.content_div, this);\n            moveable(this.container_div, this.drag_handle_class, \".group\", this);\n\n            // Set up filters.\n            this.filters_manager = new filters_mod.FiltersManager(this);\n            this.header_div.after(this.filters_manager.parent_div);\n\n            // HACK: add div to clear floating elements.\n            this.filters_manager.parent_div.after($(\"<div style='clear: both'/>\"));\n\n            // For saving drawables' filter managers when group-level filtering is done:\n            this.saved_filters_managers = [];\n\n            // Add drawables.\n            if (\"drawables\" in obj_dict) {\n                this.unpack_drawables(obj_dict.drawables);\n            }\n\n            // Restore filters.\n            if (\"filters\" in obj_dict) {\n                // FIXME: Pass collection_dict to DrawableCollection/Drawable will make this easier.\n                var old_manager = this.filters_manager;\n                this.filters_manager = new filters_mod.FiltersManager(this, obj_dict.filters);\n                old_manager.parent_div.replaceWith(this.filters_manager.parent_div);\n\n                if (obj_dict.filters.visible) {\n                    this.setup_multitrack_filtering();\n                }\n            }\n        };\n\n        extend(DrawableGroup.prototype, Drawable.prototype, DrawableCollection.prototype, {\n            action_icons_def: [\n                Drawable.prototype.action_icons_def[0],\n                Drawable.prototype.action_icons_def[1],\n                // Replace group with composite track.\n                {\n                    name: \"composite_icon\",\n                    title: \"Show composite track\",\n                    css_class: \"layers-stack\",\n                    on_click_fn: function(group) {\n                        $(\".tooltip\").remove();\n                        group.show_composite_track();\n                    }\n                },\n                // Toggle track filters.\n                {\n                    name: \"filters_icon\",\n                    title: \"Filters\",\n                    css_class: \"ui-slider-050\",\n                    on_click_fn: function(group) {\n                        // TODO: update Tooltip text.\n                        if (group.filters_manager.visible()) {\n                            // Hiding filters.\n                            group.filters_manager.clear_filters();\n                            group._restore_filter_managers();\n                            // TODO: maintain current filter by restoring and setting saved manager's\n                            // settings to current/shared manager's settings.\n                            // TODO: need to restore filter managers when moving drawable outside group.\n                        } else {\n                            // Showing filters.\n                            group.setup_multitrack_filtering();\n                            group.request_draw({ clear_tile_cache: true });\n                        }\n                        group.filters_manager.toggle();\n                    }\n                },\n                Drawable.prototype.action_icons_def[2]\n            ],\n\n            build_container_div: function() {\n                var container_div = $(\"<div/>\")\n                    .addClass(\"group\")\n                    .attr(\"id\", \"group_\" + this.id);\n                if (this.container) {\n                    this.container.content_div.append(container_div);\n                }\n                return container_div;\n            },\n\n            hide_contents: function() {\n                this.tiles_div.hide();\n            },\n\n            show_contents: function() {\n                // Show the contents div and labels (if present)\n                this.tiles_div.show();\n                // Request a redraw of the content\n                this.request_draw();\n            },\n\n            update_icons: function() {\n                //\n                // Handle update when there are no tracks.\n                //\n                var num_drawables = this.drawables.length;\n                if (num_drawables === 0) {\n                    this.action_icons.composite_icon.hide();\n                    this.action_icons.filters_icon.hide();\n                } else if (num_drawables === 1) {\n                    this.action_icons.composite_icon.toggle(this.drawables[0] instanceof CompositeTrack);\n                    this.action_icons.filters_icon.hide();\n                } else {\n                    // There are 2 or more tracks.\n\n                    //\n                    // Determine if a composite track can be created. Current criteria:\n                    // (a) all tracks are line tracks;\n                    //      OR\n                    // FIXME: this is not enabled right now because it has not been well tested:\n                    // (b) there is a single FeatureTrack.\n                    //\n\n                    // All tracks the same?\n                    var i,\n                        j,\n                        drawable,\n                        same_type = true,\n                        a_type = this.drawables[0].get_type(),\n                        num_feature_tracks = 0;\n                    for (i = 0; i < num_drawables; i++) {\n                        drawable = this.drawables[i];\n                        if (drawable.get_type() !== a_type) {\n                            can_composite = false;\n                            break;\n                        }\n                        if (drawable instanceof FeatureTrack) {\n                            num_feature_tracks++;\n                        }\n                    }\n\n                    if (same_type && this.drawables[0] instanceof LineTrack) {\n                        this.action_icons.composite_icon.show();\n                    } else {\n                        this.action_icons.composite_icon.hide();\n                        $(\".tooltip\").remove();\n                    }\n\n                    //\n                    // Set up group-level filtering and update filter icon.\n                    //\n                    if (num_feature_tracks > 1 && num_feature_tracks === this.drawables.length) {\n                        //\n                        // Find shared filters.\n                        //\n                        var shared_filters = {},\n                            filter;\n\n                        // Init shared filters with filters from first drawable.\n                        drawable = this.drawables[0];\n                        for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n                            filter = drawable.filters_manager.filters[j];\n                            shared_filters[filter.name] = [filter];\n                        }\n\n                        // Create lists of shared filters.\n                        for (i = 1; i < this.drawables.length; i++) {\n                            drawable = this.drawables[i];\n                            for (j = 0; j < drawable.filters_manager.filters.length; j++) {\n                                filter = drawable.filters_manager.filters[j];\n                                if (filter.name in shared_filters) {\n                                    shared_filters[filter.name].push(filter);\n                                }\n                            }\n                        }\n\n                        //\n                        // Create filters for shared filters manager. Shared filters manager is group's\n                        // manager.\n                        //\n                        this.filters_manager.remove_all();\n                        var filters, new_filter, min, max;\n                        for (var filter_name in shared_filters) {\n                            filters = shared_filters[filter_name];\n                            if (filters.length === num_feature_tracks) {\n                                // Add new filter.\n                                // FIXME: can filter.copy() be used?\n                                new_filter = new filters_mod.NumberFilter({\n                                    name: filters[0].name,\n                                    index: filters[0].index\n                                });\n                                this.filters_manager.add_filter(new_filter);\n                            }\n                        }\n\n                        // Show/hide icon based on filter availability.\n                        this.action_icons.filters_icon.toggle(this.filters_manager.filters.length > 0);\n                    } else {\n                        this.action_icons.filters_icon.hide();\n                    }\n                }\n            },\n\n            /**\n     * Restore individual track filter managers.\n     */\n            _restore_filter_managers: function() {\n                for (var i = 0; i < this.drawables.length; i++) {\n                    this.drawables[i].filters_manager = this.saved_filters_managers[i];\n                }\n                this.saved_filters_managers = [];\n            },\n\n            /**\n     *\n     */\n            setup_multitrack_filtering: function() {\n                // Save tracks' managers and set up shared manager.\n                if (this.filters_manager.filters.length > 0) {\n                    // For all tracks, save current filter manager and set manager to shared (this object's) manager.\n                    this.saved_filters_managers = [];\n                    for (var i = 0; i < this.drawables.length; i++) {\n                        var drawable = this.drawables[i];\n                        this.saved_filters_managers.push(drawable.filters_manager);\n                        drawable.filters_manager = this.filters_manager;\n                    }\n\n                    //TODO: hide filters icons for each drawable?\n                }\n                this.filters_manager.init_filters();\n            },\n\n            /**\n     * Replace group with a single composite track that includes all group's tracks.\n     */\n            show_composite_track: function() {\n                var composite_track = new CompositeTrack(this.view, this.view, {\n                    name: this.config.get_value(\"name\"),\n                    drawables: this.drawables\n                });\n                var index = this.container.replace_drawable(this, composite_track, true);\n                composite_track.request_draw();\n            },\n\n            add_drawable: function(drawable) {\n                DrawableCollection.prototype.add_drawable.call(this, drawable);\n                this.update_icons();\n            },\n\n            remove_drawable: function(drawable) {\n                DrawableCollection.prototype.remove_drawable.call(this, drawable);\n                this.update_icons();\n            },\n\n            to_dict: function() {\n                // If filters are visible, need to restore original filter managers before converting to dict.\n                if (this.filters_manager.visible()) {\n                    this._restore_filter_managers();\n                }\n\n                var obj_dict = extend(DrawableCollection.prototype.to_dict.call(this), {\n                    filters: this.filters_manager.to_dict()\n                });\n\n                // Setup multi-track filtering again.\n                if (this.filters_manager.visible()) {\n                    this.setup_multitrack_filtering();\n                }\n\n                return obj_dict;\n            },\n\n            request_draw: function(options) {\n                _.each(this.drawables, function(d) {\n                    d.request_draw(options);\n                });\n            }\n        });\n\n        /**\n * View object manages a trackster visualization, including tracks and user interactions.\n * Events triggered:\n *      navigate: when browser view changes to a new locations\n */\n        var TracksterView = Backbone.View.extend({\n            initialize: function(obj_dict) {\n                extend(obj_dict, {\n                    obj_type: \"View\"\n                });\n                DrawableCollection.call(this, \"View\", obj_dict.container, obj_dict);\n                this.chrom = null;\n                this.vis_id = obj_dict.vis_id;\n                this.dbkey = obj_dict.dbkey;\n                this.stand_alone = obj_dict.stand_alone !== undefined ? obj_dict.stand_alone : true;\n                this.label_tracks = [];\n                this.tracks_to_be_redrawn = [];\n                this.max_low = 0;\n                this.max_high = 0;\n                this.zoom_factor = 3;\n                this.min_separation = 30;\n                this.has_changes = false;\n                // Deferred object that indicates when view's chrom data has been loaded.\n                this.load_chroms_deferred = null;\n                this.render();\n                this.canvas_manager = new visualization.CanvasManager(this.container.get(0).ownerDocument);\n                this.reset();\n\n                // Define track configuration\n                this.config = config_mod.ConfigSettingCollection.from_models_and_saved_values(\n                    [\n                        {\n                            key: \"name\",\n                            label: \"Name\",\n                            type: \"text\",\n                            default_value: \"\"\n                        },\n                        {\n                            key: \"a_color\",\n                            label: \"A Color\",\n                            type: \"color\",\n                            default_value: \"#FF0000\"\n                        },\n                        {\n                            key: \"c_color\",\n                            label: \"C Color\",\n                            type: \"color\",\n                            default_value: \"#00FF00\"\n                        },\n                        {\n                            key: \"g_color\",\n                            label: \"G Color\",\n                            type: \"color\",\n                            default_value: \"#0000FF\"\n                        },\n                        {\n                            key: \"t_color\",\n                            label: \"T Color\",\n                            type: \"color\",\n                            default_value: \"#FF00FF\"\n                        },\n                        {\n                            key: \"n_color\",\n                            label: \"N Color\",\n                            type: \"color\",\n                            default_value: \"#AAAAAA\"\n                        }\n                    ],\n                    { name: obj_dict.name }\n                );\n            },\n\n            render: function() {\n                // Attribute init.\n                this.requested_redraw = false;\n\n                // Create DOM elements\n                var parent_element = this.container,\n                    view = this;\n                // Top container for things that are fixed at the top\n                this.top_container = $(\"<div/>\")\n                    .addClass(\"top-container\")\n                    .appendTo(parent_element);\n                // Browser content, primary tracks are contained in here\n                this.browser_content_div = $(\"<div/>\")\n                    .addClass(\"content\")\n                    .appendTo(parent_element);\n                // Bottom container for things that are fixed at the bottom\n                this.bottom_container = $(\"<div/>\")\n                    .addClass(\"bottom-container\")\n                    .appendTo(parent_element);\n                // Label track fixed at top\n                this.top_labeltrack = $(\"<div/>\")\n                    .addClass(\"top-labeltrack\")\n                    .appendTo(this.top_container);\n                // Viewport for dragging tracks in center\n                this.viewport_container = $(\"<div/>\")\n                    .addClass(\"viewport-container\")\n                    .attr(\"id\", \"viewport-container\")\n                    .appendTo(this.browser_content_div);\n                // Alias viewport_container as content_div so that it matches function of DrawableCollection/Group content_div.\n                this.content_div = this.viewport_container;\n                is_container(this.viewport_container, view);\n                // Introduction div shown when there are no tracks.\n                this.intro_div = $(\"<div/>\")\n                    .addClass(\"intro\")\n                    .appendTo(this.viewport_container);\n                var add_tracks_button = $(\"<div/>\")\n                    .text(\"Add Datasets to Visualization\")\n                    .addClass(\"action-button\")\n                    .appendTo(this.intro_div)\n                    .click(function() {\n                        visualization.select_datasets({ dbkey: view.dbkey }, function(tracks) {\n                            _.each(tracks, function(track) {\n                                view.add_drawable(object_from_template(track, view, view));\n                            });\n                        });\n                    });\n\n                // Navigation at top\n                this.nav_container = $(\"<div/>\")\n                    .addClass(\"trackster-nav-container\")\n                    .prependTo(this.top_container);\n                this.nav = $(\"<div/>\")\n                    .addClass(\"trackster-nav\")\n                    .appendTo(this.nav_container);\n\n                if (this.stand_alone) {\n                    this.nav_container.addClass(\"stand-alone\");\n                    this.nav.addClass(\"stand-alone\");\n                }\n\n                // Overview (scrollbar and overview plot) at bottom\n                this.overview = $(\"<div/>\")\n                    .addClass(\"overview\")\n                    .appendTo(this.bottom_container);\n                this.overview_viewport = $(\"<div/>\")\n                    .addClass(\"overview-viewport\")\n                    .appendTo(this.overview);\n                this.overview_close = $(\"<a/>\")\n                    .attr(\"title\", \"Close overview\")\n                    .addClass(\"icon-button overview-close tooltip\")\n                    .hide()\n                    .appendTo(this.overview_viewport);\n                this.overview_highlight = $(\"<div/>\")\n                    .addClass(\"overview-highlight\")\n                    .hide()\n                    .appendTo(this.overview_viewport);\n                this.overview_box_background = $(\"<div/>\")\n                    .addClass(\"overview-boxback\")\n                    .appendTo(this.overview_viewport);\n                this.overview_box = $(\"<div/>\")\n                    .addClass(\"overview-box\")\n                    .appendTo(this.overview_viewport);\n                this.default_overview_height = this.overview_box.height();\n\n                this.nav_controls = $(\"<div/>\")\n                    .addClass(\"nav-controls\")\n                    .appendTo(this.nav);\n                this.chrom_select = $(\"<select/>\")\n                    .attr({ name: \"chrom\" })\n                    .addClass(\"chrom-nav\")\n                    .append(\"<option value=''>Loading</option>\")\n                    .appendTo(this.nav_controls);\n                var submit_nav = function(e) {\n                    if (e.type === \"focusout\" || (e.keyCode || e.which) === 13 || (e.keyCode || e.which) === 27) {\n                        if ((e.keyCode || e.which) !== 27) {\n                            // Not escape key\n                            view.go_to($(this).val());\n                        }\n                        $(this).hide();\n                        $(this).val(\"\");\n                        view.location_span.show();\n                        view.chrom_select.show();\n                    }\n\n                    // Suppress key presses so that they do impact viz.\n                    e.stopPropagation();\n                };\n                this.nav_input = $(\"<input/>\")\n                    .addClass(\"nav-input\")\n                    .hide()\n                    .bind(\"keyup focusout\", submit_nav)\n                    .appendTo(this.nav_controls);\n                this.location_span = $(\"<span/>\")\n                    .addClass(\"location\")\n                    .attr(\"title\", \"Click to change location\")\n                    .tooltip({ placement: \"bottom\" })\n                    .appendTo(this.nav_controls);\n                this.location_span.click(function() {\n                    view.location_span.hide();\n                    view.chrom_select.hide();\n                    view.nav_input.val(view.chrom + \":\" + view.low + \"-\" + view.high);\n                    view.nav_input.css(\"display\", \"inline-block\");\n                    view.nav_input.select();\n                    view.nav_input.focus();\n                    // Set up autocomplete for tracks' features.\n                    view.nav_input.autocomplete({\n                        source: function(request, response) {\n                            // Using current text, query each track and create list of all matching features.\n                            var all_features = [],\n                                feature_search_deferreds = $.map(view.get_tracks(FeatureTrack), function(t) {\n                                    return t.data_manager\n                                        .search_features(request.term)\n                                        .success(function(dataset_features) {\n                                            all_features = all_features.concat(dataset_features);\n                                        });\n                                });\n\n                            // When all searching is done, fill autocomplete.\n                            $.when.apply($, feature_search_deferreds).done(function() {\n                                response(\n                                    $.map(all_features, function(feature) {\n                                        return {\n                                            label: feature[0],\n                                            value: feature[1]\n                                        };\n                                    })\n                                );\n                            });\n                        },\n                        minLength: 2\n                    });\n                });\n                if (this.vis_id !== undefined) {\n                    this.hidden_input = $(\"<input/>\")\n                        .attr(\"type\", \"hidden\")\n                        .val(this.vis_id)\n                        .appendTo(this.nav_controls);\n                }\n\n                this.zo_link = $(\"<a/>\")\n                    .attr(\"id\", \"zoom-out\")\n                    .attr(\"title\", \"Zoom out\")\n                    .tooltip({ placement: \"bottom\" })\n                    .click(function() {\n                        view.zoom_out();\n                    })\n                    .appendTo(this.nav_controls);\n                this.zi_link = $(\"<a/>\")\n                    .attr(\"id\", \"zoom-in\")\n                    .attr(\"title\", \"Zoom in\")\n                    .tooltip({ placement: \"bottom\" })\n                    .click(function() {\n                        view.zoom_in();\n                    })\n                    .appendTo(this.nav_controls);\n\n                // Get initial set of chroms.\n                this.load_chroms_deferred = this.load_chroms({ low: 0 });\n                this.chrom_select.bind(\"change\", function() {\n                    view.change_chrom(view.chrom_select.val());\n                });\n\n                /*\n        this.browser_content_div.bind(\"mousewheel\", function( e, delta ) {\n            if (Math.abs(delta) < 0.5) {\n                return;\n            }\n            if (delta > 0) {\n                view.zoom_in(e.pageX, this.viewport_container);\n            } else {\n                view.zoom_out();\n            }\n            e.preventDefault();\n        });\n        */\n\n                // Blur tool/filter inputs when user clicks on content div.\n                this.browser_content_div.click(function(e) {\n                    $(this)\n                        .find(\"input\")\n                        .trigger(\"blur\");\n                });\n\n                // Double clicking zooms in\n                this.browser_content_div.bind(\"dblclick\", function(e) {\n                    view.zoom_in(e.pageX, this.viewport_container);\n                });\n\n                // Dragging the overview box (~ horizontal scroll bar)\n                this.overview_box\n                    .bind(\"dragstart\", function(e, d) {\n                        this.current_x = d.offsetX;\n                    })\n                    .bind(\"drag\", function(e, d) {\n                        var delta = d.offsetX - this.current_x;\n                        this.current_x = d.offsetX;\n                        var delta_chrom = Math.round(\n                            delta / view.viewport_container.width() * (view.max_high - view.max_low)\n                        );\n                        view.move_delta(-delta_chrom);\n                    });\n\n                this.overview_close.click(function() {\n                    view.reset_overview();\n                });\n\n                // Dragging in the viewport scrolls\n                this.viewport_container\n                    .bind(\"draginit\", function(e, d) {\n                        // Disable interaction if started in scrollbar (for webkit)\n                        if (e.clientX > view.viewport_container.width() - 16) {\n                            return false;\n                        }\n                    })\n                    .bind(\"dragstart\", function(e, d) {\n                        d.original_low = view.low;\n                        d.current_height = e.clientY;\n                        d.current_x = d.offsetX;\n                    })\n                    .bind(\"drag\", function(e, d) {\n                        var container = $(this);\n                        var delta = d.offsetX - d.current_x;\n                        var new_scroll = container.scrollTop() - (e.clientY - d.current_height);\n                        container.scrollTop(new_scroll);\n                        d.current_height = e.clientY;\n                        d.current_x = d.offsetX;\n                        var delta_chrom = Math.round(delta / view.viewport_container.width() * (view.high - view.low));\n                        view.move_delta(delta_chrom);\n                    });\n                /*\n        FIXME: Do not do this for now because it's too jittery. Some kind of gravity approach is\n        needed here because moving left/right should be difficult.\n\n        // Also capture mouse wheel for left/right scrolling\n        }).bind( 'mousewheel', function( e, d, dx, dy ) {\n            // Only handle x axis scrolling; y axis scrolling is\n            // handled by the browser when the event bubbles up.\n            if (dx) {\n                var delta_chrom = Math.round( - dx / view.viewport_container.width() * (view.high - view.low) );\n                view.move_delta( delta_chrom );\n            }\n        });\n        */\n\n                // Dragging in the top label track allows selecting a region to zoom in on selected region.\n                this.top_labeltrack\n                    .bind(\"dragstart\", function(e, d) {\n                        return $(\"<div/>\")\n                            .addClass(\"zoom-area\")\n                            .css(\"height\", view.browser_content_div.height() + view.top_labeltrack.height() + 1)\n                            .appendTo($(this));\n                    })\n                    .bind(\"drag\", function(e, d) {\n                        $(d.proxy).css({\n                            left: Math.min(e.pageX, d.startX) - view.container.offset().left,\n                            width: Math.abs(e.pageX - d.startX)\n                        });\n                        var min = Math.min(e.pageX, d.startX) - view.container.offset().left,\n                            max = Math.max(e.pageX, d.startX) - view.container.offset().left,\n                            span = view.high - view.low,\n                            width = view.viewport_container.width();\n                        view.update_location(\n                            Math.round(min / width * span) + view.low,\n                            Math.round(max / width * span) + view.low\n                        );\n                    })\n                    .bind(\"dragend\", function(e, d) {\n                        var min = Math.min(e.pageX, d.startX),\n                            max = Math.max(e.pageX, d.startX),\n                            span = view.high - view.low,\n                            width = view.viewport_container.width(),\n                            old_low = view.low;\n                        view.low = Math.round(min / width * span) + old_low;\n                        view.high = Math.round(max / width * span) + old_low;\n                        $(d.proxy).remove();\n                        view.request_redraw();\n                    });\n\n                // FIXME: this is still wonky for embedded visualizations.\n                /*\n        // For vertical alignment, track mouse with simple line.\n        var mouse_tracker_div = $('<div/>').addClass('mouse-pos').appendTo(parent_element);\n\n        // Show tracker only when hovering over view.\n        parent_element.hover(\n            function() {\n                mouse_tracker_div.show();\n                parent_element.mousemove(function(e) {\n                    mouse_tracker_div.css({\n                        // -1 makes line appear next to the mouse w/o preventing mouse actions.\n                        left: e.pageX - parent_element.offset().left - 1\n                    });\n                });\n            },\n            function() {\n                parent_element.off('mousemove');\n                mouse_tracker_div.hide();\n            }\n        );\n        */\n\n                this.add_label_track(new LabelTrack(this, { content_div: this.top_labeltrack }));\n\n                $(window).bind(\"resize\", function() {\n                    // Stop previous timer.\n                    if (this.resize_timer) {\n                        clearTimeout(this.resize_timer);\n                    }\n\n                    // When function activated, resize window and redraw.\n                    this.resize_timer = setTimeout(function() {\n                        view.resize_window();\n                    }, 500);\n                });\n                $(document).bind(\"redraw\", function() {\n                    view.redraw();\n                });\n\n                this.reset();\n                $(window).trigger(\"resize\");\n            },\n\n            get_base_color: function(base) {\n                return this.config.get_value(base.toLowerCase() + \"_color\") || this.config.get_value(\"n_color\");\n            }\n        });\n\n        // FIXME: need to use this approach to enable inheritance of DrawableCollection functions.\n        extend(TracksterView.prototype, DrawableCollection.prototype, {\n            changed: function() {\n                this.has_changes = true;\n            },\n\n            /** Add or remove intro div depending on view state. */\n            update_intro_div: function() {\n                this.intro_div.toggle(this.drawables.length === 0);\n            },\n\n            /**\n     * Triggers navigate events as needed. If there is a delay,\n     * then event is triggered only after navigation has stopped.\n     */\n            trigger_navigate: function(new_chrom, new_low, new_high, delay) {\n                // Stop previous timer.\n                if (this.timer) {\n                    clearTimeout(this.timer);\n                }\n\n                if (delay) {\n                    // To aggregate calls, use timer and only navigate once\n                    // location has stabilized.\n                    var self = this;\n                    this.timer = setTimeout(function() {\n                        self.trigger(\"navigate\", new_chrom + \":\" + new_low + \"-\" + new_high);\n                    }, 500);\n                } else {\n                    view.trigger(\"navigate\", new_chrom + \":\" + new_low + \"-\" + new_high);\n                }\n            },\n\n            update_location: function(low, high) {\n                this.location_span.text(util.commatize(low) + \" - \" + util.commatize(high));\n                this.nav_input.val(this.chrom + \":\" + util.commatize(low) + \"-\" + util.commatize(high));\n\n                // Update location. Only update when there is a valid chrom; when loading vis, there may\n                // not be a valid chrom.\n                var chrom = this.chrom_select.val();\n                if (chrom !== \"\") {\n                    this.trigger_navigate(chrom, this.low, this.high, true);\n                }\n            },\n\n            /**\n     * Load chrom data for the view. Returns a jQuery Deferred.\n     */\n            // FIXME: instead of loading chrom data, should load and store genome object.\n            load_chroms: function(url_parms) {\n                url_parms.num = MAX_CHROMS_SELECTABLE;\n\n                var view = this,\n                    chrom_data = $.Deferred();\n                $.ajax({\n                    url: Galaxy.root + \"api/genomes/\" + this.dbkey,\n                    data: url_parms,\n                    dataType: \"json\",\n                    success: function(result) {\n                        // Do nothing if could not load chroms.\n                        if (result.chrom_info.length === 0) {\n                            return;\n                        }\n\n                        // Load chroms.\n                        if (result.reference) {\n                            var ref_track = new ReferenceTrack(view);\n                            view.add_label_track(ref_track);\n                            view.reference_track = ref_track;\n                        }\n                        view.chrom_data = result.chrom_info;\n\n                        view.chrom_select.html(\"\");\n                        view.chrom_select.append($('<option value=\"\">Select Chrom/Contig</option>'));\n\n                        for (var i = 0, len = view.chrom_data.length; i < len; i++) {\n                            var chrom = view.chrom_data[i].chrom;\n                            var chrom_option = $(\"<option>\");\n                            chrom_option.text(chrom);\n                            chrom_option.val(chrom);\n                            view.chrom_select.append(chrom_option);\n                        }\n                        if (result.prev_chroms) {\n                            view.chrom_select.append(\n                                $('<option value=\"previous\">Previous ' + MAX_CHROMS_SELECTABLE + \"</option>\")\n                            );\n                        }\n                        if (result.next_chroms) {\n                            view.chrom_select.append(\n                                $('<option value=\"next\">Next ' + MAX_CHROMS_SELECTABLE + \"</option>\")\n                            );\n                        }\n                        view.chrom_start_index = result.start_index;\n\n                        chrom_data.resolve(result.chrom_info);\n                    },\n                    error: function() {\n                        alert(\"Could not load chroms for this dbkey: \" + view.dbkey);\n                    }\n                });\n                return chrom_data;\n            },\n\n            change_chrom: function(chrom, low, high) {\n                var view = this;\n                // If chrom data is still loading, wait for it.\n                if (!view.chrom_data) {\n                    view.load_chroms_deferred.then(function() {\n                        view.change_chrom(chrom, low, high);\n                    });\n                    return;\n                }\n\n                // Don't do anything if chrom is \"None\" (hackish but some browsers already have this set), or null/blank\n                if (!chrom || chrom === \"None\") {\n                    return;\n                }\n\n                //\n                // If user is navigating to previous/next set of chroms, load new chrom set and return.\n                //\n                if (chrom === \"previous\") {\n                    view.load_chroms({\n                        low: this.chrom_start_index - MAX_CHROMS_SELECTABLE\n                    });\n                    return;\n                }\n                if (chrom === \"next\") {\n                    view.load_chroms({\n                        low: this.chrom_start_index + MAX_CHROMS_SELECTABLE\n                    });\n                    return;\n                }\n\n                //\n                // User is loading a particular chrom. Look first in current set; if not in current set, load new\n                // chrom set.\n                //\n                var found = $.grep(view.chrom_data, function(v, i) {\n                    return v.chrom === chrom;\n                })[0];\n                if (found === undefined) {\n                    // Try to load chrom and then change to chrom.\n                    view.load_chroms({ chrom: chrom }, function() {\n                        view.change_chrom(chrom, low, high);\n                    });\n                    return;\n                } else {\n                    // Switching to local chrom.\n                    if (chrom !== view.chrom) {\n                        view.chrom = chrom;\n                        view.chrom_select.val(view.chrom);\n                        view.max_high = found.len - 1; // -1 because we're using 0-based indexing.\n                        view.reset();\n\n                        for (var i = 0, len = view.drawables.length; i < len; i++) {\n                            var drawable = view.drawables[i];\n                            if (drawable.init) {\n                                drawable.init();\n                            }\n                        }\n                        if (view.reference_track) {\n                            view.reference_track.init();\n                        }\n                    }\n\n                    // Resolve low, high.\n                    if (low === undefined && high === undefined) {\n                        // Both are undefined, so view is whole chromosome.\n                        view.low = 0;\n                        view.high = view.max_high;\n                    } else {\n                        // Low and/or high is defined.\n                        view.low = low !== undefined ? Math.max(low, 0) : 0;\n                        if (high === undefined) {\n                            // Center visualization around low.\n                            // HACK: max resolution is currently 30 bases.\n                            view.low = Math.max(view.low - 15, 0);\n                            view.high = view.low + 30;\n                        } else {\n                            // High is defined.\n                            view.high = Math.min(high, view.max_high);\n                        }\n                    }\n\n                    view.request_redraw();\n                }\n            },\n\n            /**\n     * Change viewing region to that denoted by string. General format of string is:\n     *\n     * <chrom>[ {separator}<start>[-<end>] ]\n     *\n     * where separator can be whitespace or a colon. Examples:\n     *\n     * chr22\n     * chr1:100-200\n     * chr7 89999\n     * chr8 90000 990000\n     */\n            go_to: function(str) {\n                // Remove commas.\n                str = str.replace(/,/g, \"\");\n\n                // Replace colons and hyphens with space for easy parsing.\n                str = str.replace(/:|\\-/g, \" \");\n\n                // Parse new location.\n                var chrom_pos = str.split(/\\s+/),\n                    chrom = chrom_pos[0],\n                    new_low = chrom_pos[1] ? parseInt(chrom_pos[1], 10) : undefined,\n                    new_high = chrom_pos[2] ? parseInt(chrom_pos[2], 10) : undefined;\n\n                this.change_chrom(chrom, new_low, new_high);\n            },\n\n            move_fraction: function(fraction) {\n                var view = this;\n                var span = view.high - view.low;\n                this.move_delta(fraction * span);\n            },\n\n            move_delta: function(delta_chrom) {\n                //\n                // Update low, high.\n                //\n\n                var view = this;\n                var current_chrom_span = view.high - view.low;\n                // Check for left and right boundaries\n                if (view.low - delta_chrom < view.max_low) {\n                    view.low = view.max_low;\n                    view.high = view.max_low + current_chrom_span;\n                } else if (view.high - delta_chrom > view.max_high) {\n                    view.high = view.max_high;\n                    view.low = view.max_high - current_chrom_span;\n                } else {\n                    view.high -= delta_chrom;\n                    view.low -= delta_chrom;\n                }\n\n                //\n                // Redraw view.\n                //\n\n                // Redraw without requesting more data immediately.\n                view.request_redraw({ data_fetch: false });\n\n                // Set up timeout to redraw with more data when moving stops.\n                if (this.redraw_on_move_fn) {\n                    clearTimeout(this.redraw_on_move_fn);\n                }\n\n                this.redraw_on_move_fn = setTimeout(function() {\n                    view.request_redraw();\n                }, 200);\n\n                // Navigate.\n                var chrom = view.chrom_select.val();\n                this.trigger_navigate(chrom, view.low, view.high, true);\n            },\n\n            /**\n     * Add a drawable to the view.\n     */\n            add_drawable: function(drawable) {\n                DrawableCollection.prototype.add_drawable.call(this, drawable);\n                drawable.init();\n                this.changed();\n                this.update_intro_div();\n\n                // When drawable config changes, mark view as changed. This\n                // captures most (all?) state change that needs to be saved.\n                var self = this;\n                drawable.config.on(\"change\", function() {\n                    self.changed();\n                });\n            },\n\n            add_label_track: function(label_track) {\n                label_track.view = this;\n                label_track.init();\n                this.label_tracks.push(label_track);\n            },\n\n            /**\n     * Remove drawable from the view.\n     */\n            remove_drawable: function(drawable, hide) {\n                DrawableCollection.prototype.remove_drawable.call(this, drawable);\n                if (hide) {\n                    var view = this;\n                    drawable.container_div.hide(0, function() {\n                        $(this).remove();\n                        view.update_intro_div();\n                    });\n                }\n            },\n\n            reset: function() {\n                this.low = this.max_low;\n                this.high = this.max_high;\n                this.viewport_container.find(\".yaxislabel\").remove();\n            },\n\n            /**\n     * Request that view redraw one or more of view's drawables. If drawable is not specified,\n     * all drawables are redrawn.\n     */\n            request_redraw: function(options, drawable) {\n                var view = this,\n                    // Either redrawing a single drawable or all view's drawables.\n                    track_list = drawable ? [drawable] : view.drawables;\n\n                // Add/update tracks in track list to redraw list.\n                _.each(track_list, function(track) {\n                    var track_options = _.find(view.tracks_to_be_redrawn, function(to) {\n                        return to[0] === track;\n                    });\n\n                    if (track_options) {\n                        // Track already in list; update options.\n                        track_options[1] = options;\n                    } else {\n                        // Track not in list yet.\n                        view.tracks_to_be_redrawn.push([track, options]);\n                    }\n                });\n\n                // Set up redraw if it has not been requested since last redraw.\n                if (!this.requested_redraw) {\n                    requestAnimationFrame(function() {\n                        view._redraw();\n                    });\n                    this.requested_redraw = true;\n                }\n            },\n\n            /**\n     * Redraws view and tracks.\n     * NOTE: this method should never be called directly; request_redraw() should be used so\n     * that requestAnimationFrame can manage redrawing.\n     */\n            _redraw: function() {\n                // TODO: move this code to function that does location setting.\n\n                // Clear because requested redraw is being handled now.\n                this.requested_redraw = false;\n\n                var low = this.low,\n                    high = this.high;\n\n                if (low < this.max_low) {\n                    low = this.max_low;\n                }\n                if (high > this.max_high) {\n                    high = this.max_high;\n                }\n                var span = this.high - this.low;\n                if (this.high !== 0 && span < this.min_separation) {\n                    high = low + this.min_separation;\n                }\n                this.low = Math.floor(low);\n                this.high = Math.ceil(high);\n\n                this.update_location(this.low, this.high);\n\n                // -- Drawing code --\n\n                // Resolution is a pixel density.\n                this.resolution_px_b = this.viewport_container.width() / (this.high - this.low);\n\n                // Overview\n                var left_px = this.low / (this.max_high - this.max_low) * this.overview_viewport.width() || 0;\n                var width_px =\n                    (this.high - this.low) / (this.max_high - this.max_low) * this.overview_viewport.width() || 0;\n                var min_width_px = 13;\n\n                this.overview_box\n                    .css({\n                        left: left_px,\n                        width: Math.max(min_width_px, width_px)\n                    })\n                    .show();\n                if (width_px < min_width_px) {\n                    this.overview_box.css(\"left\", left_px - (min_width_px - width_px) / 2);\n                }\n                if (this.overview_highlight) {\n                    this.overview_highlight.css({\n                        left: left_px,\n                        width: width_px\n                    });\n                }\n\n                // Draw data tracks.\n                _.each(this.tracks_to_be_redrawn, function(track_options) {\n                    var track = track_options[0],\n                        options = track_options[1];\n                    if (track) {\n                        track._draw(options);\n                    }\n                });\n                this.tracks_to_be_redrawn = [];\n\n                // Draw label tracks.\n                _.each(this.label_tracks, function(label_track) {\n                    label_track._draw();\n                });\n            },\n\n            zoom_in: function(point, container) {\n                if (this.max_high === 0 || this.high - this.low <= this.min_separation) {\n                    return;\n                }\n                var span = this.high - this.low,\n                    cur_center = span / 2 + this.low,\n                    new_half = span / this.zoom_factor / 2;\n                if (point) {\n                    cur_center = point / this.viewport_container.width() * (this.high - this.low) + this.low;\n                }\n                this.low = Math.round(cur_center - new_half);\n                this.high = Math.round(cur_center + new_half);\n\n                this.changed();\n                this.request_redraw();\n            },\n\n            zoom_out: function() {\n                if (this.max_high === 0) {\n                    return;\n                }\n                var span = this.high - this.low,\n                    cur_center = span / 2 + this.low,\n                    new_half = span * this.zoom_factor / 2;\n                this.low = Math.round(cur_center - new_half);\n                this.high = Math.round(cur_center + new_half);\n                this.changed();\n                this.request_redraw();\n            },\n\n            /** Resize viewport. Use this method if header/footer content has changed in size. */\n            resize_viewport: function() {\n                this.viewport_container.height(\n                    this.container.height() - this.top_container.height() - this.bottom_container.height()\n                );\n            },\n\n            /** Called when window is resized. */\n            resize_window: function() {\n                this.resize_viewport();\n                this.request_redraw();\n            },\n\n            /** Show a Drawable in the overview. */\n            set_overview: function(drawable) {\n                if (this.overview_drawable) {\n                    // If drawable to be set as overview is already in overview, do nothing.\n                    // Otherwise, remove overview.\n                    if (this.overview_drawable.dataset.id === drawable.dataset.id) {\n                        return;\n                    }\n                    this.overview_viewport.find(\".track\").remove();\n                }\n\n                // Set new overview.\n                var overview_drawable = drawable.copy({\n                        content_div: this.overview_viewport\n                    }),\n                    view = this;\n                overview_drawable.header_div.hide();\n                overview_drawable.is_overview = true;\n                view.overview_drawable = overview_drawable;\n                this.overview_drawable.postdraw_actions = function() {\n                    view.overview_highlight.show().height(view.overview_drawable.content_div.height());\n                    view.overview_viewport.height(\n                        view.overview_drawable.content_div.height() + view.overview_box.outerHeight()\n                    );\n                    view.overview_close.show();\n                    view.resize_window();\n                };\n                view.overview_drawable.request_draw();\n                this.changed();\n            },\n\n            /** Close and reset overview. */\n            reset_overview: function() {\n                // Update UI.\n                $(\".tooltip\").remove();\n                this.overview_viewport.find(\".track-tile\").remove();\n                this.overview_viewport.height(this.default_overview_height);\n                this.overview_box.height(this.default_overview_height);\n                this.overview_close.hide();\n                this.overview_highlight.hide();\n                view.resize_window();\n                view.overview_drawable = null;\n            }\n        });\n\n        /**\n * Encapsulation of a tool that users can apply to tracks/datasets.\n */\n        var TracksterTool = tools_mod.Tool.extend({\n            defaults: {\n                track: null\n            },\n\n            initialize: function(options) {\n                tools_mod.Tool.prototype.initialize.call(this, options);\n\n                // Restore tool visibility from state; default to hidden.\n                var hidden = true;\n                if (options.tool_state !== undefined && options.tool_state.hidden !== undefined) {\n                    hidden = options.tool_state.hidden;\n                }\n                this.set(\"hidden\", hidden);\n\n                // FIXME: need to restore tool values from options.tool_state\n\n                // HACK: remove some inputs because Trackster does yet not work with them.\n                this.remove_inputs([\"data\", \"hidden_data\", \"conditional\"]);\n            },\n\n            state_dict: function(options) {\n                return _.extend(this.get_inputs_dict(), {\n                    hidden: !this.is_visible()\n                });\n            }\n        });\n\n        /**\n * View renders tool parameter HTML and updates parameter value as it is changed in the HTML.\n */\n        var ToolParameterView = Backbone.View.extend({\n            events: {\n                \"change :input\": \"update_value\"\n            },\n\n            render: function() {\n                var param_div = this.$el.addClass(\"param-row\"),\n                    param = this.model;\n\n                // Param label.\n                var label_div = $(\"<div>\")\n                    .addClass(\"param-label\")\n                    .text(param.get(\"label\"))\n                    .appendTo(param_div);\n                // Param HTML.\n                var html_div = $(\"<div/>\")\n                    .addClass(\"param-input\")\n                    .html(param.get(\"html\"))\n                    .appendTo(param_div);\n                // Set initial value.\n                html_div.find(\":input\").val(param.get(\"value\"));\n\n                // Add to clear floating layout.\n                $(\"<div style='clear: both;'/>\").appendTo(param_div);\n            },\n\n            update_value: function(update_event) {\n                this.model.set_value($(update_event.target).val());\n            }\n        });\n\n        /**\n * View for TracksterTool.\n */\n        var TracksterToolView = Backbone.View.extend({\n            initialize: function(options) {\n                this.model.on(\"change:hidden\", this.set_visible, this);\n            },\n\n            /**\n     * Render tool UI.\n     */\n            render: function() {\n                var self = this,\n                    tool = this.model,\n                    parent_div = this.$el.addClass(\"dynamic-tool\").hide();\n\n                // Prevent div events from propogating to other elements.\n                parent_div\n                    .bind(\"drag\", function(e) {\n                        e.stopPropagation();\n                    })\n                    .click(function(e) {\n                        e.stopPropagation();\n                    })\n                    .bind(\"dblclick\", function(e) {\n                        e.stopPropagation();\n                    })\n                    .keydown(function(e) {\n                        e.stopPropagation();\n                    });\n\n                // Add name, inputs.\n                var name_div = $(\"<div class='tool-name'>\")\n                    .appendTo(parent_div)\n                    .text(tool.get(\"name\"));\n                tool.get(\"inputs\").each(function(param) {\n                    // Render parameter.\n                    var param_view = new ToolParameterView({ model: param });\n                    param_view.render();\n                    parent_div.append(param_view.$el);\n                });\n\n                // Highlight value for inputs for easy replacement.\n                parent_div.find(\"input\").click(function() {\n                    $(this).select();\n                });\n\n                // Add buttons for running on dataset, region.\n                var run_tool_row = $(\"<div>\")\n                    .addClass(\"param-row\")\n                    .appendTo(parent_div);\n                var run_on_dataset_button = $(\"<input type='submit'>\")\n                    .attr(\"value\", \"Run on complete dataset\")\n                    .appendTo(run_tool_row);\n                var run_on_region_button = $(\"<input type='submit'>\")\n                    .attr(\"value\", \"Run on visible region\")\n                    .appendTo(run_tool_row);\n                run_on_region_button.click(function() {\n                    // Run tool to create new track.\n                    self.run_on_region();\n                });\n                run_on_dataset_button.click(function() {\n                    self.run_on_dataset();\n                });\n\n                if (tool.is_visible()) {\n                    this.$el.show();\n                }\n            },\n\n            /**\n     * Show or hide tool depending on tool visibility state.\n     */\n            set_visible: function() {\n                this.$el.toggle(this.model.is_visible());\n            },\n\n            /**\n     * Update tool parameters.\n     */\n            update_params: function() {\n                for (var i = 0; i < this.params.length; i++) {\n                    this.params[i].update_value();\n                }\n            },\n\n            /**\n     * Run tool on dataset. Output is placed in dataset's history and no changes to viz are made.\n     */\n            run_on_dataset: function() {\n                var tool = this.model;\n                this.run(\n                    // URL params.\n                    {\n                        target_dataset_id: this.model.get(\"track\").dataset.id,\n                        action: \"rerun\",\n                        tool_id: tool.id\n                    },\n                    null,\n                    // Success callback.\n                    function(track_data) {\n                        Galaxy.modal.show({\n                            title: tool.get(\"name\") + \" is Running\",\n                            body:\n                                tool.get(\"name\") +\n                                \" is running on the complete dataset. Tool outputs are in dataset's history.\",\n                            buttons: {\n                                Close: function() {\n                                    Galaxy.modal.hide();\n                                }\n                            }\n                        });\n                    }\n                );\n            },\n\n            /**\n     * Run dataset on visible region. This creates a new track and sets the track's contents\n     * to the tool's output.\n     */\n            run_on_region: function() {\n                //\n                // Create track for tool's output immediately to provide user feedback.\n                //\n                var track = this.model.get(\"track\"),\n                    tool = this.model,\n                    region = new visualization.GenomeRegion({\n                        chrom: track.view.chrom,\n                        start: track.view.low,\n                        end: track.view.high\n                    }),\n                    url_params = {\n                        target_dataset_id: track.dataset.id,\n                        action: \"rerun\",\n                        tool_id: tool.id,\n                        regions: [region.toJSON()]\n                    },\n                    current_track = track,\n                    // Set name of track to include tool name, parameters, and region used.\n                    track_name = tool.get(\"name\") + current_track.tool_region_and_parameters_str(region),\n                    container;\n\n                // If track not in a group, create a group for it and add new track to group. If track\n                // already in group, add track to group.\n                if (current_track.container === view) {\n                    // Create new group.\n                    var group = new DrawableGroup(view, view, {\n                        name: track.config.get_value(\"name\")\n                    });\n\n                    // Replace track with group.\n                    var index = current_track.container.replace_drawable(current_track, group, false);\n\n                    // Update HTML.\n                    // FIXME: this is ugly way to replace a track with a group -- make this easier via\n                    // a Drawable or DrawableCollection function.\n                    group.container_div.insertBefore(current_track.view.content_div.children()[index]);\n                    group.add_drawable(current_track);\n                    current_track.container_div.appendTo(group.content_div);\n                    container = group;\n                } else {\n                    // Use current group.\n                    container = current_track.container;\n                }\n\n                // Create and init new track.\n                var new_track = new current_track.constructor(view, container, {\n                    name: track_name,\n                    hda_ldda: \"hda\"\n                });\n                new_track.init_for_tool_data();\n                new_track.change_mode(current_track.mode);\n                new_track.set_filters_manager(current_track.filters_manager.copy(new_track));\n                new_track.update_icons();\n                container.add_drawable(new_track);\n                new_track.tiles_div.text(\"Starting job.\");\n\n                // Run tool.\n                this.run(\n                    url_params,\n                    new_track,\n                    // Success callback.\n                    function(track_data) {\n                        new_track.set_dataset(new data.Dataset(track_data));\n                        new_track.tiles_div.text(\"Running job.\");\n                        new_track.init();\n                    }\n                );\n            },\n\n            /**\n     * Run tool using a set of URL params and a success callback.\n     */\n            run: function(url_params, new_track, success_callback) {\n                // Run tool.\n                url_params.inputs = this.model.get_inputs_dict();\n                var ss_deferred = new util.ServerStateDeferred({\n                    ajax_settings: {\n                        url: Galaxy.root + \"api/tools\",\n                        data: JSON.stringify(url_params),\n                        dataType: \"json\",\n                        contentType: \"application/json\",\n                        type: \"POST\"\n                    },\n                    interval: 2000,\n                    success_fn: function(response) {\n                        return response !== \"pending\";\n                    }\n                });\n\n                // Start with this status message.\n                //new_track.container_div.addClass(\"pending\");\n                //new_track.content_div.html(DATA_PENDING);\n\n                $.when(ss_deferred.go()).then(function(response) {\n                    if (response === \"no converter\") {\n                        // No converter available for input datasets, so cannot run tool.\n                        new_track.container_div.addClass(\"error\");\n                        new_track.content_div.text(DATA_NOCONVERTER);\n                    } else if (response.error) {\n                        // General error.\n                        new_track.container_div.addClass(\"error\");\n                        new_track.content_div.text(DATA_CANNOT_RUN_TOOL + response.message);\n                    } else {\n                        // Job submitted and running.\n                        success_callback(response);\n                    }\n                });\n            }\n        });\n\n        /**\n * Generates scale values based on filter and feature's value for filter.\n */\n        var FilterScaler = function(filter, default_val) {\n            painters.Scaler.call(this, default_val);\n            this.filter = filter;\n        };\n\n        FilterScaler.prototype.gen_val = function(feature_data) {\n            // If filter is not initalized yet, return default val.\n            if (\n                this.filter.high === Number.MAX_VALUE ||\n                this.filter.low === -Number.MAX_VALUE ||\n                this.filter.low === this.filter.high\n            ) {\n                return this.default_val;\n            }\n\n            // Scaling value is ratio of (filter's value compared to low) to (complete filter range).\n            return (\n                (parseFloat(feature_data[this.filter.index]) - this.filter.low) / (this.filter.high - this.filter.low)\n            );\n        };\n\n        /**\n * Tiles drawn by tracks.\n */\n        var Tile = function(track, region, w_scale, canvas, data) {\n            this.track = track;\n            this.region = region;\n            this.low = region.get(\"start\");\n            this.high = region.get(\"end\");\n            this.w_scale = w_scale;\n            this.canvas = canvas;\n            // Wrap element in div for background and to provide container for tile-specific elements.\n            this.html_elt = $(\"<div class='track-tile'/>\").append(canvas);\n            this.data = data;\n            this.stale = false;\n        };\n\n        /**\n * Perform pre-display actions.\n */\n        Tile.prototype.predisplay_actions = function() {};\n\n        var LineTrackTile = function(track, region, w_scale, canvas, data) {\n            Tile.call(this, track, region, w_scale, canvas, data);\n        };\n        LineTrackTile.prototype.predisplay_actions = function() {};\n\n        var FeatureTrackTile = function(\n            track,\n            region,\n            w_scale,\n            canvas,\n            data,\n            mode,\n            message,\n            all_slotted,\n            feature_mapper,\n            incomplete_features,\n            seq_data\n        ) {\n            // Attribute init.\n            Tile.call(this, track, region, w_scale, canvas, data);\n            this.mode = mode;\n            this.all_slotted = all_slotted;\n            this.feature_mapper = feature_mapper;\n            this.has_icons = false;\n            this.incomplete_features = incomplete_features;\n            // Features drawn based on data from other tiles.\n            this.other_tiles_features_drawn = {};\n            this.seq_data = seq_data;\n\n            // Add message + action icons to tile's html.\n            /*\n    This does not work right now because a random set of reads is returned by the server.\n    When the server can respond with more data systematically, renable these icons.\n    if (message) {\n        this.has_icons = true;\n\n        var\n            tile = this;\n            canvas = this.html_elt.children()[0],\n            message_div = $(\"<div/>\").addClass(\"tile-message\")\n                            // -1 to account for border.\n                            .css({'height': ERROR_PADDING, 'width': canvas.width}).prependTo(this.html_elt);\n\n        // Handle message; only message currently is that only the first N elements are displayed.\n        var tile_region = new visualization.GenomeRegion({\n                chrom: track.view.chrom,\n                start: this.low,\n                end: this.high\n            }),\n            num_features = data.length,\n            more_down_icon = $(\"<a/>\").addClass(\"icon more-down\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data including depth\")\n                                .tooltip().appendTo(message_div),\n            more_across_icon = $(\"<a/>\").addClass(\"icon more-across\")\n                                .attr(\"title\", \"For speed, only the first \" + num_features + \" features in this region were obtained from server. Click to get more data excluding depth\")\n                                .tooltip().appendTo(message_div);\n\n        // Set up actions for icons.\n        more_down_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.DEEP_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n\n        more_across_icon.click(function() {\n            // Mark tile as stale, request more data, and redraw track.\n            tile.stale = true;\n            track.data_manager.get_more_data(tile_region, track.mode, 1 / tile.w_scale, {}, track.data_manager.BROAD_DATA_REQ);\n            $(\".tooltip\").hide();\n            track.request_draw();\n        }).dblclick(function(e) {\n            // Do not propogate as this would normally zoom in.\n            e.stopPropagation();\n        });\n    }\n    */\n        };\n        extend(FeatureTrackTile.prototype, Tile.prototype);\n\n        /**\n * Sets up support for popups.\n */\n        FeatureTrackTile.prototype.predisplay_actions = function() {\n            /*\n    FIXME: use a canvas library to handle popups.\n    //\n    // Add support for popups.\n    //\n    var tile = this,\n        popups = {};\n\n    // Only show popups in Pack mode.\n    if (tile.mode !== \"Pack\") { return; }\n\n    $(this.html_elt).hover(\n    function() {\n        this.hovered = true;\n        $(this).mousemove();\n    },\n    function() {\n        this.hovered = false;\n        // Clear popup if it is still hanging around (this is probably not needed)\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    } ).mousemove(function (e) {\n        // Use the hover plugin to get a delay before showing popup\n        if ( !this.hovered ) { return; }\n        // Get feature data for position.\n        var\n            this_offset = $(this).offset(),\n            offsetX = e.pageX - this_offset.left,\n            offsetY = e.pageY - this_offset.top,\n            feature_data = tile.feature_mapper.get_feature_data(offsetX, offsetY),\n            feature_uid = (feature_data ? feature_data[0] : null);\n        // Hide visible popup if not over a feature or over a different feature.\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").each(function() {\n            if ( !feature_uid ||\n                 $(this).attr(\"id\") !== feature_uid.toString() ) {\n                $(this).remove();\n            }\n        });\n\n        if (feature_data) {\n            // Get or create popup.\n            var popup = popups[feature_uid];\n            if (!popup) {\n                // Create feature's popup element.\n                var feature_dict = {\n                        name: feature_data[3],\n                        start: feature_data[1],\n                        end: feature_data[2],\n                        strand: feature_data[4]\n                    },\n                    filters = tile.track.filters_manager.filters,\n                    filter;\n\n                // Add filter values to feature dict.\n                for (var i = 0; i < filters.length; i++) {\n                    filter = filters[i];\n                    feature_dict[filter.name] = feature_data[filter.index];\n                }\n\n                // Build popup.\n                popup = $(\"<div/>\").attr(\"id\", feature_uid).addClass(\"feature-popup\");\n                var table = $(\"<table/>\"),\n                    key, value, row;\n                for (key in feature_dict) {\n                    value = feature_dict[key];\n                    row = $(\"<tr/>\").appendTo(table);\n                    $(\"<th/>\").appendTo(row).text(key);\n                    $(\"<td/>\").attr(\"align\", \"left\").appendTo(row)\n                              .text(typeof(value) === 'number' ? round(value, 2) : value);\n                }\n                popup.append( $(\"<div class='feature-popup-inner'>\").append( table ) );\n                popups[feature_uid] = popup;\n            }\n\n            // Attach popup to track's overlay.\n            popup.appendTo( $(this).parents(\".track-content\").children(\".overlay\") );\n\n            // Offsets are within canvas, but popup must be positioned relative to parent element.\n            // parseInt strips \"px\" from left, top measurements. +7 so that mouse pointer does not\n            // overlap popup.\n            var\n                popupX = offsetX + parseInt( tile.html_elt.css(\"left\"), 10 ) - popup.width() / 2,\n                popupY = offsetY + parseInt( tile.html_elt.css(\"top\"), 10 ) + 7;\n            popup.css(\"left\", popupX + \"px\").css(\"top\", popupY + \"px\");\n        }\n        else if (!e.isPropagationStopped()) {\n            // Propogate event to other tiles because overlapping tiles prevent mousemove from being\n            // called on tiles under this tile.\n            e.stopPropagation();\n            $(this).siblings().each(function() {\n                $(this).trigger(e);\n            });\n        }\n    })\n    .mouseleave(function() {\n        $(this).parents(\".track-content\").children(\".overlay\").children(\".feature-popup\").remove();\n    });\n    */\n        };\n\n        /**\n * Tracks are objects can be added to the View.\n *\n * Track object hierarchy:\n * Track\n * -> LabelTrack\n * -> TiledTrack\n * ----> LineTrack\n * ----> ReferenceTrack\n * ----> FeatureTrack\n * -------> ReadTrack\n * ----> VariantTrack\n */\n        var Track = function(view, container, obj_dict) {\n            // For now, track's container is always view.\n            extend(obj_dict, {\n                drag_handle_class: \"draghandle\"\n            });\n            Drawable.call(this, view, container, obj_dict);\n\n            //\n            // Attribute init.\n            //\n\n            // Set or create dataset.\n            this.dataset = null;\n            if (obj_dict.dataset) {\n                // Dataset can be a Backbone model or a dict that can be used to create a model.\n                this.dataset =\n                    obj_dict.dataset instanceof Backbone.Model ? obj_dict.dataset : new data.Dataset(obj_dict.dataset);\n            }\n            this.dataset_check_type = \"converted_datasets_state\";\n            this.data_url_extra_params = {};\n            this.data_query_wait = \"data_query_wait\" in obj_dict ? obj_dict.data_query_wait : DEFAULT_DATA_QUERY_WAIT;\n            // A little ugly creating data manager right now due to transition to Backbone-based objects.\n            this.data_manager =\n                \"data_manager\" in obj_dict\n                    ? obj_dict.data_manager\n                    : new visualization.GenomeDataManager({\n                          dataset: this.dataset,\n                          // HACK: simulate 'genome' attributes from view for now.\n                          // View should eventually use Genome object.\n                          genome: new visualization.Genome({\n                              key: view.dbkey,\n                              chroms_info: {\n                                  chrom_info: view.chrom_data\n                              }\n                          }),\n                          data_mode_compatible: this.data_and_mode_compatible,\n                          can_subset: this.can_subset\n                      });\n\n            // Height attributes: min height, max height, and visible height.\n            this.min_height_px = 16;\n            this.max_height_px = 800;\n            this.visible_height_px = this.config.get_value(\"height\");\n\n            //\n            // Create content div, which is where track is displayed, and add to container if available.\n            //\n            this.content_div = $(\"<div class='track-content'>\").appendTo(this.container_div);\n            if (this.container) {\n                this.container.content_div.append(this.container_div);\n                if (!(\"resize\" in obj_dict) || obj_dict.resize) {\n                    this.add_resize_handle();\n                }\n            }\n        };\n\n        extend(Track.prototype, Drawable.prototype, {\n            action_icons_def: [\n                // Change track mode.\n                {\n                    name: \"mode_icon\",\n                    title: \"Set display mode\",\n                    css_class: \"chevron-expand\",\n                    on_click_fn: function() {}\n                },\n                // Hide/show content.\n                Drawable.prototype.action_icons_def[0],\n                // Set track as overview.\n                {\n                    name: \"overview_icon\",\n                    title: \"Set as overview\",\n                    css_class: \"application-dock-270\",\n                    on_click_fn: function(track) {\n                        track.view.set_overview(track);\n                    }\n                },\n                // Edit config.\n                Drawable.prototype.action_icons_def[1],\n                // Toggle track filters.\n                {\n                    name: \"filters_icon\",\n                    title: \"Filters\",\n                    css_class: \"ui-slider-050\",\n                    on_click_fn: function(drawable) {\n                        // TODO: update Tooltip text.\n                        if (drawable.filters_manager.visible()) {\n                            drawable.filters_manager.clear_filters();\n                        } else {\n                            drawable.filters_manager.init_filters();\n                        }\n                        drawable.filters_manager.toggle();\n                    }\n                },\n                // Toggle track tool.\n                {\n                    name: \"tools_icon\",\n                    title: \"Tool\",\n                    css_class: \"hammer\",\n                    on_click_fn: function(track) {\n                        // TODO: update Tooltip text.\n\n                        track.tool.toggle();\n\n                        // Update track name.\n                        if (track.tool.is_visible()) {\n                            track.set_name(track.config.get_value(\"name\") + track.tool_region_and_parameters_str());\n                        } else {\n                            track.revert_name();\n                        }\n                        // HACK: name change modifies icon placement, which leaves tooltip incorrectly placed.\n                        $(\".tooltip\").remove();\n                    }\n                },\n                // Go to parameter exploration visualization.\n                {\n                    name: \"param_space_viz_icon\",\n                    title: \"Tool parameter space visualization\",\n                    css_class: \"arrow-split\",\n                    on_click_fn: function(track) {\n                        var html =\n                            \"<strong>Tool</strong>:\" +\n                            track.tool.get(\"name\") +\n                            \"<br/>\" +\n                            \"<strong>Dataset</strong>:\" +\n                            track.config.get_value(\"name\") +\n                            \"<br/>\" +\n                            '<strong>Region(s)</strong>: <select name=\"regions\">' +\n                            '<option value=\"cur\">current viewing area</option>' +\n                            '<option value=\"bookmarks\">bookmarks</option>' +\n                            '<option value=\"both\">current viewing area and bookmarks</option>' +\n                            \"</select>\";\n                        var cancel_fn = function() {\n                                Galaxy.modal.hide();\n                                $(window).unbind(\"keypress.check_enter_esc\");\n                            },\n                            ok_fn = function() {\n                                var regions_to_use = $('select[name=\"regions\"] option:selected').val(),\n                                    regions,\n                                    view_region = new visualization.GenomeRegion({\n                                        chrom: view.chrom,\n                                        start: view.low,\n                                        end: view.high\n                                    }),\n                                    bookmarked_regions = _.map($(\".bookmark\"), function(elt) {\n                                        return new visualization.GenomeRegion({\n                                            from_str: $(elt)\n                                                .children(\".position\")\n                                                .text()\n                                        });\n                                    });\n\n                                // Get regions for visualization.\n                                if (regions_to_use === \"cur\") {\n                                    // Use only current region.\n                                    regions = [view_region];\n                                } else if (regions_to_use === \"bookmarks\") {\n                                    // Use only bookmarks.\n                                    regions = bookmarked_regions;\n                                } else {\n                                    // Use both current region and bookmarks.\n                                    regions = [view_region].concat(bookmarked_regions);\n                                }\n\n                                Galaxy.modal.hide();\n\n                                // Go to visualization.\n                                window.location.href =\n                                    Galaxy.root +\n                                    \"visualization/sweepster\" +\n                                    \"?\" +\n                                    $.param({\n                                        dataset_id: track.dataset.id,\n                                        hda_ldda: track.dataset.get(\"hda_ldda\"),\n                                        regions: JSON.stringify(new Backbone.Collection(regions).toJSON())\n                                    });\n                            },\n                            check_enter_esc = function(e) {\n                                if ((e.keyCode || e.which) === 27) {\n                                    // Escape key\n                                    cancel_fn();\n                                } else if ((e.keyCode || e.which) === 13) {\n                                    // Enter key\n                                    ok_fn();\n                                }\n                            };\n\n                        // show dialog\n                        Galaxy.modal.show({\n                            title: \"Visualize tool parameter space and output from different parameter settings?\",\n                            body: html,\n                            buttons: { No: cancel_fn, Yes: ok_fn }\n                        });\n                    }\n                },\n                // Remove track.\n                Drawable.prototype.action_icons_def[2]\n            ],\n\n            can_draw: function() {\n                return this.dataset && Drawable.prototype.can_draw.call(this);\n            },\n\n            build_container_div: function() {\n                return $(\"<div/>\")\n                    .addClass(\"track\")\n                    .attr(\"id\", \"track_\" + this.id);\n            },\n\n            /**\n     * Set track's dataset.\n     */\n            set_dataset: function(dataset) {\n                this.dataset = dataset;\n                this.data_manager.set(\"dataset\", dataset);\n            },\n\n            /**\n     * Action to take during resize.\n     */\n            on_resize: function() {\n                this.request_draw({ clear_tile_cache: true });\n            },\n\n            /**\n     * Add resizing handle to drawable's container_div.\n     */\n            add_resize_handle: function() {\n                var track = this;\n                var in_handle = false;\n                var in_drag = false;\n                var drag_control = $(\"<div class='track-resize'>\");\n                // Control shows on hover over track, stays while dragging\n                $(track.container_div).hover(\n                    function() {\n                        if (track.config.get_value(\"content_visible\")) {\n                            in_handle = true;\n                            drag_control.show();\n                        }\n                    },\n                    function() {\n                        in_handle = false;\n                        if (!in_drag) {\n                            drag_control.hide();\n                        }\n                    }\n                );\n                // Update height and force redraw of current view while dragging,\n                // clear cache to force redraw of other tiles.\n                drag_control\n                    .hide()\n                    .bind(\"dragstart\", function(e, d) {\n                        in_drag = true;\n                        d.original_height = $(track.content_div).height();\n                    })\n                    .bind(\"drag\", function(e, d) {\n                        var new_height = Math.min(\n                            Math.max(d.original_height + d.deltaY, track.min_height_px),\n                            track.max_height_px\n                        );\n                        $(track.tiles_div).css(\"height\", new_height);\n                        track.visible_height_px = track.max_height_px === new_height ? 0 : new_height;\n                        track.on_resize();\n                    })\n                    .bind(\"dragend\", function(e, d) {\n                        track.tile_cache.clear();\n                        in_drag = false;\n                        if (!in_handle) {\n                            drag_control.hide();\n                        }\n                        track.config.set_value(\"height\", track.visible_height_px);\n                        track.changed();\n                    })\n                    .appendTo(track.container_div);\n            },\n\n            /**\n     * Hide any elements that are part of the tracks contents area. Should\n     * remove as approprite, the track will be redrawn by show_contents.\n     */\n            hide_contents: function() {\n                // Hide tiles.\n                this.tiles_div.hide();\n                // Hide any y axis labels (common to several track types)\n                this.container_div.find(\".yaxislabel, .track-resize\").hide();\n            },\n\n            show_contents: function() {\n                // Show the contents div and labels (if present)\n                this.tiles_div.show();\n                this.container_div.find(\".yaxislabel, .track-resize\").show();\n                // Request a redraw of the content\n                this.request_draw();\n            },\n\n            /**\n     * Returns track type.\n     */\n            get_type: function() {\n                // Order is important: start with most-specific classes and go up the track hierarchy.\n                if (this instanceof LabelTrack) {\n                    return \"LabelTrack\";\n                } else if (this instanceof ReferenceTrack) {\n                    return \"ReferenceTrack\";\n                } else if (this instanceof LineTrack) {\n                    return \"LineTrack\";\n                } else if (this instanceof ReadTrack) {\n                    return \"ReadTrack\";\n                } else if (this instanceof VariantTrack) {\n                    return \"VariantTrack\";\n                } else if (this instanceof CompositeTrack) {\n                    return \"CompositeTrack\";\n                } else if (this instanceof FeatureTrack) {\n                    return \"FeatureTrack\";\n                }\n                return \"\";\n            },\n\n            /**\n     * Remove visualization content and display message.\n     */\n            show_message: function(msg_html) {\n                this.tiles_div.remove();\n                return $(\"<span/>\")\n                    .addClass(\"message\")\n                    .html(msg_html)\n                    .appendTo(this.content_div);\n            },\n\n            /**\n     * Initialize and draw the track.\n     */\n            init: function(retry) {\n                // FIXME: track should have a 'state' attribute that is checked on load; this state attribute should be\n                // used in this function to determine what action(s) to take.\n\n                var track = this;\n                track.enabled = false;\n                track.tile_cache.clear();\n                track.data_manager.clear();\n                /*\n        if (!track.content_div.text()) {\n            track.content_div.text(DATA_LOADING);\n        }\n        */\n                // Remove old track content (e.g. tiles, messages).\n                track.content_div.children().remove();\n                track.container_div.removeClass(\"nodata error pending\");\n\n                track.tiles_div = $(\"<div/>\")\n                    .addClass(\"tiles\")\n                    .appendTo(track.content_div);\n\n                //\n                // Tracks with no dataset id are handled differently.\n                // FIXME: is this really necessary?\n                //\n                if (!track.dataset.id) {\n                    return;\n                }\n\n                // Get dataset state; if state is fine, enable and draw track. Otherwise, show message\n                // about track status.\n                var init_deferred = $.Deferred(),\n                    params = {\n                        hda_ldda: track.dataset.get(\"hda_ldda\"),\n                        data_type: this.dataset_check_type,\n                        chrom: track.view.chrom,\n                        retry: retry\n                    };\n                $.getJSON(this.dataset.url(), params, function(result) {\n                    if (!result || result === \"error\" || result.kind === \"error\") {\n                        // Dataset is in error state.\n                        track.container_div.addClass(\"error\");\n                        var msg_elt = track.show_message(DATA_ERROR);\n                        if (result.message) {\n                            // Add links to (a) show error and (b) try again.\n                            msg_elt.append(\n                                $(\"<a href='javascript:void(0);'></a>\")\n                                    .text(\"View error\")\n                                    .click(function() {\n                                        Galaxy.modal.show({\n                                            title: \"Trackster Error\",\n                                            body: \"<pre>\" + result.message + \"</pre>\",\n                                            buttons: {\n                                                Close: function() {\n                                                    Galaxy.modal.hide();\n                                                }\n                                            }\n                                        });\n                                    })\n                            );\n                            msg_elt.append($(\"<span/>\").text(\" \"));\n                            msg_elt.append(\n                                $(\"<a href='javascript:void(0);'></a>\")\n                                    .text(\"Try again\")\n                                    .click(function() {\n                                        track.init(true);\n                                    })\n                            );\n                        }\n                    } else if (result === \"no converter\") {\n                        track.container_div.addClass(\"error\");\n                        track.show_message(DATA_NOCONVERTER);\n                    } else if (\n                        result === \"no data\" ||\n                        (result.data !== undefined && (result.data === null || result.data.length === 0))\n                    ) {\n                        track.container_div.addClass(\"nodata\");\n                        track.show_message(DATA_NONE);\n                    } else if (result === \"pending\") {\n                        track.container_div.addClass(\"pending\");\n                        track.show_message(DATA_PENDING);\n                        //$(\"<img/>\").attr(\"src\", image_path + \"/yui/rel_interstitial_loading.gif\").appendTo(track.tiles_div);\n                        setTimeout(function() {\n                            track.init();\n                        }, track.data_query_wait);\n                    } else if (result === \"data\" || result.status === \"data\") {\n                        if (result.valid_chroms) {\n                            track.valid_chroms = result.valid_chroms;\n                            track.update_icons();\n                        }\n                        track.tiles_div.text(DATA_OK);\n                        if (track.view.chrom) {\n                            track.tiles_div.text(\"\");\n                            track.tiles_div.css(\"height\", track.visible_height_px + \"px\");\n                            track.enabled = true;\n                            // predraw_init may be asynchronous, wait for it and then draw\n                            $.when.apply($, track.predraw_init()).done(function() {\n                                init_deferred.resolve();\n                                track.container_div.removeClass(\"nodata error pending\");\n                                track.request_draw();\n                            });\n                        } else {\n                            init_deferred.resolve();\n                        }\n                    }\n                });\n\n                this.update_icons();\n                return init_deferred;\n            },\n\n            /**\n     * Additional initialization required before drawing track for the first time.\n     */\n            predraw_init: function() {\n                var track = this;\n                return $.getJSON(\n                    track.dataset.url(),\n                    {\n                        data_type: \"data\",\n                        stats: true,\n                        chrom: track.view.chrom,\n                        low: 0,\n                        high: track.view.max_high,\n                        hda_ldda: track.dataset.get(\"hda_ldda\")\n                    },\n                    function(result) {\n                        var data = result.data;\n\n                        // Tracks may not have stat data either because there is no data or data is not yet ready.\n                        if (data && data.min !== undefined && data.max !== undefined) {\n                            // Compute default minimum and maximum values\n                            var min_value = data.min,\n                                max_value = data.max;\n                            // If mean and sd are present, use them to compute a ~95% window\n                            // but only if it would shrink the range on one side\n                            min_value = Math.floor(Math.min(0, Math.max(min_value, data.mean - 2 * data.sd)));\n                            max_value = Math.ceil(Math.max(0, Math.min(max_value, data.mean + 2 * data.sd)));\n                            // Update config, prefs\n                            track.config.set_default_value(\"min_value\", min_value);\n                            track.config.set_default_value(\"max_value\", max_value);\n                            track.config.set_value(\"min_value\", min_value);\n                            track.config.set_value(\"max_value\", max_value);\n                        }\n                    }\n                );\n            },\n\n            /**\n     * Returns all drawables in this drawable.\n     */\n            get_drawables: function() {\n                return this;\n            }\n        });\n\n        var TiledTrack = function(view, container, obj_dict) {\n            Track.call(this, view, container, obj_dict);\n\n            var track = this;\n\n            // Make track moveable.\n            moveable(track.container_div, track.drag_handle_class, \".group\", track);\n\n            // Attribute init.\n            this.filters_manager = new filters_mod.FiltersManager(\n                this,\n                \"filters\" in obj_dict ? obj_dict.filters : null\n            );\n            // HACK: set filters manager for data manager.\n            // FIXME: prolly need function to set filters and update data_manager reference.\n            this.data_manager.set(\"filters_manager\", this.filters_manager);\n            this.filters_available = false;\n            this.tool = obj_dict.tool\n                ? new TracksterTool(\n                      _.extend(obj_dict.tool, {\n                          track: this,\n                          tool_state: obj_dict.tool_state\n                      })\n                  )\n                : null;\n            this.tile_cache = new visualization.Cache(TILE_CACHE_SIZE);\n            this.left_offset = 0;\n\n            if (this.header_div) {\n                //\n                // Setup filters.\n                //\n                this.set_filters_manager(this.filters_manager);\n\n                //\n                // Create dynamic tool view.\n                //\n                if (this.tool) {\n                    var tool_view = new TracksterToolView({ model: this.tool });\n                    tool_view.render();\n                    this.dynamic_tool_div = tool_view.$el;\n                    this.header_div.after(this.dynamic_tool_div);\n                }\n            }\n\n            // Add tiles_div, overlay_div to content_div.\n            this.tiles_div = $(\"<div/>\")\n                .addClass(\"tiles\")\n                .appendTo(this.content_div);\n            if (!this.config.get_value(\"content_visible\")) {\n                this.tiles_div.hide();\n            }\n            this.overlay_div = $(\"<div/>\")\n                .addClass(\"overlay\")\n                .appendTo(this.content_div);\n\n            if (obj_dict.mode) {\n                this.change_mode(obj_dict.mode);\n            }\n        };\n        extend(TiledTrack.prototype, Drawable.prototype, Track.prototype, {\n            action_icons_def: Track.prototype.action_icons_def.concat([\n                // Show more rows when all features are not slotted.\n                {\n                    name: \"show_more_rows_icon\",\n                    title: \"To minimize track height, not all feature rows are displayed. Click to display more rows.\",\n                    css_class: \"exclamation\",\n                    on_click_fn: function(track) {\n                        $(\".tooltip\").remove();\n                        track.slotters[track.view.resolution_px_b].max_rows *= 2;\n                        track.request_draw({ clear_tile_cache: true });\n                    },\n                    hide: true\n                }\n            ]),\n\n            /**\n     * Returns a copy of the track. The copy uses the same data manager so that the tracks can share data.\n     */\n            copy: function(container) {\n                // Create copy.\n                var obj_dict = this.to_dict();\n                extend(obj_dict, {\n                    data_manager: this.data_manager\n                });\n                var new_track = new this.constructor(this.view, container, obj_dict);\n                // Misc. init and return.\n                new_track.change_mode(this.mode);\n                new_track.enabled = this.enabled;\n                return new_track;\n            },\n\n            /**\n     * Set filters manager + HTML elements.\n     */\n            set_filters_manager: function(filters_manager) {\n                this.filters_manager = filters_manager;\n                this.header_div.after(this.filters_manager.parent_div);\n            },\n\n            /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n            to_dict: function() {\n                return {\n                    track_type: this.get_type(),\n                    dataset: {\n                        id: this.dataset.id,\n                        hda_ldda: this.dataset.get(\"hda_ldda\")\n                    },\n                    prefs: this.config.to_key_value_dict(),\n                    mode: this.mode,\n                    filters: this.filters_manager.to_dict(),\n                    tool_state: this.tool ? this.tool.state_dict() : {}\n                };\n            },\n\n            /**\n     * Set track bounds for current chromosome.\n     */\n            set_min_max: function() {\n                var track = this;\n\n                return $.getJSON(\n                    track.dataset.url(),\n                    {\n                        data_type: \"data\",\n                        stats: true,\n                        chrom: track.view.chrom,\n                        low: 0,\n                        high: track.view.max_high,\n                        hda_ldda: track.dataset.get(\"hda_ldda\")\n                    },\n                    function(result) {\n                        var data = result.data;\n                        if (\n                            isNaN(parseFloat(track.config.get_value(\"min_value\"))) ||\n                            isNaN(parseFloat(track.config.get_value(\"max_value\")))\n                        ) {\n                            // Compute default minimum and maximum values\n                            var min_value = data.min,\n                                max_value = data.max;\n                            // If mean and sd are present, use them to compute a ~95% window\n                            // but only if it would shrink the range on one side\n                            min_value = Math.floor(Math.min(0, Math.max(min_value, data.mean - 2 * data.sd)));\n                            max_value = Math.ceil(Math.max(0, Math.min(max_value, data.mean + 2 * data.sd)));\n                            // Update the prefs\n                            track.config.set_value(\"min_value\", min_value);\n                            track.config.set_value(\"max_value\", max_value);\n                        }\n                    }\n                );\n            },\n\n            /**\n     * Change track's mode.\n     */\n            change_mode: function(new_mode) {\n                var track = this;\n                // TODO: is it necessary to store the mode in two places (.mode and track_config)?\n                track.mode = new_mode;\n                track.config.set_value(\"mode\", new_mode);\n                // FIXME: find a better way to get Auto data w/o clearing cache; using mode in the\n                // data manager would work if Auto data were checked for compatibility when a specific\n                // mode is chosen.\n                if (new_mode === \"Auto\") {\n                    this.data_manager.clear();\n                }\n                track.request_draw({ clear_tile_cache: true });\n                this.action_icons.mode_icon.attr(\"title\", \"Set display mode (now: \" + track.mode + \")\");\n                return track;\n            },\n\n            /**\n     * Update track's buttons.\n     */\n            update_icons: function() {\n                var track = this;\n\n                //\n                // Show/hide filter icon.\n                //\n                track.action_icons.filters_icon.toggle(track.filters_available);\n\n                //\n                // Show/hide tool icons.\n                //\n                track.action_icons.tools_icon.toggle(track.tool !== null);\n                track.action_icons.param_space_viz_icon.toggle(track.tool !== null);\n            },\n\n            /**\n     * Generate a key for the tile cache.\n     * TODO: create a TileCache object (like DataCache) and generate key internally.\n     */\n            _gen_tile_cache_key: function(w_scale, tile_region) {\n                return w_scale + \"_\" + tile_region;\n            },\n\n            /**\n     * Request that track be drawn.\n     */\n            request_draw: function(options) {\n                if (options && options.clear_tile_cache) {\n                    this.tile_cache.clear();\n                }\n                this.view.request_redraw(options, this);\n            },\n\n            /**\n     * Actions to be taken before drawing.\n     */\n            before_draw: function() {\n                // Clear because this is set when drawing.\n                this.max_height_px = 0;\n            },\n\n            /**\n     * Draw track. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -clear_after: clear old tiles after drawing new tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     *\n     * NOTE: this function should never be called directly; use request_draw() so that drawing\n     * management can be used.\n     */\n            _draw: function(options) {\n                if (!this.can_draw()) {\n                    return;\n                }\n\n                var clear_after = options && options.clear_after,\n                    low = this.view.low,\n                    high = this.view.high,\n                    range = high - low,\n                    width = this.view.container.width(),\n                    w_scale = this.view.resolution_px_b,\n                    resolution = 1 / w_scale;\n\n                // For overview, adjust high, low, resolution, and w_scale.\n                if (this.is_overview) {\n                    low = this.view.max_low;\n                    high = this.view.max_high;\n                    w_scale = width / (view.max_high - view.max_low);\n                    resolution = 1 / w_scale;\n                }\n\n                this.before_draw();\n\n                //\n                // Method for moving and/or removing tiles:\n                // (a) mark all elements for removal using class 'remove'\n                // (b) during tile drawing/placement, remove class for elements that are moved;\n                //     this occurs in show_tile()\n                // (c) after drawing tiles, remove elements still marked for removal\n                //     (i.e. that still have class 'remove').\n                //\n\n                // Step (a) for (re)moving tiles.\n                this.tiles_div.children().addClass(\"remove\");\n\n                var // Tile width in bases.\n                    tile_width = Math.floor(TILE_SIZE * resolution),\n                    // Index of first tile that overlaps visible region.\n                    tile_index = Math.floor(low / tile_width),\n                    tile_region,\n                    tile_promise,\n                    tile_promises = [],\n                    tiles = [];\n                // Draw tiles.\n                while (tile_index * tile_width < high) {\n                    // Get tile region.\n                    tile_region = new visualization.GenomeRegion({\n                        chrom: this.view.chrom,\n                        start: tile_index * tile_width,\n                        // Tile high cannot be larger than view.max_high, which the chromosome length.\n                        end: Math.min((tile_index + 1) * tile_width, this.view.max_high)\n                    });\n                    tile_promise = this.draw_helper(tile_region, w_scale, options);\n                    tile_promises.push(tile_promise);\n                    $.when(tile_promise).then(function(tile) {\n                        tiles.push(tile);\n                    });\n\n                    // Go to next tile.\n                    tile_index += 1;\n                }\n\n                // Step (c) for (re)moving tiles when clear_after is false.\n                if (!clear_after) {\n                    this.tiles_div\n                        .children(\".remove\")\n                        .removeClass(\"remove\")\n                        .remove();\n                }\n\n                // When all tiles are drawn, call post-draw actions.\n                var track = this;\n                $.when.apply($, tile_promises).then(function() {\n                    // Step (c) for (re)moving tiles when clear_after is true:\n                    track.tiles_div.children(\".remove\").remove();\n\n                    // Only do postdraw actions for tiles; instances where tiles may not be drawn include:\n                    // (a) ReferenceTrack without sufficient resolution;\n                    // (b) data_fetch = false.\n                    tiles = _.filter(tiles, function(t) {\n                        return t !== null;\n                    });\n                    if (tiles.length !== 0) {\n                        track.postdraw_actions(tiles, width, w_scale, clear_after);\n                    }\n                });\n            },\n\n            /**\n     * Add a maximum/minimum label to track.\n     */\n            _add_yaxis_label: function(type, on_change) {\n                var track = this,\n                    css_class = type === \"max\" ? \"top\" : \"bottom\",\n                    text = type === \"max\" ? \"max\" : \"min\",\n                    pref_name = type === \"max\" ? \"max_value\" : \"min_value\",\n                    label = this.container_div.find(\".yaxislabel.\" + css_class),\n                    value = round(track.config.get_value(pref_name), 1);\n\n                // Default action for on_change is to redraw track.\n                on_change =\n                    on_change ||\n                    function() {\n                        track.request_draw({ clear_tile_cache: true });\n                    };\n\n                if (label.length !== 0) {\n                    // Label already exists, so update value.\n                    label.text(value);\n                } else {\n                    // Add label.\n                    label = $(\"<div/>\")\n                        .text(value)\n                        .make_text_editable({\n                            num_cols: 12,\n                            on_finish: function(new_val) {\n                                $(\".tooltip\").remove();\n                                track.config.set_value(pref_name, round(new_val, 1));\n                                on_change();\n                            },\n                            help_text: \"Set \" + text + \" value\"\n                        })\n                        .addClass(\"yaxislabel \" + css_class)\n                        .css(\"color\", this.config.get_value(\"label_color\"));\n                    this.container_div.prepend(label);\n                }\n            },\n\n            /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n            postdraw_actions: function(tiles, width, w_scale, clear_after) {\n                var line_track_tiles = _.filter(tiles, function(tile) {\n                    return tile instanceof LineTrackTile;\n                });\n\n                //\n                // Take different actions depending on whether there are LineTrack/Coverage tiles.\n                //\n\n                if (line_track_tiles.length > 0) {\n                    // -- Drawing in Coverage mode. --\n\n                    // Clear because this is set when drawing.\n                    this.max_height_px = 0;\n                    var track = this;\n                    _.each(tiles, function(tile) {\n                        if (!(tile instanceof LineTrackTile)) {\n                            tile.html_elt.remove();\n                            track.draw_helper(tile.region, w_scale, {\n                                force: true,\n                                mode: \"Coverage\"\n                            });\n                        }\n                    });\n\n                    track._add_yaxis_label(\"max\");\n                } else {\n                    // -- Drawing in non-Coverage mode. --\n\n                    // Remove Y-axis labels because there are no line track tiles.\n                    this.container_div.find(\".yaxislabel\").remove();\n\n                    //\n                    // If some tiles have icons, set padding of tiles without icons so features and rows align.\n                    //\n                    var icons_present = _.find(tiles, function(tile) {\n                        return tile.has_icons;\n                    });\n\n                    if (icons_present) {\n                        _.each(tiles, function(tile) {\n                            if (!tile.has_icons) {\n                                // Need to align with other tile(s) that have icons.\n                                tile.html_elt.css(\"padding-top\", ERROR_PADDING);\n                            }\n                        });\n                    }\n                }\n            },\n\n            /**\n     * Returns appropriate display mode based on data.\n     */\n            get_mode: function(data) {\n                return this.mode;\n            },\n\n            /**\n     * Update track interface to show display mode being used.\n     */\n            update_auto_mode: function(display_mode) {\n                // FIXME: needs to be implemented.\n            },\n\n            /**\n     * Returns a list of drawables to draw. Defaults to current track.\n     */\n            _get_drawables: function() {\n                return [this];\n            },\n\n            /**\n     * Retrieves from cache, draws, or sets up drawing for a single tile. Returns either a Tile object or a\n     * jQuery.Deferred object that is fulfilled when tile can be drawn again. Options include:\n     * -force: force a redraw rather than use cached tiles (default: false)\n     * -data_fetch: fetch data if necessary (default: true)\n     */\n            draw_helper: function(region, w_scale, options) {\n                // Init options if necessary to avoid having to check if options defined.\n                if (!options) {\n                    options = {};\n                }\n\n                var force = options.force,\n                    mode = options.mode || this.mode,\n                    resolution = 1 / w_scale,\n                    // Useful vars.\n                    track = this,\n                    drawables = this._get_drawables(),\n                    key = this._gen_tile_cache_key(w_scale, region),\n                    is_tile = function(o) {\n                        return o && \"track\" in o;\n                    };\n\n                // Check tile cache, if found show existing tile in correct position\n                var tile = force ? undefined : track.tile_cache.get_elt(key);\n                if (tile) {\n                    if (is_tile(tile)) {\n                        track.show_tile(tile, w_scale);\n                    }\n                    return tile;\n                }\n\n                // If not fetching data, nothing more to do because data is needed to draw tile.\n                if (options.data_fetch === false) {\n                    return null;\n                }\n\n                // Function that returns data/Deferreds needed to draw tile.\n                var get_tile_data = function() {\n                    // HACK: if display mode (mode) is in continuous data modes, data mode must be coverage to get coverage data.\n                    var data_mode = _.find(CONTINUOUS_DATA_MODES, function(m) {\n                        return m === mode;\n                    })\n                        ? \"Coverage\"\n                        : mode;\n\n                    // Map drawable object to data needed for drawing.\n                    var tile_data = _.map(drawables, function(d) {\n                        // Get the track data/promise.\n                        return d.data_manager.get_data(region, data_mode, resolution, track.data_url_extra_params);\n                    });\n\n                    // Get reference data/promise.\n                    if (view.reference_track) {\n                        tile_data.push(\n                            view.reference_track.data_manager.get_data(\n                                region,\n                                mode,\n                                resolution,\n                                view.reference_track.data_url_extra_params\n                            )\n                        );\n                    }\n\n                    return tile_data;\n                };\n\n                //\n                // When data is available, draw tile.\n                //\n                var tile_drawn = $.Deferred();\n                track.tile_cache.set_elt(key, tile_drawn);\n                $.when.apply($, get_tile_data()).then(function() {\n                    var tile_data = get_tile_data(),\n                        tracks_data = tile_data,\n                        seq_data;\n\n                    // Deferreds may show up here if trying to fetch a subset of data from a superset data chunk\n                    // that cannot be subsetted. This may occur if the superset has a message. If there is a\n                    // Deferred, try again from the top. NOTE: this condition could (should?) be handled by the\n                    // GenomeDataManager in visualization module.\n                    if (\n                        _.find(tile_data, function(d) {\n                            return util.is_deferred(d);\n                        })\n                    ) {\n                        track.tile_cache.set_elt(key, undefined);\n                        $.when(track.draw_helper(region, w_scale, options)).then(function(tile) {\n                            tile_drawn.resolve(tile);\n                        });\n                        return;\n                    }\n\n                    // If sequence data is available, subset to get only data in region.\n                    if (view.reference_track) {\n                        seq_data = view.reference_track.data_manager.subset_entry(tile_data.pop(), region);\n                    }\n\n                    // Get drawing modes, heights for all tracks.\n                    var drawing_modes = [],\n                        drawing_heights = [];\n\n                    _.each(drawables, function(d, i) {\n                        var mode = d.mode,\n                            data = tracks_data[i];\n                        if (mode === \"Auto\") {\n                            mode = d.get_mode(data);\n                            d.update_auto_mode(mode);\n                        }\n                        drawing_modes.push(mode);\n                        drawing_heights.push(d.get_canvas_height(data, mode, w_scale, width));\n                    });\n\n                    var canvas = track.view.canvas_manager.new_canvas(),\n                        tile_low = region.get(\"start\"),\n                        tile_high = region.get(\"end\"),\n                        all_data_index = 0,\n                        width = Math.ceil((tile_high - tile_low) * w_scale) + track.left_offset,\n                        height = _.max(drawing_heights),\n                        tile;\n\n                    //\n                    // Draw all tracks on tile.\n                    //\n                    canvas.width = width;\n                    // Height is specified in options or is the height found above.\n                    canvas.height = options.height || height;\n                    var ctx = canvas.getContext(\"2d\");\n                    ctx.translate(track.left_offset, 0);\n                    if (drawables.length > 1) {\n                        ctx.globalAlpha = 0.5;\n                        ctx.globalCompositeOperation = \"source-over\";\n                    }\n                    _.each(drawables, function(d, i) {\n                        tile = d.draw_tile(tracks_data[i], ctx, drawing_modes[i], region, w_scale, seq_data);\n                    });\n\n                    // Don't cache, show if no tile.\n                    if (tile !== undefined) {\n                        track.tile_cache.set_elt(key, tile);\n                        track.show_tile(tile, w_scale);\n                    }\n\n                    tile_drawn.resolve(tile);\n                });\n\n                return tile_drawn;\n            },\n\n            /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n            get_canvas_height: function(result, mode, w_scale, canvas_width) {\n                return this.visible_height_px;\n            },\n\n            /**\n     * Draw line (bigwig) data onto tile.\n     */\n            _draw_line_track_tile: function(result, ctx, mode, region, w_scale) {\n                // Set min/max if they are not already set.\n                // FIXME: checking for different null/undefined/0 is messy; it would be nice to\n                // standardize this.\n                if ([undefined, null].indexOf(this.config.get_value(\"min_value\")) !== -1) {\n                    this.config.set_value(\"min_value\", 0);\n                }\n                if ([undefined, null, 0].indexOf(this.config.get_value(\"max_value\")) !== -1) {\n                    this.config.set_value(\n                        \"max_value\",\n                        _.max(\n                            _.map(result.data, function(d) {\n                                return d[1];\n                            })\n                        ) || 0\n                    );\n                }\n\n                var canvas = ctx.canvas,\n                    painter = new painters.LinePainter(\n                        result.data,\n                        region.get(\"start\"),\n                        region.get(\"end\"),\n                        this.config.to_key_value_dict(),\n                        mode\n                    );\n                painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n                return new LineTrackTile(this, region, w_scale, canvas, result.data);\n            },\n\n            /**\n     * Draw a track tile.\n     * @param result result from server\n     * @param ctx canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     */\n            draw_tile: function(result, ctx, mode, region, w_scale, ref_seq) {},\n\n            /**\n     * Show track tile and perform associated actions. Showing tile may actually move\n     * an existing tile rather than reshowing it.\n     */\n            show_tile: function(tile, w_scale) {\n                var track = this,\n                    tile_element = tile.html_elt;\n\n                // -- Show/move tile element. --\n\n                tile.predisplay_actions();\n\n                // Position tile element based on current viewport.\n                var left = Math.round((tile.low - (this.is_overview ? this.view.max_low : this.view.low)) * w_scale);\n                if (this.left_offset) {\n                    left -= this.left_offset;\n                }\n                tile_element.css(\"left\", left);\n\n                if (tile_element.hasClass(\"remove\")) {\n                    // Step (b) for (re)moving tiles. See _draw() function for description of algorithm\n                    // for removing tiles.\n                    tile_element.removeClass(\"remove\");\n                } else {\n                    // Showing new tile.\n                    this.tiles_div.append(tile_element);\n                }\n\n                // -- Update track, tile heights based on new tile. --\n\n                tile_element.css(\"height\", \"auto\");\n\n                // Update max height based on current tile's height.\n                // BUG/HACK: tile_element.height() returns a height that is always 2 pixels too big, so\n                // -2 to get the correct height.\n                this.max_height_px = Math.max(this.max_height_px, tile_element.height() - 2);\n\n                // Update height for all tiles based on max height.\n                tile_element\n                    .parent()\n                    .children()\n                    .css(\"height\", this.max_height_px + \"px\");\n\n                // Update track height based on max height and visible height.\n                var track_height = this.max_height_px;\n                if (this.visible_height_px !== 0) {\n                    track_height = Math.min(this.max_height_px, this.visible_height_px);\n                }\n                this.tiles_div.css(\"height\", track_height + \"px\");\n            },\n\n            /**\n     * Utility function that creates a label string describing the region and parameters of a track's tool.\n     */\n            tool_region_and_parameters_str: function(region) {\n                var track = this,\n                    region_str = region !== undefined ? region.toString() : \"all\",\n                    param_str = _.values(track.tool.get_inputs_dict()).join(\", \");\n                return \" - region=[\" + region_str + \"], parameters=[\" + param_str + \"]\";\n            },\n\n            /**\n     * Returns true if data is compatible with a given mode.\n     */\n            data_and_mode_compatible: function(data, mode) {\n                // Only handle modes that user can set.\n                if (mode === \"Auto\") {\n                    return true;\n                } else if (mode === \"Coverage\") {\n                    // Histogram mode requires bigwig data.\n                    return data.dataset_type === \"bigwig\";\n                } else if (data.dataset_type === \"bigwig\" || data.extra_info === \"no_detail\") {\n                    // All other modes--Dense, Squish, Pack--require data + details.\n                    return false;\n                } else {\n                    return true;\n                }\n            },\n\n            /**\n     * Returns true if entry can be subsetted.\n     */\n            can_subset: function(entry) {\n                // Do not subset entries with a message or data with no detail.\n                if (entry.message || entry.extra_info === \"no_detail\") {\n                    return false;\n                } else if (entry.dataset_type === \"bigwig\") {\n                    // Subset only if data is single-bp resolution.\n                    return entry.data[1][0] - entry.data[0][0] === 1;\n                }\n\n                return true;\n            },\n\n            /**\n     * Set up track to receive tool data.\n     */\n            init_for_tool_data: function() {\n                // Set up track to fetch raw data rather than converted data.\n                this.data_manager.set(\"data_type\", \"raw_data\");\n                this.data_query_wait = 1000;\n                this.dataset_check_type = \"state\";\n\n                // FIXME: this is optional and is disabled for now because it creates\n                // additional converter jobs without a clear benefit because indexing\n                // such a small dataset provides little benefit.\n                //\n                // Set up one-time, post-draw to clear tool execution settings.\n                //\n                /*\n        this.normal_postdraw_actions = this.postdraw_actions;\n        this.postdraw_actions = function(tiles, width, w_scale, clear_after) {\n            var self = this;\n\n            // Do normal postdraw init.\n            self.normal_postdraw_actions(tiles, width, w_scale, clear_after);\n\n            // Tool-execution specific post-draw init:\n\n            // Reset dataset check, wait time.\n            self.dataset_check_type = 'converted_datasets_state';\n            self.data_query_wait = DEFAULT_DATA_QUERY_WAIT;\n\n            // Reset data URL when dataset indexing has completed/when not pending.\n            var ss_deferred = new util.ServerStateDeferred({\n                url: self.dataset_state_url,\n                url_params: {dataset_id : self.dataset.id, hda_ldda: self.dataset.get('hda_ldda')},\n                interval: self.data_query_wait,\n                // Set up deferred to check dataset state until it is not pending.\n                success_fn: function(result) { return result !== \"pending\"; }\n            });\n            $.when(ss_deferred.go()).then(function() {\n                // Dataset is indexed, so use converted data.\n                self.data_manager.set('data_type', 'data');\n            });\n\n            // Reset post-draw actions function.\n            self.postdraw_actions = self.normal_postdraw_actions;\n        };\n        */\n            }\n        });\n\n        var LabelTrack = function(view, container) {\n            Track.call(this, view, container, {\n                resize: false,\n                header: false\n            });\n            this.container_div.addClass(\"label-track\");\n        };\n        extend(LabelTrack.prototype, Track.prototype, {\n            init: function() {\n                // Enable by default because there should always be data when drawing track.\n                this.enabled = true;\n            },\n\n            /**\n     * Additional initialization required before drawing track for the first time.\n     */\n            predraw_init: function() {},\n\n            _draw: function(options) {\n                var view = this.view,\n                    range = view.high - view.low,\n                    tickDistance = Math.floor(Math.pow(10, Math.floor(Math.log(range) / Math.log(10)))),\n                    position = Math.floor(view.low / tickDistance) * tickDistance,\n                    width = this.view.container.width(),\n                    new_div = $(\"<div/>\").addClass(\"label-container\");\n                while (position < view.high) {\n                    var screenPosition = Math.floor((position - view.low) / range * width);\n                    new_div.append(\n                        $(\"<div/>\")\n                            .addClass(\"pos-label\")\n                            .text(util.commatize(position))\n                            .css({\n                                left: screenPosition\n                            })\n                    );\n                    position += tickDistance;\n                }\n                this.content_div.children(\":first\").remove();\n                this.content_div.append(new_div);\n            }\n        });\n\n        // FIXME: Composite tracks have code for showing composite tracks with line tracks and\n        // composite tracks with line + feature tracks. It's probably best if different classes\n        // are created for each type of composite track.\n\n        /**\n * A tiled track composed of multiple other tracks. Composite tracks only work with\n * bigwig data for now.\n */\n        var CompositeTrack = function(view, container, obj_dict) {\n            TiledTrack.call(this, view, container, obj_dict);\n\n            // Init drawables; each drawable is a copy so that config/preferences\n            // are independent of each other. Also init left offset.\n            this.drawables = [];\n            if (\"drawables\" in obj_dict) {\n                var drawable;\n                for (var i = 0; i < obj_dict.drawables.length; i++) {\n                    drawable = obj_dict.drawables[i];\n                    this.drawables[i] = object_from_template(drawable, view, null);\n\n                    // Track's left offset is the max of all tracks.\n                    if (drawable.left_offset > this.left_offset) {\n                        this.left_offset = drawable.left_offset;\n                    }\n                }\n                this.enabled = true;\n            }\n\n            // Set all feature tracks to use Coverage mode.\n            _.each(this.drawables, function(d) {\n                if (d instanceof FeatureTrack || d instanceof ReadTrack) {\n                    d.change_mode(\"Coverage\");\n                }\n            });\n\n            this.update_icons();\n\n            // HACK: needed for saving object for now. Need to generalize get_type() to all Drawables and use\n            // that for object type.\n            this.obj_type = \"CompositeTrack\";\n        };\n\n        extend(CompositeTrack.prototype, TiledTrack.prototype, {\n            display_modes: CONTINUOUS_DATA_MODES,\n\n            build_config_params: function() {\n                return _.union(Drawable.prototype.config_params, [\n                    {\n                        key: \"min_value\",\n                        label: \"Min Value\",\n                        type: \"float\",\n                        default_value: undefined\n                    },\n                    {\n                        key: \"max_value\",\n                        label: \"Max Value\",\n                        type: \"float\",\n                        default_value: undefined\n                    },\n                    {\n                        key: \"mode\",\n                        type: \"string\",\n                        default_value: this.mode,\n                        hidden: true\n                    },\n                    {\n                        key: \"height\",\n                        type: \"int\",\n                        default_value: 30,\n                        hidden: true\n                    }\n                ]);\n            },\n\n            action_icons_def: [\n                // Create composite track from group's tracks.\n                {\n                    name: \"composite_icon\",\n                    title: \"Show individual tracks\",\n                    css_class: \"layers-stack\",\n                    on_click_fn: function(track) {\n                        $(\".tooltip\").remove();\n                        track.show_group();\n                    }\n                }\n            ].concat(TiledTrack.prototype.action_icons_def),\n\n            // HACK: CompositeTrack should inherit from DrawableCollection as well.\n            /**\n     * Returns representation of object in a dictionary for easy saving.\n     * Use from_dict to recreate object.\n     */\n            to_dict: DrawableCollection.prototype.to_dict,\n\n            add_drawable: DrawableCollection.prototype.add_drawable,\n\n            unpack_drawables: DrawableCollection.prototype.unpack_drawables,\n\n            config_onchange: function() {\n                this.set_name(this.config.get_value(\"name\"));\n                this.request_draw({ clear_tile_cache: true });\n            },\n\n            /**\n     * Action to take during resize.\n     */\n            on_resize: function() {\n                // Propogate visible height to other tracks.\n                var visible_height = this.visible_height_px;\n                _.each(this.drawables, function(d) {\n                    d.visible_height_px = visible_height;\n                });\n                Track.prototype.on_resize.call(this);\n            },\n\n            /**\n     * Change mode for all tracks.\n     */\n            change_mode: function(new_mode) {\n                TiledTrack.prototype.change_mode.call(this, new_mode);\n                for (var i = 0; i < this.drawables.length; i++) {\n                    this.drawables[i].change_mode(new_mode);\n                }\n            },\n\n            /**\n     * Initialize component tracks and draw composite track when all components are initialized.\n     */\n            init: function() {\n                // Init components.\n                var init_deferreds = [];\n                for (var i = 0; i < this.drawables.length; i++) {\n                    init_deferreds.push(this.drawables[i].init());\n                }\n\n                // Draw composite when all tracks available.\n                var track = this;\n                $.when.apply($, init_deferreds).then(function() {\n                    track.enabled = true;\n                    track.request_draw();\n                });\n            },\n\n            update_icons: function() {\n                // For now, hide filters and tool.\n                this.action_icons.filters_icon.hide();\n                this.action_icons.tools_icon.hide();\n                this.action_icons.param_space_viz_icon.hide();\n            },\n\n            can_draw: Drawable.prototype.can_draw,\n\n            _get_drawables: function() {\n                return this.drawables;\n            },\n\n            /**\n     * Replace this track with group that includes individual tracks.\n     */\n            show_group: function() {\n                // Create group with individual tracks.\n                var group = new DrawableGroup(this.view, this.container, {\n                        name: this.config.get_value(\"name\")\n                    }),\n                    track;\n                for (var i = 0; i < this.drawables.length; i++) {\n                    track = this.drawables[i];\n                    track.update_icons();\n                    group.add_drawable(track);\n                    track.container = group;\n                    group.content_div.append(track.container_div);\n                }\n\n                // Replace track with group.\n                var index = this.container.replace_drawable(this, group, true);\n                group.request_draw({ clear_tile_cache: true });\n            },\n\n            /**\n     * Actions taken before drawing.\n     */\n            before_draw: function() {\n                // FIXME: this is needed only if there are feature tracks in the composite track.\n                // TiledTrack.prototype.before_draw.call(this);\n\n                //\n                // Set min, max for tracks to be largest min, max.\n                //\n\n                // Get smallest min, biggest max.\n                var min = _.min(\n                        _.map(this.drawables, function(d) {\n                            return d.config.get_value(\"min_value\");\n                        })\n                    ),\n                    max = _.max(\n                        _.map(this.drawables, function(d) {\n                            return d.config.get_value(\"max_value\");\n                        })\n                    );\n\n                this.config.set_value(\"min_value\", min);\n                this.config.set_value(\"max_value\", max);\n\n                // Set all tracks to smallest min, biggest max.\n                _.each(this.drawables, function(d) {\n                    d.config.set_value(\"min_value\", min);\n                    d.config.set_value(\"max_value\", max);\n                });\n            },\n\n            /**\n     * Update minimum, maximum for component tracks.\n     */\n            update_all_min_max: function() {\n                var track = this,\n                    min_value = this.config.get_value(\"min_value\"),\n                    max_value = this.config.get_value(\"max_value\");\n                _.each(this.drawables, function(d) {\n                    d.config.set_value(\"min_value\", min_value);\n                    d.config.set_value(\"max_value\", max_value);\n                });\n                this.request_draw({ clear_tile_cache: true });\n            },\n\n            /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n            postdraw_actions: function(tiles, width, w_scale, clear_after) {\n                // All tiles must be the same height in order to draw LineTracks, so redraw tiles as needed.\n                var max_height = -1,\n                    i;\n                for (i = 0; i < tiles.length; i++) {\n                    var height = tiles[i].html_elt.find(\"canvas\").height();\n                    if (height > max_height) {\n                        max_height = height;\n                    }\n                }\n\n                for (i = 0; i < tiles.length; i++) {\n                    var tile = tiles[i];\n                    if (tile.html_elt.find(\"canvas\").height() !== max_height) {\n                        this.draw_helper(tile.region, w_scale, {\n                            force: true,\n                            height: max_height\n                        });\n                        tile.html_elt.remove();\n                    }\n                }\n\n                // Wrap function so that it can be called without object reference.\n                var track = this,\n                    t = function() {\n                        track.update_all_min_max();\n                    };\n\n                // Add min, max labels.\n                this._add_yaxis_label(\"min\", t);\n                this._add_yaxis_label(\"max\", t);\n            }\n        });\n\n        /**\n * Displays reference genome data.\n */\n        var ReferenceTrack = function(view) {\n            TiledTrack.call(this, view, { content_div: view.top_labeltrack }, { resize: false, header: false });\n\n            // Use offset to ensure that bases at tile edges are drawn.\n            this.left_offset = view.canvas_manager.char_width_px;\n            this.container_div.addClass(\"reference-track\");\n            this.data_url = Galaxy.root + \"api/genomes/\" + this.view.dbkey;\n            this.data_url_extra_params = { reference: true };\n            this.data_manager = new visualization.GenomeReferenceDataManager({\n                data_url: this.data_url,\n                can_subset: this.can_subset\n            });\n            this.hide_contents();\n        };\n        extend(ReferenceTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n            build_config_params: function() {\n                return _.union(Drawable.prototype.config_params, [\n                    {\n                        key: \"height\",\n                        type: \"int\",\n                        default_value: 13,\n                        hidden: true\n                    }\n                ]);\n            },\n\n            init: function() {\n                this.data_manager.clear();\n                // Enable by default because there should always be data when drawing track.\n                this.enabled = true;\n            },\n\n            /**\n     * Additional initialization required before drawing track for the first time.\n     */\n            predraw_init: function() {},\n\n            can_draw: Drawable.prototype.can_draw,\n\n            /**\n     * Draws and shows tile if reference data can be displayed; otherwise track is hidden.\n     */\n            draw_helper: function(region, w_scale, options) {\n                var cur_visible = this.tiles_div.is(\":visible\"),\n                    new_visible,\n                    tile = null;\n                if (w_scale > this.view.canvas_manager.char_width_px) {\n                    this.tiles_div.show();\n                    new_visible = true;\n                    tile = TiledTrack.prototype.draw_helper.call(this, region, w_scale, options);\n                } else {\n                    new_visible = false;\n                    this.tiles_div.hide();\n                }\n\n                // NOTE: viewport resizing conceptually belongs in postdraw_actions(), but currently\n                // postdraw_actions is not called when reference track not shown due to no tiles. If\n                // it is moved to postdraw_actions, resize must be called each time because cannot\n                // easily detect showing/hiding.\n\n                // If showing or hiding reference track, resize viewport.\n                if (cur_visible !== new_visible) {\n                    this.view.resize_viewport();\n                }\n\n                return tile;\n            },\n\n            can_subset: function(entry) {\n                return true;\n            },\n\n            /**\n     * Draw ReferenceTrack tile.\n     */\n            draw_tile: function(data, ctx, mode, region, w_scale) {\n                // Try to subset data.\n                var subset = this.data_manager.subset_entry(data, region),\n                    seq_data = subset.data;\n\n                // Draw sequence data.\n                var canvas = ctx.canvas;\n                ctx.font = ctx.canvas.manager.default_font;\n                ctx.textAlign = \"center\";\n                for (var c = 0, str_len = seq_data.length; c < str_len; c++) {\n                    ctx.fillStyle = this.view.get_base_color(seq_data[c]);\n                    ctx.fillText(seq_data[c], Math.floor(c * w_scale), 10);\n                }\n                return new Tile(this, region, w_scale, canvas, subset);\n            }\n        });\n\n        /**\n * Track displays continuous/numerical data. Track expects position data in 1-based format, i.e. wiggle format.\n */\n        var LineTrack = function(view, container, obj_dict) {\n            this.mode = \"Histogram\";\n            TiledTrack.call(this, view, container, obj_dict);\n            // Need left offset for drawing overlap near tile boundaries.\n            this.left_offset = 30;\n\n            // If server has byte-range support, use BBI data manager to read directly from the BBI file.\n            // FIXME: there should be a flag to wait for this check to complete before loading the track.\n            var self = this;\n            $.when(supportsByteRanges(Galaxy.root + \"datasets/\" + this.dataset.id + \"/display\")).then(function(\n                supportsByteRanges\n            ) {\n                if (supportsByteRanges) {\n                    self.data_manager = new bbi.BBIDataManager({\n                        dataset: self.dataset\n                    });\n                }\n            });\n        };\n\n        extend(LineTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n            display_modes: CONTINUOUS_DATA_MODES,\n\n            build_config_params: function() {\n                return _.union(Drawable.prototype.config_params, [\n                    { key: \"color\", label: \"Color\", type: \"color\" },\n                    {\n                        key: \"min_value\",\n                        label: \"Min Value\",\n                        type: \"float\",\n                        default_value: undefined\n                    },\n                    {\n                        key: \"max_value\",\n                        label: \"Max Value\",\n                        type: \"float\",\n                        default_value: undefined\n                    },\n                    {\n                        key: \"mode\",\n                        type: \"string\",\n                        default_value: this.mode,\n                        hidden: true\n                    },\n                    {\n                        key: \"height\",\n                        type: \"int\",\n                        default_value: 30,\n                        hidden: true\n                    }\n                ]);\n            },\n\n            config_onchange: function() {\n                this.set_name(this.config.get_value(\"name\"));\n                this.request_draw({ clear_tile_cache: true });\n            },\n\n            /**\n     * Actions to be taken before drawing.\n     */\n            // FIXME: can the default behavior be used; right now it breaks during resize.\n            before_draw: function() {},\n\n            /**\n     * Draw track tile.\n     */\n            draw_tile: function(result, ctx, mode, region, w_scale) {\n                return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n            },\n\n            /**\n     * Subset data only if data is at single-base pair resolution.\n     */\n            can_subset: function(entry) {\n                return entry.data[1][0] - entry.data[0][0] === 1;\n            },\n\n            /**\n     * Add min, max labels.\n     */\n            postdraw_actions: function(tiles, width, w_scale, clear_after) {\n                // Add min, max labels.\n                this._add_yaxis_label(\"max\");\n                this._add_yaxis_label(\"min\");\n            }\n        });\n\n        /**\n * Diagonal heatmap for showing interactions data.\n */\n        var DiagonalHeatmapTrack = function(view, container, obj_dict) {\n            this.mode = \"Heatmap\";\n            TiledTrack.call(this, view, container, obj_dict);\n        };\n\n        extend(DiagonalHeatmapTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n            display_modes: [\"Heatmap\"],\n\n            build_config_params: function() {\n                return _.union(Drawable.prototype.config_params, [\n                    {\n                        key: \"pos_color\",\n                        label: \"Positive Color\",\n                        type: \"color\",\n                        default_value: \"#FF8C00\"\n                    },\n                    {\n                        key: \"neg_color\",\n                        label: \"Negative Color\",\n                        type: \"color\",\n                        default_value: \"#4169E1\"\n                    },\n                    {\n                        key: \"min_value\",\n                        label: \"Min Value\",\n                        type: \"int\",\n                        default_value: undefined\n                    },\n                    {\n                        key: \"max_value\",\n                        label: \"Max Value\",\n                        type: \"int\",\n                        default_value: undefined\n                    },\n                    {\n                        key: \"mode\",\n                        type: \"string\",\n                        default_value: this.mode,\n                        hidden: true\n                    },\n                    {\n                        key: \"height\",\n                        type: \"int\",\n                        default_value: 500,\n                        hidden: true\n                    }\n                ]);\n            },\n\n            config_onchange: function() {\n                this.set_name(this.config.get_value(\"name\"));\n                this.request_draw({ clear_tile_cache: true });\n            },\n\n            /**\n     * Additional initialization required before drawing track for the first time.\n     */\n            predraw_init: function() {\n                var track = this;\n                return $.getJSON(\n                    track.dataset.url(),\n                    {\n                        data_type: \"data\",\n                        stats: true,\n                        chrom: track.view.chrom,\n                        low: 0,\n                        high: track.view.max_high,\n                        hda_ldda: track.dataset.get(\"hda_ldda\")\n                    },\n                    function(result) {\n                        var data = result.data;\n                    }\n                );\n            },\n\n            /**\n     * Draw tile.\n     */\n            draw_tile: function(result, ctx, mode, region, w_scale) {\n                // Paint onto canvas.\n                var canvas = ctx.canvas,\n                    painter = new painters.DiagonalHeatmapPainter(\n                        result.data,\n                        region.get(\"start\"),\n                        region.get(\"end\"),\n                        this.config.to_key_value_dict(),\n                        mode\n                    );\n                painter.draw(ctx, canvas.width, canvas.height, w_scale);\n\n                return new Tile(this, region, w_scale, canvas, result.data);\n            }\n        });\n\n        /**\n * A track that displays features/regions. Track expects position data in BED format, i.e. 0-based, half-open.\n */\n        var FeatureTrack = function(view, container, obj_dict) {\n            TiledTrack.call(this, view, container, obj_dict);\n            this.container_div.addClass(\"feature-track\");\n            this.summary_draw_height = 30;\n            this.slotters = {};\n            this.start_end_dct = {};\n            this.left_offset = 200;\n\n            // this.painter = painters.LinkedFeaturePainter;\n            this.set_painter_from_config();\n        };\n        extend(FeatureTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n            display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n            build_config_params: function() {\n                return _.union(Drawable.prototype.config_params, [\n                    {\n                        key: \"block_color\",\n                        label: \"Block color\",\n                        type: \"color\"\n                    },\n                    {\n                        key: \"reverse_strand_color\",\n                        label: \"Antisense strand color\",\n                        type: \"color\"\n                    },\n                    {\n                        key: \"label_color\",\n                        label: \"Label color\",\n                        type: \"color\",\n                        default_value: \"black\"\n                    },\n                    {\n                        key: \"show_counts\",\n                        label: \"Show summary counts\",\n                        type: \"bool\",\n                        default_value: true,\n                        help: \"Show the number of items in each bin when drawing summary histogram\"\n                    },\n                    {\n                        key: \"min_value\",\n                        label: \"Histogram minimum\",\n                        type: \"float\",\n                        default_value: undefined,\n                        help: \"clear value to set automatically\"\n                    },\n                    {\n                        key: \"max_value\",\n                        label: \"Histogram maximum\",\n                        type: \"float\",\n                        default_value: undefined,\n                        help: \"clear value to set automatically\"\n                    },\n                    {\n                        key: \"connector_style\",\n                        label: \"Connector style\",\n                        type: \"select\",\n                        default_value: \"fishbones\",\n                        options: [\n                            {\n                                label: \"Line with arrows\",\n                                value: \"fishbone\"\n                            },\n                            { label: \"Arcs\", value: \"arcs\" }\n                        ]\n                    },\n                    {\n                        key: \"mode\",\n                        type: \"string\",\n                        default_value: this.mode,\n                        hidden: true\n                    },\n                    {\n                        key: \"height\",\n                        type: \"int\",\n                        default_value: 0,\n                        hidden: true\n                    }\n                ]);\n            },\n\n            config_onchange: function() {\n                this.set_name(this.config.get_value(\"name\"));\n                this.set_painter_from_config();\n                this.request_draw({ clear_tile_cache: true });\n            },\n\n            set_painter_from_config: function() {\n                if (this.config.get_value(\"connector_style\") === \"arcs\") {\n                    this.painter = painters.ArcLinkedFeaturePainter;\n                } else {\n                    this.painter = painters.LinkedFeaturePainter;\n                }\n            },\n\n            /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n            postdraw_actions: function(tiles, width, w_scale, clear_after) {\n                TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\n                var track = this,\n                    i,\n                    line_track_tiles = _.filter(tiles, function(t) {\n                        return t instanceof LineTrackTile;\n                    });\n\n                //\n                // Finish drawing of features that span multiple tiles. Features that span multiple tiles\n                // are labeled incomplete on the tile level because they cannot be completely drawn.\n                //\n                if (line_track_tiles.length === 0) {\n                    // Gather incomplete features together.\n                    var all_incomplete_features = {};\n                    _.each(_.pluck(tiles, \"incomplete_features\"), function(inc_features) {\n                        _.each(inc_features, function(feature) {\n                            all_incomplete_features[feature[0]] = feature;\n                        });\n                    });\n\n                    // Draw incomplete features on each tile.\n                    var self = this;\n                    _.each(tiles, function(tile) {\n                        // Remove features already drawn on tile originally.\n                        var tile_incomplete_features = _.omit(\n                            all_incomplete_features,\n                            _.map(tile.incomplete_features, function(f) {\n                                return f[0];\n                            })\n                        );\n\n                        // Remove features already drawn on tile in past postdraw actions.\n                        tile_incomplete_features = _.omit(\n                            tile_incomplete_features,\n                            _.keys(tile.other_tiles_features_drawn)\n                        );\n\n                        // Draw tile's incomplete features.\n                        if (_.size(tile_incomplete_features) !== 0) {\n                            // To draw incomplete features, create new canvas, copy original canvas/tile onto new\n                            // canvas, and then draw incomplete features on the new canvas.\n                            var features = {\n                                    data: _.values(tile_incomplete_features)\n                                },\n                                new_canvas = self.view.canvas_manager.new_canvas(),\n                                new_canvas_ctx = new_canvas.getContext(\"2d\");\n                            new_canvas.height = Math.max(\n                                tile.canvas.height,\n                                self.get_canvas_height(features, tile.mode, tile.w_scale, 100)\n                            );\n                            new_canvas.width = tile.canvas.width;\n                            new_canvas_ctx.drawImage(tile.canvas, 0, 0);\n                            new_canvas_ctx.translate(track.left_offset, 0);\n                            var new_tile = self.draw_tile(\n                                features,\n                                new_canvas_ctx,\n                                tile.mode,\n                                tile.region,\n                                tile.w_scale,\n                                tile.seq_data\n                            );\n                            $(tile.canvas).replaceWith($(new_tile.canvas));\n                            tile.canvas = new_canvas;\n                            _.extend(tile.other_tiles_features_drawn, all_incomplete_features);\n                        }\n                    });\n                }\n\n                // If mode is Coverage and tiles do not share max, redraw tiles as necessary using new max.\n                /*\n        This code isn't used right now because Coverage mode uses predefined max in preferences.\n        if (track.mode === \"Coverage\") {\n            // Get global max.\n            var global_max = -1;\n            for (i = 0; i < tiles.length; i++) {\n                var cur_max = tiles[i].max_val;\n                if (cur_max > global_max) {\n                    global_max = cur_max;\n                }\n            }\n\n            for (i = 0; i < tiles.length; i++) {\n                var tile = tiles[i];\n                if (tile.max_val !== global_max) {\n                    tile.html_elt.remove();\n                    track.draw_helper(tile.index, w_scale, { more_tile_data: { force: true, max: global_max } } );\n                }\n            }\n        }\n        */\n\n                //\n                // Update filter attributes, UI.\n                //\n\n                // Update filtering UI.\n                if (track.filters_manager) {\n                    var filters = track.filters_manager.filters,\n                        f;\n                    for (f = 0; f < filters.length; f++) {\n                        filters[f].update_ui_elt();\n                    }\n\n                    // Determine if filters are available; this is based on the tiles' data.\n                    // Criteria for filter to be available: (a) it is applicable to tile data and (b) filter min != filter max.\n                    var filters_available = false,\n                        example_feature,\n                        filter;\n                    for (i = 0; i < tiles.length; i++) {\n                        if (tiles[i].data.length) {\n                            example_feature = tiles[i].data[0];\n                            for (f = 0; f < filters.length; f++) {\n                                filter = filters[f];\n                                if (filter.applies_to(example_feature) && filter.min !== filter.max) {\n                                    filters_available = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n\n                    // If filter availability changed, hide filter div if necessary and update menu.\n                    if (track.filters_available !== filters_available) {\n                        track.filters_available = filters_available;\n                        if (!track.filters_available) {\n                            track.filters_manager.hide();\n                        }\n                        track.update_icons();\n                    }\n                }\n\n                //\n                // If not all features slotted, show icon for showing more rows (slots).\n                //\n                if (tiles[0] instanceof FeatureTrackTile) {\n                    var all_slotted = true;\n                    for (i = 0; i < tiles.length; i++) {\n                        if (!tiles[i].all_slotted) {\n                            all_slotted = false;\n                            break;\n                        }\n                    }\n                    this.action_icons.show_more_rows_icon.toggle(!all_slotted);\n                } else {\n                    this.action_icons.show_more_rows_icon.hide();\n                }\n            },\n\n            /**\n     * Update track interface to show display mode being used.\n     */\n            update_auto_mode: function(mode) {\n                if (this.mode === \"Auto\") {\n                    if (mode === \"no_detail\") {\n                        mode = \"feature spans\";\n                    }\n                    this.action_icons.mode_icon.attr(\"title\", \"Set display mode (now: Auto/\" + mode + \")\");\n                }\n            },\n\n            /**\n     * Place features in slots for drawing (i.e. pack features).\n     * this.slotters[level] is created in this method. this.slotters[level]\n     * is a Slotter object. Returns the number of slots used to pack features.\n     */\n            incremental_slots: function(level, features, mode) {\n                // Get/create incremental slots for level. If display mode changed,\n                // need to create new slots.\n\n                var dummy_context = this.view.canvas_manager.dummy_context,\n                    slotter = this.slotters[level];\n                if (!slotter || slotter.mode !== mode) {\n                    slotter = new slotting.FeatureSlotter(level, mode, MAX_FEATURE_DEPTH, function(x) {\n                        return dummy_context.measureText(x);\n                    });\n                    this.slotters[level] = slotter;\n                }\n\n                return slotter.slot_features(features);\n            },\n\n            /**\n     * Returns appropriate display mode based on data.\n     */\n            get_mode: function(data) {\n                var mode;\n                // HACK: use no_detail mode track is in overview to prevent overview from being too large.\n                if (data.extra_info === \"no_detail\" || this.is_overview) {\n                    mode = \"no_detail\";\n                } else {\n                    // Choose b/t Squish and Pack.\n                    // Proxy measures for using Squish:\n                    // (a) error message re: limiting number of features shown;\n                    // (b) X number of features shown;\n                    // (c) size of view shown.\n                    // TODO: cannot use (a) and (b) because it requires coordinating mode across tiles;\n                    // fix this so that tiles are redrawn as necessary to use the same mode.\n                    //if ( (result.message && result.message.match(/^Only the first [\\d]+/)) ||\n                    //     (result.data && result.data.length > 2000) ||\n                    //var data = result.data;\n                    // if ( (data.length && data.length < 4) ||\n                    //      (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) ) {\n                    if (this.view.high - this.view.low > MIN_SQUISH_VIEW_WIDTH) {\n                        mode = \"Squish\";\n                    } else {\n                        mode = \"Pack\";\n                    }\n                }\n                return mode;\n            },\n\n            /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n            get_canvas_height: function(result, mode, w_scale, canvas_width) {\n                if (mode === \"Coverage\" || result.dataset_type === \"bigwig\") {\n                    return this.summary_draw_height;\n                } else {\n                    // All other modes require slotting.\n                    var rows_required = this.incremental_slots(w_scale, result.data, mode);\n                    // HACK: use dummy painter to get required height. Painter should be extended so that get_required_height\n                    // works as a static function.\n                    var dummy_painter = new this.painter(null, null, null, this.config.to_key_value_dict(), mode);\n                    return Math.max(this.min_height_px, dummy_painter.get_required_height(rows_required, canvas_width));\n                }\n            },\n\n            /**\n     * Draw FeatureTrack tile.\n     * @param result result from server\n     * @param cxt canvas context to draw on\n     * @param mode mode to draw in\n     * @param region region to draw on tile\n     * @param w_scale pixels per base\n     * @param ref_seq reference sequence data\n     * @param cur_tile true if drawing is occurring on a currently visible tile.\n     */\n            draw_tile: function(result, ctx, mode, region, w_scale, ref_seq, cur_tile) {\n                var track = this,\n                    canvas = ctx.canvas,\n                    tile_low = region.get(\"start\"),\n                    tile_high = region.get(\"end\"),\n                    left_offset = this.left_offset;\n\n                // If data is line track data, draw line track tile.\n                if (result.dataset_type === \"bigwig\") {\n                    return this._draw_line_track_tile(result, ctx, mode, region, w_scale);\n                }\n\n                // Handle row-by-row tracks\n\n                // Preprocessing: filter features and determine whether all unfiltered features have been slotted.\n                var filtered = [],\n                    slots = this.slotters[w_scale].slots,\n                    all_slotted = true;\n                if (result.data) {\n                    var filters = this.filters_manager.filters;\n                    for (var i = 0, len = result.data.length; i < len; i++) {\n                        var feature = result.data[i];\n                        var hide_feature = false;\n                        var filter;\n                        for (var f = 0, flen = filters.length; f < flen; f++) {\n                            filter = filters[f];\n                            filter.update_attrs(feature);\n                            if (!filter.keep(feature)) {\n                                hide_feature = true;\n                                break;\n                            }\n                        }\n                        if (!hide_feature) {\n                            // Feature visible.\n                            filtered.push(feature);\n                            // Set flag if not slotted.\n                            if (!(feature[0] in slots)) {\n                                all_slotted = false;\n                            }\n                        }\n                    }\n                }\n\n                // Create painter.\n                var filter_alpha_scaler = this.filters_manager.alpha_filter\n                        ? new FilterScaler(this.filters_manager.alpha_filter)\n                        : null,\n                    filter_height_scaler = this.filters_manager.height_filter\n                        ? new FilterScaler(this.filters_manager.height_filter)\n                        : null,\n                    painter = new this.painter(\n                        filtered,\n                        tile_low,\n                        tile_high,\n                        this.config.to_key_value_dict(),\n                        mode,\n                        filter_alpha_scaler,\n                        filter_height_scaler,\n                        // HACK: ref_seq only be defined for ReadTracks, and only the ReadPainter accepts that argument\n                        ref_seq,\n                        // Only the ReadPainer will use this function\n                        function(b) {\n                            return track.view.get_base_color(b);\n                        }\n                    );\n                var feature_mapper = null;\n\n                ctx.fillStyle = this.config.get_value(\"block_color\");\n                ctx.font = ctx.canvas.manager.default_font;\n                ctx.textAlign = \"right\";\n\n                if (result.data) {\n                    // Draw features.\n                    var draw_results = painter.draw(ctx, canvas.width, canvas.height, w_scale, slots);\n                    feature_mapper = draw_results.feature_mapper;\n                    incomplete_features = draw_results.incomplete_features;\n                    feature_mapper.translation = -left_offset;\n                }\n\n                // If not drawing on current tile, create new tile.\n                if (!cur_tile) {\n                    return new FeatureTrackTile(\n                        track,\n                        region,\n                        w_scale,\n                        canvas,\n                        result.data,\n                        mode,\n                        result.message,\n                        all_slotted,\n                        feature_mapper,\n                        incomplete_features,\n                        ref_seq\n                    );\n                }\n            }\n        });\n\n        /**\n * Displays variant data.\n */\n        var VariantTrack = function(view, container, obj_dict) {\n            TiledTrack.call(this, view, container, obj_dict);\n            this.painter = painters.VariantPainter;\n            this.summary_draw_height = 30;\n\n            // Maximum resolution is ~45 pixels/base, so use this size left offset to ensure that full\n            // variant is drawn when variant is at start of tile.\n            this.left_offset = 30;\n        };\n\n        extend(VariantTrack.prototype, Drawable.prototype, TiledTrack.prototype, {\n            display_modes: [\"Auto\", \"Coverage\", \"Dense\", \"Squish\", \"Pack\"],\n\n            build_config_params: function() {\n                return _.union(Drawable.prototype.config_params, [\n                    {\n                        key: \"color\",\n                        label: \"Histogram color\",\n                        type: \"color\"\n                    },\n                    {\n                        key: \"show_sample_data\",\n                        label: \"Show sample data\",\n                        type: \"bool\",\n                        default_value: true\n                    },\n                    {\n                        key: \"show_labels\",\n                        label: \"Show summary and sample labels\",\n                        type: \"bool\",\n                        default_value: true\n                    },\n                    {\n                        key: \"summary_height\",\n                        label: \"Locus summary height\",\n                        type: \"float\",\n                        default_value: 20\n                    },\n                    {\n                        key: \"mode\",\n                        type: \"string\",\n                        default_value: this.mode,\n                        hidden: true\n                    },\n                    {\n                        key: \"height\",\n                        type: \"int\",\n                        default_value: 0,\n                        hidden: true\n                    }\n                ]);\n            },\n\n            config_onchange: function() {\n                this.set_name(this.config.get_value(\"name\"));\n                this.request_draw({ clear_tile_cache: true });\n            },\n\n            /**\n     * Draw tile.\n     */\n            draw_tile: function(result, ctx, mode, region, w_scale) {\n                // Data could be coverage data or variant data.\n                if (result.dataset_type === \"bigwig\") {\n                    return this._draw_line_track_tile(result, ctx, \"Histogram\", region, w_scale);\n                } else {\n                    // result.dataset_type === 'variant'\n                    var view = this.view,\n                        painter = new this.painter(\n                            result.data,\n                            region.get(\"start\"),\n                            region.get(\"end\"),\n                            this.config.to_key_value_dict(),\n                            mode,\n                            function(b) {\n                                return view.get_base_color(b);\n                            }\n                        );\n                    painter.draw(ctx, ctx.canvas.width, ctx.canvas.height, w_scale);\n                    return new Tile(this, region, w_scale, ctx.canvas, result.data);\n                }\n            },\n\n            /**\n     * Returns canvas height needed to display data; return value is an integer that denotes the\n     * number of pixels required.\n     */\n            get_canvas_height: function(result, mode, w_scale, canvas_width) {\n                if (result.dataset_type === \"bigwig\") {\n                    return this.summary_draw_height;\n                } else {\n                    // HACK: sample_names is not be defined when dataset definition is fetched before\n                    // dataset is complete (as is done when running tools). In that case, fall back on\n                    // # of samples in data. This can be fixed by re-requesting dataset definition\n                    // in init.\n                    var num_samples = this.dataset.get_metadata(\"sample_names\")\n                        ? this.dataset.get_metadata(\"sample_names\").length\n                        : 0;\n                    if (num_samples === 0 && result.data.length !== 0) {\n                        // Sample data is separated by commas, so this computes # of samples:\n                        num_samples = result.data[0][7].match(/,/g);\n                        if (num_samples === null) {\n                            num_samples = 1;\n                        } else {\n                            num_samples = num_samples.length + 1;\n                        }\n                    }\n\n                    var dummy_painter = new this.painter(null, null, null, this.config.to_key_value_dict(), mode);\n                    return dummy_painter.get_required_height(num_samples);\n                }\n            },\n\n            /**\n     * Additional initialization required before drawing track for the first time.\n     */\n            predraw_init: function() {\n                var deferreds = [Track.prototype.predraw_init.call(this)];\n                // FIXME: updating dataset metadata is only needed for visual analysis. Can\n                // this be moved somewhere else?\n                if (!this.dataset.get_metadata(\"sample_names\")) {\n                    deferreds.push(this.dataset.fetch());\n                }\n                return deferreds;\n            },\n\n            /**\n     * Actions to be taken after draw has been completed. Draw is completed when all tiles have been\n     * drawn/fetched and shown.\n     */\n            postdraw_actions: function(tiles, width, w_scale, clear_after) {\n                TiledTrack.prototype.postdraw_actions.call(this, tiles, width, w_scale, clear_after);\n\n                var line_track_tiles = _.filter(tiles, function(t) {\n                    return t instanceof LineTrackTile;\n                });\n\n                // Add summary/sample labels if needed and not already included.\n                var sample_names = this.dataset.get_metadata(\"sample_names\");\n                if (\n                    line_track_tiles.length === 0 &&\n                    this.config.get_value(\"show_labels\") &&\n                    sample_names &&\n                    sample_names.length > 1\n                ) {\n                    var font_size;\n\n                    // Add and/or style labels.\n                    if (this.container_div.find(\".yaxislabel.variant\").length === 0) {\n                        // Add summary and sample labels.\n\n                        // Add summary label to middle of summary area.\n                        font_size = this.config.get_value(\"summary_height\") / 2;\n                        this.tiles_div.prepend(\n                            $(\"<div/>\")\n                                .text(\"Summary\")\n                                .addClass(\"yaxislabel variant top\")\n                                .css({\n                                    \"font-size\": font_size + \"px\",\n                                    top: (this.config.get_value(\"summary_height\") - font_size) / 2 + \"px\"\n                                })\n                        );\n\n                        // Show sample labels.\n                        if (this.config.get_value(\"show_sample_data\")) {\n                            var samples_div_html = sample_names.join(\"<br/>\");\n\n                            this.tiles_div.prepend(\n                                $(\"<div/>\")\n                                    .html(samples_div_html)\n                                    .addClass(\"yaxislabel variant top sample\")\n                                    .css({\n                                        top: this.config.get_value(\"summary_height\")\n                                    })\n                            );\n                        }\n                    }\n\n                    // Style labels.\n\n                    // Match sample font size to mode.\n                    font_size = (this.mode === \"Squish\" ? 5 : 10) + \"px\";\n                    $(this.tiles_div)\n                        .find(\".sample\")\n                        .css({\n                            \"font-size\": font_size,\n                            \"line-height\": font_size\n                        });\n                    // Color labels to preference color.\n                    $(this.tiles_div)\n                        .find(\".yaxislabel\")\n                        .css(\"color\", this.config.get_value(\"label_color\"));\n                } else {\n                    // Remove all labels.\n                    this.container_div.find(\".yaxislabel.variant\").remove();\n                }\n            }\n        });\n\n        /**\n * Track that displays mapped reads. Track expects position data in 1-based, closed format, i.e. SAM/BAM format.\n */\n        var ReadTrack = function(view, container, obj_dict) {\n            FeatureTrack.call(this, view, container, obj_dict);\n            this.painter = painters.ReadPainter;\n            this.update_icons();\n        };\n\n        extend(ReadTrack.prototype, Drawable.prototype, TiledTrack.prototype, FeatureTrack.prototype, {\n            build_config_params: function() {\n                return _.union(Drawable.prototype.config_params, [\n                    {\n                        key: \"block_color\",\n                        label: \"Histogram color\",\n                        type: \"color\"\n                    },\n                    {\n                        key: \"detail_block_color\",\n                        label: \"Sense strand block color\",\n                        type: \"color\",\n                        default_value: \"#AAAAAA\"\n                    },\n                    {\n                        key: \"reverse_strand_color\",\n                        label: \"Antisense strand block color\",\n                        type: \"color\",\n                        default_value: \"#DDDDDD\"\n                    },\n                    {\n                        key: \"label_color\",\n                        label: \"Label color\",\n                        type: \"color\",\n                        default_value: \"black\"\n                    },\n                    {\n                        key: \"show_insertions\",\n                        label: \"Show insertions\",\n                        type: \"bool\",\n                        default_value: false\n                    },\n                    {\n                        key: \"show_differences\",\n                        label: \"Show differences only\",\n                        type: \"bool\",\n                        default_value: true\n                    },\n                    {\n                        key: \"show_counts\",\n                        label: \"Show summary counts\",\n                        type: \"bool\",\n                        default_value: true\n                    },\n                    {\n                        key: \"mode\",\n                        type: \"string\",\n                        default_value: this.mode,\n                        hidden: true\n                    },\n                    {\n                        key: \"min_value\",\n                        label: \"Histogram minimum\",\n                        type: \"float\",\n                        default_value: undefined,\n                        help: \"clear value to set automatically\"\n                    },\n                    {\n                        key: \"max_value\",\n                        label: \"Histogram maximum\",\n                        type: \"float\",\n                        default_value: undefined,\n                        help: \"clear value to set automatically\"\n                    },\n                    {\n                        key: \"height\",\n                        type: \"int\",\n                        default_value: 0,\n                        hidden: true\n                    }\n                ]);\n            },\n\n            config_onchange: function() {\n                this.set_name(this.config.get_value(\"name\"));\n                this.request_draw({ clear_tile_cache: true });\n            }\n        });\n\n        /**\n * Objects that can be added to a view.\n */\n        var addable_objects = {\n            CompositeTrack: CompositeTrack,\n            DrawableGroup: DrawableGroup,\n            DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n            FeatureTrack: FeatureTrack,\n            LineTrack: LineTrack,\n            ReadTrack: ReadTrack,\n            VariantTrack: VariantTrack,\n            // For backward compatibility, map vcf track to variant.\n            VcfTrack: VariantTrack\n        };\n\n        /**\n * Create new object from a template. A template can be either an object dictionary or an\n * object itself.\n */\n        var object_from_template = function(template, view, container) {\n            if (\"copy\" in template) {\n                // Template is an object.\n                return template.copy(container);\n            } else {\n                // Template is a dictionary.\n                var drawable_type = template.obj_type;\n                // For backward compatibility:\n                if (!drawable_type) {\n                    drawable_type = template.track_type;\n                }\n                return new addable_objects[drawable_type](view, container, template);\n            }\n        };\n\n        return {\n            TracksterView: TracksterView,\n            DrawableGroup: DrawableGroup,\n            LineTrack: LineTrack,\n            FeatureTrack: FeatureTrack,\n            DiagonalHeatmapTrack: DiagonalHeatmapTrack,\n            ReadTrack: ReadTrack,\n            VariantTrack: VariantTrack,\n            CompositeTrack: CompositeTrack,\n            object_from_template: object_from_template\n        };\n    }\n);\n"]}