{"version":3,"sources":["viz/phyloviz.js"],"names":["define","d3","data_mod","mod_icon_btn","leafHeight","layout","node","maxDepth","vertSeparation","parent","dist","children","defaultDist","y0","maxTextWidth","depthSeparation","forEach","sumChildVertSeparation","child","x0","length","self","y","this","hierarchy","leafIndex","value","layoutMode","inputLeafHeight","mode","layoutAngle","angle","isNaN","height","separation","links","nodes","tree","d","i","toString","call","_nodes","window","numLeaves","_d","depth","UserMenuBase","Backbone","View","extend","className","isAcceptableValue","fieldName","$inputKey","min","max","isNumeric","val","parseFloat","attr","replace","n","isFinite","alert","hasIllegalJsonCharacters","search","Visualization","type","title","scaleFactor","translate","fontSize","selectedNode","nodeAttrChangedTime","initialize","options","set","Dataset","id","dataset_id","toggle","_children","toggleAll","getData","save","root","cleanTree","config","jQuery","show_message","attributes","dataType","$","ajax","success","url","hide_modal","data","JSON","stringify","res","PhylovizLinearView","stdInit","nodeRadius","on","updateAndRender","vis","select","source","renderLinks","model","duration","link","pos0","target","selectAll","linkEnter","pos1","pos2","enter","insert","linkExit","append","calcalateLinePos","transition","_selected","remove","classed","annotation","name","addTooltips","__data__","bootstrap","Math","round","placement","trigger","PhyloTreeLayout","diagonal","svg","projection","x","renderNodes","get","nodeEnter","style","event","stopPropagation","nodeUpdate","selectNode","nodeExit","PhylovizView","MIN_SCALE","resize","width","defaults","phyloTree","text","zoomFunc","scaleExtent","behavior","MAX_SCALE","settingsMenu","nodeSelectionView","zoomAndPan","mainSVG","boundingRect","MAX_DISPLACEMENT","layoutOptions","render","PhyloTree","zoom","scale","zoomParams","translateParams","NodeSelectionView","zoomStatement","setTimeout","empty","translateStatement","translationCoor","margins","getJSON","tree_index","treeIndex","data_type","packedJson","HeaderButtons","phylovizView","initNavBtns","initRightHeaderBtns","on_click","icon_class","nexSelected","split","show","reloadViz","tooltip_config","off","SettingsMenu","create_icon_buttons_menu","updateUI","resetToDefaults","open","rightMenu","$el","each","navMenu","UI","saveChanges","updateNodes","inputs","cancelChanges","isEnabled","apply","checked","key","$input","enableEdit","searchTerm","condition","searchTree","fn","attrVal","toggleUI","is","valuesOfConcern","enable","hide","Date","PhyloVizSearch","searchConditionVal","toLowerCase","indexOf"],"mappings":"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","file":"../../scripts/viz/phyloviz.js","sourcesContent":["define([\"libs/d3\", \"viz/visualization\", \"mvc/dataset/data\", \"mvc/ui/icon-button\"], function(\n    d3,\n    visualization_mod,\n    data_mod,\n    mod_icon_btn\n) {\n    /**\n * Base class of any menus that takes in user interaction. Contains checking methods.\n */\n    var UserMenuBase = Backbone.View.extend({\n        className: \"UserMenuBase\",\n\n        /**\n     * Check if an input value is a number and falls within max min.\n     */\n        isAcceptableValue: function($inputKey, min, max) {\n            //TODO: use better feedback than alert\n            var value = $inputKey.val(),\n                fieldName = $inputKey.attr(\"displayLabel\") || $inputKey.attr(\"id\").replace(\"phyloViz\", \"\");\n\n            function isNumeric(n) {\n                return !isNaN(parseFloat(n)) && isFinite(n);\n            }\n\n            if (!isNumeric(value)) {\n                alert(fieldName + \" is not a number!\");\n                return false;\n            }\n\n            if (value > max) {\n                alert(fieldName + \" is too large.\");\n                return false;\n            } else if (value < min) {\n                alert(fieldName + \" is too small.\");\n                return false;\n            }\n            return true;\n        },\n\n        /**\n     * Check if any user string inputs has illegal characters that json cannot accept\n     */\n        hasIllegalJsonCharacters: function($inputKey) {\n            if ($inputKey.val().search(/\"|'|\\\\/) !== -1) {\n                alert(\n                    \"Named fields cannot contain these illegal characters: \" +\n                        \"double quote(\\\"), single guote('), or back slash(\\\\). \"\n                );\n                return true;\n            }\n            return false;\n        }\n    });\n\n    /**\n * -- Custom Layout call for phyloViz to suit the needs of a phylogenetic tree.\n * -- Specifically: 1) Nodes have a display display of (= evo dist X depth separation) from their parent\n *                  2) Nodes must appear in other after they have expand and contracted\n */\n    function PhyloTreeLayout() {\n        var self = this,\n            hierarchy = d3.layout\n                .hierarchy()\n                .sort(null)\n                .value(null),\n            height = 360, // ! represents both the layout angle and the height of the layout, in px\n            layoutMode = \"Linear\",\n            leafHeight = 18, // height of each individual leaf node\n            depthSeparation = 200, // separation between nodes of different depth, in px\n            leafIndex = 0, // change to recurssive call\n            defaultDist = 0.5, // tree defaults to 0.5 dist if no dist is specified\n            maxTextWidth = 50; // maximum length of the text labels\n\n        self.leafHeight = function(inputLeafHeight) {\n            if (typeof inputLeafHeight === \"undefined\") {\n                return leafHeight;\n            } else {\n                leafHeight = inputLeafHeight;\n                return self;\n            }\n        };\n\n        self.layoutMode = function(mode) {\n            if (typeof mode === \"undefined\") {\n                return layoutMode;\n            } else {\n                layoutMode = mode;\n                return self;\n            }\n        };\n\n        // changes the layout angle of the display, which is really changing the height\n        self.layoutAngle = function(angle) {\n            if (typeof angle === \"undefined\") {\n                return height;\n            }\n            // to use default if the user puts in strange values\n            if (isNaN(angle) || angle < 0 || angle > 360) {\n                return self;\n            } else {\n                height = angle;\n                return self;\n            }\n        };\n\n        self.separation = function(dist) {\n            // changes the dist between the nodes of different depth\n            if (typeof dist === \"undefined\") {\n                return depthSeparation;\n            } else {\n                depthSeparation = dist;\n                return self;\n            }\n        };\n\n        self.links = function(nodes) {\n            // uses d3 native method to generate links. Done.\n            return d3.layout.tree().links(nodes);\n        };\n\n        // -- Custom method for laying out phylogeny tree in a linear fashion\n        self.nodes = function(d, i) {\n            //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n            if (toString.call(d) === \"[object Array]\") {\n                // if d is an array, replate with the first object (newick, phyloxml)\n                d = d[0];\n            }\n            // self is to find the depth of all the nodes, assumes root is passed in\n            var _nodes = hierarchy.call(self, d, i),\n                nodes = [],\n                maxDepth = 0,\n                numLeaves = 0;\n            //console.debug( JSON.stringify( _nodes, null, 2 ) )\n            window._d = d;\n            window._nodes = _nodes;\n\n            //TODO: remove dbl-touch loop\n            // changing from hierarchy's custom format for data to usable format\n            _nodes.forEach(function(node) {\n                maxDepth = node.depth > maxDepth ? node.depth : maxDepth; //finding max depth of tree\n                nodes.push(node);\n            });\n            // counting the number of leaf nodes and assigning max depth\n            //  to nodes that do not have children to flush all the leave nodes\n            nodes.forEach(function(node) {\n                if (!node.children) {\n                    //&& !node._children\n                    numLeaves += 1;\n                    node.depth = maxDepth; // if a leaf has no child it would be assigned max depth\n                }\n            });\n\n            leafHeight = layoutMode === \"Circular\" ? height / numLeaves : leafHeight;\n            leafIndex = 0;\n            layout(nodes[0], maxDepth, leafHeight, null);\n\n            return nodes;\n        };\n\n        /**\n     * -- Function with side effect of adding x0, y0 to all child; take in the root as starting point\n     *  assuming that the leave nodes would be sorted in presented order\n     *          horizontal(y0) is calculated according to (= evo dist X depth separation) from their parent\n     *          vertical (x0) - if leave node: find its order in all of the  leave node === node.id,\n     *                              then multiply by verticalSeparation\n     *                  - if parent node: is place in the mid point all of its children nodes\n     * -- The layout will first calculate the y0 field going towards the leaves, and x0 when returning\n     */\n        function layout(node, maxDepth, vertSeparation, parent) {\n            var children = node.children,\n                sumChildVertSeparation = 0;\n\n            // calculation of node's dist from parents, going down.\n            var dist = node.dist || defaultDist;\n            dist = dist > 1 ? 1 : dist; // We constrain all dist to be less than one\n            node.dist = dist;\n            if (parent !== null) {\n                node.y0 = parent.y0 + dist * depthSeparation;\n            } else {\n                //root node\n                node.y0 = maxTextWidth;\n            }\n\n            // if a node have no children, we will treat it as a leaf and start laying it out first\n            if (!children) {\n                node.x0 = leafIndex * vertSeparation;\n                leafIndex += 1;\n            } else {\n                // if it has children, we will visit all its children and calculate its position from its children\n                children.forEach(function(child) {\n                    child.parent = node;\n                    sumChildVertSeparation += layout(child, maxDepth, vertSeparation, node);\n                });\n                node.x0 = sumChildVertSeparation / children.length;\n            }\n\n            // adding properties to the newly created node\n            node.x = node.x0;\n            node.y = node.y0;\n            return node.x0;\n        }\n        return self;\n    }\n\n    /**\n * -- PhyloTree Model --\n */\n    var PhyloTree = visualization_mod.Visualization.extend({\n        defaults: {\n            layout: \"Linear\",\n            separation: 250, // px dist between nodes of different depth to represent 1 evolutionary until\n            leafHeight: 18,\n            type: \"phyloviz\", // visualization type\n            title: \"Title\",\n            scaleFactor: 1,\n            translate: [0, 0],\n            fontSize: 12, //fontSize of node label\n            selectedNode: null,\n            nodeAttrChangedTime: 0\n        },\n\n        initialize: function(options) {\n            this.set(\n                \"dataset\",\n                new data_mod.Dataset({\n                    id: options.dataset_id\n                })\n            );\n        },\n\n        root: {}, // Root has to be its own independent object because it is not part of the viz_config\n\n        /**\n     * Mechanism to expand or contract a single node. Expanded nodes have a children list, while for\n     * contracted nodes the list is stored in _children. Nodes with their children data stored in _children will not\n     * have their children rendered.\n     */\n        toggle: function(d) {\n            if (typeof d === \"undefined\") {\n                return;\n            }\n            if (d.children) {\n                d._children = d.children;\n                d.children = null;\n            } else {\n                d.children = d._children;\n                d._children = null;\n            }\n        },\n\n        /**\n     *  Contracts the phylotree to a single node by repeatedly calling itself to place all the list\n     *  of children under _children.\n     */\n        toggleAll: function(d) {\n            if (d.children && d.children.length !== 0) {\n                d.children.forEach(this.toggleAll);\n                toggle(d);\n            }\n        },\n\n        /**\n     *  Return the data of the tree. Used for preserving state.\n     */\n        getData: function() {\n            return this.root;\n        },\n\n        /**\n     * Overriding the default save mechanism to do some clean of circular reference of the\n     * phyloTree and to include phyloTree in the saved json\n     */\n        save: function() {\n            var root = this.root;\n            cleanTree(root);\n            //this.set(\"root\", root);\n\n            function cleanTree(node) {\n                // we need to remove parent to delete circular reference\n                delete node.parent;\n\n                // removing unnecessary attributes\n                if (node._selected) {\n                    delete node._selected;\n                }\n\n                if (node.children) {\n                    node.children.forEach(cleanTree);\n                }\n                if (node._children) {\n                    node._children.forEach(cleanTree);\n                }\n            }\n\n            var config = jQuery.extend(true, {}, this.attributes);\n            config.selectedNode = null;\n\n            show_message(\"Saving to Galaxy\", \"progress\");\n\n            return $.ajax({\n                url: this.url(),\n                type: \"POST\",\n                dataType: \"json\",\n                data: {\n                    config: JSON.stringify(config),\n                    type: \"phyloviz\"\n                },\n                success: function(res) {\n                    hide_modal();\n                }\n            });\n        }\n    });\n\n    // -- Views --\n    /**\n *  Stores the default variable for setting up the visualization\n */\n    var PhylovizLayoutBase = Backbone.View.extend({\n        defaults: {\n            nodeRadius: 4.5 // radius of each node in the diagram\n        },\n\n        /**\n     *  Common initialization in layouts\n     */\n        stdInit: function(options) {\n            var self = this;\n            self.model.on(\n                \"change:separation change:leafHeight change:fontSize change:nodeAttrChangedTime\",\n                self.updateAndRender,\n                self\n            );\n\n            self.vis = options.vis;\n            self.i = 0;\n            self.maxDepth = -1; // stores the max depth of the tree\n\n            self.width = options.width;\n            self.height = options.height;\n        },\n\n        /**\n     *  Updates the visualization whenever there are changes in the expansion and contraction of nodes\n     *  AND possibly when the tree is edited.\n     */\n        updateAndRender: function(source) {\n            var vis = d3.select(\".vis\"),\n                self = this;\n            source = source || self.model.root;\n\n            self.renderNodes(source);\n            self.renderLinks(source);\n            self.addTooltips();\n        },\n\n        /**\n     * Renders the links for the visualization.\n     */\n        renderLinks: function(source) {\n            var self = this;\n            var diagonal = self.diagonal;\n            var duration = self.duration;\n            var layoutMode = self.layoutMode;\n            var link = self.vis.selectAll(\"g.completeLink\").data(self.tree.links(self.nodes), function(d) {\n                return d.target.id;\n            });\n\n            var calcalateLinePos = function(d) {\n                // position of the source node <=> starting location of the line drawn\n                d.pos0 = d.source.y0 + \" \" + d.source.x0;\n                // position where the line makes a right angle bend\n                d.pos1 = d.source.y0 + \" \" + d.target.x0;\n                // point where the horizontal line becomes a dotted line\n                d.pos2 = d.target.y0 + \" \" + d.target.x0;\n            };\n\n            var linkEnter = link\n                .enter()\n                .insert(\"svg:g\", \"g.node\")\n                .attr(\"class\", \"completeLink\");\n\n            linkEnter\n                .append(\"svg:path\")\n                .attr(\"class\", \"link\")\n                .attr(\"d\", function(d) {\n                    calcalateLinePos(d);\n                    return \"M \" + d.pos0 + \" L \" + d.pos1;\n                });\n\n            var linkUpdate = link.transition().duration(500);\n\n            linkUpdate.select(\"path.link\").attr(\"d\", function(d) {\n                calcalateLinePos(d);\n                return \"M \" + d.pos0 + \" L \" + d.pos1 + \" L \" + d.pos2;\n            });\n\n            var linkExit = link.exit().remove();\n        },\n\n        // User Interaction methods below\n\n        /**\n     *  Displays the information for editing\n     */\n        selectNode: function(node) {\n            var self = this;\n            d3.selectAll(\"g.node\").classed(\"selectedHighlight\", function(d) {\n                if (node.id === d.id) {\n                    if (node._selected) {\n                        // for de=selecting node.\n                        delete node._selected;\n                        return false;\n                    } else {\n                        node._selected = true;\n                        return true;\n                    }\n                }\n                return false;\n            });\n\n            self.model.set(\"selectedNode\", node);\n            $(\"#phyloVizSelectedNodeName\").val(node.name);\n            $(\"#phyloVizSelectedNodeDist\").val(node.dist);\n            $(\"#phyloVizSelectedNodeAnnotation\").val(node.annotation || \"\");\n        },\n\n        /**\n     *  Creates bootstrap tooltip for the visualization. Has to be called repeatedly due to newly generated\n     *  enterNodes\n     */\n        addTooltips: function() {\n            $(\".tooltip\").remove(); //clean up tooltip, just in case its listeners are removed by d3\n            $(\".node\")\n                .attr(\"data-original-title\", function() {\n                    var d = this.__data__,\n                        annotation = d.annotation || \"None\";\n                    return d\n                        ? (d.name ? d.name + \"<br/>\" : \"\") +\n                              \"Dist: \" +\n                              d.dist +\n                              \" <br/>Annotation1: \" +\n                              annotation +\n                              (d.bootstrap ? \"<br/>Confidence level: \" + Math.round(100 * d.bootstrap) : \"\")\n                        : \"\";\n                })\n                .tooltip({ placement: \"top\", trigger: \"hover\" });\n        }\n    });\n\n    /**\n * Linea layout class of Phyloviz, is responsible for rendering the nodes\n * calls PhyloTreeLayout to determine the positions of the nodes\n */\n    var PhylovizLinearView = PhylovizLayoutBase.extend({\n        initialize: function(options) {\n            // Default values of linear layout\n            var self = this;\n            self.margins = options.margins;\n            self.layoutMode = \"Linear\";\n\n            self.stdInit(options);\n\n            self.layout();\n            self.updateAndRender(self.model.root);\n        },\n\n        /**\n     * Creates the basic layout of a linear tree by precalculating fixed values.\n     * One of calculations are also made here\n     */\n        layout: function() {\n            var self = this;\n            self.tree = new PhyloTreeLayout().layoutMode(\"Linear\");\n            self.diagonal = d3.svg.diagonal().projection(function(d) {\n                return [d.y, d.x];\n            });\n        },\n\n        /**\n     * Renders the nodes base on Linear layout.\n     */\n        renderNodes: function(source) {\n            var self = this,\n                fontSize = self.model.get(\"fontSize\") + \"px\";\n\n            // assigning properties from models\n            self.tree.separation(self.model.get(\"separation\")).leafHeight(self.model.get(\"leafHeight\"));\n\n            var duration = 500,\n                nodes = self.tree.separation(self.model.get(\"separation\")).nodes(self.model.root);\n\n            var node = self.vis.selectAll(\"g.node\").data(nodes, function(d) {\n                return d.name + d.id || (d.id = ++self.i);\n            });\n\n            // These variables has to be passed into update links which are in the base methods\n            self.nodes = nodes;\n            self.duration = duration;\n\n            // ------- D3 ENTRY --------\n            // Enter any new nodes at the parent's previous position.\n            var nodeEnter = node\n                .enter()\n                .append(\"svg:g\")\n                .attr(\"class\", \"node\")\n                .on(\"dblclick\", function() {\n                    d3.event.stopPropagation();\n                })\n                .on(\"click\", function(d) {\n                    if (d3.event.altKey) {\n                        self.selectNode(d); // display info if alt is pressed\n                    } else {\n                        if (d.children && d.children.length === 0) {\n                            return;\n                        } // there is no need to toggle leaves\n                        self.model.toggle(d); // contract/expand nodes at data level\n                        self.updateAndRender(d); // re-render the tree\n                    }\n                });\n            //TODO: newick and phyloxml return arrays. where should this go (client (here, else), server)?\n            if (toString.call(source) === \"[object Array]\") {\n                // if d is an array, replate with the first object (newick, phyloxml)\n                source = source[0];\n            }\n            nodeEnter.attr(\"transform\", function(d) {\n                return \"translate(\" + source.y0 + \",\" + source.x0 + \")\";\n            });\n\n            nodeEnter\n                .append(\"svg:circle\")\n                .attr(\"r\", 1e-6)\n                .style(\"fill\", function(d) {\n                    return d._children ? \"lightsteelblue\" : \"#fff\";\n                });\n\n            nodeEnter\n                .append(\"svg:text\")\n                .attr(\"class\", \"nodeLabel\")\n                .attr(\"x\", function(d) {\n                    return d.children || d._children ? -10 : 10;\n                })\n                .attr(\"dy\", \".35em\")\n                .attr(\"text-anchor\", function(d) {\n                    return d.children || d._children ? \"end\" : \"start\";\n                })\n                .style(\"fill-opacity\", 1e-6);\n\n            // ------- D3 TRANSITION --------\n            // Transition nodes to their new position.\n            var nodeUpdate = node.transition().duration(duration);\n\n            nodeUpdate.attr(\"transform\", function(d) {\n                return \"translate(\" + d.y + \",\" + d.x + \")\";\n            });\n\n            nodeUpdate\n                .select(\"circle\")\n                .attr(\"r\", self.defaults.nodeRadius)\n                .style(\"fill\", function(d) {\n                    return d._children ? \"lightsteelblue\" : \"#fff\";\n                });\n\n            nodeUpdate\n                .select(\"text\")\n                .style(\"fill-opacity\", 1)\n                .style(\"font-size\", fontSize)\n                .text(function(d) {\n                    return d.name && d.name !== \"\" ? d.name : d.bootstrap ? Math.round(100 * d.bootstrap) : \"\";\n                });\n\n            // ------- D3 EXIT --------\n            // Transition exiting nodes to the parent's new position.\n            var nodeExit = node\n                .exit()\n                .transition()\n                .duration(duration)\n                .remove();\n\n            nodeExit.select(\"circle\").attr(\"r\", 1e-6);\n\n            nodeExit.select(\"text\").style(\"fill-opacity\", 1e-6);\n\n            // Stash the old positions for transition.\n            nodes.forEach(function(d) {\n                d.x0 = d.x; // we need the x0, y0 for parents with children\n                d.y0 = d.y;\n            });\n        }\n    });\n\n    var PhylovizView = Backbone.View.extend({\n        className: \"phyloviz\",\n\n        initialize: function(options) {\n            var self = this;\n            // -- Default values of the vis\n            self.MIN_SCALE = 0.05; //for zooming\n            self.MAX_SCALE = 5;\n            self.MAX_DISPLACEMENT = 500;\n            self.margins = [10, 60, 10, 80];\n\n            self.width = $(\"#PhyloViz\").width();\n            self.height = $(\"#PhyloViz\").height();\n            self.radius = self.width;\n            self.data = options.data;\n\n            // -- Events Phyloviz view responses to\n            $(window).resize(function() {\n                self.width = $(\"#PhyloViz\").width();\n                self.height = $(\"#PhyloViz\").height();\n                self.render();\n            });\n\n            // -- Create phyloTree model\n            self.phyloTree = new PhyloTree(options.config);\n            self.phyloTree.root = self.data;\n\n            // -- Set up UI functions of main view\n            self.zoomFunc = d3.behavior.zoom().scaleExtent([self.MIN_SCALE, self.MAX_SCALE]);\n            self.zoomFunc.translate(self.phyloTree.get(\"translate\"));\n            self.zoomFunc.scale(self.phyloTree.get(\"scaleFactor\"));\n\n            // -- set up header buttons, search and settings menu\n            self.navMenu = new HeaderButtons(self);\n            self.settingsMenu = new SettingsMenu({\n                phyloTree: self.phyloTree\n            });\n            self.nodeSelectionView = new NodeSelectionView({\n                phyloTree: self.phyloTree\n            });\n            self.search = new PhyloVizSearch();\n\n            // using settimeout to call the zoomAndPan function according to the stored attributes in viz_config\n            setTimeout(function() {\n                self.zoomAndPan();\n            }, 1000);\n        },\n\n        render: function() {\n            // -- Creating helper function for vis. --\n            var self = this;\n            $(\"#PhyloViz\").empty();\n\n            // -- Layout viz. --\n            self.mainSVG = d3\n                .select(\"#PhyloViz\")\n                .append(\"svg:svg\")\n                .attr(\"width\", self.width)\n                .attr(\"height\", self.height)\n                .attr(\"pointer-events\", \"all\")\n                .call(\n                    self.zoomFunc.on(\"zoom\", function() {\n                        self.zoomAndPan();\n                    })\n                );\n\n            self.boundingRect = self.mainSVG\n                .append(\"svg:rect\")\n                .attr(\"class\", \"boundingRect\")\n                .attr(\"width\", self.width)\n                .attr(\"height\", self.height)\n                .attr(\"stroke\", \"black\")\n                .attr(\"fill\", \"white\");\n\n            self.vis = self.mainSVG.append(\"svg:g\").attr(\"class\", \"vis\");\n\n            self.layoutOptions = {\n                model: self.phyloTree,\n                width: self.width,\n                height: self.height,\n                vis: self.vis,\n                margins: self.margins\n            };\n\n            // -- Creating Title\n            $(\"#title\").text(\"Phylogenetic Tree from \" + self.phyloTree.get(\"title\") + \":\");\n\n            // -- Create Linear view instance --\n            var linearView = new PhylovizLinearView(self.layoutOptions);\n        },\n\n        /**\n     * Function to zoom and pan the svg element which the entire tree is contained within\n     * Uses d3.zoom events, and extend them to allow manual updates and keeping states in model\n     */\n        zoomAndPan: function(event) {\n            var zoomParams, translateParams;\n            if (typeof event !== \"undefined\") {\n                zoomParams = event.zoom;\n                translateParams = event.translate;\n            }\n\n            var self = this,\n                scaleFactor = self.zoomFunc.scale(),\n                translationCoor = self.zoomFunc.translate(),\n                zoomStatement = \"\",\n                translateStatement = \"\";\n\n            // Do manual scaling.\n            switch (zoomParams) {\n                case \"reset\":\n                    scaleFactor = 1.0;\n                    translationCoor = [0, 0];\n                    break;\n                case \"+\":\n                    scaleFactor *= 1.1;\n                    break;\n                case \"-\":\n                    scaleFactor *= 0.9;\n                    break;\n                default:\n                    if (typeof zoomParams === \"number\") {\n                        scaleFactor = zoomParams;\n                    } else if (d3.event !== null) {\n                        scaleFactor = d3.event.scale;\n                    }\n            }\n            if (scaleFactor < self.MIN_SCALE || scaleFactor > self.MAX_SCALE) {\n                return;\n            }\n            self.zoomFunc.scale(scaleFactor); //update scale Factor\n            zoomStatement =\n                \"translate(\" + self.margins[3] + \",\" + self.margins[0] + \")\" + \" scale(\" + scaleFactor + \")\";\n\n            // Do manual translation.\n            if (d3.event !== null) {\n                translateStatement = \"translate(\" + d3.event.translate + \")\";\n            } else {\n                if (typeof translateParams !== \"undefined\") {\n                    var x = translateParams.split(\",\")[0];\n                    var y = translateParams.split(\",\")[1];\n                    if (!isNaN(x) && !isNaN(y)) {\n                        translationCoor = [translationCoor[0] + parseFloat(x), translationCoor[1] + parseFloat(y)];\n                    }\n                }\n                self.zoomFunc.translate(translationCoor); // update zoomFunc\n                translateStatement = \"translate(\" + translationCoor + \")\";\n            }\n\n            self.phyloTree.set(\"scaleFactor\", scaleFactor);\n            self.phyloTree.set(\"translate\", translationCoor);\n            //refers to the view that we are actually zooming\n            self.vis.attr(\"transform\", translateStatement + zoomStatement);\n        },\n\n        /**\n     * Primes the Ajax URL to load another Nexus tree\n     */\n        reloadViz: function() {\n            var self = this,\n                treeIndex = $(\"#phylovizNexSelector :selected\").val();\n            $.getJSON(\n                self.phyloTree.get(\"dataset\").url(),\n                {\n                    tree_index: treeIndex,\n                    data_type: \"raw_data\"\n                },\n                function(packedJson) {\n                    self.data = packedJson.data;\n                    self.config = packedJson;\n                    self.render();\n                }\n            );\n        }\n    });\n\n    var HeaderButtons = Backbone.View.extend({\n        initialize: function(phylovizView) {\n            var self = this;\n            self.phylovizView = phylovizView;\n\n            // Clean up code - if the class initialized more than once\n            $(\"#panelHeaderRightBtns\").empty();\n            $(\"#phyloVizNavBtns\").empty();\n            $(\"#phylovizNexSelector\").off();\n\n            self.initNavBtns();\n            self.initRightHeaderBtns();\n\n            // Initial a tree selector in the case of nexus\n            $(\"#phylovizNexSelector\")\n                .off()\n                .on(\"change\", function() {\n                    self.phylovizView.reloadViz();\n                });\n        },\n\n        initRightHeaderBtns: function() {\n            var self = this;\n\n            var rightMenu = mod_icon_btn.create_icon_buttons_menu(\n                [\n                    {\n                        icon_class: \"gear\",\n                        title: \"PhyloViz Settings\",\n                        on_click: function() {\n                            $(\"#SettingsMenu\").show();\n                            self.settingsMenu.updateUI();\n                        }\n                    },\n                    {\n                        icon_class: \"disk\",\n                        title: \"Save visualization\",\n                        on_click: function() {\n                            var nexSelected = $(\"#phylovizNexSelector option:selected\").text();\n                            if (nexSelected) {\n                                self.phylovizView.phyloTree.set(\"title\", nexSelected);\n                            }\n                            self.phylovizView.phyloTree.save();\n                        }\n                    },\n                    {\n                        icon_class: \"chevron-expand\",\n                        title: \"Search / Edit Nodes\",\n                        on_click: function() {\n                            $(\"#nodeSelectionView\").show();\n                        }\n                    },\n                    {\n                        icon_class: \"information\",\n                        title: \"Phyloviz Help\",\n                        on_click: function() {\n                            window.open(\"https://galaxyproject.org/learn/visualization/phylogenetic-tree/\");\n                            // https://docs.google.com/document/d/1AXFoJgEpxr21H3LICRs3EyMe1B1X_KFPouzIgrCz3zk/edit\n                        }\n                    }\n                ],\n                {\n                    tooltip_config: { placement: \"bottom\" }\n                }\n            );\n            $(\"#panelHeaderRightBtns\").append(rightMenu.$el);\n        },\n\n        initNavBtns: function() {\n            var self = this,\n                navMenu = mod_icon_btn.create_icon_buttons_menu(\n                    [\n                        {\n                            icon_class: \"zoom-in\",\n                            title: \"Zoom in\",\n                            on_click: function() {\n                                self.phylovizView.zoomAndPan({ zoom: \"+\" });\n                            }\n                        },\n                        {\n                            icon_class: \"zoom-out\",\n                            title: \"Zoom out\",\n                            on_click: function() {\n                                self.phylovizView.zoomAndPan({ zoom: \"-\" });\n                            }\n                        },\n                        {\n                            icon_class: \"arrow-circle\",\n                            title: \"Reset Zoom/Pan\",\n                            on_click: function() {\n                                self.phylovizView.zoomAndPan({\n                                    zoom: \"reset\"\n                                });\n                            }\n                        }\n                    ],\n                    {\n                        tooltip_config: { placement: \"bottom\" }\n                    }\n                );\n            $(\"#phyloVizNavBtns\").append(navMenu.$el);\n        }\n    });\n\n    var SettingsMenu = UserMenuBase.extend({\n        className: \"Settings\",\n\n        initialize: function(options) {\n            // settings needs to directly interact with the phyloviz model so it will get access to it.\n            var self = this;\n            self.phyloTree = options.phyloTree;\n            self.el = $(\"#SettingsMenu\");\n            self.inputs = {\n                separation: $(\"#phyloVizTreeSeparation\"),\n                leafHeight: $(\"#phyloVizTreeLeafHeight\"),\n                fontSize: $(\"#phyloVizTreeFontSize\")\n            };\n\n            //init all buttons of settings\n            $(\"#settingsCloseBtn\")\n                .off()\n                .on(\"click\", function() {\n                    self.el.hide();\n                });\n            $(\"#phylovizResetSettingsBtn\")\n                .off()\n                .on(\"click\", function() {\n                    self.resetToDefaults();\n                });\n            $(\"#phylovizApplySettingsBtn\")\n                .off()\n                .on(\"click\", function() {\n                    self.apply();\n                });\n        },\n\n        /**\n     * Applying user values to phylotree model.\n     */\n        apply: function() {\n            var self = this;\n            if (\n                !self.isAcceptableValue(self.inputs.separation, 50, 2500) ||\n                !self.isAcceptableValue(self.inputs.leafHeight, 5, 30) ||\n                !self.isAcceptableValue(self.inputs.fontSize, 5, 20)\n            ) {\n                return;\n            }\n            $.each(self.inputs, function(key, $input) {\n                self.phyloTree.set(key, $input.val());\n            });\n        },\n        /**\n     * Called to update the values input to that stored in the model\n     */\n        updateUI: function() {\n            var self = this;\n            $.each(self.inputs, function(key, $input) {\n                $input.val(self.phyloTree.get(key));\n            });\n        },\n        /**\n     * Resets the value of the phyloTree model to its default\n     */\n        resetToDefaults: function() {\n            $(\".tooltip\").remove(); // just in case the tool tip was not removed\n            var self = this;\n            $.each(self.phyloTree.defaults, function(key, value) {\n                self.phyloTree.set(key, value);\n            });\n            self.updateUI();\n        },\n\n        render: function() {}\n    });\n\n    /**\n * View for inspecting node properties and editing them\n */\n    var NodeSelectionView = UserMenuBase.extend({\n        className: \"Settings\",\n\n        initialize: function(options) {\n            var self = this;\n            self.el = $(\"#nodeSelectionView\");\n            self.phyloTree = options.phyloTree;\n\n            self.UI = {\n                enableEdit: $(\"#phylovizEditNodesCheck\"),\n                saveChanges: $(\"#phylovizNodeSaveChanges\"),\n                cancelChanges: $(\"#phylovizNodeCancelChanges\"),\n                name: $(\"#phyloVizSelectedNodeName\"),\n                dist: $(\"#phyloVizSelectedNodeDist\"),\n                annotation: $(\"#phyloVizSelectedNodeAnnotation\")\n            };\n\n            // temporarily stores the values in case user change their mind\n            self.valuesOfConcern = {\n                name: null,\n                dist: null,\n                annotation: null\n            };\n\n            //init UI buttons\n            $(\"#nodeSelCloseBtn\")\n                .off()\n                .on(\"click\", function() {\n                    self.el.hide();\n                });\n            self.UI.saveChanges.off().on(\"click\", function() {\n                self.updateNodes();\n            });\n            self.UI.cancelChanges.off().on(\"click\", function() {\n                self.cancelChanges();\n            });\n\n            (function($) {\n                // extending jquery fxn for enabling and disabling nodes.\n                $.fn.enable = function(isEnabled) {\n                    return $(this).each(function() {\n                        if (isEnabled) {\n                            $(this).removeAttr(\"disabled\");\n                        } else {\n                            $(this).attr(\"disabled\", \"disabled\");\n                        }\n                    });\n                };\n            })(jQuery);\n\n            self.UI.enableEdit.off().on(\"click\", function() {\n                self.toggleUI();\n            });\n        },\n\n        /**\n     * For turning on and off the child elements\n     */\n        toggleUI: function() {\n            var self = this,\n                checked = self.UI.enableEdit.is(\":checked\");\n\n            if (!checked) {\n                self.cancelChanges();\n            }\n\n            $.each(self.valuesOfConcern, function(key, value) {\n                self.UI[key].enable(checked);\n            });\n            if (checked) {\n                self.UI.saveChanges.show();\n                self.UI.cancelChanges.show();\n            } else {\n                self.UI.saveChanges.hide();\n                self.UI.cancelChanges.hide();\n            }\n        },\n\n        /**\n     * Reverting to previous values in case user change their minds\n     */\n        cancelChanges: function() {\n            var self = this,\n                node = self.phyloTree.get(\"selectedNode\");\n            if (node) {\n                $.each(self.valuesOfConcern, function(key, value) {\n                    self.UI[key].val(node[key]);\n                });\n            }\n        },\n\n        /**\n     * Changing the data in the underlying tree with user-specified values\n     */\n        updateNodes: function() {\n            var self = this,\n                node = self.phyloTree.get(\"selectedNode\");\n            if (node) {\n                if (\n                    !self.isAcceptableValue(self.UI.dist, 0, 1) ||\n                    self.hasIllegalJsonCharacters(self.UI.name) ||\n                    self.hasIllegalJsonCharacters(self.UI.annotation)\n                ) {\n                    return;\n                }\n                $.each(self.valuesOfConcern, function(key, value) {\n                    node[key] = self.UI[key].val();\n                });\n                self.phyloTree.set(\"nodeAttrChangedTime\", new Date());\n            } else {\n                alert(\"No node selected\");\n            }\n        }\n    });\n\n    /**\n * Initializes the search panel on phyloviz and handles its user interaction\n * It allows user to search the entire free based on some qualifer, like dist <= val.\n */\n    var PhyloVizSearch = UserMenuBase.extend({\n        initialize: function() {\n            var self = this;\n\n            $(\"#phyloVizSearchBtn\").on(\"click\", function() {\n                var searchTerm = $(\"#phyloVizSearchTerm\"),\n                    searchConditionVal = $(\"#phyloVizSearchCondition\")\n                        .val()\n                        .split(\"-\"),\n                    attr = searchConditionVal[0],\n                    condition = searchConditionVal[1];\n                self.hasIllegalJsonCharacters(searchTerm);\n\n                if (attr === \"dist\") {\n                    self.isAcceptableValue(searchTerm, 0, 1);\n                }\n                self.searchTree(attr, condition, searchTerm.val());\n            });\n        },\n\n        /**\n     * Searches the entire tree and will highlight the nodes that match the condition in green\n     */\n        searchTree: function(attr, condition, val) {\n            d3.selectAll(\"g.node\").classed(\"searchHighlight\", function(d) {\n                var attrVal = d[attr];\n                if (typeof attrVal !== \"undefined\" && attrVal !== null) {\n                    if (attr === \"dist\") {\n                        switch (condition) {\n                            case \"greaterEqual\":\n                                return attrVal >= +val;\n                            case \"lesserEqual\":\n                                return attrVal <= +val;\n                            default:\n                                return;\n                        }\n                    } else if (attr === \"name\" || attr === \"annotation\") {\n                        return attrVal.toLowerCase().indexOf(val.toLowerCase()) !== -1;\n                    }\n                }\n            });\n        }\n    });\n\n    return {\n        PhylovizView: PhylovizView\n    };\n});\n"]}