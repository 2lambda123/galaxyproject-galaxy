{"version":3,"sources":["viz/sweepster.js"],"names":["define","ToolInputsSettings","defaults","inputs","values","_","d3","util","visualization","tracks","tools","data","config","mod_icon_btn","ToolParameterTree","Backbone","Model","extend","tool","tree_data","input","self","options","this","get","each","on","set_tree_data","add_param","set","param","remove_param","input_config","find","name","samples","get_samples","get_tree_params","length","create_tree_data","param_label","index","params_samples","map","node_id","id","children","value","setting","settings","param_samples","cur_node","target_node","where","in_ptree","sortBy","depth","fixed_settings","get_num_leaves","get_settings","reduce","memo","get_node_settings","get_inputs_dict","all_settings","cur_parent","node","get_connected_nodes","flatten","c","clone","a_node","isArray","find_child","parents","parent","push","num_samples","get_subtree_nodes","SweepsterTrack","initialize","child","regions","toJSON","same_settings","a_track","this_settings","other_settings","prop","track","TrackCollection","Collection","track_config","data_url","Galaxy","root","converted_datasets_state_url","object_from_template","default_mode","dataset","tool_with_samplable_inputs","to_dict","add_track","model","title","Visualization","type","prototype","dataset_id","tool_id","tree_config","Dataset","Tool","GenomeRegionCollection","tagName","remove_inputs","TILE_LEN","canvas_manager","add","settings_td","settings_div","append","$","run_on_dataset_button","toggle","remove","View","prepend","icon_menu","render","draw_tiles","addClass","appendTo","$el","hide","tile_containers","css","text","data_is_ready","resolution","w_scale","mode","canvas","height","draw_tile","icon_class","on_click","html","attr","single_input_row","sweep_inputs_row","template","options_text","insertAfter","then","data_ok","region","create_icon_buttons_menu","data_manager","get_data","tile_data","new_canvas","width","get_canvas_height","getContext","empty","ToolInputValOrSweepView","number_input_template","tool_row","className","change","val","IntegerToolParameter","SelectToolParameter","tool_form_view","ToolFormView","option","join","select_input_template","menu","show","cluster","layout","diagonal","param_depths","pluck","nodes","tree_params","parseFloat","ToolParameterTreeDesignView","link","connected_node_ids","style","not","at","i","ToolParameterTreeView","SweepsterVisualizationView","tool_param_tree_view","track_collection_container","size","key","svg","projection","d","label","y","x","default_value","uniq","center_left","position","left","vis","links","enter","selectAll","tree_design_view","filter","undefined","tracks_div","help_div","close_button","SweepsterVisualization","handle_node_clicks","helpText","CanvasManager","view","ConfigSettingCollection","from_models_and_saved_values","location","tooltip_config","mode_mapping","run_tool_on_dataset","rerun","hide_modal","param_tree","track_view","hover","settings_leaf","get_leaf","tr","select","run_jobs_deferred","show_modal","setTimeout","window","modes","track_obj","pm_track","make_popupmenu","get_base_color","base","get_value","toLowerCase","tool_name","set_input_values","when","outputs","Ok","SweepsterTrackView","Deferred","resolve","run_jobs","new_tracks","output","first","prefs","to_key_value_dict","init_for_tool_data"],"mappings":"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","file":"../../scripts/viz/sweepster.js","sourcesContent":["/**\n * Visualization and components for Sweepster, a visualization for exploring a tool's parameter space via\n * genomic visualization.\n */\n\ndefine(\n    [\n        \"libs/underscore\",\n        \"libs/d3\",\n        \"viz/trackster/util\",\n        \"viz/visualization\",\n        \"viz/trackster/tracks\",\n        \"mvc/tool/tools\",\n        \"mvc/dataset/data\",\n        \"utils/config\",\n        \"mvc/ui/icon-button\"\n    ],\n    function(_, d3, util, visualization, tracks, tools, data, config, mod_icon_btn) {\n        /**\n * A collection of tool input settings. Object is useful for keeping a list of settings\n * for future use without changing the input's value and for preserving inputs order.\n */\n        var ToolInputsSettings = Backbone.Model.extend({\n            defaults: {\n                inputs: null,\n                values: null\n            }\n        });\n\n        /**\n * Tree for a tool's parameters.\n */\n        var ToolParameterTree = Backbone.Model.extend({\n            defaults: {\n                tool: null,\n                tree_data: null\n            },\n\n            initialize: function(options) {\n                // Set up tool parameters to work with tree.\n                var self = this;\n                this.get(\"tool\")\n                    .get(\"inputs\")\n                    .each(function(input) {\n                        // Listen for changes to input's attributes.\n                        input.on(\n                            \"change:min change:max change:num_samples\",\n                            function(input) {\n                                if (input.get(\"in_ptree\")) {\n                                    self.set_tree_data();\n                                }\n                            },\n                            self\n                        );\n                        input.on(\n                            \"change:in_ptree\",\n                            function(input) {\n                                if (input.get(\"in_ptree\")) {\n                                    self.add_param(input);\n                                } else {\n                                    self.remove_param(input);\n                                }\n                                self.set_tree_data();\n                            },\n                            self\n                        );\n                    });\n\n                // If there is a config, use it.\n                if (options.config) {\n                    _.each(options.config, function(input_config) {\n                        var input = self\n                            .get(\"tool\")\n                            .get(\"inputs\")\n                            .find(function(input) {\n                                return input.get(\"name\") === input_config.name;\n                            });\n                        self.add_param(input);\n                        input.set(input_config);\n                    });\n                }\n            },\n\n            add_param: function(param) {\n                // If parameter already present, do not add it.\n                if (param.get(\"ptree_index\")) {\n                    return;\n                }\n\n                param.set(\"in_ptree\", true);\n                param.set(\"ptree_index\", this.get_tree_params().length);\n            },\n\n            remove_param: function(param) {\n                // Remove param from tree.\n                param.set(\"in_ptree\", false);\n                param.set(\"ptree_index\", null);\n\n                // Update ptree indices for remaining params.\n                _(this.get_tree_params()).each(function(input, index) {\n                    // +1 to use 1-based indexing.\n                    input.set(\"ptree_index\", index + 1);\n                });\n            },\n\n            /**\n     * Sets tree data using tool's inputs.\n     */\n            set_tree_data: function() {\n                // Get samples for each parameter.\n                var params_samples = _.map(this.get_tree_params(), function(param) {\n                    return {\n                        param: param,\n                        samples: param.get_samples()\n                    };\n                });\n                var node_id = 0,\n                    // Creates tree data recursively.\n                    create_tree_data = function(params_samples, index) {\n                        var param_samples = params_samples[index],\n                            param = param_samples.param,\n                            param_label = param.get(\"label\"),\n                            settings = param_samples.samples;\n\n                        // Create leaves when last parameter setting is reached.\n                        if (params_samples.length - 1 === index) {\n                            return _.map(settings, function(setting) {\n                                return {\n                                    id: node_id++,\n                                    name: setting,\n                                    param: param,\n                                    value: setting\n                                };\n                            });\n                        }\n\n                        // Recurse to handle other parameters.\n                        return _.map(settings, function(setting) {\n                            return {\n                                id: node_id++,\n                                name: setting,\n                                param: param,\n                                value: setting,\n                                children: create_tree_data(params_samples, index + 1)\n                            };\n                        });\n                    };\n\n                this.set(\"tree_data\", {\n                    name: \"Root\",\n                    id: node_id++,\n                    children: params_samples.length !== 0 ? create_tree_data(params_samples, 0) : null\n                });\n            },\n\n            get_tree_params: function() {\n                // Filter and sort parameters to get list in tree.\n                return _(\n                    this.get(\"tool\")\n                        .get(\"inputs\")\n                        .where({ in_ptree: true })\n                ).sortBy(function(input) {\n                    return input.get(\"ptree_index\");\n                });\n            },\n\n            /**\n     * Returns number of leaves in tree.\n     */\n            get_num_leaves: function() {\n                return this.get_tree_params().reduce(function(memo, param) {\n                    return memo * param.get_samples().length;\n                }, 1);\n            },\n\n            /**\n     * Returns array of ToolInputsSettings objects based on a node and its subtree.\n     */\n            get_node_settings: function(target_node) {\n                // -- Get fixed settings from tool and parent nodes.\n\n                // Start with tool's settings.\n                var fixed_settings = this.get(\"tool\").get_inputs_dict();\n\n                // Get fixed settings using node's parents.\n                var cur_node = target_node.parent;\n                if (cur_node) {\n                    while (cur_node.depth !== 0) {\n                        fixed_settings[cur_node.param.get(\"name\")] = cur_node.value;\n                        cur_node = cur_node.parent;\n                    }\n                }\n\n                // Walk subtree starting at clicked node to get full list of settings.\n                var self = this,\n                    get_settings = function(node, settings) {\n                        // Add setting for this node. Root node does not have a param,\n                        // however.\n                        if (node.param) {\n                            settings[node.param.get(\"name\")] = node.value;\n                        }\n\n                        if (!node.children) {\n                            // At leaf node, so return settings.\n                            return new ToolInputsSettings({\n                                inputs: self.get(\"tool\").get(\"inputs\"),\n                                values: settings\n                            });\n                        } else {\n                            // At interior node: return list of subtree settings.\n                            return _.flatten(\n                                _.map(node.children, function(c) {\n                                    return get_settings(c, _.clone(settings));\n                                })\n                            );\n                        }\n                    },\n                    all_settings = get_settings(target_node, fixed_settings);\n\n                // If user clicked on leaf, settings is a single dict. Convert to array for simplicity.\n                if (!_.isArray(all_settings)) {\n                    all_settings = [all_settings];\n                }\n\n                return all_settings;\n            },\n\n            /**\n     * Returns all nodes connected a particular node; this includes parents and children of the node.\n     */\n            get_connected_nodes: function(node) {\n                var get_subtree_nodes = function(a_node) {\n                    if (!a_node.children) {\n                        return a_node;\n                    } else {\n                        // At interior node: return subtree nodes.\n                        return _.flatten([\n                            a_node,\n                            _.map(a_node.children, function(c) {\n                                return get_subtree_nodes(c);\n                            })\n                        ]);\n                    }\n                };\n\n                // Get node's parents.\n                var parents = [],\n                    cur_parent = node.parent;\n                while (cur_parent) {\n                    parents.push(cur_parent);\n                    cur_parent = cur_parent.parent;\n                }\n\n                return _.flatten([parents, get_subtree_nodes(node)]);\n            },\n\n            /**\n     * Returns the leaf that corresponds to a settings collection.\n     */\n            get_leaf: function(settings) {\n                var cur_node = this.get(\"tree_data\"),\n                    find_child = function(children) {\n                        return _.find(children, function(child) {\n                            return settings[child.param.get(\"name\")] === child.value;\n                        });\n                    };\n\n                while (cur_node.children) {\n                    cur_node = find_child(cur_node.children);\n                }\n                return cur_node;\n            },\n\n            /**\n     * Returns a list of parameters used in tree.\n     */\n            toJSON: function() {\n                // FIXME: returning and jsonifying complete param causes trouble on the server side,\n                // so just use essential attributes for now.\n                return this.get_tree_params().map(function(param) {\n                    return {\n                        name: param.get(\"name\"),\n                        min: param.get(\"min\"),\n                        max: param.get(\"max\"),\n                        num_samples: param.get(\"num_samples\")\n                    };\n                });\n            }\n        });\n\n        var SweepsterTrack = Backbone.Model.extend({\n            defaults: {\n                track: null,\n                mode: \"Pack\",\n                settings: null,\n                regions: null\n            },\n\n            initialize: function(options) {\n                this.set(\"regions\", options.regions);\n                if (options.track) {\n                    // FIXME: find a better way to deal with needed URLs:\n                    var track_config = _.extend(\n                        {\n                            data_url: Galaxy.root + \"dummy1\",\n                            converted_datasets_state_url: Galaxy.root + \"dummy2\"\n                        },\n                        options.track\n                    );\n                    this.set(\"track\", tracks.object_from_template(track_config, {}, null));\n                }\n            },\n\n            same_settings: function(a_track) {\n                var this_settings = this.get(\"settings\"),\n                    other_settings = a_track.get(\"settings\");\n                for (var prop in this_settings) {\n                    if (!other_settings[prop] || this_settings[prop] !== other_settings[prop]) {\n                        return false;\n                    }\n                }\n                return true;\n            },\n\n            toJSON: function() {\n                return {\n                    track: this.get(\"track\").to_dict(),\n                    settings: this.get(\"settings\"),\n                    regions: this.get(\"regions\")\n                };\n            }\n        });\n\n        var TrackCollection = Backbone.Collection.extend({\n            model: SweepsterTrack\n        });\n\n        /**\n * Sweepster visualization model.\n */\n        var SweepsterVisualization = visualization.Visualization.extend({\n            defaults: _.extend({}, visualization.Visualization.prototype.defaults, {\n                dataset: null,\n                tool: null,\n                parameter_tree: null,\n                regions: null,\n                tracks: null,\n                default_mode: \"Pack\"\n            }),\n\n            initialize: function(options) {\n                this.set(\"dataset\", new data.Dataset(options.dataset));\n                this.set(\"tool\", new tools.Tool(options.tool));\n                this.set(\"regions\", new visualization.GenomeRegionCollection(options.regions));\n                this.set(\"tracks\", new TrackCollection(options.tracks));\n\n                var tool_with_samplable_inputs = this.get(\"tool\");\n                this.set(\"tool_with_samplable_inputs\", tool_with_samplable_inputs);\n                // Remove complex parameters for now.\n                tool_with_samplable_inputs.remove_inputs([\"data\", \"hidden_data\", \"conditional\", \"text\"]);\n\n                this.set(\n                    \"parameter_tree\",\n                    new ToolParameterTree({\n                        tool: tool_with_samplable_inputs,\n                        config: options.tree_config\n                    })\n                );\n            },\n\n            add_track: function(track) {\n                this.get(\"tracks\").add(track);\n            },\n\n            toJSON: function() {\n                return {\n                    id: this.get(\"id\"),\n                    title: \"Parameter exploration for dataset '\" + this.get(\"dataset\").get(\"name\") + \"'\",\n                    type: \"sweepster\",\n                    dataset_id: this.get(\"dataset\").id,\n                    tool_id: this.get(\"tool\").id,\n                    regions: this.get(\"regions\").toJSON(),\n                    tree_config: this.get(\"parameter_tree\").toJSON(),\n                    tracks: this.get(\"tracks\").toJSON()\n                };\n            }\n        });\n\n        /**\n * --- Views ---\n */\n\n        /**\n * Sweepster track view.\n */\n        var SweepsterTrackView = Backbone.View.extend({\n            tagName: \"tr\",\n\n            TILE_LEN: 250,\n\n            initialize: function(options) {\n                this.canvas_manager = options.canvas_manager;\n                this.render();\n                this.model.on(\"change:track change:mode\", this.draw_tiles, this);\n            },\n\n            render: function() {\n                // Render settings icon and popup.\n                // TODO: use template.\n                var settings = this.model.get(\"settings\"),\n                    values = settings.get(\"values\"),\n                    settings_td = $(\"<td/>\")\n                        .addClass(\"settings\")\n                        .appendTo(this.$el),\n                    settings_div = $(\"<div/>\")\n                        .addClass(\"track-info\")\n                        .hide()\n                        .appendTo(settings_td);\n                settings_div.append(\n                    $(\"<div/>\")\n                        .css(\"font-weight\", \"bold\")\n                        .text(\"Track Settings\")\n                );\n                settings.get(\"inputs\").each(function(input) {\n                    settings_div.append(input.get(\"label\") + \": \" + values[input.get(\"name\")] + \"<br/>\");\n                });\n                var self = this,\n                    run_on_dataset_button = $(\"<button/>\")\n                        .appendTo(settings_div)\n                        .text(\"Run on complete dataset\")\n                        .click(function() {\n                            settings_div.toggle();\n                            self.trigger(\"run_on_dataset\", settings);\n                        });\n                var icon_menu = mod_icon_btn.create_icon_buttons_menu([\n                    {\n                        title: \"Settings\",\n                        icon_class: \"gear track-settings\",\n                        on_click: function() {\n                            settings_div.toggle();\n                        }\n                    },\n                    {\n                        title: \"Remove\",\n                        icon_class: \"cross-circle\",\n                        on_click: function() {\n                            self.$el.remove();\n                            $(\".tooltip\").remove();\n                            // TODO: remove track from viz collection.\n                        }\n                    }\n                ]);\n                settings_td.prepend(icon_menu.$el);\n\n                // Render tile placeholders.\n                this.model.get(\"regions\").each(function() {\n                    self.$el.append(\n                        $(\"<td/>\")\n                            .addClass(\"tile\")\n                            .html($(\"<img/>\").attr(\"src\", Galaxy.root + \"images/loading_large_white_bg.gif\"))\n                    );\n                });\n\n                if (this.model.get(\"track\")) {\n                    this.draw_tiles();\n                }\n            },\n\n            /**\n     * Draw tiles for regions.\n     */\n            draw_tiles: function() {\n                var self = this,\n                    track = this.model.get(\"track\"),\n                    regions = this.model.get(\"regions\"),\n                    tile_containers = this.$el.find(\"td.tile\");\n\n                // Do nothing if track is not defined.\n                if (!track) {\n                    return;\n                }\n\n                // When data is ready, draw tiles.\n                $.when(track.data_manager.data_is_ready()).then(function(data_ok) {\n                    // Draw tile for each region.\n                    regions.each(function(region, index) {\n                        var resolution = region.length() / self.TILE_LEN,\n                            w_scale = 1 / resolution,\n                            mode = self.model.get(\"mode\");\n                        $.when(track.data_manager.get_data(region, mode, resolution, {})).then(function(tile_data) {\n                            var canvas = self.canvas_manager.new_canvas();\n                            canvas.width = self.TILE_LEN;\n                            canvas.height = track.get_canvas_height(tile_data, mode, w_scale, canvas.width);\n                            track.draw_tile(tile_data, canvas.getContext(\"2d\"), mode, region, w_scale);\n                            $(tile_containers[index])\n                                .empty()\n                                .append(canvas);\n                        });\n                    });\n                });\n            }\n        });\n\n        /**\n * Tool input (parameter) that enables both value and sweeping inputs. View is unusual as\n * it augments an existing input form row rather than creates a completely new HTML element.\n */\n        var ToolInputValOrSweepView = Backbone.View.extend({\n            // Template for rendering sweep inputs:\n            number_input_template:\n                '<div class=\"form-row-input sweep\">' +\n                '<input class=\"min\" type=\"text\" size=\"6\" value=\"<%= min %>\"> - ' +\n                '<input class=\"max\" type=\"text\" size=\"6\" value=\"<%= max %>\">' +\n                ' samples: <input class=\"num_samples\" type=\"text\" size=\"1\" value=\"<%= num_samples %>\">' +\n                \"</div>\",\n\n            select_input_template: '<div class=\"form-row-input sweep\"><%= options %></div>',\n\n            initialize: function(options) {\n                this.$el = options.tool_row;\n                this.render();\n            },\n\n            render: function() {\n                var input = this.model,\n                    type = input.get(\"type\"),\n                    single_input_row = this.$el.find(\".form-row-input\"),\n                    sweep_inputs_row = null;\n\n                // Update tool inputs as single input changes.\n                single_input_row.find(\":input\").change(function() {\n                    input.set(\"value\", $(this).val());\n                });\n\n                // Add row for parameter sweep inputs.\n                if (input instanceof tools.IntegerToolParameter) {\n                    sweep_inputs_row = $(_.template(this.number_input_template)(this.model.toJSON()));\n                } else if (input instanceof tools.SelectToolParameter) {\n                    var options = _.map(this.$el.find(\"select option\"), function(option) {\n                            return $(option).val();\n                        }),\n                        options_text = options.join(\", \");\n                    sweep_inputs_row = $(\n                        _.template(this.select_input_template)({\n                            options: options_text\n                        })\n                    );\n                }\n                sweep_inputs_row.insertAfter(single_input_row);\n\n                // Add buttons for adding/removing parameter.\n                var self = this,\n                    menu = mod_icon_btn.create_icon_buttons_menu(\n                        [\n                            {\n                                title: \"Add parameter to tree\",\n                                icon_class: \"plus-button\",\n                                on_click: function() {\n                                    input.set(\"in_ptree\", true);\n                                    single_input_row.hide();\n                                    sweep_inputs_row.show();\n                                    $(this).hide();\n                                    self.$el.find(\".icon-button.toggle\").show();\n                                }\n                            },\n                            {\n                                title: \"Remove parameter from tree\",\n                                icon_class: \"toggle\",\n                                on_click: function() {\n                                    // Remove parameter from tree params where name matches clicked paramter.\n                                    input.set(\"in_ptree\", false);\n                                    sweep_inputs_row.hide();\n                                    single_input_row.show();\n                                    $(this).hide();\n                                    self.$el.find(\".icon-button.plus-button\").show();\n                                }\n                            }\n                        ],\n                        {}\n                    );\n                this.$el.prepend(menu.$el);\n\n                // Show/hide input rows and icons depending on whether parameter is in the tree.\n                if (input.get(\"in_ptree\")) {\n                    single_input_row.hide();\n                    self.$el.find(\".icon-button.plus-button\").hide();\n                } else {\n                    self.$el.find(\".icon-button.toggle\").hide();\n                    sweep_inputs_row.hide();\n                }\n\n                // Update input's min, max, number of samples as values change.\n                _.each([\"min\", \"max\", \"num_samples\"], function(attr) {\n                    sweep_inputs_row.find(\".\" + attr).change(function() {\n                        input.set(attr, parseFloat($(this).val()));\n                    });\n                });\n            }\n        });\n\n        var ToolParameterTreeDesignView = Backbone.View.extend({\n            className: \"tree-design\",\n\n            initialize: function(options) {\n                this.render();\n            },\n\n            render: function() {\n                // Start with tool form view.\n                var tool_form_view = new tools.ToolFormView({\n                    model: this.model.get(\"tool\")\n                });\n                tool_form_view.render();\n                this.$el.append(tool_form_view.$el);\n\n                // Set up views for each tool input.\n                var self = this,\n                    inputs = self.model.get(\"tool\").get(\"inputs\");\n                this.$el\n                    .find(\".form-row\")\n                    .not(\".form-actions\")\n                    .each(function(i) {\n                        var input_view = new ToolInputValOrSweepView({\n                            model: inputs.at(i),\n                            tool_row: $(this)\n                        });\n                    });\n            }\n        });\n\n        /**\n * Displays and updates parameter tree.\n */\n        var ToolParameterTreeView = Backbone.View.extend({\n            className: \"tool-parameter-tree\",\n\n            initialize: function(options) {\n                // When tree data changes, re-render.\n                this.model.on(\"change:tree_data\", this.render, this);\n            },\n\n            render: function() {\n                // Start fresh.\n                this.$el.children().remove();\n\n                var tree_params = this.model.get_tree_params();\n                if (!tree_params.length) {\n                    return;\n                }\n\n                // Set width, height based on params and samples.\n                this.width = 100 * (2 + tree_params.length);\n                this.height = 15 * this.model.get_num_leaves();\n\n                var self = this;\n\n                // Layout tree.\n                var cluster = d3.layout.cluster().size([this.height, this.width - 160]);\n\n                var diagonal = d3.svg.diagonal().projection(function(d) {\n                    return [d.y, d.x];\n                });\n\n                // Layout nodes.\n                var nodes = cluster.nodes(this.model.get(\"tree_data\"));\n\n                // Setup and add labels for tree levels.\n                var param_depths = _.uniq(_.pluck(nodes, \"y\"));\n                _.each(tree_params, function(param, index) {\n                    var x = param_depths[index + 1],\n                        center_left = $(\"#center\").position().left;\n                    self.$el.append(\n                        $(\"<div>\")\n                            .addClass(\"label\")\n                            .text(param.get(\"label\"))\n                            .css(\"left\", x + center_left)\n                    );\n                });\n\n                // Set up vis element.\n                var vis = d3\n                    .select(this.$el[0])\n                    .append(\"svg\")\n                    .attr(\"width\", this.width)\n                    .attr(\"height\", this.height + 30)\n                    .append(\"g\")\n                    .attr(\"transform\", \"translate(40, 20)\");\n\n                // Draw links.\n                var link = vis\n                    .selectAll(\"path.link\")\n                    .data(cluster.links(nodes))\n                    .enter()\n                    .append(\"path\")\n                    .attr(\"class\", \"link\")\n                    .attr(\"d\", diagonal);\n\n                // Draw nodes.\n                var node = vis\n                    .selectAll(\"g.node\")\n                    .data(nodes)\n                    .enter()\n                    .append(\"g\")\n                    .attr(\"class\", \"node\")\n                    .attr(\"transform\", function(d) {\n                        return \"translate(\" + d.y + \",\" + d.x + \")\";\n                    })\n                    .on(\"mouseover\", function(a_node) {\n                        var connected_node_ids = _.pluck(self.model.get_connected_nodes(a_node), \"id\");\n                        // TODO: probably can use enter() to do this more easily.\n                        node\n                            .filter(function(d) {\n                                return (\n                                    _.find(connected_node_ids, function(id) {\n                                        return id === d.id;\n                                    }) !== undefined\n                                );\n                            })\n                            .style(\"fill\", \"#f00\");\n                    })\n                    .on(\"mouseout\", function() {\n                        node.style(\"fill\", \"#000\");\n                    });\n\n                node.append(\"circle\").attr(\"r\", 9);\n\n                node\n                    .append(\"text\")\n                    .attr(\"dx\", function(d) {\n                        return d.children ? -12 : 12;\n                    })\n                    .attr(\"dy\", 3)\n                    .attr(\"text-anchor\", function(d) {\n                        return d.children ? \"end\" : \"start\";\n                    })\n                    .text(function(d) {\n                        return d.name;\n                    });\n            }\n        });\n\n        /**\n * Sweepster visualization view. View requires rendering in 3-panel setup for now.\n */\n        var SweepsterVisualizationView = Backbone.View.extend({\n            className: \"Sweepster\",\n\n            helpText:\n                \"<div><h4>Getting Started</h4>\" +\n                \"<ol><li>Create a parameter tree by using the icons next to the tool's parameter names to add or remove parameters.\" +\n                \"<li>Adjust the tree by using parameter inputs to select min, max, and number of samples\" +\n                \"<li>Run the tool with different settings by clicking on tree nodes\" +\n                \"</ol></div>\",\n\n            initialize: function(options) {\n                this.canvas_manager = new visualization.CanvasManager(this.$el.parents(\"body\"));\n                this.tool_param_tree_view = new ToolParameterTreeView({\n                    model: this.model.get(\"parameter_tree\")\n                });\n                this.track_collection_container = $(\"<table/>\").addClass(\"tracks\");\n\n                // Handle node clicks for tree data.\n                this.model.get(\"parameter_tree\").on(\"change:tree_data\", this.handle_node_clicks, this);\n\n                // Each track must have a view so it has a canvas manager.\n                var self = this;\n                this.model.get(\"tracks\").each(function(track) {\n                    track.get(\"track\").view = self;\n                });\n\n                // Set block, reverse strand block colors; these colors will be used for all tracks.\n                this.config = config.ConfigSettingCollection.from_models_and_saved_values(\n                    [\n                        {\n                            key: \"name\",\n                            label: \"Name\",\n                            type: \"text\",\n                            default_value: \"\"\n                        },\n                        {\n                            key: \"a_color\",\n                            label: \"A Color\",\n                            type: \"color\",\n                            default_value: \"#FF0000\"\n                        },\n                        {\n                            key: \"c_color\",\n                            label: \"C Color\",\n                            type: \"color\",\n                            default_value: \"#00FF00\"\n                        },\n                        {\n                            key: \"g_color\",\n                            label: \"G Color\",\n                            type: \"color\",\n                            default_value: \"#0000FF\"\n                        },\n                        {\n                            key: \"t_color\",\n                            label: \"T Color\",\n                            type: \"color\",\n                            default_value: \"#FF00FF\"\n                        },\n                        {\n                            key: \"n_color\",\n                            label: \"N Color\",\n                            type: \"color\",\n                            default_value: \"#AAAAAA\"\n                        },\n                        {\n                            key: \"block_color\",\n                            label: \"Block color\",\n                            type: \"color\"\n                        },\n                        {\n                            key: \"reverse_strand_color\",\n                            label: \"Antisense strand color\",\n                            type: \"color\"\n                        }\n                    ],\n                    {}\n                );\n            },\n\n            render: function() {\n                // Render tree design view in left panel.\n                var tree_design_view = new ToolParameterTreeDesignView({\n                    model: this.model.get(\"parameter_tree\")\n                });\n\n                $(\"#left\").append(tree_design_view.$el);\n\n                // Render track collection container/view in right panel.\n                var self = this,\n                    regions = self.model.get(\"regions\"),\n                    tr = $(\"<tr/>\").appendTo(this.track_collection_container);\n\n                regions.each(function(region) {\n                    tr.append($(\"<th>\").text(region.toString()));\n                });\n                tr\n                    .children()\n                    .first()\n                    .attr(\"colspan\", 2);\n\n                var tracks_div = $(\"<div>\").addClass(\"tiles\");\n                $(\"#right\").append(tracks_div.append(this.track_collection_container));\n\n                self.model.get(\"tracks\").each(function(track) {\n                    self.add_track(track);\n                });\n\n                // -- Render help and tool parameter tree in center panel. --\n\n                // Help includes text and a close button.\n                var help_div = $(this.helpText).addClass(\"help\"),\n                    close_button = mod_icon_btn.create_icon_buttons_menu([\n                        {\n                            title: \"Close\",\n                            icon_class: \"cross-circle\",\n                            on_click: function() {\n                                $(\".tooltip\").remove();\n                                help_div.remove();\n                            }\n                        }\n                    ]);\n\n                help_div.prepend(close_button.$el.css(\"float\", \"right\"));\n                $(\"#center\").append(help_div);\n\n                // Parameter tree:\n                this.tool_param_tree_view.render();\n                $(\"#center\").append(this.tool_param_tree_view.$el);\n\n                // Set up handler for tree node clicks.\n                this.handle_node_clicks();\n\n                // Set up visualization menu.\n                var menu = mod_icon_btn.create_icon_buttons_menu(\n                    [\n                        // Save.\n                        /*\n                { icon_class: 'disk--arrow', title: 'Save', on_click: function() {\n                    // Show saving dialog box\n                    show_modal(\"Saving...\", \"progress\");\n\n                    viz.save().success(function(vis_info) {\n                        hide_modal();\n                        viz.set({\n                            'id': vis_info.vis_id,\n                            'has_changes': false\n                        });\n                    })\n                    .error(function() {\n                        show_modal( \"Could Not Save\", \"Could not save visualization. Please try again later.\",\n                                    { \"Close\" : hide_modal } );\n                    });\n                } },\n                */\n                        // Change track modes.\n                        {\n                            icon_class: \"chevron-expand\",\n                            title: \"Set display mode\"\n                        },\n                        // Close viz.\n                        {\n                            icon_class: \"cross-circle\",\n                            title: \"Close\",\n                            on_click: function() {\n                                window.location = \"${h.url_for( controller='visualization', action='list' )}\";\n                            }\n                        }\n                    ],\n                    {\n                        tooltip_config: { placement: \"bottom\" }\n                    }\n                );\n\n                // Create mode selection popup. Mode selection changes default mode and mode for all tracks.\n                var modes = [\"Squish\", \"Pack\"],\n                    mode_mapping = {};\n                _.each(modes, function(mode) {\n                    mode_mapping[mode] = function() {\n                        self.model.set(\"default_mode\", mode);\n                        self.model.get(\"tracks\").each(function(track) {\n                            track.set(\"mode\", mode);\n                        });\n                    };\n                });\n\n                make_popupmenu(menu.$el.find(\".chevron-expand\"), mode_mapping);\n\n                menu.$el.attr(\"style\", \"float: right\");\n                $(\"#right .unified-panel-header-inner\").append(menu.$el);\n            },\n\n            get_base_color: function(base) {\n                return this.config.get_value(base.toLowerCase() + \"_color\") || this.config.get_value(\"n_color\");\n            },\n\n            run_tool_on_dataset: function(settings) {\n                var tool = this.model.get(\"tool\"),\n                    tool_name = tool.get(\"name\"),\n                    dataset = this.model.get(\"dataset\");\n                tool.set_input_values(settings.get(\"values\"));\n                $.when(tool.rerun(dataset)).then(function(outputs) {\n                    // TODO.\n                });\n\n                show_modal(\n                    \"Running \" + tool_name + \" on complete dataset\",\n                    tool_name +\n                        \" is running on dataset '\" +\n                        dataset.get(\"name\") +\n                        \"'. Outputs are in the dataset's history.\",\n                    {\n                        Ok: function() {\n                            hide_modal();\n                        }\n                    }\n                );\n            },\n\n            /**\n     * Add track to model and view.\n     */\n            add_track: function(pm_track) {\n                var self = this,\n                    param_tree = this.model.get(\"parameter_tree\");\n\n                // Add track to model.\n                self.model.add_track(pm_track);\n\n                var track_view = new SweepsterTrackView({\n                    model: pm_track,\n                    canvas_manager: self.canvas_manager\n                });\n                track_view.on(\"run_on_dataset\", self.run_tool_on_dataset, self);\n                self.track_collection_container.append(track_view.$el);\n                track_view.$el.hover(\n                    function() {\n                        var settings_leaf = param_tree.get_leaf(pm_track.get(\"settings\").get(\"values\"));\n                        var connected_node_ids = _.pluck(param_tree.get_connected_nodes(settings_leaf), \"id\");\n\n                        // TODO: can do faster with enter?\n                        d3\n                            .select(self.tool_param_tree_view.$el[0])\n                            .selectAll(\"g.node\")\n                            .filter(function(d) {\n                                return (\n                                    _.find(connected_node_ids, function(id) {\n                                        return id === d.id;\n                                    }) !== undefined\n                                );\n                            })\n                            .style(\"fill\", \"#f00\");\n                    },\n                    function() {\n                        d3\n                            .select(self.tool_param_tree_view.$el[0])\n                            .selectAll(\"g.node\")\n                            .style(\"fill\", \"#000\");\n                    }\n                );\n                return pm_track;\n            },\n\n            /**\n     * Sets up handling when tree nodes are clicked. When a node is clicked, the tool is run for each of\n     * the settings defined by the node's subtree and tracks are added for each run.\n     */\n            handle_node_clicks: function() {\n                // When node clicked in tree, run tool and add tracks to model.\n                var self = this,\n                    param_tree = this.model.get(\"parameter_tree\"),\n                    regions = this.model.get(\"regions\"),\n                    node = d3.select(this.tool_param_tree_view.$el[0]).selectAll(\"g.node\");\n                node.on(\"click\", function(d, i) {\n                    // Get all settings corresponding to node.\n                    var tool = self.model.get(\"tool\"),\n                        dataset = self.model.get(\"dataset\"),\n                        all_settings = param_tree.get_node_settings(d),\n                        run_jobs_deferred = $.Deferred();\n\n                    // Do not allow 10+ jobs to be run.\n                    if (all_settings.length >= 10) {\n                        show_modal(\n                            \"Whoa there cowboy!\",\n                            \"You clicked on a node to try \" +\n                                self.model.get(\"tool\").get(\"name\") +\n                                \" with \" +\n                                all_settings.length +\n                                \" different combinations of settings. You can only run 10 jobs at a time.\",\n                            {\n                                Ok: function() {\n                                    hide_modal();\n                                    run_jobs_deferred.resolve(false);\n                                }\n                            }\n                        );\n                    } else {\n                        run_jobs_deferred.resolve(true);\n                    }\n\n                    // Take action when deferred resolves.\n                    $.when(run_jobs_deferred).then(function(run_jobs) {\n                        if (!run_jobs) {\n                            return;\n                        }\n\n                        // Create and add tracks for each settings group.\n                        var new_tracks = _.map(all_settings, function(settings) {\n                            var pm_track = new SweepsterTrack({\n                                settings: settings,\n                                regions: regions,\n                                mode: self.model.get(\"default_mode\")\n                            });\n                            self.add_track(pm_track);\n                            return pm_track;\n                        });\n\n                        // For each track, run tool using track's settings and update track.\n                        _.each(new_tracks, function(pm_track, index) {\n                            setTimeout(function() {\n                                // Set inputs and run tool.\n                                tool.set_input_values(pm_track.get(\"settings\").get(\"values\"));\n                                $.when(tool.rerun(dataset, regions)).then(function(output) {\n                                    // HACKish: output is an HDA with track config attribute. To create a track\n                                    // that works correctly with Backbone relational, it is necessary to\n                                    // use a modified version of the track config.\n                                    var dataset = output.first(),\n                                        track_config = dataset.get(\"track_config\");\n                                    // Set dataset to be the tool's output.\n                                    track_config.dataset = dataset;\n                                    // Set tool to null so that it is not unpacked; unpacking it messes with\n                                    // the tool parameters and parameter tree.\n                                    track_config.tool = null;\n\n                                    track_config.prefs = self.config.to_key_value_dict();\n\n                                    // Create and add track for output dataset.\n                                    var track_obj = tracks.object_from_template(track_config, self, null);\n                                    track_obj.init_for_tool_data();\n\n                                    pm_track.set(\"track\", track_obj);\n                                });\n                            }, index * 10000);\n                        });\n                    });\n                });\n            }\n        });\n\n        return {\n            SweepsterVisualization: SweepsterVisualization,\n            SweepsterVisualizationView: SweepsterVisualizationView\n        };\n    }\n);\n"]}