{"version":3,"sources":["viz/viz_views.js"],"names":["define","_","TrackHeaderView","Backbone","View","extend","className","initialize","config","get","on","this","update_name","render","$el","append","$","addClass","model","drag_handle_class","text","get_value","action_icons","render_action_icons","dblclick","e","stopPropagation","find","each","self","add_action_icon","hide","appendTo","set_display_modes","display_modes","icon_dict","name","title","css_class","on_click_fn","prepend","new_modes","attr","tooltip","click","mode","init_mode","mode_icon","track","i","mode_mapping","change_mode","make_popupmenu"],"mappings":"aAAAA,QAAQ,mBAAoB,SAASC,GAmHjC,OACIC,gBAhHkBC,SAASC,KAAKC,QAChCC,UAAW,eAAXA,WAAW,WAEXC,KAAAA,MAAYC,OAAAC,IAAA,QAAWC,GAAA,eAAAC,KAAAC,YAAAD,MACnBA,KAAAE,UAGHA,OAPsC,WAUnCF,KAAKG,IAAIC,OAAOC,EAAE,UAAUC,SAASN,KAAKO,MAAMC,oBADpDN,KAAQC,IAAAC,OACJC,EAAKF,UACIC,SACH,cAEGK,KAAKT,KAAKO,MAAMV,OAAOa,UAAU,UAI1CV,KAAKW,gBAGLX,KAAAY,sBAGCZ,KAFDG,IAAAU,SAAA,SAAAC,GACIA,EAAEC,oBAINf,KAAKG,IAAIC,OAAOC,EAAE,gCAKrBJ,YAhCsC,WA+BnCD,KAAKG,IAAIa,KAAK,eAAeP,KAAKT,KAAKO,MAAMV,OAAOa,UAAU,UAK9DE,oBAAiBP,WAIjBf,IAAE2B,EAAKjB,KACHkB,KAAAA,UAAKC,EAAAA,UADTb,SAAA,eAFKc,OAaLC,SAAArB,KAAAG,KACAb,EAAA2B,KAAKK,KAAAA,MAAAA,iBAA6BC,SAAAA,GApDCL,EAAAC,gBA0C3BK,EAAUC,KAatBD,EAAAE,MAXYF,EAAUG,UACVH,EAAUI,YAatBT,EAAiBU,QACTX,EAAJE,QAWIpB,KAAAsB,kBAAkBG,KAAML,MAAxBG,gBAZRJ,gBAAiB,SAASM,EAAMC,EAAOC,EAAWC,EAAaC,EAAST,GAmBxEE,IAAAA,EAAAA,KACItB,KAAK8B,aAAWL,GAAApB,EAAA,QACZ0B,KAAA,QAAAL,GACHpB,SAAA,eAjBIA,SAASqB,GAmBdK,UAjBKC,MAAM,WAmBXL,EAAAV,EAAAX,SAEKA,SAAM2B,KAAOC,WAjBdf,GAmBJpB,KAAKW,aAAayB,GAAUL,QAOxBT,kBAAWe,SAAMd,EAAce,GAC/BC,GAAAA,EAAAA,CAOKvC,KAAAO,MANDgB,cAAAO,EAOH9B,KARoBO,MAArB2B,KAAAC,GAAAnC,KAAAO,MAAAV,OAAAa,UAAA,SAAAV,KAAAO,MAAAgB,cAAA,GARJvB,KAAKW,aAAayB,UAAUL,KAAK,QAAS,0BAA4B/B,KAAKkC,KAAO,KAwBtF3C,IAAAA,IApBQ8C,EAAQrC,KAAKO,MAmBlBgC,KACHhD,EAAiBA,EAAAA,EAAAA,EAAAA,cAAAA,OAAAA,EAAAA,EAAAA,IAAAA,CADrB,IAAA2C,EAAAG,EAAAd,cAAAe,GAnHJC,EAAAL,GAAA,SAAAA,GAqGoB,OAAO,WACHG,EAAMG,YAAYN,IAtG1C,CA4GmBA,GAGPO,eAAezC,KAAKW,aAAayB,UAAWG","file":"../../scripts/viz/viz_views.js","sourcesContent":["define([\"libs/underscore\"], function(_) {\n    /**\n * View for track/group header.\n */\n    var TrackHeaderView = Backbone.View.extend({\n        className: \"track-header\",\n\n        initialize: function() {\n            // Watch and update name changes.\n            this.model.config.get(\"name\").on(\"change:value\", this.update_name, this);\n            this.render();\n        },\n\n        render: function() {\n            this.$el.append($(\"<div/>\").addClass(this.model.drag_handle_class));\n            this.$el.append(\n                $(\"<div/>\")\n                    .addClass(\"track-name\")\n                    .text(this.model.config.get_value(\"name\"))\n            );\n\n            // Icons container.\n            this.action_icons = {};\n            this.render_action_icons();\n\n            // Suppress double clicks in header so that they do not impact viz under header.\n            this.$el.dblclick(function(e) {\n                e.stopPropagation();\n            });\n\n            // Needed for floating elts in header.\n            this.$el.append($(\"<div style='clear: both'/>\"));\n        },\n\n        update_name: function() {\n            this.$el.find(\".track-name\").text(this.model.config.get_value(\"name\"));\n        },\n\n        render_action_icons: function() {\n            var self = this;\n            this.icons_div = $(\"<div/>\")\n                .addClass(\"track-icons\")\n                .hide()\n                .appendTo(this.$el);\n            _.each(this.model.action_icons_def, function(icon_dict) {\n                self.add_action_icon(\n                    icon_dict.name,\n                    icon_dict.title,\n                    icon_dict.css_class,\n                    icon_dict.on_click_fn,\n                    icon_dict.prepend,\n                    icon_dict.hide\n                );\n            });\n\n            // Set up behavior for modes popup.\n            this.set_display_modes(this.model.display_modes);\n        },\n\n        /**\n     * Add an action icon to this object. Appends icon unless prepend flag is specified.\n     */\n        add_action_icon: function(name, title, css_class, on_click_fn, prepend, hide) {\n            var self = this;\n            this.action_icons[name] = $(\"<a/>\")\n                .attr(\"title\", title)\n                .addClass(\"icon-button\")\n                .addClass(css_class)\n                .tooltip()\n                .click(function() {\n                    on_click_fn(self.model);\n                })\n                .appendTo(this.icons_div);\n            if (hide) {\n                this.action_icons[name].hide();\n            }\n        },\n\n        /**\n     * Set track's modes and update mode icon popup.\n     */\n        set_display_modes: function(new_modes, init_mode) {\n            if (!new_modes) {\n                return;\n            }\n\n            // HACK: move this out of view and into track.\n\n            // Set modes, init mode.\n            this.model.display_modes = new_modes;\n            this.model.mode = init_mode || this.model.config.get_value(\"mode\") || this.model.display_modes[0];\n\n            this.action_icons.mode_icon.attr(\"title\", \"Set display mode (now: \" + this.mode + \")\");\n\n            // Setup popup menu for changing modes.\n            var self = this,\n                track = this.model,\n                mode_mapping = {};\n            for (var i = 0, len = track.display_modes.length; i < len; i++) {\n                var mode = track.display_modes[i];\n                mode_mapping[mode] = (function(mode) {\n                    return function() {\n                        track.change_mode(mode);\n                        // HACK: the popup menu messes with the track's hover event, so manually show/hide\n                        // icons div for now.\n                        //self.icons_div.show();\n                        //track.container_div.mouseleave(function() { track.icons_div.hide(); } );\n                    };\n                })(mode);\n            }\n\n            make_popupmenu(this.action_icons.mode_icon, mode_mapping);\n        }\n    });\n\n    return {\n        TrackHeaderView: TrackHeaderView\n    };\n});\n"]}