{"version":3,"sources":["viz/trackster.js"],"names":["ui","view","require","mod_utils","define","cssLoadFile","Base","initialize","TracksterUI","_","tracks","visualization","mod_icon_btn","query_string","GridView","save_viz","this","Galaxy","modal","title","arguments","extend","bookmarks","Model","baseURL","chrom","end","body","$","each","push","position","children","root","annotation","text","vis_json","stringify","viz_config","overview_drawable","config","get_value","vis_id","vis_info","has_changes","start","low","history","pushState","overview","overview_track_name","Cancel","type","dataType","data","id","dbkey","JSON","self","create_icon_buttons_menu","icon_class","new_tracks","track","url","window","location","hash","error","show","buttons","add_drawable","DrawableGroup","createButtonMenu","on_click","select_datasets","object_from_template","handle_unsaved_changes","placement","name","bookmarks_container","css","delete_icon_container","slideUp","delete_icon","make_text_editable","tooltip_config","buttonMenu","menu","add_bookmark","editable","editor","load_chroms_deferred","addClass","viewport_config","position_div","overview_drawable_name","annotation_div","change_chrom","click","go_to","drawables_config","drawable_config","new_bookmark","i","remove","drawables","set_overview","num_rows","use_textarea","help_text","bookmark","create_visualization","view_config","bookmarks_config","set_up_router","TracksterView","header","when","then","chrom_info","options","undefined","length","move_fraction","Backbone","init_keyboard_nav","document","keyup","e","which","Math","round","viewport_container","height","scrollTop","append","galaxy_config","view_existing","choose_existing_or_new","view_new","hide","Leave without Saving","off","listTracksParams","Save","View","$el","attr","tracks_grid","url_base","dict_format","force_right_panel","dataset_params","get","app","container","alert","View in saved visualization","response","view_in_saved","embedded","Add to visualization","parent","find","val","param","html","viewport","create_browser","init_editor","ajax","success","hda_ldda","template_view_new","Create","dbkeys_in_genomes","map","r","default_dbkey","focus","select2","trigger","gene_region","add_dataset","data_type","track_data","high","on","GalaxyApp"],"mappings":"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","file":"../../scripts/viz/trackster.js","sourcesContent":["/**\n * Top-level trackster code, used for creating/loading visualizations and user interface elements.\n */\n\n// global variables\nvar ui = null;\nvar view = null;\nvar browser_router = null;\n\n// load required libraries\nrequire([\n    \"utils/utils\",\n    \"libs/jquery/jquery.event.drag\",\n    \"libs/jquery/jquery.event.hover\",\n    \"libs/jquery/jquery.mousewheel\",\n    \"libs/jquery/jquery-ui\",\n    \"libs/jquery/select2\",\n    \"libs/farbtastic\",\n    \"libs/jquery/jquery.form\",\n    \"libs/jquery/jquery.rating\",\n    \"ui/editable-text\"\n], function(mod_utils) {\n    mod_utils.cssLoadFile(\"static/style/jquery.rating.css\");\n    mod_utils.cssLoadFile(\"static/style/autocomplete_tagging.css\");\n    mod_utils.cssLoadFile(\"static/style/jquery-ui/smoothness/jquery-ui.css\");\n    mod_utils.cssLoadFile(\"static/style/library.css\");\n    mod_utils.cssLoadFile(\"static/style/trackster.css\");\n});\n\n// trackster viewer\ndefine(\n    [\n        \"libs/underscore\",\n        \"viz/trackster/tracks\",\n        \"viz/visualization\",\n        \"mvc/ui/icon-button\",\n        \"utils/query-string-parsing\",\n        \"mvc/grid/grid-view\"\n    ],\n    function(_, tracks, visualization, mod_icon_btn, query_string, GridView) {\n        /**\n * Base Object/Model for inhertiance.\n */\n        var Base = function() {\n            if (this.initialize) {\n                this.initialize.apply(this, arguments);\n            }\n        };\n        Base.extend = Backbone.Model.extend;\n\n        /**\n * User interface controls for trackster\n */\n        var TracksterUI = Base.extend({\n            initialize: function(baseURL) {\n                this.baseURL = baseURL;\n            },\n\n            /**\n     * Save visualization, returning a Deferred object for the remote call to save.\n     */\n            save_viz: function() {\n                // show dialog\n                Galaxy.modal.show({ title: \"Saving...\", body: \"progress\" });\n\n                // Save bookmarks.\n                var bookmarks = [];\n                $(\".bookmark\").each(function() {\n                    bookmarks.push({\n                        position: $(this)\n                            .children(\".position\")\n                            .text(),\n                        annotation: $(this)\n                            .children(\".annotation\")\n                            .text()\n                    });\n                });\n\n                // FIXME: give unique IDs to Drawables and save overview as ID.\n                var overview_track_name = view.overview_drawable\n                        ? view.overview_drawable.config.get_value(\"name\")\n                        : null,\n                    viz_config = {\n                        view: view.to_dict(),\n                        viewport: {\n                            chrom: view.chrom,\n                            start: view.low,\n                            end: view.high,\n                            overview: overview_track_name\n                        },\n                        bookmarks: bookmarks\n                    };\n\n                // Make call to save visualization.\n                return $.ajax({\n                    url: Galaxy.root + \"visualization/save\",\n                    type: \"POST\",\n                    dataType: \"json\",\n                    data: {\n                        id: view.vis_id,\n                        title: view.config.get_value(\"name\"),\n                        dbkey: view.dbkey,\n                        type: \"trackster\",\n                        vis_json: JSON.stringify(viz_config)\n                    }\n                })\n                    .success(function(vis_info) {\n                        Galaxy.modal.hide();\n                        view.vis_id = vis_info.vis_id;\n                        view.has_changes = false;\n\n                        // Needed to set URL when first saving a visualization.\n                        window.history.pushState({}, \"\", vis_info.url + window.location.hash);\n                    })\n                    .error(function() {\n                        // show dialog\n                        Galaxy.modal.show({\n                            title: \"Could Not Save\",\n                            body: \"Could not save visualization. Please try again later.\",\n                            buttons: {\n                                Cancel: function() {\n                                    Galaxy.modal.hide();\n                                }\n                            }\n                        });\n                    });\n            },\n\n            /**\n     * Create button menu\n     */\n            createButtonMenu: function() {\n                var self = this,\n                    menu = mod_icon_btn.create_icon_buttons_menu(\n                        [\n                            {\n                                icon_class: \"plus-button\",\n                                title: \"Add tracks\",\n                                on_click: function() {\n                                    visualization.select_datasets({ dbkey: view.dbkey }, function(new_tracks) {\n                                        _.each(new_tracks, function(track) {\n                                            view.add_drawable(tracks.object_from_template(track, view, view));\n                                        });\n                                    });\n                                }\n                            },\n                            {\n                                icon_class: \"block--plus\",\n                                title: \"Add group\",\n                                on_click: function() {\n                                    view.add_drawable(\n                                        new tracks.DrawableGroup(view, view, {\n                                            name: \"New Group\"\n                                        })\n                                    );\n                                }\n                            },\n                            {\n                                icon_class: \"bookmarks\",\n                                title: \"Bookmarks\",\n                                on_click: function() {\n                                    // HACK -- use style to determine if panel is hidden and hide/show accordingly.\n                                    force_right_panel($(\"div#right\").css(\"right\") == \"0px\" ? \"hide\" : \"show\");\n                                }\n                            },\n                            {\n                                icon_class: \"globe\",\n                                title: \"Circster\",\n                                on_click: function() {\n                                    window.location = self.baseURL + \"visualization/circster?id=\" + view.vis_id;\n                                }\n                            },\n                            {\n                                icon_class: \"disk--arrow\",\n                                title: \"Save\",\n                                on_click: function() {\n                                    self.save_viz();\n                                }\n                            },\n                            {\n                                icon_class: \"cross-circle\",\n                                title: \"Close\",\n                                on_click: function() {\n                                    self.handle_unsaved_changes(view);\n                                }\n                            }\n                        ],\n                        {\n                            tooltip_config: { placement: \"bottom\" }\n                        }\n                    );\n                this.buttonMenu = menu;\n                return menu;\n            },\n\n            /**\n     * Add bookmark.\n     */\n            add_bookmark: function(position, annotation, editable) {\n                // Create HTML.\n                var bookmarks_container = $(\"#right .unified-panel-body\"),\n                    new_bookmark = $(\"<div/>\")\n                        .addClass(\"bookmark\")\n                        .appendTo(bookmarks_container);\n\n                var position_div = $(\"<div/>\")\n                        .addClass(\"position\")\n                        .appendTo(new_bookmark),\n                    position_link = $(\"<a href=''/>\")\n                        .text(position)\n                        .appendTo(position_div)\n                        .click(function() {\n                            view.go_to(position);\n                            return false;\n                        }),\n                    annotation_div = $(\"<div/>\")\n                        .text(annotation)\n                        .appendTo(new_bookmark);\n\n                // If editable, enable bookmark deletion and annotation editing.\n                if (editable) {\n                    var delete_icon_container = $(\"<div/>\")\n                            .addClass(\"delete-icon-container\")\n                            .prependTo(new_bookmark)\n                            .click(function() {\n                                // Remove bookmark.\n                                new_bookmark.slideUp(\"fast\");\n                                new_bookmark.remove();\n                                view.has_changes = true;\n                                return false;\n                            }),\n                        delete_icon = $(\"<a href=''/>\")\n                            .addClass(\"icon-button delete\")\n                            .appendTo(delete_icon_container);\n                    annotation_div\n                        .make_text_editable({\n                            num_rows: 3,\n                            use_textarea: true,\n                            help_text: \"Edit bookmark note\"\n                        })\n                        .addClass(\"annotation\");\n                }\n\n                view.has_changes = true;\n                return new_bookmark;\n            },\n\n            /**\n     * Create a complete Trackster visualization. Returns view.\n     */\n            create_visualization: function(view_config, viewport_config, drawables_config, bookmarks_config, editable) {\n                // Create view.\n                var self = this,\n                    view = new tracks.TracksterView(_.extend(view_config, { header: false }));\n                view.editor = true;\n                $.when(view.load_chroms_deferred).then(function(chrom_info) {\n                    // Viewport config.\n                    if (viewport_config) {\n                        var chrom = viewport_config.chrom,\n                            start = viewport_config.start,\n                            end = viewport_config.end,\n                            overview_drawable_name = viewport_config.overview;\n\n                        if (chrom && start !== undefined && end) {\n                            view.change_chrom(chrom, start, end);\n                        } else {\n                            // No valid viewport, so use first chromosome.\n                            view.change_chrom(chrom_info[0].chrom);\n                        }\n                    } else {\n                        // No viewport, so use first chromosome.\n                        view.change_chrom(chrom_info[0].chrom);\n                    }\n\n                    // Add drawables to view.\n                    if (drawables_config) {\n                        // FIXME: can from_dict() be used to create view and add drawables?\n                        var drawable_config, drawable_type, drawable;\n                        for (var i = 0; i < drawables_config.length; i++) {\n                            view.add_drawable(tracks.object_from_template(drawables_config[i], view, view));\n                        }\n                    }\n\n                    // Set overview.\n                    var overview_drawable;\n                    for (var i = 0; i < view.drawables.length; i++) {\n                        if (view.drawables[i].config.get_value(\"name\") === overview_drawable_name) {\n                            view.set_overview(view.drawables[i]);\n                            break;\n                        }\n                    }\n\n                    // Load bookmarks.\n                    if (bookmarks_config) {\n                        var bookmark;\n                        for (var i = 0; i < bookmarks_config.length; i++) {\n                            bookmark = bookmarks_config[i];\n                            self.add_bookmark(bookmark[\"position\"], bookmark[\"annotation\"], editable);\n                        }\n                    }\n\n                    // View has no changes as of yet.\n                    view.has_changes = false;\n                });\n\n                // Final initialization.\n                this.set_up_router({ view: view });\n\n                return view;\n            },\n\n            /**\n     * Set up location router to use hashes as track browser locations.\n     */\n            set_up_router: function(options) {\n                new visualization.TrackBrowserRouter(options);\n                Backbone.history.start();\n            },\n\n            /**\n     * Set up keyboard navigation for a visualization.\n     */\n            init_keyboard_nav: function(view) {\n                // Keyboard navigation. Scroll ~7% of height when scrolling up/down.\n                $(document).keyup(function(e) {\n                    // Do not navigate if arrow keys used in input element.\n                    if ($(e.srcElement).is(\":input\")) {\n                        return;\n                    }\n\n                    // Key codes: left == 37, up == 38, right == 39, down == 40\n                    switch (e.which) {\n                        case 37:\n                            view.move_fraction(0.25);\n                            break;\n                        case 38:\n                            var change = Math.round(view.viewport_container.height() / 15.0);\n                            view.viewport_container.scrollTop(view.viewport_container.scrollTop() - 20);\n                            break;\n                        case 39:\n                            view.move_fraction(-0.25);\n                            break;\n                        case 40:\n                            var change = Math.round(view.viewport_container.height() / 15.0);\n                            view.viewport_container.scrollTop(view.viewport_container.scrollTop() + 20);\n                            break;\n                    }\n                });\n            },\n\n            /**\n     * Handle unsaved changes in visualization.\n     */\n            handle_unsaved_changes: function(view) {\n                if (view.has_changes) {\n                    var self = this;\n                    Galaxy.modal.show({\n                        title: \"Close visualization\",\n                        body:\n                            \"There are unsaved changes to your visualization which will be lost if you do not save them.\",\n                        buttons: {\n                            Cancel: function() {\n                                Galaxy.modal.hide();\n                            },\n                            \"Leave without Saving\": function() {\n                                $(window).off(\"beforeunload\");\n                                window.location = Galaxy.root + \"visualization\";\n                            },\n                            Save: function() {\n                                $.when(self.save_viz()).then(function() {\n                                    window.location = Galaxy.root + \"visualization\";\n                                });\n                            }\n                        }\n                    });\n                } else {\n                    window.location = Galaxy.root + \"visualization\";\n                }\n            }\n        });\n\n        var TracksterView = Backbone.View.extend({\n            // initalize trackster\n            initialize: function() {\n                // load ui\n                ui = new TracksterUI(Galaxy.root);\n\n                // create button menu\n                ui.createButtonMenu();\n\n                // attach the button menu to the panel header and float it left\n                ui.buttonMenu.$el.attr(\"style\", \"float: right\");\n\n                // add to center panel\n                $(\"#center .unified-panel-header-inner\").append(ui.buttonMenu.$el);\n\n                // configure right panel\n                $(\"#right .unified-panel-title\").append(\"Bookmarks\");\n                $(\"#right .unified-panel-icons\").append(\n                    \"<a id='add-bookmark-button' class='icon-button menu-button plus-button' href='javascript:void(0);' title='Add bookmark'></a>\"\n                );\n\n                // resize view when showing/hiding right panel (bookmarks for now).\n                $(\"#right-border\").click(function() {\n                    view.resize_window();\n                });\n\n                // hide right panel\n                force_right_panel(\"hide\");\n\n                // check if id is available\n                if (galaxy_config.app.id) {\n                    this.view_existing();\n                } else if (query_string.get(\"dataset_id\")) {\n                    this.choose_existing_or_new();\n                } else {\n                    this.view_new();\n                }\n            },\n\n            choose_existing_or_new: function() {\n                var self = this;\n                var dbkey = query_string.get(\"dbkey\"),\n                    listTracksParams = {},\n                    dataset_params = {\n                        dbkey: dbkey,\n                        dataset_id: query_string.get(\"dataset_id\"),\n                        hda_ldda: query_string.get(\"hda_ldda\"),\n                        gene_region: query_string.get(\"gene_region\")\n                    };\n                if (dbkey) {\n                    listTracksParams[\"f-dbkey\"] = dbkey;\n                }\n\n                Galaxy.modal.show({\n                    title: \"View Data in a New or Saved Visualization?\",\n                    // either have text in here or have to remove body and the header/footer margins\n                    body:\n                        \"<p><ul style='list-style: disc inside none'>You can add this dataset as:\" +\n                        \"<li>a new track to one of your existing, saved Trackster \" +\n                        \"sessions if they share the genome build: <b>\" +\n                        (dbkey || \"Not available.\") +\n                        \"</b></li>\" +\n                        \"<li>or create a new session with this dataset as the only track</li>\" +\n                        \"</ul></p>\",\n                    buttons: {\n                        Cancel: function() {\n                            window.location = Galaxy.root + \"visualizations/list\";\n                        },\n                        \"View in saved visualization\": function() {\n                            self.view_in_saved(dataset_params);\n                        },\n                        \"View in new visualization\": function() {\n                            self.view_new();\n                        }\n                    }\n                });\n            },\n\n            // view\n            view_in_saved: function(dataset_params) {\n                var tracks_grid = new GridView({\n                    url_base: Galaxy.root + \"visualization/list_tracks\",\n                    dict_format: true,\n                    embedded: true\n                });\n                Galaxy.modal.show({\n                    title: \"Add Data to Saved Visualization\",\n                    body: tracks_grid.$el,\n                    buttons: {\n                        Cancel: function() {\n                            window.location = Galaxy.root + \"visualizations/list\";\n                        },\n                        \"Add to visualization\": function() {\n                            $(parent.document)\n                                .find(\"input[name=id]:checked\")\n                                .each(function() {\n                                    dataset_params.id = $(this).val();\n                                    window.location =\n                                        Galaxy.root + \"visualization/trackster?\" + $.param(dataset_params);\n                                });\n                        }\n                    }\n                });\n            },\n\n            // view\n            view_existing: function() {\n                // get config\n                var viz_config = galaxy_config.app.viz_config;\n\n                // view\n                view = ui.create_visualization(\n                    {\n                        container: $(\"#center .unified-panel-body\"),\n                        name: viz_config.title,\n                        vis_id: viz_config.vis_id,\n                        dbkey: viz_config.dbkey\n                    },\n                    viz_config.viewport,\n                    viz_config.tracks,\n                    viz_config.bookmarks,\n                    true\n                );\n\n                // initialize editor\n                this.init_editor();\n            },\n\n            // view\n            view_new: function() {\n                // reference this\n                var self = this;\n\n                // ajax\n                $.ajax({\n                    url: Galaxy.root + \"api/genomes?chrom_info=True\",\n                    data: {},\n                    error: function() {\n                        alert(\"Couldn't create new browser.\");\n                    },\n                    success: function(response) {\n                        // show dialog\n                        Galaxy.modal.show({\n                            title: \"New Visualization\",\n                            body: self.template_view_new(response),\n                            buttons: {\n                                Cancel: function() {\n                                    window.location = Galaxy.root + \"visualizations/list\";\n                                },\n                                Create: function() {\n                                    self.create_browser($(\"#new-title\").val(), $(\"#new-dbkey\").val());\n                                    Galaxy.modal.hide();\n                                }\n                            }\n                        });\n\n                        // select default\n                        var dbkeys_in_genomes = response.map(function(r) {\n                            return r[1];\n                        });\n                        if (\n                            galaxy_config.app.default_dbkey &&\n                            _.contains(dbkeys_in_genomes, galaxy_config.app.default_dbkey)\n                        ) {\n                            $(\"#new-dbkey\").val(galaxy_config.app.default_dbkey);\n                        }\n\n                        // change focus\n                        $(\"#new-title\").focus();\n                        $(\"select[name='dbkey']\").select2();\n\n                        // to support the large number of options for dbkey, enable scrolling in overlay.\n                        $(\"#overlay\").css(\"overflow\", \"auto\");\n                    }\n                });\n            },\n\n            // new browser form\n            template_view_new: function(response) {\n                // start template\n                var html =\n                    '<form id=\"new-browser-form\" action=\"javascript:void(0);\" method=\"post\" onsubmit=\"return false;\">' +\n                    '<div class=\"form-row\">' +\n                    '<label for=\"new-title\">Browser name:</label>' +\n                    '<div class=\"form-row-input\">' +\n                    '<input type=\"text\" name=\"title\" id=\"new-title\" value=\"Unnamed\"></input>' +\n                    \"</div>\" +\n                    '<div style=\"clear: both;\"></div>' +\n                    \"</div>\" +\n                    '<div class=\"form-row\">' +\n                    '<label for=\"new-dbkey\">Reference genome build (dbkey): </label>' +\n                    '<div class=\"form-row-input\">' +\n                    '<select name=\"dbkey\" id=\"new-dbkey\">';\n\n                // add dbkeys\n                for (var i = 0; i < response.length; i++) {\n                    html += '<option value=\"' + response[i][1] + '\">' + response[i][0] + \"</option>\";\n                }\n\n                // close selection/finalize template\n                html +=\n                    \"</select>\" +\n                    \"</div>\" +\n                    '<div style=\"clear: both;\"></div>' +\n                    \"</div>\" +\n                    '<div class=\"form-row\">' +\n                    \"Is the build not listed here? \" +\n                    '<a href=\"' +\n                    Galaxy.root +\n                    'user/dbkeys?use_panels=True\">Add a Custom Build</a>' +\n                    \"</div>\" +\n                    \"</form>\";\n\n                // return\n                return html;\n            },\n\n            // create\n            create_browser: function(name, dbkey) {\n                $(document).trigger(\"convert_to_values\");\n\n                view = ui.create_visualization(\n                    {\n                        container: $(\"#center .unified-panel-body\"),\n                        name: name,\n                        dbkey: dbkey\n                    },\n                    galaxy_config.app.gene_region\n                );\n\n                // initialize editor\n                this.init_editor();\n\n                // modify view setting\n                view.editor = true;\n            },\n\n            // initialization for editor-specific functions.\n            init_editor: function() {\n                // set title\n                $(\"#center .unified-panel-title\").text(view.config.get_value(\"name\") + \" (\" + view.dbkey + \")\");\n\n                // add dataset\n                if (galaxy_config.app.add_dataset)\n                    $.ajax({\n                        url: Galaxy.root + \"api/datasets/\" + galaxy_config.app.add_dataset,\n                        data: { hda_ldda: \"hda\", data_type: \"track_config\" },\n                        dataType: \"json\",\n                        success: function(track_data) {\n                            view.add_drawable(tracks.object_from_template(track_data, view, view));\n                        }\n                    });\n\n                // initialize icons\n                $(\"#add-bookmark-button\").click(function() {\n                    // add new bookmark.\n                    var position = view.chrom + \":\" + view.low + \"-\" + view.high,\n                        annotation = \"Bookmark description\";\n                    return ui.add_bookmark(position, annotation, true);\n                });\n\n                // initialize keyboard\n                ui.init_keyboard_nav(view);\n\n                $(window).on(\"beforeunload\", function() {\n                    if (view.has_changes) {\n                        return \"There are unsaved changes to your visualization that will be lost if you leave this page.\";\n                    }\n                });\n            }\n        });\n\n        return {\n            TracksterUI: TracksterUI,\n            GalaxyApp: TracksterView\n        };\n    }\n);\n"]}