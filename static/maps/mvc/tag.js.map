{"version":3,"sources":["mvc/tag.js"],"names":["define","baseMVC","_l","TagsEditor","Backbone","View","extend","LoggableMixin","tagName","className","select_width","events","initialize","options","usePrompt","this","label","workflow_mode","keydown","hiddenUntilActivated","$activator","render","self","html","$el","_workflowTemplate","_defaultTemplate","placeholder","select2","width","tags","_getTagsUsed","_setUpBehaviors","_hashToName","startsWith","tag","slice","_nameToHash","_renderEditor","join","show_editor","_renderTags","keydownHandler","e","which","hideEditor","showEditor","tagsToCSV","addButton","model","get","indexOf","renderedArray","renderString","push","length","tagsArray","isArray","isEmpty","_","map","escape","sort","$input","find","Galaxy","user","event","save","added","val","_addNewTagToTagsUsed","text","tagsUsed","newTag","contains","set","remove","off","stopListening","toString","prototype","call"],"mappings":"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","file":"../../scripts/mvc/tag.js","sourcesContent":["define([\"mvc/base-mvc\", \"utils/localization\"], function(baseMVC, _l) {\n    // =============================================================================\n    /** A view on any model that has a 'tags' attribute (a list of tag strings)\n *      Incorporates the select2 jQuery plugin for tags display/editing:\n *      http://ivaynberg.github.io/select2/\n */\n    var TagsEditor = Backbone.View\n        .extend(baseMVC.LoggableMixin)\n        .extend(baseMVC.HiddenUntilActivatedViewMixin)\n        .extend({\n            tagName: \"div\",\n            className: \"tags-display\",\n            select_width: \"100%\",\n            events: {},\n\n            /** Set up listeners, parse options */\n            initialize: function(options) {\n                //console.debug( this, options );\n                // only listen to the model only for changes to tags - re-render\n                this.show_editor = false;\n                if (options.usePrompt === false) {\n                    this.label = \"\";\n                } else {\n                    this.label = '<label class=\"prompt\">' + _l(\"Tags\") + \"</label>\";\n                }\n                this.workflow_mode = options.workflow_mode || false;\n                if (this.workflow_mode) {\n                    this.events.click = \"showEditor\";\n                    this.events.keydown = \"keydownHandler\";\n                }\n                this.hiddenUntilActivated(options.$activator, options);\n            },\n\n            /** Build the DOM elements, call select to on the created input, and set up behaviors */\n            render: function() {\n                var self = this;\n                if (this.workflow_mode) {\n                    this.$el.html(this._workflowTemplate());\n                } else {\n                    this.$el.html(this._defaultTemplate());\n                }\n                this.$input().select2({\n                    placeholder: \"Add tags\",\n                    width: this.workflow_mode ? this.width : this.select_width,\n                    tags: function() {\n                        // initialize possible tags in the dropdown based on all the tags the user has used so far\n                        return self._getTagsUsed();\n                    }\n                });\n\n                this._setUpBehaviors();\n                return this;\n            },\n\n            _hashToName: function(tag) {\n                if (tag.startsWith(\"#\")) {\n                    return \"name:\" + tag.slice(1);\n                }\n                return tag;\n            },\n\n            _nameToHash: function(tag) {\n                if (tag.startsWith(\"name:\")) {\n                    tag = \"#\" + tag.slice(5);\n                }\n                return tag;\n            },\n\n            /** @returns {String} the html text used to build the view's DOM */\n            _defaultTemplate: function() {\n                return [this.label, this._renderEditor()].join(\"\");\n            },\n\n            _workflowTemplate: function() {\n                // Shows labels by default, event handler controls whether we show tags or editor\n                return [this.show_editor ? this._renderEditor() : this._renderTags()].join(\" \");\n            },\n\n            keydownHandler: function(e) {\n                switch (e.which) {\n                    // esc\n                    case 27:\n                        // hide the tag editor when pressing escape\n                        this.hideEditor();\n                        break;\n                }\n            },\n\n            showEditor: function() {\n                this.show_editor = true;\n                this.render();\n            },\n\n            hideEditor: function() {\n                this.show_editor = false;\n                this.render();\n            },\n\n            _renderEditor: function() {\n                // set up initial tags by adding as CSV to input vals (necc. to init select2)\n                return '<input class=\"tags-input\" value=\"' + this.tagsToCSV() + '\"/>';\n            },\n\n            _renderTags: function() {\n                var tags = this.model.get(\"tags\");\n                var addButton = \"static/images/fugue/tag--plus.png\";\n                var renderedArray = [];\n                _.each(tags, function(tag) {\n                    tag = tag.indexOf(\"name:\") == 0 ? tag.slice(5) : tag;\n                    var renderString = '<span class=\"label label-info\">' + tag + \"</span>\";\n                    renderedArray.push(renderString);\n                });\n                if (renderedArray.length === 0) {\n                    // If there are no tags to render we just show the add-tag-button\n                    renderedArray.push(\"<img src=\" + addButton + ' class=\"add-tag-button\" title=\"Add tags\"/>');\n                }\n                return renderedArray.join(\" \");\n            },\n\n            /** @returns {String} the sorted, comma-separated tags from the model */\n            tagsToCSV: function() {\n                var self = this;\n                var tagsArray = this.model.get(\"tags\");\n                if (!_.isArray(tagsArray) || _.isEmpty(tagsArray)) {\n                    return \"\";\n                }\n                return tagsArray\n                    .map(function(tag) {\n                        return _.escape(self._nameToHash(tag));\n                    })\n                    .sort()\n                    .join(\",\");\n            },\n\n            /** @returns {jQuery} the input for this view */\n            $input: function() {\n                return this.$el.find(\"input.tags-input\");\n            },\n\n            /** @returns {String[]} all tags used by the current user */\n            _getTagsUsed: function() {\n                //TODO: global\n                var self = this;\n                return _.map(Galaxy.user.get(\"tags_used\"), self._nameToHash);\n            },\n\n            /** set up any event listeners on the view's DOM (mostly handled by select2) */\n            _setUpBehaviors: function() {\n                var self = this;\n                this.$input().on(\"change\", function(event) {\n                    // Modify any 'hashtag' 'nametags'\n                    event.val = _.map(event.val, self._hashToName);\n                    // save the model's tags in either remove or added event\n                    self.model.save({ tags: event.val });\n                    // if it's new, add the tag to the users tags\n                    if (event.added) {\n                        //??: solve weird behavior in FF on test.galaxyproject.org where\n                        //  event.added.text is string object: 'String{ 0=\"o\", 1=\"n\", 2=\"e\" }'\n                        self._addNewTagToTagsUsed(event.added.text + \"\");\n                    }\n                });\n            },\n\n            /** add a new tag (if not already there) to the list of all tags used by the user\n     *  @param {String} newTag  the tag to add to the list of used\n     */\n            _addNewTagToTagsUsed: function(newTag) {\n                //TODO: global\n                var tagsUsed = Galaxy.user.get(\"tags_used\");\n                if (!_.contains(tagsUsed, newTag)) {\n                    tagsUsed.push(newTag);\n                    tagsUsed.sort();\n                    Galaxy.user.set(\"tags_used\", tagsUsed);\n                }\n            },\n\n            /** shut down event listeners and remove this view's DOM */\n            remove: function() {\n                this.$input.off();\n                this.stopListening(this.model);\n                Backbone.View.prototype.remove.call(this);\n            },\n\n            /** string rep */\n            toString: function() {\n                return [\"TagsEditor(\", this.model + \"\", \")\"].join(\"\");\n            }\n        });\n\n    return {\n        TagsEditor: TagsEditor\n    };\n});\n"]}