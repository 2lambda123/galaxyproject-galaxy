{"version":3,"sources":["mvc/base-mvc.js"],"names":["define","_","addLogging","_l","LoggableMixin","_logNamespace","SessionStorageModel","Backbone","Model","extend","initialize","_checkEnabledSessionStorage","this","initialAttrs","id","existing","isNew","defaults","_read","silent","save","on","sessionStorage","alert","window","length","err","model","trigger","options","returned","_create","_update","_delete","success","error","json","set","toJSON","setItem","JSON","stringify","DOMException","navigator","userAgent","indexOf","parse","getItem","removeItem","hasOwnProperty","_log","toString","prototype","omit","mixin","lastArg","propsHash","args","unshift","slice","call","arguments","apply","SearchableModelMixin","searchAttributes","searchAliases","searchAttribute","attrKey","searchFor","attrVal","get","undefined","isArray","_searchArrayAttribute","toLowerCase","any","array","elem","filter","search","key","matches","term","split","matchesAll","terms","match","s","all","replace","HiddenUntilActivatedViewMixin","hiddenUntilActivated","$activator","toggle","showFn","jQuery","showSpeed","HUAVOptions","hasBeenShown","$elementShown","is","isHidden","ev","hidden","isFunction","onshowFirstTime","onhide","onshow","DraggableViewMixin","attributes","draggable","$dragHandle","$","toggleDraggable","dragEndHandler","handle","addEventListener","draggableOn","removeEventListener","bind","_dragStartHandler","dragStartHandler","_dragEndHandler","attr","event","dataTransfer","effectAllowed","setData","SelectableViewMixin","selectable","selected","$selector","_renderSelected","showSelector","speed","fxSpeed","toggleClass","toggleSelector","hideSelector","show","hide","toggleSelect","deselect","select","wrapTemplate","template","jsonNamespace","templateFn","join","view","templateVars","buildComparator","ascending","a","b","attribute_name"],"mappings":"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","file":"../../scripts/mvc/base-mvc.js","sourcesContent":["define([\"libs/underscore\", \"libs/backbone\", \"utils/add-logging\", \"utils/localization\"], function(\n    _,\n    Backbone,\n    addLogging,\n    _l\n) {\n    \"use strict\";\n\n    //==============================================================================\n    /** @class Mixin to add logging capabilities to an object.\n *      Designed to allow switching an objects log output off/on at one central\n *      statement. Can be used with plain browser console (or something more\n *      complex like an AJAX logger).\n *  <br />NOTE: currently only uses the console.debug log function\n *  (as opposed to debug, error, warn, etc.)\n *  @name LoggableMixin\n *\n *  @example\n *  // Add to your models/views at the definition using chaining:\n *      var MyModel = Backbone.Model.extend( LoggableMixin ).extend({ // ... });\n *\n *  // or - more explicitly AFTER the definition:\n *      var MyModel = Backbone.Model.extend({\n *          logger  : console\n *          // ...\n *          this.log( '$#%& it! - broken already...' );\n *      })\n *      _.extend( MyModel.prototype, LoggableMixin )\n *\n */\n    var LoggableMixin = /** @lends LoggableMixin# */ {\n        // replace null with console (if available) to see all logs for a particular view/model\n        /** The logging object whose log function will be used to output\n     *      messages. Null will supress all logging. Commonly set to console.\n     */\n        logger: null,\n        /** @type {String} a namespace for filtering/focusing log output */\n        _logNamespace: \".\"\n    };\n    addLogging(LoggableMixin);\n\n    //==============================================================================\n    /** Backbone model that syncs to the browser's sessionStorage API.\n *      This all largely happens behind the scenes and no special calls are required.\n */\n    var SessionStorageModel = Backbone.Model.extend({\n        initialize: function(initialAttrs) {\n            // check for sessionStorage and error if no id is provided\n            this._checkEnabledSessionStorage();\n            if (!initialAttrs.id) {\n                throw new Error(\"SessionStorageModel requires an id in the initial attributes\");\n            }\n            this.id = initialAttrs.id;\n\n            // load existing from storage (if any), clear any attrs set by bbone before init is called,\n            //  layer initial over existing and defaults, and save\n            var existing = !this.isNew() ? this._read(this) : {};\n            this.clear({ silent: true });\n            this.save(_.extend({}, this.defaults, existing, initialAttrs), {\n                silent: true\n            });\n\n            // save on any change to it immediately\n            this.on(\"change\", function() {\n                this.save();\n            });\n        },\n\n        _checkEnabledSessionStorage: function() {\n            try {\n                return window.sessionStorage.length >= 0;\n            } catch (err) {\n                alert(\"Please enable cookies in your browser for this Galaxy site\");\n                return false;\n            }\n        },\n\n        /** override of bbone sync to save to sessionStorage rather than REST\n     *      bbone options (success, errror, etc.) should still apply\n     */\n        sync: function(method, model, options) {\n            if (!options.silent) {\n                model.trigger(\"request\", model, {}, options);\n            }\n            var returned = {};\n            switch (method) {\n                case \"create\":\n                    returned = this._create(model);\n                    break;\n                case \"read\":\n                    returned = this._read(model);\n                    break;\n                case \"update\":\n                    returned = this._update(model);\n                    break;\n                case \"delete\":\n                    returned = this._delete(model);\n                    break;\n            }\n            if (returned !== undefined || returned !== null) {\n                if (options.success) {\n                    options.success();\n                }\n            } else {\n                if (options.error) {\n                    options.error();\n                }\n            }\n            return returned;\n        },\n\n        /** set storage to the stringified item */\n        _create: function(model) {\n            try {\n                var json = model.toJSON(),\n                    set = sessionStorage.setItem(model.id, JSON.stringify(json));\n                return set === null ? set : json;\n                // DOMException is thrown in Safari if in private browsing mode and sessionStorage is attempted:\n                // http://stackoverflow.com/questions/14555347\n                // TODO: this could probably use a more general soln - like detecting priv. mode + safari => non-ajaxing Model\n            } catch (err) {\n                if (!(err instanceof DOMException && navigator.userAgent.indexOf(\"Safari\") > -1)) {\n                    throw err;\n                }\n            }\n            return null;\n        },\n\n        /** read and parse json from storage */\n        _read: function(model) {\n            return JSON.parse(sessionStorage.getItem(model.id));\n        },\n\n        /** set storage to the item (alias to create) */\n        _update: function(model) {\n            return model._create(model);\n        },\n\n        /** remove the item from storage */\n        _delete: function(model) {\n            return sessionStorage.removeItem(model.id);\n        },\n\n        /** T/F whether sessionStorage contains the model's id (data is present) */\n        isNew: function() {\n            return !sessionStorage.hasOwnProperty(this.id);\n        },\n\n        _log: function() {\n            return JSON.stringify(this.toJSON(), null, \"  \");\n        },\n        toString: function() {\n            return \"SessionStorageModel(\" + this.id + \")\";\n        }\n    });\n    (function() {\n        SessionStorageModel.prototype = _.omit(SessionStorageModel.prototype, \"url\", \"urlRoot\");\n    })();\n\n    //==============================================================================\n    /** Function that allows mixing of hashs into bbone MVC while showing the mixins first\n *      (before the more local class overrides/hash).\n *      Basically, a simple reversal of param order on _.defaults() - to show mixins in top of definition.\n *  @example:\n *      var NewModel = Something.extend( mixin( MyMixinA, MyMixinB, { ... myVars : ... }) );\n *\n *  NOTE: this does not combine any hashes (like events, etc.) and you're expected to handle that\n */\n    function mixin(mixinHash1, /* mixinHash2, etc: ... variadic */ propsHash) {\n        var args = Array.prototype.slice.call(arguments, 0),\n            lastArg = args.pop();\n        args.unshift(lastArg);\n        return _.defaults.apply(_, args);\n    }\n\n    //==============================================================================\n    /** A mixin for models that allow T/F/Matching to their attributes - useful when\n *      searching or filtering collections of models.\n * @example:\n *      see hda-model for searchAttribute and searchAliases definition examples.\n *      see history-contents.matches for how collections are filtered\n *      and see readonly-history-view.searchHdas for how user input is connected to the filtering\n */\n    var SearchableModelMixin = {\n        /** what attributes of an HDA will be used in a text search */\n        searchAttributes: [\n            // override\n        ],\n\n        /** our attr keys don't often match the labels we display to the user - so, when using\n     *      attribute specifiers ('name=\"bler\"') in a term, allow passing in aliases for the\n     *      following attr keys.\n     */\n        searchAliases: {\n            // override\n        },\n\n        /** search the attribute with key attrKey for the string searchFor; T/F if found */\n        searchAttribute: function(attrKey, searchFor) {\n            var attrVal = this.get(attrKey);\n            //this.debug( 'searchAttribute', attrKey, attrVal, searchFor );\n            // bail if empty searchFor or unsearchable values\n            if (!searchFor || (attrVal === undefined || attrVal === null)) {\n                return false;\n            }\n            // pass to sep. fn for deep search of array attributes\n            if (_.isArray(attrVal)) {\n                return this._searchArrayAttribute(attrVal, searchFor);\n            }\n            return (\n                attrVal\n                    .toString()\n                    .toLowerCase()\n                    .indexOf(searchFor.toLowerCase()) !== -1\n            );\n        },\n\n        /** deep(er) search for array attributes; T/F if found */\n        _searchArrayAttribute: function(array, searchFor) {\n            //this.debug( '_searchArrayAttribute', array, searchFor );\n            searchFor = searchFor.toLowerCase();\n            //precondition: searchFor has already been validated as non-empty string\n            //precondition: assumes only 1 level array\n            //TODO: could possibly break up searchFor more (CSV...)\n            return _.any(array, function(elem) {\n                return (\n                    elem\n                        .toString()\n                        .toLowerCase()\n                        .indexOf(searchFor.toLowerCase()) !== -1\n                );\n            });\n        },\n\n        /** search all searchAttributes for the string searchFor,\n     *      returning a list of keys of attributes that contain searchFor\n     */\n        search: function(searchFor) {\n            var model = this;\n            return _.filter(this.searchAttributes, function(key) {\n                return model.searchAttribute(key, searchFor);\n            });\n        },\n\n        /** alias of search, but returns a boolean; accepts attribute specifiers where\n     *      the attributes searched can be narrowed to a single attribute using\n     *      the form: matches( 'genome_build=hg19' )\n     *      (the attribute keys allowed can also be aliases to the true attribute key;\n     *          see searchAliases above)\n     *  @param {String} term   plain text or ATTR_SPECIFIER sep. key=val pair\n     *  @returns {Boolean} was term found in (any) attribute(s)\n     */\n        matches: function(term) {\n            var ATTR_SPECIFIER = \"=\",\n                split = term.split(ATTR_SPECIFIER);\n            // attribute is specified - search only that\n            if (split.length >= 2) {\n                var attrKey = split[0];\n                attrKey = this.searchAliases[attrKey] || attrKey;\n                return this.searchAttribute(attrKey, split[1]);\n            }\n            // no attribute is specified - search all attributes in searchAttributes\n            return !!this.search(term).length;\n        },\n\n        /** an implicit AND search for all terms; IOW, a model must match all terms given\n     *      where terms is a whitespace separated value string.\n     *      e.g. given terms of: 'blah bler database=hg19'\n     *          an HDA would have to have attributes containing blah AND bler AND a genome_build == hg19\n     *      To include whitespace in terms: wrap the term in double quotations (name=\"blah bler\").\n     */\n        matchesAll: function(terms) {\n            var model = this;\n            // break the terms up by whitespace and filter out the empty strings\n            terms = terms.match(/(\".*\"|\\w*=\".*\"|\\S*)/g).filter(function(s) {\n                return !!s;\n            });\n            return _.all(terms, function(term) {\n                term = term.replace(/\"/g, \"\");\n                return model.matches(term);\n            });\n        }\n    };\n\n    //==============================================================================\n    /** A view that renders hidden and shows when some activator is clicked.\n *      options:\n *          showFn: the effect used to show/hide the View (defaults to jq.toggle)\n *          $elementShown: some jqObject (defaults to this.$el) to be shown/hidden\n *          onShowFirstTime: fn called the first time the view is shown\n *          onshow: fn called every time the view is shown\n *          onhide: fn called every time the view is hidden\n *      events:\n *          hiddenUntilActivated:shown (the view is passed as an arg)\n *          hiddenUntilActivated:hidden (the view is passed as an arg)\n *      instance vars:\n *          view.hidden {boolean} is the view in the hidden state\n */\n    var HiddenUntilActivatedViewMixin = /** @lends hiddenUntilActivatedMixin# */ {\n        //TODO: since this is a mixin, consider moving toggle, hidden into HUAVOptions\n\n        /** call this in your initialize to set up the mixin\n     *  @param {jQuery} $activator the 'button' that's clicked to show/hide the view\n     *  @param {Object} hash with mixin options\n     */\n        hiddenUntilActivated: function($activator, options) {\n            // call this in your view's initialize fn\n            options = options || {};\n            //TODO: flesh out options - show them all here\n            this.HUAVOptions = {\n                $elementShown: this.$el,\n                showFn: jQuery.prototype.toggle,\n                showSpeed: \"fast\"\n            };\n            _.extend(this.HUAVOptions, options || {});\n            /** has this been shown already (and onshowFirstTime called)? */\n            this.HUAVOptions.hasBeenShown = this.HUAVOptions.$elementShown.is(\":visible\");\n            this.hidden = this.isHidden();\n\n            if ($activator) {\n                var mixin = this;\n                $activator.on(\"click\", function(ev) {\n                    mixin.toggle(mixin.HUAVOptions.showSpeed);\n                });\n            }\n        },\n\n        //TODO:?? remove? use .hidden?\n        /** returns T/F if the view is hidden */\n        isHidden: function() {\n            return this.HUAVOptions.$elementShown.is(\":hidden\");\n        },\n\n        /** toggle the hidden state, show/hide $elementShown, call onshow/hide, trigger events */\n        toggle: function() {\n            //TODO: more specific name - toggle is too general\n            // can be called manually as well with normal toggle arguments\n            //TODO: better as a callback (when the show/hide is actually done)\n            // show\n            if (this.hidden) {\n                // fire the optional fns on the first/each showing - good for render()\n                if (!this.HUAVOptions.hasBeenShown) {\n                    if (_.isFunction(this.HUAVOptions.onshowFirstTime)) {\n                        this.HUAVOptions.hasBeenShown = true;\n                        this.HUAVOptions.onshowFirstTime.call(this);\n                    }\n                }\n                if (_.isFunction(this.HUAVOptions.onshow)) {\n                    this.HUAVOptions.onshow.call(this);\n                    this.trigger(\"hiddenUntilActivated:shown\", this);\n                }\n                this.hidden = false;\n\n                // hide\n            } else {\n                if (_.isFunction(this.HUAVOptions.onhide)) {\n                    this.HUAVOptions.onhide.call(this);\n                    this.trigger(\"hiddenUntilActivated:hidden\", this);\n                }\n                this.hidden = true;\n            }\n            return this.HUAVOptions.showFn.apply(this.HUAVOptions.$elementShown, arguments);\n        }\n    };\n\n    //==============================================================================\n    /** Mixin for views that can be dragged and dropped\n *      Allows for the drag behavior to be turned on/off, setting/removing jQuery event\n *          handlers each time.\n *      dataTransfer data is set to the JSON string of the view's model.toJSON\n *      Override '$dragHandle' to define the draggable DOM sub-element.\n */\n    var DraggableViewMixin = {\n        /** set up instance vars to track whether this view is currently draggable */\n        initialize: function(attributes) {\n            /** is the body of this hda view expanded/not? */\n            this.draggable = attributes.draggable || false;\n        },\n\n        /** what part of the view's DOM triggers the dragging */\n        $dragHandle: function() {\n            //TODO: make abstract/general - move this to listItem\n            // override to the element you want to be your view's handle\n            return this.$(\".title-bar\");\n        },\n\n        /** toggle whether this view is draggable */\n        toggleDraggable: function() {\n            if (this.draggable) {\n                this.draggableOff();\n            } else {\n                this.draggableOn();\n            }\n        },\n\n        /** allow the view to be dragged, set up event handlers */\n        draggableOn: function() {\n            this.draggable = true;\n            this.dragStartHandler = _.bind(this._dragStartHandler, this);\n            this.dragEndHandler = _.bind(this._dragEndHandler, this);\n\n            var handle = this.$dragHandle()\n                .attr(\"draggable\", true)\n                .get(0);\n            handle.addEventListener(\"dragstart\", this.dragStartHandler, false);\n            handle.addEventListener(\"dragend\", this.dragEndHandler, false);\n        },\n\n        /** turn of view dragging and remove event listeners */\n        draggableOff: function() {\n            this.draggable = false;\n            var handle = this.$dragHandle()\n                .attr(\"draggable\", false)\n                .get(0);\n            handle.removeEventListener(\"dragstart\", this.dragStartHandler, false);\n            handle.removeEventListener(\"dragend\", this.dragEndHandler, false);\n        },\n\n        /** sets the dataTransfer data to the model's toJSON\n     *  @fires draggable:dragstart (bbone event) which is passed the event and this view\n     */\n        _dragStartHandler: function(event) {\n            event.dataTransfer.effectAllowed = \"move\";\n            //ASSUMES: this.model\n            //TODO: all except IE: should be 'application/json', IE: must be 'text'\n            event.dataTransfer.setData(\"text\", JSON.stringify(this.model.toJSON()));\n            this.trigger(\"draggable:dragstart\", event, this);\n            return false;\n        },\n\n        /** handle the dragend\n     *  @fires draggable:dragend (bbone event) which is passed the event and this view\n     */\n        _dragEndHandler: function(event) {\n            this.trigger(\"draggable:dragend\", event, this);\n            return false;\n        }\n    };\n\n    //==============================================================================\n    /** Mixin that allows a view to be selected (gen. from a list).\n *      Selection controls ($selector) may be hidden/shown/toggled.\n *          The bbone event 'selectable' is fired when the controls are shown/hidden (passed T/F).\n *      Default rendering is a font-awesome checkbox.\n *      Default selector is '.selector' within the view's $el.\n *      The bbone events 'selected' and 'de-selected' are fired when the $selector is clicked.\n *          Both events are passed the view and the (jQuery) event.\n */\n    var SelectableViewMixin = {\n        /** Set up instance state vars for whether the selector is shown and whether the view has been selected */\n        initialize: function(attributes) {\n            /** is the view currently in selection mode? */\n            this.selectable = attributes.selectable || false;\n            /** is the view currently selected? */\n            this.selected = attributes.selected || false;\n        },\n\n        /** $el sub-element where the selector is rendered and what can be clicked to select. */\n        $selector: function() {\n            return this.$(\".selector\");\n        },\n\n        /** How the selector is rendered - defaults to font-awesome checkbox */\n        _renderSelected: function() {\n            // override\n            this.$selector()\n                .find(\"span\")\n                .toggleClass(\"fa-check-square-o\", this.selected)\n                .toggleClass(\"fa-square-o\", !this.selected);\n        },\n\n        /** Toggle whether the selector is shown */\n        toggleSelector: function() {\n            //TODO: use this.selectable\n            if (!this.$selector().is(\":visible\")) {\n                this.showSelector();\n            } else {\n                this.hideSelector();\n            }\n        },\n\n        /** Display the selector control.\n     *  @param {Number} a jQuery fx speed\n     *  @fires: selectable which is passed true (IOW, the selector is shown) and the view\n     */\n        showSelector: function(speed) {\n            speed = speed !== undefined ? speed : this.fxSpeed;\n            // make sure selected state is represented properly\n            this.selectable = true;\n            this.trigger(\"selectable\", true, this);\n            this._renderSelected();\n            if (speed) {\n                this.$selector().show(speed);\n            } else {\n                this.$selector().show();\n            }\n        },\n\n        /** remove the selector control\n     *  @param {Number} a jQuery fx speed\n     *  @fires: selectable which is passed false (IOW, the selector is not shown) and the view\n     */\n        hideSelector: function(speed) {\n            speed = speed !== undefined ? speed : this.fxSpeed;\n            // reverse the process from showSelect\n            this.selectable = false;\n            this.trigger(\"selectable\", false, this);\n            if (speed) {\n                this.$selector().hide(speed);\n            } else {\n                this.$selector().hide();\n            }\n        },\n\n        /** Toggle whether the view is selected */\n        toggleSelect: function(event) {\n            if (this.selected) {\n                this.deselect(event);\n            } else {\n                this.select(event);\n            }\n        },\n\n        /** Select this view and re-render the selector control to show it\n     *  @param {Event} a jQuery event that caused the selection\n     *  @fires: selected which is passed the view and the DOM event that triggered it (optionally)\n     */\n        select: function(event) {\n            // switch icon, set selected, and trigger event\n            if (!this.selected) {\n                this.trigger(\"selected\", this, event);\n                this.selected = true;\n                this._renderSelected();\n            }\n            return false;\n        },\n\n        /** De-select this view and re-render the selector control to show it\n     *  @param {Event} a jQuery event that caused the selection\n     *  @fires: de-selected which is passed the view and the DOM event that triggered it (optionally)\n     */\n        deselect: function(event) {\n            // switch icon, set selected, and trigger event\n            if (this.selected) {\n                this.trigger(\"de-selected\", this, event);\n                this.selected = false;\n                this._renderSelected();\n            }\n            return false;\n        }\n    };\n\n    //==============================================================================\n    /** Return an underscore template fn from an array of strings.\n *  @param {String[]} template      the template strings to compile into the underscore template fn\n *  @param {String} jsonNamespace   an optional namespace for the json data passed in (defaults to 'model')\n *  @returns {Function} the (wrapped) underscore template fn\n *      The function accepts:\n *\n *  The template strings can access:\n *      the json/model hash using model (\"<%- model.myAttr %>) using the jsonNamespace above\n *      _l: the localizer function\n *      view (if passed): ostensibly, the view using the template (handy for view instance vars)\n *      Because they're namespaced, undefined attributes will not throw an error.\n *\n *  @example:\n *      templateBler : BASE_MVC.wrapTemplate([\n *          '<div class=\"myclass <%- mynamespace.modelClass %>\">',\n *              '<span><% print( _l( mynamespace.message ) ); %>:<%= view.status %></span>'\n *          '</div>'\n *      ], 'mynamespace' )\n *\n *  Meant to be called in a View's definition in order to compile only once.\n *\n */\n    function wrapTemplate(template, jsonNamespace) {\n        jsonNamespace = jsonNamespace || \"model\";\n        var templateFn = _.template(template.join(\"\"));\n        return function(json, view) {\n            var templateVars = { view: view || {}, _l: _l };\n            templateVars[jsonNamespace] = json || {};\n            return templateFn(templateVars);\n        };\n    }\n\n    //==============================================================================\n    /** Return a comparator function for sorted Collections */\n    function buildComparator(attribute_name, options) {\n        options = options || {};\n        var ascending = options.ascending ? 1 : -1;\n        return function __comparator(a, b) {\n            a = a.get(attribute_name);\n            b = b.get(attribute_name);\n            return (a < b ? -1 : a > b ? 1 : 0) * ascending;\n        };\n    }\n\n    //==============================================================================\n    return {\n        LoggableMixin: LoggableMixin,\n        SessionStorageModel: SessionStorageModel,\n        mixin: mixin,\n        SearchableModelMixin: SearchableModelMixin,\n        HiddenUntilActivatedViewMixin: HiddenUntilActivatedViewMixin,\n        DraggableViewMixin: DraggableViewMixin,\n        SelectableViewMixin: SelectableViewMixin,\n        wrapTemplate: wrapTemplate,\n        buildComparator: buildComparator\n    };\n});\n"]}