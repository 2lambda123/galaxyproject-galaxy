{"version":3,"sources":["mvc/collection/collection-li.js"],"names":["define","LIST_ITEM","BASE_MVC","_l","FoldoutListItemView","ListItemView","className","prototype","get","join","id","this","model","initialize","attributes","hasUser","call","_setUpListeners","_","changed","options","has","render","$","replaceWith","_renderSubtitle","templates","subtitle","toJSON","_getFoldoutPanelOptions","linkTarget","extend","$selector","toString","DCListItemView","warnings","purged","titleBarTemplate","wrapTemplate","subtitleTemplate","titleBar","deleted","DCEListItemView","modelString","DatasetDCEListItemView","DATASET_LI","_fetchModelDetails","logger","view","log","NestedDCDCEListItemView","DatasetListItemView","inReadyState","hasDetails","fetch","silent","jQuery","when","_swapNewRender","$newRender","state","$el","addClass"],"mappings":"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","file":"../../../scripts/mvc/collection/collection-li.js","sourcesContent":["define([\"mvc/list/list-item\", \"mvc/dataset/dataset-li\", \"mvc/base-mvc\", \"utils/localization\"], function(\n    LIST_ITEM,\n    DATASET_LI,\n    BASE_MVC,\n    _l\n) {\n    \"use strict\";\n    //==============================================================================\n    var FoldoutListItemView = LIST_ITEM.FoldoutListItemView,\n        ListItemView = LIST_ITEM.ListItemView;\n    /** @class Read only view for DatasetCollection.\n */\n    var DCListItemView = FoldoutListItemView.extend(\n        /** @lends DCListItemView.prototype */ {\n            className: FoldoutListItemView.prototype.className + \" dataset-collection\",\n            id: function() {\n                return [\"dataset_collection\", this.model.get(\"id\")].join(\"-\");\n            },\n\n            /** override to add linkTarget */\n            initialize: function(attributes) {\n                this.linkTarget = attributes.linkTarget || \"_blank\";\n                this.hasUser = attributes.hasUser;\n                FoldoutListItemView.prototype.initialize.call(this, attributes);\n            },\n\n            /** event listeners */\n            _setUpListeners: function() {\n                FoldoutListItemView.prototype._setUpListeners.call(this);\n                this.listenTo(this.model, \"change\", function(model, options) {\n                    // if the model has changed deletion status render it entirely\n                    if (_.has(model.changed, \"deleted\")) {\n                        this.render();\n\n                        // if the model has been decorated after the fact with the element count,\n                        // render the subtitle where the count is displayed\n                    } else if (_.has(model.changed, \"element_count\")) {\n                        this.$(\"> .title-bar .subtitle\").replaceWith(this._renderSubtitle());\n                    }\n                });\n            },\n\n            // ......................................................................... rendering\n            /** render a subtitle to show the user what sort of collection this is */\n            _renderSubtitle: function() {\n                return $(this.templates.subtitle(this.model.toJSON(), this));\n            },\n\n            // ......................................................................... foldout\n            /** override to add linktarget to sub-panel */\n            _getFoldoutPanelOptions: function() {\n                var options = FoldoutListItemView.prototype._getFoldoutPanelOptions.call(this);\n                return _.extend(options, {\n                    linkTarget: this.linkTarget,\n                    hasUser: this.hasUser\n                });\n            },\n\n            /** override to not catch sub-panel selectors */\n            $selector: function() {\n                return this.$(\"> .selector\");\n            },\n\n            // ......................................................................... misc\n            /** String representation */\n            toString: function() {\n                var modelString = this.model ? this.model + \"\" : \"(no model)\";\n                return \"DCListItemView(\" + modelString + \")\";\n            }\n        }\n    );\n\n    // ............................................................................ TEMPLATES\n    /** underscore templates */\n    DCListItemView.prototype.templates = (function() {\n        var warnings = _.extend({}, FoldoutListItemView.prototype.templates.warnings, {\n            error: BASE_MVC.wrapTemplate([\n                // error during index fetch - show error on dataset\n                \"<% if( model.error ){ %>\",\n                '<div class=\"errormessagesmall\">',\n                _l(\"There was an error getting the data for this collection\"),\n                \": <%- model.error %>\",\n                \"</div>\",\n                \"<% } %>\"\n            ]),\n            purged: BASE_MVC.wrapTemplate([\n                \"<% if( model.purged ){ %>\",\n                '<div class=\"purged-msg warningmessagesmall\">',\n                _l(\"This collection has been deleted and removed from disk\"),\n                \"</div>\",\n                \"<% } %>\"\n            ]),\n            deleted: BASE_MVC.wrapTemplate([\n                // deleted not purged\n                \"<% if( model.deleted && !model.purged ){ %>\",\n                '<div class=\"deleted-msg warningmessagesmall\">',\n                _l(\"This collection has been deleted\"),\n                \"</div>\",\n                \"<% } %>\"\n            ])\n        });\n\n        // use element identifier\n        var titleBarTemplate = BASE_MVC.wrapTemplate(\n            [\n                '<div class=\"title-bar clear\" tabindex=\"0\">',\n                '<div class=\"title\">',\n                '<span class=\"name\"><%- collection.element_identifier || collection.name %></span>',\n                \"</div>\",\n                '<div class=\"subtitle\"></div>',\n                \"</div>\"\n            ],\n            \"collection\"\n        );\n\n        // use element identifier\n        var subtitleTemplate = BASE_MVC.wrapTemplate(\n            [\n                '<div class=\"subtitle\">',\n                '<% var countText = collection.element_count? ( collection.element_count + \" \" ) : \"\"; %>',\n                '<%        if( collection.collection_type === \"list\" ){ %>',\n                _l(\"a list of <%- countText %>datasets\"),\n                '<% } else if( collection.collection_type === \"paired\" ){ %>',\n                _l(\"a pair of datasets\"),\n                '<% } else if( collection.collection_type === \"list:paired\" ){ %>',\n                _l(\"a list of <%- countText %>dataset pairs\"),\n                '<% } else if( collection.collection_type === \"list:list\" ){ %>',\n                _l(\"a list of <%- countText %>dataset lists\"),\n                \"<% } %>\",\n                \"</div>\"\n            ],\n            \"collection\"\n        );\n\n        return _.extend({}, FoldoutListItemView.prototype.templates, {\n            warnings: warnings,\n            titleBar: titleBarTemplate,\n            subtitle: subtitleTemplate\n        });\n    })();\n\n    //==============================================================================\n    /** @class Read only view for DatasetCollectionElement.\n */\n    var DCEListItemView = ListItemView.extend(\n        /** @lends DCEListItemView.prototype */ {\n            /** add the DCE class to the list item */\n            className: ListItemView.prototype.className + \" dataset-collection-element\",\n\n            /** set up */\n            initialize: function(attributes) {\n                if (attributes.logger) {\n                    this.logger = this.model.logger = attributes.logger;\n                }\n                this.log(\"DCEListItemView.initialize:\", attributes);\n                ListItemView.prototype.initialize.call(this, attributes);\n            },\n\n            // ......................................................................... misc\n            /** String representation */\n            toString: function() {\n                var modelString = this.model ? this.model + \"\" : \"(no model)\";\n                return \"DCEListItemView(\" + modelString + \")\";\n            }\n        }\n    );\n\n    // ............................................................................ TEMPLATES\n    /** underscore templates */\n    DCEListItemView.prototype.templates = (function() {\n        // use the element identifier here - since that will persist and the user will need it\n        var titleBarTemplate = BASE_MVC.wrapTemplate(\n            [\n                '<div class=\"title-bar clear\" tabindex=\"0\">',\n                '<div class=\"title\">',\n                '<span class=\"name\"><%- element.element_identifier %></span>',\n                \"</div>\",\n                '<div class=\"subtitle\"></div>',\n                \"</div>\"\n            ],\n            \"element\"\n        );\n\n        return _.extend({}, ListItemView.prototype.templates, {\n            titleBar: titleBarTemplate\n        });\n    })();\n\n    //==============================================================================\n    /** @class Read only view for a DatasetCollectionElement that is also an DatasetAssociation\n *      (a dataset contained in a dataset collection).\n */\n    var DatasetDCEListItemView = DATASET_LI.DatasetListItemView.extend(\n        /** @lends DatasetDCEListItemView.prototype */ {\n            className: DATASET_LI.DatasetListItemView.prototype.className + \" dataset-collection-element\",\n\n            /** set up */\n            initialize: function(attributes) {\n                if (attributes.logger) {\n                    this.logger = this.model.logger = attributes.logger;\n                }\n                this.log(\"DatasetDCEListItemView.initialize:\", attributes);\n                DATASET_LI.DatasetListItemView.prototype.initialize.call(this, attributes);\n            },\n\n            /** In this override, only get details if in the ready state.\n     *  Note: fetch with no 'change' event triggering to prevent automatic rendering.\n     */\n            _fetchModelDetails: function() {\n                var view = this;\n                if (view.model.inReadyState() && !view.model.hasDetails()) {\n                    return view.model.fetch({ silent: true });\n                }\n                return jQuery.when();\n            },\n\n            // ......................................................................... misc\n            /** String representation */\n            toString: function() {\n                var modelString = this.model ? this.model + \"\" : \"(no model)\";\n                return \"DatasetDCEListItemView(\" + modelString + \")\";\n            }\n        }\n    );\n\n    // ............................................................................ TEMPLATES\n    /** underscore templates */\n    DatasetDCEListItemView.prototype.templates = (function() {\n        // use the element identifier here and not the dataset name\n        //TODO:?? can we steal the DCE titlebar?\n        var titleBarTemplate = BASE_MVC.wrapTemplate(\n            [\n                '<div class=\"title-bar clear\" tabindex=\"0\">',\n                '<span class=\"state-icon\"></span>',\n                '<div class=\"title\">',\n                '<span class=\"name\"><%- element.element_identifier %></span>',\n                \"</div>\",\n                \"</div>\"\n            ],\n            \"element\"\n        );\n\n        return _.extend({}, DATASET_LI.DatasetListItemView.prototype.templates, {\n            titleBar: titleBarTemplate\n        });\n    })();\n\n    //==============================================================================\n    /** @class Read only view for a DatasetCollectionElement that is also a DatasetCollection\n *      (a nested DC).\n */\n    var NestedDCDCEListItemView = DCListItemView.extend(\n        /** @lends NestedDCDCEListItemView.prototype */ {\n            className: DCListItemView.prototype.className + \" dataset-collection-element\",\n\n            /** In this override, add the state as a class for use with state-based CSS */\n            _swapNewRender: function($newRender) {\n                DCListItemView.prototype._swapNewRender.call(this, $newRender);\n                var state = this.model.get(\"state\") || \"ok\";\n                this.$el.addClass(\"state-\" + state);\n                return this.$el;\n            },\n\n            // ......................................................................... misc\n            /** String representation */\n            toString: function() {\n                var modelString = this.model ? this.model + \"\" : \"(no model)\";\n                return \"NestedDCDCEListItemView(\" + modelString + \")\";\n            }\n        }\n    );\n\n    //==============================================================================\n    return {\n        DCListItemView: DCListItemView,\n        DCEListItemView: DCEListItemView,\n        DatasetDCEListItemView: DatasetDCEListItemView,\n        NestedDCDCEListItemView: NestedDCDCEListItemView\n    };\n});\n"]}