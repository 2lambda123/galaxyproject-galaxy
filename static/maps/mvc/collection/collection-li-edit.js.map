{"version":3,"sources":["mvc/collection/collection-li-edit.js"],"names":["define","DC_LI","BASE_MVC","_l","DCListItemView","DCListItemEdit","extend","initialize","attributes","prototype","call","this","toString","model","DCEListItemEdit","DCEListItemView","DATASET_LI_EDIT","DatasetListItemEdit","_fetchModelDetails","jQuery","when","view","inReadyState","hasDetails","fetch","silent","_renderDeleteButton","DatasetDCEListItemEdit","templates","_","titleBar","DatasetDCEListItemView","NestedDCDCEListItemEdit","NestedDCDCEListItemView"],"mappings":"aAAAA,QAAQ,+BAAgC,8BAA+B,eAAgB,sBAAuB,SAC1GC,EADJD,EAMIE,EACAC,GACA,IAAIC,EAAiBH,EAAMG,eAKnBC,EAAAD,EAAAE,QADmCC,WAAA,SAAAC,GAG/BJ,EAAeK,UAAUF,WAAWG,KAAKC,KAAMH,IAO/CI,SAAO,WAXnB,MAAA,mBAYSD,KAAAE,MAAAF,KAAAE,MAAA,GAAA,cAZT,OAoBIC,EAAkBC,EAAAA,gBAAlBD,EAAkBC,EAAgBT,QAK9BC,WAAY,SAASC,GAIrBO,EAAAN,UAAAF,WAAAG,KAAAC,KAAAH,IAKCI,SAAA,WADG,MAAO,oBAbnBD,KAAAE,MAAAF,KAAAE,MAAA,GAAA,cAasD,OAe1CG,EAAgBC,EAAoBR,oBAAqBC,QAG7DH,WAAA,SAAAC,GACAQ,EAAAC,oBAAAR,UAAAF,WAAAG,KAAAC,KAAAH,IAQKU,mBAAA,WACD,IAAOC,EAAOC,KAhByB,OAAAC,EAAAR,MAAAS,iBAAAD,EAAAR,MAAAU,aAc5BF,EAAKR,MAAMW,OAAQC,QAAQ,IAM1CC,OAAqBN,QAIrBM,oBAAA,WACA,OAAA,MA1BRd,SAAA,WAkCA,MAAA,2BAN8BD,KAAKE,MAAQF,KAAKE,MAAQ,GAAK,cAM7D,OAzFJ,OA2FIc,EAAuBlB,UAAUmB,UAMjCC,EAAAvB,UAAAU,EAAAC,oBAAAR,UAAAmB,WACAE,SAAA7B,EAAA8B,uBAAAtB,UAAAmB,UAAAE,YAeIzB,eAAgBA,EAChBS,gBAAiBA,EACjBa,uBAAwBA,EACxBK,wBAVe/B,EAAAgC,wBAA2C3B,QAFtDM,SAAU,WAQX,MAAA,4BADPD,KAAAE,MAAAF,KAAAE,MAAA,GAAA,cACO","file":"../../../scripts/mvc/collection/collection-li-edit.js","sourcesContent":["define([\"mvc/collection/collection-li\", \"mvc/dataset/dataset-li-edit\", \"mvc/base-mvc\", \"utils/localization\"], function(\n    DC_LI,\n    DATASET_LI_EDIT,\n    BASE_MVC,\n    _l\n) {\n    \"use strict\";\n    //==============================================================================\n    var DCListItemView = DC_LI.DCListItemView;\n    /** @class Edit view for DatasetCollection.\n */\n    var DCListItemEdit = DCListItemView.extend(\n        /** @lends DCListItemEdit.prototype */ {\n            /** override to add linkTarget */\n            initialize: function(attributes) {\n                DCListItemView.prototype.initialize.call(this, attributes);\n            },\n\n            // ......................................................................... misc\n            /** String representation */\n            toString: function() {\n                var modelString = this.model ? this.model + \"\" : \"(no model)\";\n                return \"DCListItemEdit(\" + modelString + \")\";\n            }\n        }\n    );\n\n    //==============================================================================\n    var DCEListItemView = DC_LI.DCEListItemView;\n    /** @class Read only view for DatasetCollectionElement.\n */\n    var DCEListItemEdit = DCEListItemView.extend(\n        /** @lends DCEListItemEdit.prototype */ {\n            //TODO: this might be expendable - compacted with HDAListItemView\n\n            /** set up */\n            initialize: function(attributes) {\n                DCEListItemView.prototype.initialize.call(this, attributes);\n            },\n\n            // ......................................................................... misc\n            /** String representation */\n            toString: function() {\n                var modelString = this.model ? this.model + \"\" : \"(no model)\";\n                return \"DCEListItemEdit(\" + modelString + \")\";\n            }\n        }\n    );\n\n    //==============================================================================\n    // NOTE: this does not inherit from DatasetDCEListItemView as you would expect\n    //TODO: but should - if we can find something simpler than using diamond\n    /** @class Editable view for a DatasetCollectionElement that is also an DatasetAssociation\n *      (a dataset contained in a dataset collection).\n */\n    var DatasetDCEListItemEdit = DATASET_LI_EDIT.DatasetListItemEdit.extend(\n        /** @lends DatasetDCEListItemEdit.prototype */ {\n            /** set up */\n            initialize: function(attributes) {\n                DATASET_LI_EDIT.DatasetListItemEdit.prototype.initialize.call(this, attributes);\n            },\n\n            // NOTE: this does not inherit from DatasetDCEListItemView - so we duplicate this here\n            //TODO: fix\n            /** In this override, only get details if in the ready state.\n     *  Note: fetch with no 'change' event triggering to prevent automatic rendering.\n     */\n            _fetchModelDetails: function() {\n                var view = this;\n                if (view.model.inReadyState() && !view.model.hasDetails()) {\n                    return view.model.fetch({ silent: true });\n                }\n                return jQuery.when();\n            },\n\n            /** Override to remove delete button */\n            _renderDeleteButton: function() {\n                return null;\n            },\n\n            // ......................................................................... misc\n            /** String representation */\n            toString: function() {\n                var modelString = this.model ? this.model + \"\" : \"(no model)\";\n                return \"DatasetDCEListItemEdit(\" + modelString + \")\";\n            }\n        }\n    );\n\n    // ............................................................................ TEMPLATES\n    /** underscore templates */\n    DatasetDCEListItemEdit.prototype.templates = (function() {\n        return _.extend({}, DATASET_LI_EDIT.DatasetListItemEdit.prototype.templates, {\n            titleBar: DC_LI.DatasetDCEListItemView.prototype.templates.titleBar\n        });\n    })();\n\n    //==============================================================================\n    /** @class Read only view for a DatasetCollectionElement that is also a DatasetCollection\n *      (a nested DC).\n */\n    var NestedDCDCEListItemEdit = DC_LI.NestedDCDCEListItemView.extend(\n        /** @lends NestedDCDCEListItemEdit.prototype */ {\n            /** String representation */\n            toString: function() {\n                var modelString = this.model ? this.model + \"\" : \"(no model)\";\n                return \"NestedDCDCEListItemEdit(\" + modelString + \")\";\n            }\n        }\n    );\n\n    //==============================================================================\n    return {\n        DCListItemEdit: DCListItemEdit,\n        DCEListItemEdit: DCEListItemEdit,\n        DatasetDCEListItemEdit: DatasetDCEListItemEdit,\n        NestedDCDCEListItemEdit: NestedDCDCEListItemEdit\n    };\n});\n"]}