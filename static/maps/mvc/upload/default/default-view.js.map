{"version":3,"sources":["mvc/upload/default/default-view.js"],"names":["define","upload_size","collection","counter","success","UploadRow","UploadFtp","UploadExtension","Popover","Select","Ui","LazyLimited","error","View","extend","reset","UploadModel","Collection","announce","list_extensions","running","list_genomes","ui_button","ftp_upload_site","app","currentFtp","this","initialize","$uploadbox","$uploadtable","options","btnLocal","Button","id","title","onclick","icon","_template","$","btnFtp","self","uploadbox","select","_eventFtp","_eventCreate","_eventStop","btnReset","_eventStart","_eventReset","btnClose","modal","hide","url","_eventAnnounce","_","each","progress","_eventProgress","btnCreate","btnStop","_eventSuccess","btnStart","button","complete","prepend","$el","ondragleave","nginx_upload_path","removeClass","index","file","toData","get","history_id","percentage","container","message","css","_eventError","ext","_eventComplete","onchange","_changeExtension","extension","select_extension","list","e","preventDefault","data","filter","select_genome","composite_files","default_extension","default_genome","on","text","new_content","value","upload_row","find","_eventRemove","model","render","genome","_changeGenome","$container","append","enable_sources","show_table","name","add","new_model","html","it","_uploadPercentage","set","enable_reset","enable_start","status","upload_completed","Galaxy","currHistoryPanel","refreshContents","Model","size","file_mode","mode","path","info","visible","ftp","empty","onadd","ftp_file","show","remove","currentHistory","onremove","model_index","_uploadFtp","start","stop","length","uploadpost","defaults_only","push"],"mappings":"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","file":"../../../../scripts/mvc/upload/default/default-view.js","sourcesContent":["/** Renders contents of the default uploader */\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/upload/upload-model\",\n        \"mvc/upload/default/default-row\",\n        \"mvc/upload/upload-ftp\",\n        \"mvc/upload/upload-extension\",\n        \"mvc/ui/ui-popover\",\n        \"mvc/ui/ui-select\",\n        \"mvc/ui/ui-misc\",\n        \"mvc/lazy/lazy-limited\",\n        \"utils/uploadbox\"\n    ],\n    function(Utils, UploadModel, UploadRow, UploadFtp, UploadExtension, Popover, Select, Ui, LazyLimited) {\n        return Backbone.View.extend({\n            // current upload size in bytes\n            upload_size: 0,\n\n            // contains upload row models\n            collection: new UploadModel.Collection(),\n\n            // keeps track of the current uploader state\n            counter: {\n                announce: 0,\n                success: 0,\n                error: 0,\n                running: 0,\n                reset: function() {\n                    this.announce = this.success = this.error = this.running = 0;\n                }\n            },\n\n            initialize: function(app) {\n                var self = this;\n                this.app = app;\n                this.options = app.options;\n                this.list_extensions = app.list_extensions;\n                this.list_genomes = app.list_genomes;\n                this.ui_button = app.ui_button;\n                this.ftp_upload_site = app.currentFtp();\n\n                // build template\n                this.setElement(this._template());\n                this.$uploadbox = this.$(\".upload-box\");\n                this.$uploadtable = this.$(\".upload-table\");\n\n                // append buttons to dom\n                this.btnLocal = new Ui.Button({\n                    id: \"btn-local\",\n                    title: \"Choose local file\",\n                    onclick: function() {\n                        self.uploadbox.select();\n                    },\n                    icon: \"fa fa-laptop\"\n                });\n                this.btnFtp = new Ui.Button({\n                    id: \"btn-ftp\",\n                    title: \"Choose FTP file\",\n                    onclick: function() {\n                        self._eventFtp();\n                    },\n                    icon: \"fa fa-folder-open-o\"\n                });\n                this.btnCreate = new Ui.Button({\n                    id: \"btn-new\",\n                    title: \"Paste/Fetch data\",\n                    onclick: function() {\n                        self._eventCreate();\n                    },\n                    icon: \"fa fa-edit\"\n                });\n                this.btnStart = new Ui.Button({\n                    id: \"btn-start\",\n                    title: \"Start\",\n                    onclick: function() {\n                        self._eventStart();\n                    }\n                });\n                this.btnStop = new Ui.Button({\n                    id: \"btn-stop\",\n                    title: \"Pause\",\n                    onclick: function() {\n                        self._eventStop();\n                    }\n                });\n                this.btnReset = new Ui.Button({\n                    id: \"btn-reset\",\n                    title: \"Reset\",\n                    onclick: function() {\n                        self._eventReset();\n                    }\n                });\n                this.btnClose = new Ui.Button({\n                    id: \"btn-close\",\n                    title: \"Close\",\n                    onclick: function() {\n                        self.app.modal.hide();\n                    }\n                });\n                _.each(\n                    [\n                        this.btnLocal,\n                        this.btnFtp,\n                        this.btnCreate,\n                        this.btnStop,\n                        this.btnReset,\n                        this.btnStart,\n                        this.btnClose\n                    ],\n                    function(button) {\n                        self.$(\".upload-buttons\").prepend(button.$el);\n                    }\n                );\n\n                // file upload\n                this.uploadbox = this.$uploadbox.uploadbox({\n                    url: this.app.options.nginx_upload_path,\n                    announce: function(index, file) {\n                        self._eventAnnounce(index, file);\n                    },\n                    initialize: function(index) {\n                        return self.app.toData([self.collection.get(index)], self.history_id);\n                    },\n                    progress: function(index, percentage) {\n                        self._eventProgress(index, percentage);\n                    },\n                    success: function(index, message) {\n                        self._eventSuccess(index, message);\n                    },\n                    error: function(index, message) {\n                        self._eventError(index, message);\n                    },\n                    complete: function() {\n                        self._eventComplete();\n                    },\n                    ondragover: function() {\n                        self.$uploadbox.addClass(\"highlight\");\n                    },\n                    ondragleave: function() {\n                        self.$uploadbox.removeClass(\"highlight\");\n                    }\n                });\n\n                // add ftp file viewer\n                this.ftp = new Popover.View({\n                    title: \"FTP files\",\n                    container: this.btnFtp.$el\n                });\n\n                // select extension\n                this.select_extension = new Select.View({\n                    css: \"upload-footer-selection\",\n                    container: this.$(\".upload-footer-extension\"),\n                    data: _.filter(this.list_extensions, function(ext) {\n                        return !ext.composite_files;\n                    }),\n                    value: this.options.default_extension,\n                    onchange: function(extension) {\n                        self._changeExtension(extension);\n                    }\n                });\n\n                // handle extension info popover\n                this.$(\".upload-footer-extension-info\")\n                    .on(\"click\", function(e) {\n                        new UploadExtension({\n                            $el: $(e.target),\n                            title: self.select_extension.text(),\n                            extension: self.select_extension.value(),\n                            list: self.list_extensions,\n                            placement: \"top\"\n                        });\n                    })\n                    .on(\"mousedown\", function(e) {\n                        e.preventDefault();\n                    });\n\n                // genome extension\n                this.select_genome = new Select.View({\n                    css: \"upload-footer-selection\",\n                    container: this.$(\".upload-footer-genome\"),\n                    data: this.list_genomes,\n                    value: this.options.default_genome,\n                    onchange: function(genome) {\n                        self._changeGenome(genome);\n                    }\n                });\n\n                // Lazy load helper\n                this.loader = new LazyLimited({\n                    $container: this.$uploadbox,\n                    collection: this.collection,\n                    new_content: function(model) {\n                        var upload_row = new UploadRow(self, { model: model });\n                        self.$uploadtable.find(\"> tbody:first\").append(upload_row.$el);\n                        upload_row.render();\n                        return upload_row;\n                    }\n                });\n\n                // events\n                this.collection.on(\"remove\", function(model) {\n                    self._eventRemove(model);\n                });\n                this.render();\n            },\n\n            render: function() {\n                var message = \"\";\n                if (this.counter.announce == 0) {\n                    if (this.uploadbox.compatible()) {\n                        message = \"&nbsp;\";\n                    } else {\n                        message =\n                            \"Browser does not support Drag & Drop. Try Firefox 4+, Chrome 7+, IE 10+, Opera 12+ or Safari 6+.\";\n                    }\n                } else {\n                    if (this.counter.running == 0) {\n                        message =\n                            \"You added \" +\n                            this.counter.announce +\n                            \" file(s) to the queue. Add more files or click 'Start' to proceed.\";\n                    } else {\n                        message =\n                            \"Please wait...\" +\n                            this.counter.announce +\n                            \" out of \" +\n                            this.counter.running +\n                            \" remaining.\";\n                    }\n                }\n                this.$(\".upload-top-info\").html(message);\n                var enable_reset =\n                    this.counter.running == 0 && this.counter.announce + this.counter.success + this.counter.error > 0;\n                var enable_start = this.counter.running == 0 && this.counter.announce > 0;\n                var enable_sources = this.counter.running == 0;\n                var show_table = this.counter.announce + this.counter.success + this.counter.error > 0;\n                this.btnReset[enable_reset ? \"enable\" : \"disable\"]();\n                this.btnStart[enable_start ? \"enable\" : \"disable\"]();\n                this.btnStart.$el[enable_start ? \"addClass\" : \"removeClass\"](\"btn-primary\");\n                this.btnStop[this.counter.running > 0 ? \"enable\" : \"disable\"]();\n                this.btnLocal[enable_sources ? \"enable\" : \"disable\"]();\n                this.btnFtp[enable_sources ? \"enable\" : \"disable\"]();\n                this.btnCreate[enable_sources ? \"enable\" : \"disable\"]();\n                this.btnFtp.$el[this.ftp_upload_site ? \"show\" : \"hide\"]();\n                this.$(\".upload-table\")[show_table ? \"show\" : \"hide\"]();\n                this.$(\".upload-helper\")[show_table ? \"hide\" : \"show\"]();\n            },\n\n            /** A new file has been dropped/selected through the uploadbox plugin */\n            _eventAnnounce: function(index, file) {\n                this.counter.announce++;\n                var new_model = new UploadModel.Model({\n                    id: index,\n                    file_name: file.name,\n                    file_size: file.size,\n                    file_mode: file.mode || \"local\",\n                    file_path: file.path,\n                    file_data: file\n                });\n                this.render();\n                this.collection.add(new_model);\n            },\n\n            /** Progress */\n            _eventProgress: function(index, percentage) {\n                var it = this.collection.get(index);\n                it.set(\"percentage\", percentage);\n                this.ui_button.model.set(\"percentage\", this._uploadPercentage(percentage, it.get(\"file_size\")));\n            },\n\n            /** Success */\n            _eventSuccess: function(index, message) {\n                var it = this.collection.get(index);\n                it.set({ percentage: 100, status: \"success\" });\n                this.ui_button.model.set(\"percentage\", this._uploadPercentage(100, it.get(\"file_size\")));\n                this.upload_completed += it.get(\"file_size\") * 100;\n                this.counter.announce--;\n                this.counter.success++;\n                this.render();\n                Galaxy.currHistoryPanel.refreshContents();\n            },\n\n            /** Error */\n            _eventError: function(index, message) {\n                var it = this.collection.get(index);\n                it.set({ percentage: 100, status: \"error\", info: message });\n                this.ui_button.model.set({\n                    percentage: this._uploadPercentage(100, it.get(\"file_size\")),\n                    status: \"danger\"\n                });\n                this.upload_completed += it.get(\"file_size\") * 100;\n                this.counter.announce--;\n                this.counter.error++;\n                this.render();\n            },\n\n            /** Queue is done */\n            _eventComplete: function() {\n                this.collection.each(function(model) {\n                    model.get(\"status\") == \"queued\" && model.set(\"status\", \"init\");\n                });\n                this.counter.running = 0;\n                this.render();\n            },\n\n            /** Remove model from upload list */\n            _eventRemove: function(model) {\n                var status = model.get(\"status\");\n                if (status == \"success\") {\n                    this.counter.success--;\n                } else if (status == \"error\") {\n                    this.counter.error--;\n                } else {\n                    this.counter.announce--;\n                }\n                this.uploadbox.remove(model.id);\n                this.render();\n            },\n\n            //\n            // events triggered by this view\n            //\n\n            /** Show/hide ftp popup */\n            _eventFtp: function() {\n                if (!this.ftp.visible) {\n                    this.ftp.empty();\n                    var self = this;\n                    this.ftp.append(\n                        new UploadFtp({\n                            collection: this.collection,\n                            ftp_upload_site: this.ftp_upload_site,\n                            onadd: function(ftp_file) {\n                                return self.uploadbox.add([\n                                    {\n                                        mode: \"ftp\",\n                                        name: ftp_file.path,\n                                        size: ftp_file.size,\n                                        path: ftp_file.path\n                                    }\n                                ]);\n                            },\n                            onremove: function(model_index) {\n                                self.collection.remove(model_index);\n                            }\n                        }).$el\n                    );\n                    this.ftp.show();\n                } else {\n                    this.ftp.hide();\n                }\n            },\n\n            /** Create a new file */\n            _eventCreate: function() {\n                this.uploadbox.add([{ name: \"New File\", size: 0, mode: \"new\" }]);\n            },\n\n            /** Start upload process */\n            _eventStart: function() {\n                if (this.counter.announce != 0 && this.counter.running == 0) {\n                    // prepare upload process\n                    var self = this;\n                    this.upload_size = 0;\n                    this.upload_completed = 0;\n                    this.collection.each(function(model) {\n                        if (model.get(\"status\") == \"init\") {\n                            model.set(\"status\", \"queued\");\n                            self.upload_size += model.get(\"file_size\");\n                        }\n                    });\n                    this.ui_button.model.set({\n                        percentage: 0,\n                        status: \"success\"\n                    });\n                    this.counter.running = this.counter.announce;\n                    this.history_id = this.app.currentHistory();\n\n                    // package ftp files separately, and remove them from queue\n                    this._uploadFtp();\n\n                    // queue remaining files\n                    this.uploadbox.start();\n                    this.render();\n                }\n            },\n\n            /** Pause upload process */\n            _eventStop: function() {\n                if (this.counter.running > 0) {\n                    this.ui_button.model.set(\"status\", \"info\");\n                    $(\".upload-top-info\").html(\"Queue will pause after completing the current file...\");\n                    this.uploadbox.stop();\n                }\n            },\n\n            /** Remove all */\n            _eventReset: function() {\n                if (this.counter.running == 0) {\n                    var self = this;\n                    this.collection.reset();\n                    this.counter.reset();\n                    this.uploadbox.reset();\n                    this.select_extension.value(this.options.default_extension);\n                    this.select_genome.value(this.options.default_genome);\n                    this.ui_button.model.set(\"percentage\", 0);\n                    this.render();\n                }\n            },\n\n            /** Update extension for all models */\n            _changeExtension: function(extension, defaults_only) {\n                var self = this;\n                this.collection.each(function(model) {\n                    if (\n                        model.get(\"status\") == \"init\" &&\n                        (model.get(\"extension\") == self.options.default_extension || !defaults_only)\n                    ) {\n                        model.set(\"extension\", extension);\n                    }\n                });\n            },\n\n            /** Update genome for all models */\n            _changeGenome: function(genome, defaults_only) {\n                var self = this;\n                this.collection.each(function(model) {\n                    if (\n                        model.get(\"status\") == \"init\" &&\n                        (model.get(\"genome\") == self.options.default_genome || !defaults_only)\n                    ) {\n                        model.set(\"genome\", genome);\n                    }\n                });\n            },\n\n            /** Package and upload ftp files in a single request */\n            _uploadFtp: function() {\n                var self = this;\n                var list = [];\n                this.collection.each(function(model) {\n                    if (model.get(\"status\") == \"queued\" && model.get(\"file_mode\") == \"ftp\") {\n                        self.uploadbox.remove(model.id);\n                        list.push(model);\n                    }\n                });\n                if (list.length > 0) {\n                    $.uploadpost({\n                        data: this.app.toData(list),\n                        url: this.app.options.nginx_upload_path,\n                        success: function(message) {\n                            _.each(list, function(model) {\n                                self._eventSuccess(model.id);\n                            });\n                        },\n                        error: function(message) {\n                            _.each(list, function(model) {\n                                self._eventError(model.id, message);\n                            });\n                        }\n                    });\n                }\n            },\n\n            /** Calculate percentage of all queued uploads */\n            _uploadPercentage: function(percentage, size) {\n                return (this.upload_completed + percentage * size) / this.upload_size;\n            },\n\n            /** Template */\n            _template: function() {\n                return (\n                    '<div class=\"upload-view-default\">' +\n                    '<div class=\"upload-top\">' +\n                    '<h6 class=\"upload-top-info\"/>' +\n                    \"</div>\" +\n                    '<div class=\"upload-box\">' +\n                    '<div class=\"upload-helper\"><i class=\"fa fa-files-o\"/>Drop files here</div>' +\n                    '<table class=\"upload-table ui-table-striped\" style=\"display: none;\">' +\n                    \"<thead>\" +\n                    \"<tr>\" +\n                    \"<th>Name</th>\" +\n                    \"<th>Size</th>\" +\n                    \"<th>Type</th>\" +\n                    \"<th>Genome</th>\" +\n                    \"<th>Settings</th>\" +\n                    \"<th>Status</th>\" +\n                    \"<th/>\" +\n                    \"</tr>\" +\n                    \"</thead>\" +\n                    \"<tbody/>\" +\n                    \"</table>\" +\n                    \"</div>\" +\n                    '<div class=\"upload-footer\">' +\n                    '<span class=\"upload-footer-title\">Type (set all):</span>' +\n                    '<span class=\"upload-footer-extension\"/>' +\n                    '<span class=\"upload-footer-extension-info upload-icon-button fa fa-search\"/> ' +\n                    '<span class=\"upload-footer-title\">Genome (set all):</span>' +\n                    '<span class=\"upload-footer-genome\"/>' +\n                    \"</div>\" +\n                    '<div class=\"upload-buttons\"/>' +\n                    \"</div>\"\n                );\n            }\n        });\n    }\n);\n"]}