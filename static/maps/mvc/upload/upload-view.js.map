{"version":3,"sources":["mvc/upload/upload-view.js"],"names":["define","options","nginx_upload_path","ftp_upload_site","default_genome","default_extension","width","Modal","Tabs","UploadButton","UploadViewDefault","UploadViewComposite","UploadViewCollection","auto","View","extend","id","text","description","height","list_extensions","list_genomes","e","initialize","onunload","this","percentage","self","ui_button","model","onclick","preventDefault","show","setElement","get","datatypes","extension","description_url","composite_files","url","Galaxy","root","success","a_text","b_text","key","datatypes_disable_auto","unshift","sort","a","b","toLowerCase","genomes","currHistoryPanel","default_view","composite_view","tabs","add","title","$el","collection_view","modal","closing_events","title_separator","body","current_user","currentFtp","window","currentHistory","data","error_message","history_id","items","inputs","file_count","dbkey","files","length","prefix","it","index","set","name","push","file","payload","JSON","stringify"],"mappings":"aACAA,QAEQ,cASA,kBACIC,iBACIC,2BACAC,kCACAC,sCACAC,yCAEAC,SAAAA,EAAOC,EANFC,EAAAC,EAAAC,EAAAC,EAAAC,GAOLC,OAAAA,SAAMC,KAAAC,QACFC,SACAC,kBAFE,GAGFC,gBACI,MAJFd,eAAA,IARcC,kBAAA,OAMpBc,OAAQ,IAUZb,MAAA,IACAc,MARQJ,GAAI,OAUZC,KAAA,cACAI,YARY,wZAcRD,mBAGQE,gBAEHC,WAJkC,SAAAtB,GAKnCuB,EAAUC,KACNA,KAAAxB,QAAIyB,EAAaC,MAAKC,EAAUC,KAAf5B,SAGhBwB,KAAAG,UAAA,IAAAnB,EAAAK,MACJgB,QAAA,SAAAR,GAVLA,EAAAS,iBAGQJ,EAAKK,QAWRC,SAAW,WARR,IAAIP,EAAaC,EAAKC,UAAUC,MAAMK,IAAI,aAAc,GAUhE,GAAAR,EAAA,GAAAA,EAAA,IACA,MAAA,iCAMgBV,KAAAA,WAAImB,KAAAA,UAAeC,KAGnBC,IAAAA,EAAAA,KACAC,EAAAA,KALsBC,IAA1BC,OAAAC,KAAA,qCAOHC,QAAA,SAAAP,GACDR,IAAKP,IAAAA,KAALe,EACQQ,EAAAA,gBAAqB1B,MACrB2B,GAAAA,EAASC,GAAY5B,UAClB0B,KAAAA,EAAAE,GAAsBF,UAHjCzB,YAAAiB,EAAAU,GAAA3B,YAKUjB,gBAAQ6C,EAAAA,GAAwBT,gBACjCjB,gBAAgB2B,EAAa9C,GAAAA,kBAlB9C0B,EAAAP,gBAAA4B,KAAA,SAAAC,EAAAC,GAaY,IAAIP,EAASM,EAAEhC,MAAQgC,EAAEhC,KAAKkC,cAU1CP,EAAAM,EAAAjC,MAAAiC,EAAAjC,KAAAkC,cACU,OAAAR,EAAAC,EAAA,EAAAD,EAAAC,GAAA,EAAA,IAEGjB,EAAA1B,QAASmD,wBACTzB,EAALP,gBAAyB2B,QAAApB,EAAA1B,QAAAY,SAMzBc,EAAAA,KACIY,IAAAC,OAAIC,KAAQd,cACRe,QAAA,SAAAU,GACH,IAAA,IAAAP,KAAAO,EACGF,EAAA7B,aAAapB,MACbe,GAAAoC,EAAAP,GAAA,GACH5B,KAAAmC,EAAAP,GAAA,KAGRlB,EAAAN,aAAA2B,KAAA,SAAAC,EAAAC,GAlBL,OAAAD,EAAAjC,IAAAW,EAAA1B,QAAAG,gBArEoB,EA2FxB8C,EAAAlC,IAAAW,EAAA1B,QAAAG,eACiB,EAEDiD,EAAAA,KAAoBH,EAACV,KAAOa,EAAAA,EAAAA,KAAAA,EAAPpC,MAA+B,EAAA,QAOhEe,KAAK,WACD,IAAAL,EAAAF,KACK6B,OAAAA,kBAAmB5C,OAAAA,iBAAxBmB,OAMAJ,KAAK8B,aAALf,OAA0B7B,KAAAA,GACrB6C,KAAKC,QACNzC,KAAIwC,KAAA,IADMhD,EAAAM,KAEV4C,KAAAA,aAFU,IAAAhD,EAAAe,MAGVkC,KAAKH,KAAKD,KAHdvC,GAAA,UAKK4C,MAAAA,UACAJ,IAAL/B,KAAc6B,aAAAK,MAEVD,KAAAA,eAFU,IAAA/C,EAAAc,MAGVkC,KAAKH,KAAKI,KAHd5C,GAAA,YAKK6C,MAAQ,YACTH,IAAOjC,KAAA8B,eAAAI,MAEPxC,KAAAA,gBAAqBA,IAHGP,EAAAa,MAIxBnB,KAAAA,KAAOmD,KACPK,GAAAA,aACAC,MAAAA,aANJJ,IAAAlC,KAAAmC,gBAAAD,MASCE,KAAM7B,MAAX,IAAAzB,EAAAO,MAlIoB4C,MAAA,wCA2HZM,KAAMvC,KAAK+B,KAAKG,IAU5BxC,OAAAM,KAAAxB,QAAAkB,OACgBb,MAAAmB,KAAAxB,QAAAK,MACA2D,gBAAgBzB,EAvIRuB,iBAAA,KA2IxBG,KAAYL,MAAA7B,QAnCJmC,OAAUV,WAAI,WACN9B,EAAAK,QACJ0B,MAqCZU,eAAA,WARI,OAAO3C,KAAKwC,cAAgBzB,OAAOa,iBAAiBxB,MAAMK,IAAI,OAa9DgC,WAAA,WACIG,OAAO5C,KAAAwC,cAAAxC,KAAAxB,QAAAE,iBAOPmE,OAAAA,SAAAA,EAAeC,GAEnB,IAAAF,GACIG,SACIC,QAAS,UACTC,WAAYF,GADH/C,KAAA2C,iBAETO,WAFJC,SAKAN,cAAkBE,MAGd,GAAAA,GAAOtC,EAAI2C,OAAP,EAAJ,CACI,IAAAJ,GACAA,WAAOK,EAASD,OAChBJ,MAAOK,EAAAA,GAAS5C,IAAA,SAAhB,KACAuC,UAAOK,EAAS,GAAA5C,IAAA,YAAqB6C,SAErCN,IAAAA,IAAAA,KAAOK,EAAS,CAChB,IAAAC,EAAQA,EAAOC,GAEPP,GADJM,EAAAE,IAAA,SAAA,aACIR,EAAAA,IAAAA,aAAgB,GAoBpC,CACHJ,EAAAC,cAAA,6BAtMLS,EAAAE,IAAA,SAAA,SAXRF,EAAAE,IAAA,OAAAZ,EAAAC,eA2M4B,MAdQ,IAAAQ,EAAA,SAAAE,EAAA,IAMIE,OALRT,EAAKK,EAAL,QAAA,iBACIL,EAAAA,EAAOK,gBAAwBC,EAAG7C,IAAI,iBAAtC,OAAA,KACAuC,EAAAK,EAAA,kBAAAC,EAAA7C,IAAA,mBAAA,OAAA,KACJuC,EAAKK,EAAL,SAAAC,EAAA7C,IAAA,SAAA,MACImC,EAAAA,EAAWc,aAAKJ,EAAA7C,IAAA,YAAA,MACZgD,EAAAA,IAAMJ,cACNM,IAAAA,MAFJX,EAAAK,EAAA,aAAAC,EAAA7C,IAAA,aARR,MAaG,IAAA,MACEoC,EAALQ,EAAqB,aAAAC,EAAA7C,IAArB,aACO,MACA,IAAP,QACAmC,EAAAO,MAAAO,MACHD,KAAAJ,EAAA,YACJM,KAAAL,EAAA7C,IAAA,gBACDmC,EAAKgB,QAAQZ,OAASa,KAAKC,UAAUd,GAEzC,OAAOJ","file":"../../../scripts/mvc/upload/upload-view.js","sourcesContent":["/** Upload app contains the upload progress button and upload modal, compiles model data for API request **/\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/ui/ui-modal\",\n        \"mvc/ui/ui-tabs\",\n        \"mvc/upload/upload-button\",\n        \"mvc/upload/default/default-view\",\n        \"mvc/upload/composite/composite-view\",\n        \"mvc/upload/collection/collection-view\"\n    ],\n    function(Utils, Modal, Tabs, UploadButton, UploadViewDefault, UploadViewComposite, UploadViewCollection) {\n        return Backbone.View.extend({\n            options: {\n                nginx_upload_path: \"\",\n                ftp_upload_site: \"n/a\",\n                default_genome: \"?\",\n                default_extension: \"auto\",\n                height: 500,\n                width: 900,\n                auto: {\n                    id: \"auto\",\n                    text: \"Auto-detect\",\n                    description:\n                        \"This system will try to detect the file type automatically. If your file is not detected properly as one of the known formats, it most likely means that it has some format problems (e.g., different number of columns on different rows). You can still coerce the system to set your data to the format you think it should be.  You can also upload compressed files, which will automatically be decompressed.\"\n                }\n            },\n\n            // contains all available dataset extensions/types\n            list_extensions: [],\n\n            // contains all available genomes\n            list_genomes: [],\n\n            initialize: function(options) {\n                var self = this;\n                this.options = Utils.merge(options, this.options);\n\n                // create view for upload/progress button\n                this.ui_button = new UploadButton.View({\n                    onclick: function(e) {\n                        e.preventDefault();\n                        self.show();\n                    },\n                    onunload: function() {\n                        var percentage = self.ui_button.model.get(\"percentage\", 0);\n                        if (percentage > 0 && percentage < 100) {\n                            return \"Several uploads are queued.\";\n                        }\n                    }\n                });\n\n                // set element to button view\n                this.setElement(this.ui_button.$el);\n\n                // load extensions\n                var self = this;\n                Utils.get({\n                    url: Galaxy.root + \"api/datatypes?extension_only=False\",\n                    success: function(datatypes) {\n                        for (var key in datatypes) {\n                            self.list_extensions.push({\n                                id: datatypes[key].extension,\n                                text: datatypes[key].extension,\n                                description: datatypes[key].description,\n                                description_url: datatypes[key].description_url,\n                                composite_files: datatypes[key].composite_files\n                            });\n                        }\n                        self.list_extensions.sort(function(a, b) {\n                            var a_text = a.text && a.text.toLowerCase();\n                            var b_text = b.text && b.text.toLowerCase();\n                            return a_text > b_text ? 1 : a_text < b_text ? -1 : 0;\n                        });\n                        if (!self.options.datatypes_disable_auto) {\n                            self.list_extensions.unshift(self.options.auto);\n                        }\n                    }\n                });\n\n                // load genomes\n                Utils.get({\n                    url: Galaxy.root + \"api/genomes\",\n                    success: function(genomes) {\n                        for (var key in genomes) {\n                            self.list_genomes.push({\n                                id: genomes[key][1],\n                                text: genomes[key][0]\n                            });\n                        }\n                        self.list_genomes.sort(function(a, b) {\n                            if (a.id == self.options.default_genome) {\n                                return -1;\n                            }\n                            if (b.id == self.options.default_genome) {\n                                return 1;\n                            }\n                            return a.text > b.text ? 1 : a.text < b.text ? -1 : 0;\n                        });\n                    }\n                });\n            },\n\n            /** Show/hide upload dialog */\n            show: function() {\n                var self = this;\n                if (!Galaxy.currHistoryPanel || !Galaxy.currHistoryPanel.model) {\n                    window.setTimeout(function() {\n                        self.show();\n                    }, 500);\n                    return;\n                }\n                this.current_user = Galaxy.user.id;\n                if (!this.modal) {\n                    this.tabs = new Tabs.View();\n                    this.default_view = new UploadViewDefault(this);\n                    this.tabs.add({\n                        id: \"regular\",\n                        title: \"Regular\",\n                        $el: this.default_view.$el\n                    });\n                    this.composite_view = new UploadViewComposite(this);\n                    this.tabs.add({\n                        id: \"composite\",\n                        title: \"Composite\",\n                        $el: this.composite_view.$el\n                    });\n                    this.collection_view = new UploadViewCollection(this);\n                    this.tabs.add({\n                        id: \"collection\",\n                        title: \"Collection\",\n                        $el: this.collection_view.$el\n                    });\n                    this.modal = new Modal.View({\n                        title: \"Download from web or upload from disk\",\n                        body: this.tabs.$el,\n                        height: this.options.height,\n                        width: this.options.width,\n                        closing_events: true,\n                        title_separator: false\n                    });\n                }\n                this.modal.show();\n            },\n\n            /** Refresh user and current history */\n            currentHistory: function() {\n                return this.current_user && Galaxy.currHistoryPanel.model.get(\"id\");\n            },\n\n            /** Get ftp configuration */\n            currentFtp: function() {\n                return this.current_user && this.options.ftp_upload_site;\n            },\n\n            /**\n          * Package API data from array of models\n          * @param{Array} items - Upload items/rows filtered from a collection\n        */\n            toData: function(items, history_id) {\n                // create dictionary for data submission\n                var data = {\n                    payload: {\n                        tool_id: \"upload1\",\n                        history_id: history_id || this.currentHistory(),\n                        inputs: {}\n                    },\n                    files: [],\n                    error_message: null\n                };\n                // add upload tools input data\n                if (items && items.length > 0) {\n                    var inputs = {\n                        file_count: items.length,\n                        dbkey: items[0].get(\"genome\", \"?\"),\n                        file_type: items[0].get(\"extension\", \"auto\")\n                    };\n                    for (var index in items) {\n                        var it = items[index];\n                        it.set(\"status\", \"running\");\n                        if (it.get(\"file_size\") > 0) {\n                            var prefix = \"files_\" + index + \"|\";\n                            inputs[prefix + \"type\"] = \"upload_dataset\";\n                            inputs[prefix + \"space_to_tab\"] = (it.get(\"space_to_tab\") && \"Yes\") || null;\n                            inputs[prefix + \"to_posix_lines\"] = (it.get(\"to_posix_lines\") && \"Yes\") || null;\n                            inputs[prefix + \"dbkey\"] = it.get(\"genome\", null);\n                            inputs[prefix + \"file_type\"] = it.get(\"extension\", null);\n                            switch (it.get(\"file_mode\")) {\n                                case \"new\":\n                                    inputs[prefix + \"url_paste\"] = it.get(\"url_paste\");\n                                    break;\n                                case \"ftp\":\n                                    inputs[prefix + \"ftp_files\"] = it.get(\"file_path\");\n                                    break;\n                                case \"local\":\n                                    data.files.push({\n                                        name: prefix + \"file_data\",\n                                        file: it.get(\"file_data\")\n                                    });\n                            }\n                        } else {\n                            data.error_message = \"Upload content incomplete.\";\n                            it.set(\"status\", \"error\");\n                            it.set(\"info\", data.error_message);\n                            break;\n                        }\n                    }\n                    data.payload.inputs = JSON.stringify(inputs);\n                }\n                return data;\n            }\n        });\n    }\n);\n"]}