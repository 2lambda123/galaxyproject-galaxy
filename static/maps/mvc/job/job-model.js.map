{"version":3,"sources":["mvc/job/job-model.js"],"names":["define","HISTORY_CONTENTS","STATES","AJAX_QUEUE","BASE_MVC","_l","logNamespace","searchableMixin","SearchableModelMixin","Job","Backbone","Model","extend","LoggableMixin","mixin","_logNamespace","defaults","model_class","tool_id","exit_code","inputs","outputs","create_time","NEW","update_time","state","response","options","params","this","parseParams","newParams","key","_","each","value","JSON","parse","initialize","attributes","debug","silent","outputCollection","get","HistoryContents","_setUpListeners","inReadyState","currModel","newState","trigger","log","previous","contains","READY_STATES","isEmpty","urlRoot","Galaxy","root","toString","join","JobCollection","Collection","model","intialize","models","console","ids","map","item","notReady","filter","job","haveDetails","all","hasDetails","queueDetailFetching","collection","queue","AjaxQueue","fetch","done","matches","matchesWhat","fromHistory","historyId","length","data","history_id","window"],"mappings":"aAAAA,QACK,+BAAgC,qBAAsB,mBAAoB,eAAgB,sBAD/FA,SACKC,EAAAC,EAADC,EAAiCC,EAAjCC,GAEQC,IAEAC,EAAkBH,EAASI,qBAG3BC,EAAMC,SAASC,MAAMC,OAAOR,EAASS,eAAeD,OAGhDR,EAAAU,MACIC,GAEAA,cAXO,OAYPC,UAGaC,YAHH,MAGNC,QAAS,KAHHC,UAAA,KAAAC,UAONC,WAGAC,UAEOpB,YAAOqB,KAhBMC,YAAA,KAgBpBC,MAAOvB,EAAOqB,KAMPG,MAAP,SAAAA,EAAAC,GAAA,OAtBoBD,EAAAE,OAAAC,KAAAC,YAAAJ,EAAAE,QAsBbF,GAMAE,YAAQ,SAAAA,GACXG,IAAUC,KAEd,OAHAC,EAAAC,KAAAN,EAAA,SAAAO,EAAAH,GAGAD,EAAAC,GAAAI,KAAAC,MAAAF,KAAOJ,GAIXO,WAAY,SAASC,EAAYZ,GAGpBE,KAATW,MAAmBX,KAAKC,mBAAqBS,EAAcE,GAEtDC,KAAAA,IAAL,SAAwBH,KAAWG,YAAAA,KAAXC,IAA+B,YAAI1C,QAAiB2C,IAxCxDf,KAAAa,iBAAAH,EAAAG,kBAAA,IAAAzC,EAAA2C,oBAyCpBf,KAAKgB,mBAQGA,gBAAgB,WAEhBhB,KAAKiB,GAAAA,eAAgB,SAAAC,EAAAC,GAChBC,KAAQC,IAAArB,KAAA,sBAAbkB,EAAsDI,GACzDtB,KAAAiB,gBAJLjB,KAAAoB,QAAA,cAAAF,EAAAC,EAAAnB,KAAAsB,SAAA,aAjDoBL,aAAA,WA8DpB,OAAOb,EAAEmB,SAASlD,EAAOmD,aAAcxB,KAAKc,IAAI,WAMxCV,WAAU,WAAlB,OAAQA,EAAEqB,QAAQzB,KAAKc,IAAI,aAK/BY,QAASC,OAAOC,KAAO,WActBC,SAAA,WA1Fb,OAAA,OAAA7B,KAAAc,IAAA,MAAA,IAAAd,KAAAc,IAAA,WAAA,KAAAgB,KAAA,QAgMA,OACIlD,IAAKA,EACLmD,cA/FsClD,SAAAmD,WAAAjD,OAAAR,EAAAS,eAAAD,QAKlCG,cA7GW,OA+GN+C,MAAArD,EADL8C,QAASC,OAAOC,KAAO,WAKvBM,IAAW,WACCvB,OAAMwB,KAAdT,SAGJQ,UAAA,SAAAC,EAAArC,GACAsC,QAAAzB,MAAAwB,EAAArC,IAhBkCuC,IAAA,WAoB9B,OAAOrC,KAAKsC,IAAI,SAASC,GAK7B,OAAAA,EAAAzB,IAAA,SAzBkC0B,SAAA,WA6B9B,OAAOxC,KAAKyC,OAAO,SAASC,GAKhC,OAAAA,EAAAzB,kBAlCkC0B,YAAA,WAoC9B,OAAO3C,KAAK4C,IAAI,SAASF,GAK7B,OAAAA,EAAAG,gBAOoBC,oBAAiB,WADrB,IAAAC,EAAA/C,KAHZgD,EAAA,IAAA1E,EAAA2E,UAQWjD,KAAAsC,IAAW,SAAAI,GACPtB,OAAQ,WADvB,OAAAsB,EAAAQ,OAAAtC,QAAA,QAGA,OAGJoC,EAAAG,KAAA,WACAJ,EAAA3B,QAAA,oBAJW4B,GAeXI,QAAA,SAAAC,GACA,OAAArD,KAAAyC,OAAA,SAAAC,GACU,OAAAA,EAAAU,QAAWC,MAOrBxB,SAAA,WACAyB,OAAa,iBAASC,KAATC,OAAoB,KAAA1B,KAAA,OAO7BwB,YAAA,SAAAC,GACHnB,QAAAzB,MAAAX,MAzFT,IAoFgB+C,EAAa,IApF7B/C,SAgGI+B,OAHJgB,EAAAG,OAAAO,MAAAC,WAAAH,KAAAJ,KAAA,WACOQ,OAAAX,MAAAD,EAAAD,wBAEYf","file":"../../../scripts/mvc/job/job-model.js","sourcesContent":["define(\n    [\"mvc/history/history-contents\", \"mvc/dataset/states\", \"utils/ajax-queue\", \"mvc/base-mvc\", \"utils/localization\"],\n    function(HISTORY_CONTENTS, STATES, AJAX_QUEUE, BASE_MVC, _l) {\n        var logNamespace = \"jobs\";\n        //==============================================================================\n        var searchableMixin = BASE_MVC.SearchableModelMixin;\n        /** @class Represents a job running or ran on the server job handlers.\n */\n        var Job = Backbone.Model.extend(BASE_MVC.LoggableMixin).extend(\n            BASE_MVC.mixin(\n                searchableMixin,\n                /** @lends Job.prototype */ {\n                    _logNamespace: logNamespace,\n\n                    /** default attributes for a model */\n                    defaults: {\n                        model_class: \"Job\",\n\n                        tool_id: null,\n                        exit_code: null,\n\n                        inputs: {},\n                        outputs: {},\n                        params: {},\n\n                        create_time: null,\n                        update_time: null,\n                        state: STATES.NEW\n                    },\n\n                    /** override to parse params on incomming */\n                    parse: function(response, options) {\n                        response.params = this.parseParams(response.params);\n                        return response;\n                    },\n\n                    /** override to treat param values as json */\n                    parseParams: function(params) {\n                        var newParams = {};\n                        _.each(params, function(value, key) {\n                            newParams[key] = JSON.parse(value);\n                        });\n                        return newParams;\n                    },\n\n                    /** instance vars and listeners */\n                    initialize: function(attributes, options) {\n                        this.debug(this + \"(Job).initialize\", attributes, options);\n\n                        this.set(\"params\", this.parseParams(this.get(\"params\")), { silent: true });\n\n                        this.outputCollection = attributes.outputCollection || new HISTORY_CONTENTS.HistoryContents([]);\n                        this._setUpListeners();\n                    },\n\n                    /** set up any event listeners\n     *  event: state:ready  fired when this DA moves into/is already in a ready state\n     */\n                    _setUpListeners: function() {\n                        // if the state has changed and the new state is a ready state, fire an event\n                        this.on(\"change:state\", function(currModel, newState) {\n                            this.log(this + \" has changed state:\", currModel, newState);\n                            if (this.inReadyState()) {\n                                this.trigger(\"state:ready\", currModel, newState, this.previous(\"state\"));\n                            }\n                        });\n                    },\n\n                    // ........................................................................ common queries\n                    /** Is this job in a 'ready' state; where 'Ready' states are states where no\n     *      processing is left to do on the server.\n     */\n                    inReadyState: function() {\n                        return _.contains(STATES.READY_STATES, this.get(\"state\"));\n                    },\n\n                    /** Does this model already contain detailed data (as opposed to just summary level data)? */\n                    hasDetails: function() {\n                        //?? this may not be reliable\n                        return !_.isEmpty(this.get(\"outputs\"));\n                    },\n\n                    // ........................................................................ ajax\n                    /** root api url */\n                    urlRoot: Galaxy.root + \"api/jobs\",\n                    //url : function(){ return this.urlRoot; },\n\n                    // ........................................................................ searching\n                    // see base-mvc, SearchableModelMixin\n                    /** what attributes of an Job will be used in a text search */\n                    //searchAttributes : [\n                    //    'tool'\n                    //],\n\n                    // ........................................................................ misc\n                    /** String representation */\n                    toString: function() {\n                        return [\"Job(\", this.get(\"id\"), \":\", this.get(\"tool_id\"), \")\"].join(\"\");\n                    }\n                }\n            )\n        );\n\n        //==============================================================================\n        /** @class Backbone collection for Jobs.\n */\n        var JobCollection = Backbone.Collection.extend(BASE_MVC.LoggableMixin).extend(\n            /** @lends JobCollection.prototype */ {\n                _logNamespace: logNamespace,\n\n                model: Job,\n\n                /** root api url */\n                urlRoot: Galaxy.root + \"api/jobs\",\n                url: function() {\n                    return this.urlRoot;\n                },\n\n                intialize: function(models, options) {\n                    console.debug(models, options);\n                },\n\n                // ........................................................................ common queries\n                /** Get the ids of every item in this collection\n     *  @returns array of encoded ids\n     */\n                ids: function() {\n                    return this.map(function(item) {\n                        return item.get(\"id\");\n                    });\n                },\n\n                /** Get jobs that are not ready\n     *  @returns array of content models\n     */\n                notReady: function() {\n                    return this.filter(function(job) {\n                        return !job.inReadyState();\n                    });\n                },\n\n                /** return true if any jobs don't have details */\n                haveDetails: function() {\n                    return this.all(function(job) {\n                        return job.hasDetails();\n                    });\n                },\n\n                // ........................................................................ ajax\n                /** fetches all details for each job in the collection using a queue */\n                queueDetailFetching: function() {\n                    var collection = this,\n                        queue = new AJAX_QUEUE.AjaxQueue(\n                            this.map(function(job) {\n                                return function() {\n                                    return job.fetch({ silent: true });\n                                };\n                            })\n                        );\n                    queue.done(function() {\n                        collection.trigger(\"details-loaded\");\n                    });\n                    return queue;\n                },\n\n                //toDAG : function(){\n                //    return new JobDAG( this.toJSON() );\n                //},\n\n                // ........................................................................ sorting/filtering\n                /** return a new collection of jobs whose attributes contain the substring matchesWhat */\n                matches: function(matchesWhat) {\n                    return this.filter(function(job) {\n                        return job.matches(matchesWhat);\n                    });\n                },\n\n                // ........................................................................ misc\n                /** String representation. */\n                toString: function() {\n                    return [\"JobCollection(\", this.length, \")\"].join(\"\");\n                }\n\n                //----------------------------------------------------------------------------- class vars\n            },\n            {\n                /** class level fn for fetching the job details for all jobs in a history */\n                fromHistory: function(historyId) {\n                    console.debug(this);\n                    var Collection = this,\n                        collection = new Collection([]);\n                    collection.fetch({ data: { history_id: historyId } }).done(function() {\n                        window.queue = collection.queueDetailFetching();\n                    });\n                    return collection;\n                }\n            }\n        );\n\n        //=============================================================================\n        return {\n            Job: Job,\n            JobCollection: JobCollection\n        };\n    }\n);\n"]}