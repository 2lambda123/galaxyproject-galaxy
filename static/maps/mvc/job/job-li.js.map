{"version":3,"sources":["mvc/job/job-li.js"],"names":["define","LIST_ITEM","BASE_MVC","_l","_super","FoldoutListItemView","JobListItemView","extend","className","prototype","id","foldoutPanelClass","DATASET_LIST","DatasetList","join","initialize","attributes","logger","model","this","log","jobData","tool","linkTarget","_swapNewRender","addClass","$newRender","call","$el","has","get","collection","selecting","_getFoldoutPanelOptions","_","options","outputCollection","_labelParamMap","labelParamMap","params","i","_labelInputMap","label","model_class","name","labelInputMap","toolInput","input","view","_findToolInput","exactMatch","findWhere","toolInputs","inputs","_findRepeatToolInput","find","partialMatch","undefined","indexOf","toString","templates","wrapTemplate","titleBarTemplate","titleBar","subtitle","subtitleTemplate","detailsTemplate","details"],"mappings":"aAAAA,QAAQ,qBAAsB,2BAA4B,eAAgB,sBAAuB,SAC7FC,EADJD,EAMIE,EACAC,GAAA,IAAIC,EAASH,EAAUI,oBAOfC,EAAAF,EAAAG,QAFoCC,UAAAJ,EAAAK,UAAAD,UAAA,OAKpCE,GAAI,WAIJC,OAAAA,MAAmBC,KAAAA,MAAaC,IAAAA,OATIC,KAAA,MAYpCC,kBAAYH,EAASI,YAGhBD,WAAA,SAAAC,GACDA,EAAgBC,SACTR,KAAAA,OAAUM,KAAjBG,MAAiCD,OAAMD,EAAvCC,QAEAE,KAAAC,IAAYJ,KAAAA,eAAZA,GACAZ,EAAKiB,UAAUL,WAAWK,KAAWF,KAArCH,GAEAG,KAAAG,KAAAN,EAAAM,SACAH,KAAKI,QAAaP,EAAWO,YAGjCJ,KAAAI,WAAAP,EAAAO,YAAA,UAIQC,eAASC,SAASC,GAK1B,OAJKtB,EAAAK,UAAAe,eAAAG,KAAAR,KAAAO,GACMP,KAAKS,MAAZC,IAAA,UAhCgCV,KAAAS,IAAAH,SAAA,SAAAN,KAAAD,MAAAY,IAAA,UAmCpCX,KAAAS,KAIQG,wBAAiBb,WACjBc,IAAAA,EAAW5B,EAAAK,UAAAwB,wBAAAN,KAAAR,MAFf,OAAAe,EAAA3B,OAAA4B,GAtCgCJ,WAAAZ,KAAAD,MAAAkB,iBAwC5BJ,WAAW,KAWfK,eACIC,WAEA,IAAAC,EAAApB,KAAAD,MAAAY,IAAA,UACIU,KAOZC,OANYH,EAAAA,KAAAA,KAAAA,KAAAA,OAAA,SAAyBC,GAHjCC,EAAAE,OAAA,sBAAAF,EAAAG,cAMOL,EAAPE,EAAAE,OAAAH,EAAAC,EAAAI,SAGJH,GAEIA,eACII,WAEA,IAAIC,EAAAA,KACAA,KAOZ,OANYD,EAAAA,KAAAA,KAAAA,QAAcC,OAAUJ,SAASK,GACpC,IAAAD,EAAAE,EAAAC,eAAAF,EAAAH,MAJLE,IAMOD,EAAPC,EAAAJ,OAAAK,KAGJF,GAGII,eACIC,SAAeC,GAEf,IAAAC,EAAAjC,KAAAG,KAAA+B,OACHH,EAAAhB,EAAAiB,UAAAC,GAAAR,KAAAA,IACD,OAAOM,GAGX/B,KAAAmC,qBAAAV,EAAAQ,IAIIE,qBAAqBC,SAAKH,EAAPA,GAAnBA,EAAAA,GAAAjC,KAAAG,KAAA+B,OAGI,IAACG,EAActB,EAAAqB,KAAAH,EAAA,SAAAZ,GACf,OAAA,IAAOiB,EAAPC,QAAAlB,EAAAI,QADJ,GAAKY,EAUT,OAHItB,EAAAqB,KAAAC,EAAAH,OAAA,SAAAb,GApGgC,OAAA,IAAAI,EAAAc,QAAAlB,EAAAI,SAD5Ce,SAAA,WA2GY,MAAO,mBAAqBxC,KAAKD,MAAQ,OAqGrD,OAxFQZ,EAAAG,UAAAmD,UAAA,WAGA1D,EAAA2D,cACA,6BAGA,wCANA,+BAGA,yBAYAC,6CAEI,SAEA,sCACA,gCAoBA,8BACA,WAvCJ,IA0CIA,EAAA5D,EAAA2D,cA1BA,6CAoCA,sBACA,kDACA,SACA,yBACA,+DAIA,6BACA,IApCA1D,EAAG,WAmDJ+B,oDACH,SACA6B,SACAC,UAHJ,OAQJC,EAAA/D,EAAA2D,cAEIvD,yBADJ,+DAzCY,UAEJ,OAGA4D,EAAkBhE,EAAS2D,cAEvB,wBAKA,uBACA,iEACA,0FACA,6CAEA,uDACA,SACA,WACA,iEACA,0DACA,6CACA,0CACA,SACA,WACA,SACA,UAEJ,OAGJ,OAAO3B,EAAE3B,UAAWH,EAAOK,UAAUmD,WAEjCG,SAAUD,EACVE,SAAUC,EACVE,QAASD,IAnFT,IAyFJ5D,gBAAiBA","file":"../../../scripts/mvc/job/job-li.js","sourcesContent":["define([\"mvc/list/list-item\", \"mvc/dataset/dataset-list\", \"mvc/base-mvc\", \"utils/localization\"], function(\n    LIST_ITEM,\n    DATASET_LIST,\n    BASE_MVC,\n    _l\n) {\n    //==============================================================================\n    var _super = LIST_ITEM.FoldoutListItemView;\n    /** @class A job view used from within a larger list of jobs.\n *      Each job itself is a foldout panel of history contents displaying the outputs of this job.\n */\n    var JobListItemView = _super.extend(\n        /** @lends JobListItemView.prototype */ {\n            /** logger used to record this.log messages, commonly set to console */\n            //logger              : console,\n\n            className: _super.prototype.className + \" job\",\n            id: function() {\n                return [\"job\", this.model.get(\"id\")].join(\"-\");\n            },\n\n            foldoutPanelClass: DATASET_LIST.DatasetList,\n\n            /** Set up: instance vars, options, and event handlers */\n            initialize: function(attributes) {\n                if (attributes.logger) {\n                    this.logger = this.model.logger = attributes.logger;\n                }\n                this.log(this + \".initialize:\", attributes);\n                _super.prototype.initialize.call(this, attributes);\n\n                this.tool = attributes.tool || {};\n                this.jobData = attributes.jobData || {};\n\n                /** where should pages from links be displayed? (default to new tab/window) */\n                this.linkTarget = attributes.linkTarget || \"_blank\";\n            },\n\n            /** In this override, add the state as a class for use with state-based CSS */\n            _swapNewRender: function($newRender) {\n                _super.prototype._swapNewRender.call(this, $newRender);\n                if (this.model.has(\"state\")) {\n                    this.$el.addClass(\"state-\" + this.model.get(\"state\"));\n                }\n                return this.$el;\n            },\n\n            /** Stub to return proper foldout panel options */\n            _getFoldoutPanelOptions: function() {\n                var options = _super.prototype._getFoldoutPanelOptions.call(this);\n                return _.extend(options, {\n                    collection: this.model.outputCollection,\n                    selecting: false\n                });\n            },\n\n            // ........................................................................ template helpers\n            // all of these are ADAPTERs - in other words, it might be better if the API returned the final form\n            //  or something similar in order to remove some of the complexity here\n\n            /** Return tool.inputs that should/can be safely displayed */\n            _labelParamMap: function() {\n                //ADAPTER\n                var params = this.model.get(\"params\"),\n                    labelParamMap = {};\n                _.each(this.tool.inputs, function(i) {\n                    //console.debug( i.label, i.model_class );\n                    if (i.label && i.model_class !== \"DataToolParameter\") {\n                        labelParamMap[i.label] = params[i.name];\n                    }\n                });\n                return labelParamMap;\n            },\n\n            _labelInputMap: function() {\n                //ADAPTER\n                var view = this,\n                    labelInputMap = {};\n                _.each(this.jobData.inputs, function(input) {\n                    var toolInput = view._findToolInput(input.name);\n                    if (toolInput) {\n                        labelInputMap[toolInput.label] = input;\n                    }\n                });\n                return labelInputMap;\n            },\n\n            /** Return a tool.inputs object that matches (or partially matches) the given (job input) name */\n            _findToolInput: function(name) {\n                //ADAPTER\n                var toolInputs = this.tool.inputs,\n                    exactMatch = _.findWhere(toolInputs, { name: name });\n                if (exactMatch) {\n                    return exactMatch;\n                }\n                return this._findRepeatToolInput(name, toolInputs);\n            },\n\n            /** Return a tool.inputs object that partially matches the given (job input) name (for repeat dataset inputs)*/\n            _findRepeatToolInput: function(name, toolInputs) {\n                //ADAPTER\n                toolInputs = toolInputs || this.tool.inputs;\n                var partialMatch = _.find(toolInputs, function(i) {\n                    return name.indexOf(i.name) === 0;\n                });\n                if (!partialMatch) {\n                    return undefined;\n                }\n\n                var subMatch = _.find(partialMatch.inputs, function(i) {\n                    return name.indexOf(i.name) !== -1;\n                });\n                return subMatch;\n            },\n\n            // ........................................................................ misc\n            /** String representation */\n            toString: function() {\n                return \"JobListItemView(\" + this.model + \")\";\n            }\n        }\n    );\n\n    // ............................................................................ TEMPLATES\n    /** underscore templates */\n    JobListItemView.prototype.templates = (function() {\n        //TODO: move to require text! plugin\n\n        var elTemplate = BASE_MVC.wrapTemplate([\n            '<div class=\"list-element\">',\n            '<div class=\"id\"><%- model.id %></div>',\n            // errors, messages, etc.\n            '<div class=\"warnings\"></div>',\n\n            // multi-select checkbox\n            '<div class=\"selector\">',\n            '<span class=\"fa fa-2x fa-square-o\"></span>',\n            \"</div>\",\n            // space for title bar buttons - gen. floated to the right\n            '<div class=\"primary-actions\"></div>',\n            '<div class=\"title-bar\"></div>',\n\n            // expandable area for more details\n            '<div class=\"details\"></div>',\n            \"</div>\"\n        ]);\n\n        var titleBarTemplate = BASE_MVC.wrapTemplate(\n            [\n                // adding a tabindex here allows focusing the title bar and the use of keydown to expand the dataset display\n                '<div class=\"title-bar clear\" tabindex=\"0\">',\n                //'<span class=\"state-icon\"></span>',\n                '<div class=\"title\">',\n                '<span class=\"name\"><%- view.tool.name %></span>',\n                \"</div>\",\n                '<div class=\"subtitle\">',\n                '<span class=\"description\"><%- view.tool.description %></span',\n                '<span class=\"create-time\">',\n                \" \",\n                _l(\"Created\"),\n                \": <%= new Date( job.create_time ).toString() %>, \",\n                \"</span\",\n                \"</div>\",\n                \"</div>\"\n            ],\n            \"job\"\n        );\n\n        var subtitleTemplate = BASE_MVC.wrapTemplate(\n            [\n                '<div class=\"subtitle\">',\n                '<span class=\"description\"><%- view.tool.description %></span',\n                //'<span class=\"create-time\">',\n                //    ' ', _l( 'Created' ), ': <%= new Date( job.create_time ).toString() %>, ',\n                //'</span',\n                //'<span class=\"version\">',\n                //    ' (', _l( 'version' ), ': <%- view.tool.version %>)',\n                //'</span',\n                \"</div>\"\n            ],\n            \"job\"\n        );\n\n        var detailsTemplate = BASE_MVC.wrapTemplate(\n            [\n                '<div class=\"details\">',\n                //'<div class=\"version\">',\n                //    '<label class=\"prompt\">', _l( 'Version' ), '</label>',\n                //    '<span class=\"value\"><%- view.tool.version %></span>',\n                //'</div>',\n                '<div class=\"params\">',\n                \"<% _.each( view._labelInputMap(), function( input, label ){ %>\",\n                '<div class=\"input\" data-input-name=\"<%- input.name %>\" data-input-id=\"<%- input.id %>\">',\n                '<label class=\"prompt\"><%- label %></label>',\n                //TODO: input dataset name\n                '<span class=\"value\"><%- input.content.name %></span>',\n                \"</div>\",\n                \"<% }) %>\",\n                \"<% _.each( view._labelParamMap(), function( param, label ){ %>\",\n                '<div class=\"param\" data-input-name=\"<%- param.name %>\">',\n                '<label class=\"prompt\"><%- label %></label>',\n                '<span class=\"value\"><%- param %></span>',\n                \"</div>\",\n                \"<% }) %>\",\n                \"</div>\",\n                \"</div>\"\n            ],\n            \"job\"\n        );\n\n        return _.extend({}, _super.prototype.templates, {\n            //el          : elTemplate,\n            titleBar: titleBarTemplate,\n            subtitle: subtitleTemplate,\n            details: detailsTemplate\n        });\n    })();\n\n    //=============================================================================\n    return {\n        JobListItemView: JobListItemView\n    };\n});\n"]}