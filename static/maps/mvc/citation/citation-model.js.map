{"version":3,"sources":["mvc/citation/citation-model.js"],"names":["define","parseBibtex","baseMVC","_l","window","BibtexParser","online","extend","Citation","Backbone","Model","LoggableMixin","_logNamespace","content","initialize","parsed","this","attributes","err","errors","length","reduce","all","current","log","_fields","entry","_","first","entries","rawFields","key","lowerKey","value","entryType","EntryType","undefined","fields","BaseCitationCollection","Collection","urlRoot","Galaxy","root","partial","HistoryCitationCollection","history_id","ToolCitationCollection","tool_id"],"mappings":"aAAAA,QAAQ,cAAe,eAAgB,sBAAuB,SAASC,EAAaC,EAASC,GAEzFF,EAAAA,GAAAG,OAAAC,aAEAJ,EAAAA,OAAAA,EAAcA,cAGVK,OAAQ,IADVC,KAAON,MAA0B,IAW/BO,EAAWC,SAASC,MAAMH,OAAOL,EAAQS,eAAeJ,QACxDK,cAZJ,WAYIA,UAGIC,QAAS,IADHC,WAHqD,WAQ3D,IAAIC,EADRD,IAEQC,EAAAd,EAAAe,KAAAC,WAAAJ,SACA,MAAAK,GACAH,OAGH,GAAAA,EAAAI,OAAAC,OAAA,CAEGL,IAAAA,EAAAA,EAAJI,OAA0BE,OAAA,SAAAC,EAAAC,GACtB,OAAAD,EAAA,KAAAC,IAGCP,KAFDQ,IAAA,yBAAAL,GAOJ,GAFCH,KAAAS,WAGDT,KAAKU,MAAQC,EAAEC,MAAMb,EAAOc,SAD5Bb,KAAKS,MAAU,CACf,IAAKC,EAAQV,KAAQD,MAAOc,OACxB,IAAKH,IAAAA,KAAOI,EAAA,CACRA,IAAAA,EAAYA,EAAAC,GACXC,EAAWF,EAAAA,cACZd,KAAIiB,QAAQH,GAAAG,KAInBC,UAAA,WAlC0D,OAAAlB,KAAAU,MAAAV,KAAAU,MAAAS,eAAAC,GAqC3DC,OAAA,WArC2D,OAAArB,KAAAS,WA6CnEa,EAAA7B,SAAA8B,WAAAhC,OAAAL,EAAAS,eAAAJ,QAGIK,cA3DJ,WA8DI4B,QAASC,OAAOC,KAAO,MADvBC,SAAA,EACAH,MAAAA,IAoBJ,OAGIhC,SAAUA,EADdoC,0BA1BAN,EAAA/B,QASIqC,IAAAA,WACA,OAAA5B,KAAAwB,QAAA,cAAAxB,KAAA6B,WAAA,gBAiBArC,uBAlBJ8B,EAAA/B,QAOIuC,IAAAA,WACA,OAAA9B,KAAAwB,QAAA,UAAAxB,KAAA+B,QAAA,cAEIJ,SAAA","file":"../../../scripts/mvc/citation/citation-model.js","sourcesContent":["define([\"libs/bibtex\", \"mvc/base-mvc\", \"utils/localization\"], function(parseBibtex, baseMVC, _l) {\n    /* global Backbone */\n    // we use amd here to require, but bibtex uses a global or commonjs pattern.\n    // webpack will load via commonjs and plain requirejs will load as global. Check both\n    parseBibtex = parseBibtex || window.BibtexParser;\n\n    _.extend(parseBibtex.ENTRY_TYPES_, {\n        online: 998, // Galaxy MOD: Handle @online entries for preprints.\n        data: 999 // Galaxy MOD: Handle @data citations coming from figshare.\n    });\n\n    var logNamespace = \"citation\";\n    //==============================================================================\n    /** @class model for tool citations.\n *  @name Citation\n *  @augments Backbone.Model\n */\n    var Citation = Backbone.Model.extend(baseMVC.LoggableMixin).extend({\n        _logNamespace: logNamespace,\n\n        defaults: {\n            content: \"\"\n        },\n\n        initialize: function() {\n            var parsed;\n            try {\n                // TODO: to model.parse/.validate\n                parsed = parseBibtex(this.attributes.content);\n            } catch (err) {\n                return;\n            }\n            // bibtex returns successfully parsed in .entries and any parsing errors in .errors\n            if (parsed.errors.length) {\n                // the gen. form of these errors seems to be [ line, col, char, error message ]\n                var errors = parsed.errors.reduce(function(all, current) {\n                    return all + \"; \" + current;\n                });\n                // throw new Error( 'Error parsing bibtex: ' + errors );\n                this.log(\"Error parsing bibtex: \" + errors);\n            }\n\n            this._fields = {};\n            this.entry = _.first(parsed.entries);\n            if (this.entry) {\n                var rawFields = this.entry.Fields;\n                for (var key in rawFields) {\n                    var value = rawFields[key];\n                    var lowerKey = key.toLowerCase();\n                    this._fields[lowerKey] = value;\n                }\n            }\n        },\n        entryType: function() {\n            return this.entry ? this.entry.EntryType : undefined;\n        },\n        fields: function() {\n            return this._fields;\n        }\n    });\n\n    //==============================================================================\n    /** @class Backbone collection of citations.\n */\n    var BaseCitationCollection = Backbone.Collection.extend(baseMVC.LoggableMixin).extend({\n        _logNamespace: logNamespace,\n\n        /** root api url */\n        urlRoot: Galaxy.root + \"api\",\n        partial: true, // Assume some tools in history/workflow may not be properly annotated yet.\n        model: Citation\n    });\n\n    var HistoryCitationCollection = BaseCitationCollection.extend({\n        /** complete api url */\n        url: function() {\n            return this.urlRoot + \"/histories/\" + this.history_id + \"/citations\";\n        }\n    });\n\n    var ToolCitationCollection = BaseCitationCollection.extend({\n        /** complete api url */\n        url: function() {\n            return this.urlRoot + \"/tools/\" + this.tool_id + \"/citations\";\n        },\n        partial: false // If a tool has citations, assume they are complete.\n    });\n\n    //==============================================================================\n\n    return {\n        Citation: Citation,\n        HistoryCitationCollection: HistoryCitationCollection,\n        ToolCitationCollection: ToolCitationCollection\n    };\n});\n"]}