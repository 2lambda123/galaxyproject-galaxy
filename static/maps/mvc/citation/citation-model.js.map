{"version":3,"sources":["mvc/citation/citation-model.js"],"names":["bibtexParse","Citation","Backbone","Model","extend","_baseMvc2","default","LoggableMixin","_logNamespace","defaults","content","initialize","parsed","toJSON","this","attributes","err","log","_fields","entry","_","first","rawFields","entryTags","key","value","lowerKey","toLowerCase","entryType","undefined","fields","Collection","partial","model","HistoryCitationCollection","BaseCitationCollection","url","ToolCitationCollection","urlRoot","tool_id"],"mappings":"qKAAYA,oNAWRC,EAAWC,SAASC,MAAMC,OAAOC,EAAAC,QAAQC,eAAeH,QACxDI,cAPe,WASfC,UACIC,QAAS,IAGbC,WAAY,WACR,IAAIC,EACJ,IAEIA,EAASZ,EAAYa,OAAOC,KAAKC,WAAWL,SAC9C,MAAOM,GACLF,KAAKG,IAAI,yBAA2BD,GAKxC,GAFAF,KAAKI,WACLJ,KAAKK,MAAQC,EAAEC,MAAMT,GACjBE,KAAKK,MAAO,CACZ,IAAIG,EAAYR,KAAKK,MAAMI,UAC3B,IAAK,IAAIC,KAAOF,EAAW,CACvB,IAAIG,EAAQH,EAAUE,GAClBE,EAAWF,EAAIG,cA9BnCb,KAAAI,QAAAQ,GAAAD,KAIAG,UAAA,WAgCQ,OAAOd,KAAKK,MAAQL,KAAKK,MAAMS,eAAYC,GAE/CC,OAAQ,WA9BR7B,OAAAA,KAAWC,WAOXS,EAAYT,SAAA6B,WAAW3B,OAAAC,EAAAC,QAAAC,eAAAH,QACnBI,cAdW,WAiBPI,QAAAA,OAAAA,KAAAA,MACHoB,SAHD,EAIIC,MAAAhC,IAGJiC,EAAAC,EAAA/B,QAEAgC,IAAA,WACI,OAAAtB,KAAIQ,QAAJ,cAA2BC,KAAAA,WAA3B,gBAIIc,EAAKnB,EAALd,QAEPgC,IAAA,WACJ,OA1B8DtB,KAAAwB,QA0B9D,UA1B8DxB,KAAAyB,QA0B9D,cAEGP,SAAA,eAqCJ/B,SAAUA,EA9BdiC,0BAAAA,EACAG,uBAAAA","file":"../../../scripts/mvc/citation/citation-model.js","sourcesContent":["import * as bibtexParse from \"libs/bibtexParse\";\nimport baseMVC from \"mvc/base-mvc\";\n\n/* global Backbone */\n\nvar logNamespace = \"citation\";\n//==============================================================================\n/** @class model for tool citations.\n *  @name Citation\n *  @augments Backbone.Model\n */\nvar Citation = Backbone.Model.extend(baseMVC.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    defaults: {\n        content: \"\"\n    },\n\n    initialize: function() {\n        var parsed;\n        try {\n            // TODO: to model.parse/.validate\n            parsed = bibtexParse.toJSON(this.attributes.content);\n        } catch (err) {\n            this.log(\"Error parsing bibtex: \" + err);\n        }\n\n        this._fields = {};\n        this.entry = _.first(parsed);\n        if (this.entry) {\n            var rawFields = this.entry.entryTags;\n            for (var key in rawFields) {\n                var value = rawFields[key];\n                var lowerKey = key.toLowerCase();\n                this._fields[lowerKey] = value;\n            }\n        }\n    },\n    entryType: function() {\n        return this.entry ? this.entry.entryType : undefined;\n    },\n    fields: function() {\n        return this._fields;\n    }\n});\n\n//==============================================================================\n/** @class Backbone collection of citations.\n */\nvar BaseCitationCollection = Backbone.Collection.extend(baseMVC.LoggableMixin).extend({\n    _logNamespace: logNamespace,\n\n    /** root api url */\n    urlRoot: `${Galaxy.root}api`,\n    partial: true, // Assume some tools in history/workflow may not be properly annotated yet.\n    model: Citation\n});\n\nvar HistoryCitationCollection = BaseCitationCollection.extend({\n    /** complete api url */\n    url: function() {\n        return `${this.urlRoot}/histories/${this.history_id}/citations`;\n    }\n});\n\nvar ToolCitationCollection = BaseCitationCollection.extend({\n    /** complete api url */\n    url: function() {\n        return `${this.urlRoot}/tools/${this.tool_id}/citations`;\n    },\n    partial: false // If a tool has citations, assume they are complete.\n});\n\n//==============================================================================\n\nexport default {\n    Citation: Citation,\n    HistoryCitationCollection: HistoryCitationCollection,\n    ToolCitationCollection: ToolCitationCollection\n};\n"]}