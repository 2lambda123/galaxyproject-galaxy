{"version":3,"sources":["mvc/toolshed/util.js"],"names":["define","addToQueue","queueLength","request","response","that","this","searchShed","shed_url","Galaxy","root","$","get","term","tool_shed_url","data","base_url","shedParser","jsondata","results","hits","each","hit","record","name","label","result","repository","description","value","id","push","metadata","key","queued_repos","substr","length","JSON","localStorage","repositories","changeset_revision","Object","queue_length","repo_queue","parse","keys"],"mappings":"aAAAA,UAAW,WAsDHC,OACAC,WAtDa,SAASC,EAASC,GADhC,IAAIC,EAAAC,KACHC,EAAaD,KAAAE,SACTH,EAAJI,OAAAC,KAAA,uBACAC,EAAAC,IAAIJ,GAAWK,KAAKL,EAApBK,KAAAC,cAAAN,GAAA,SAAAO,GACIC,IAAAA,EAAkBN,EAAPO,WAAcF,GAC3BH,EAAII,MA8CVC,WAlDA,SAAAC,GAWI,IAAIC,KADJF,EAAAA,EAAaG,KAiBbnB,OAhBAU,EAAAU,KAAIF,EAAAA,SAAJG,GACIF,IAAAA,EAAOF,EAASE,GACbA,EACCG,EAAAA,WAAJC,KACIC,OAMAC,EAAAA,WAAkBH,oBACtBJ,KATJI,EAAAI,WAAAC,YAWOT,GAAPU,MAAAN,EAAAI,WAAAG,GAAAL,MAAAA,GAdJN,EAAAY,KAAAL,KAiBIzB,GA5BRA,WA+BS,SAAA+B,GACwCA,KAArCC,EAAMD,cAASlB,QAAgB,KAC/BoB,EAAAA,cAAeF,EAAnBlB,cAAAqB,OAAA,EAAAH,EAAAlB,cAAAsB,OAAA,IAEIF,IAAAA,EAAAA,EAAeG,cAAWC,IAAAA,EAAaC,cAAvC,IAAAP,EAAAQ,mBACHN,EAAA,IAAAO,OACDP,aAAAK,eACAD,EAAaC,KAAAA,MAAeF,aAAeH,eAD3CA,EAAaD,GAAOD,EAIpB9B,aAAAA,aAAAA,KAAAA,UAAyBgC,IAczBhC,YAXQwC,WACJ,GAAAJ,aAAOI,eAAP,gBAAA,CAHJ,IAIOC,EAAAN,KAAAO,MAAAN,aAAAC,cAEN,OADGE,OAAAI,KAAAF,GAAAP,OAAA,OAAO","file":"../../../scripts/mvc/toolshed/util.js","sourcesContent":["define([], function() {\n    var searchShed = function(request, response) {\n        var that = this;\n        var shed_url = this.shed_url;\n        var base_url = Galaxy.root + \"api/tool_shed/search\";\n        $.get(base_url, { term: request.term, tool_shed_url: shed_url }, function(data) {\n            var result_list = that.shedParser(data);\n            response(result_list);\n        });\n    };\n\n    var shedParser = function(jsondata) {\n        var results = [];\n        var hits = jsondata.hits;\n        $.each(hits, function(hit) {\n            var record = hits[hit];\n            var label =\n                record.repository.name +\n                \" by \" +\n                record.repository.repo_owner_username +\n                \": \" +\n                record.repository.description;\n            var result = { value: record.repository.id, label: label };\n            results.push(result);\n        });\n        return results;\n    };\n\n    var addToQueue = function(metadata) {\n        if (metadata.tool_shed_url.substr(-1) == \"/\") {\n            metadata.tool_shed_url = metadata.tool_shed_url.substr(0, metadata.tool_shed_url.length - 1);\n        }\n        var key = metadata.tool_shed_url + \"|\" + metadata.repository_id + \"|\" + metadata.changeset_revision;\n        var queued_repos = new Object();\n        if (localStorage.repositories) {\n            queued_repos = JSON.parse(localStorage.repositories);\n        }\n        queued_repos[key] = metadata;\n        localStorage.repositories = JSON.stringify(queued_repos);\n    };\n\n    var queueLength = function() {\n        if (localStorage.hasOwnProperty(\"repositories\")) {\n            var repo_queue = JSON.parse(localStorage.repositories);\n            var queue_length = Object.keys(repo_queue).length;\n            return queue_length;\n        } else {\n            return 0;\n        }\n    };\n\n    return {\n        searchShed: searchShed,\n        shedParser: shedParser,\n        addToQueue: addToQueue,\n        queueLength: queueLength\n    };\n});\n"]}