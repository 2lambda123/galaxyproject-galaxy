{"version":3,"sources":["mvc/workflow/workflow-view-node.js"],"names":["define","_","DataViews","Backbone","node","options","initialize","output_width","this","tool_body","Math","max","remove","$el","width","newInputsDiv","appendTo","terminalViews","outputViews","render","renderToolErrors","css","min","renderToolLabel","$","text","label","name","errors","addClass","removeClass","updateMaxWidth","newWidth","addRule","append","addDataInput","input","body","terminalView","TerminalViews","InputCollectionTerminalView","InputTerminalView","terminalViewClass","el","destroy","terminalElement","inputView","terminal","update","destroyInvalidConnections","nodeView","skipResize","addDataOutput","DataInputView","ib","collection","output","DataOutputView","OutputCollectionTerminalView","outputView","redrawWorkflowOutputs","each","terminalElements","outputTerminal","redrawWorkflowOutput","updateDataOutput","output_terminals"],"mappings":"aAAAA,QAAQ,kBAAmB,uCAAwC,mCAAoC,SACnGC,EADJD,EAKIE,GAEQ,OAAAC,SAAKC,KAAOC,QACZC,WAAKC,SAALF,GACAG,KAAKC,KAAAA,EAAYL,KACjBI,KAAKC,aAAeC,KAApBC,IAA2BC,IAA3BJ,KAAAK,IAAAC,SACAN,KAAKO,UAALP,KAAoBQ,IAAAA,KAAS,iBAC7BR,KAAKS,UAAAA,KAAL,OAAAL,SACAJ,KAAKU,eAAcF,SAAnBR,KAAAC,WARoBD,KAAAS,iBAQpBT,KAAKU,gBAKLC,OAAA,WACAX,KAAKK,kBAdeL,KAAAY,mBAcpBZ,KAAKK,IAAIQ,IAAI,QAASX,KAAKY,IAAI,IAAKZ,KAAKC,IAAIH,KAAKK,IAAIC,QAASN,KAAKD,iBAKvEgB,gBAnBuB,WAkBpBf,KAAKgB,EAAE,cAAcC,KAAKjB,KAAKJ,KAAKsB,OAASlB,KAAKJ,KAAKuB,OAK1DP,iBAvBuB,WAsBpBZ,KAAKJ,KAAKwB,OAASpB,KAAKK,IAAIgB,SAAS,mBAAqBrB,KAAKK,IAAIiB,YAAY,oBAKlFf,aA3BuB,WA0BpB,OAAOS,EAAE,UAAUK,SAAS,WAK/BE,eA/BuB,SAAAC,GA8BpBxB,KAAKD,aAAeG,KAAKC,IAAIH,KAAKD,aAAcyB,IAKnDC,QAnCuB,WAkCpBzB,KAAKC,UAAUyB,OAAOV,EAAE,UAAUK,SAAS,UAK3CM,aAAA,SAAWC,EAAAC,GACPA,IAAAA,GAAO,EACPA,IACAA,EAAA7B,KAAAgB,EAAA,WAGAc,GAAAA,GAKJ,IAAIA,EAAAA,KAAkBA,cAAAA,EAAAA,MAClBA,EACA,sBAAAA,EAAAA,WACHC,EAAAC,4BACIF,EAAcG,kBAKlB,IAJGH,GAAeA,aAAsBI,IACjCtC,EAAMuC,GAAKvC,SADsBwC,UAEjCR,EAAOA,MAHfE,EAUKrB,CACD4B,IAAAA,EAAAA,EAAkBP,GAAaK,SAC/BG,EAAAA,OAAgB5C,GAChB2C,EAAAA,iCAPAP,EAAeA,IAAAA,GACfS,KAASC,KAAT5C,KACA2C,MAASE,IAOTC,KAAAA,cAHwCd,EAAAT,MAAAW,EAIxCa,IAAAA,EAAYA,EAAAA,GAOpBC,EAXI,IAAAlD,EAAAmD,eAMIC,gBAAezC,EACnBwB,MAAAD,EACAc,SAAOZ,KA1Eaa,WAAAA,IA6ETtC,IAIX,OAHAwB,EAAIK,OAAAA,EAAAA,QAAAA,EAA2Ba,qBAG3BjB,GAAqCc,cAAzC,SAAAI,GAIA,IAGIN,EAAU,IAHOhD,EAAUuD,WAC3BD,EAD0CE,6BAE1Cb,EAAAA,qBAFJzC,KAAAI,KAAAJ,KAKAoD,OAAKtC,IA1FeyC,EAAA,IAAAzD,EAAAuD,gBAsFhBD,OAAQA,EAQhBI,gBAAuBtB,EAAAK,GACjBkB,SAAU3C,OAEXV,KAFDU,YAAAsC,EAAA7B,MAAAgC,EA/FoBnD,KAAAC,UAAAyB,OAAAyB,EAAA9C,IAAAqB,OAAAI,EAAAwB,sBAqGpBF,sBAAIG,WACJA,EAAAA,KAAAA,KAAAA,YAAsBP,SAAtBG,GACHA,EAAAK,0BAHDC,iBAAkB,SAAST,GACFhD,KAAKJ,KAAK8D,iBAAiBV,EAAO7B,MACxCqB,OAAOQ","file":"../../../scripts/mvc/workflow/workflow-view-node.js","sourcesContent":["define([\"libs/underscore\", \"mvc/workflow/workflow-view-terminals\", \"mvc/workflow/workflow-view-data\"], function(\n    _,\n    TerminalViews,\n    DataViews\n) {\n    return Backbone.View.extend({\n        initialize: function(options) {\n            this.node = options.node;\n            this.output_width = Math.max(150, this.$el.width());\n            this.tool_body = this.$el.find(\".toolFormBody\");\n            this.tool_body.find(\"div\").remove();\n            this.newInputsDiv().appendTo(this.tool_body);\n            this.terminalViews = {};\n            this.outputViews = {};\n        },\n\n        render: function() {\n            this.renderToolLabel();\n            this.renderToolErrors();\n            this.$el.css(\"width\", Math.min(250, Math.max(this.$el.width(), this.output_width)));\n        },\n\n        renderToolLabel: function() {\n            this.$(\".nodeTitle\").text(this.node.label || this.node.name);\n        },\n\n        renderToolErrors: function() {\n            this.node.errors ? this.$el.addClass(\"tool-node-error\") : this.$el.removeClass(\"tool-node-error\");\n        },\n\n        newInputsDiv: function() {\n            return $(\"<div/>\").addClass(\"inputs\");\n        },\n\n        updateMaxWidth: function(newWidth) {\n            this.output_width = Math.max(this.output_width, newWidth);\n        },\n\n        addRule: function() {\n            this.tool_body.append($(\"<div/>\").addClass(\"rule\"));\n        },\n\n        addDataInput: function(input, body) {\n            var skipResize = true;\n            if (!body) {\n                body = this.$(\".inputs\");\n                // initial addition to node - resize input to help calculate node\n                // width.\n                skipResize = false;\n            }\n            var terminalView = this.terminalViews[input.name];\n            var terminalViewClass =\n                input.input_type == \"dataset_collection\"\n                    ? TerminalViews.InputCollectionTerminalView\n                    : TerminalViews.InputTerminalView;\n            if (terminalView && !(terminalView instanceof terminalViewClass)) {\n                terminalView.el.terminal.destroy();\n                terminalView = null;\n            }\n            if (!terminalView) {\n                terminalView = new terminalViewClass({\n                    node: this.node,\n                    input: input\n                });\n            } else {\n                var terminal = terminalView.el.terminal;\n                terminal.update(input);\n                terminal.destroyInvalidConnections();\n            }\n            this.terminalViews[input.name] = terminalView;\n            var terminalElement = terminalView.el;\n            var inputView = new DataViews.DataInputView({\n                terminalElement: terminalElement,\n                input: input,\n                nodeView: this,\n                skipResize: skipResize\n            });\n            var ib = inputView.$el;\n            body.append(ib.prepend(terminalView.terminalElements()));\n            return terminalView;\n        },\n\n        addDataOutput: function(output) {\n            var terminalViewClass = output.collection\n                ? TerminalViews.OutputCollectionTerminalView\n                : TerminalViews.OutputTerminalView;\n            var terminalView = new terminalViewClass({\n                node: this.node,\n                output: output\n            });\n            var outputView = new DataViews.DataOutputView({\n                output: output,\n                terminalElement: terminalView.el,\n                nodeView: this\n            });\n            this.outputViews[output.name] = outputView;\n            this.tool_body.append(outputView.$el.append(terminalView.terminalElements()));\n        },\n\n        redrawWorkflowOutputs: function() {\n            _.each(this.outputViews, function(outputView) {\n                outputView.redrawWorkflowOutput();\n            });\n        },\n\n        updateDataOutput: function(output) {\n            var outputTerminal = this.node.output_terminals[output.name];\n            outputTerminal.update(output);\n        }\n    });\n});\n"]}