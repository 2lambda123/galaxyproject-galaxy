{"version":3,"sources":["mvc/workflow/workflow-manager.js"],"names":["define","Connector","Toastr","Workflow","app","canvas_container","this","id_counter","nodes","name","has_changes","$","extend","workflowOutputLabels","canLabelOutputWith","label","registerOutputLabel","unregisterOutputLabel","updateOutputLabel","fromLabel","toLabel","warning","node","labelWorkflowOutput","outputName","nodeView","redrawWorkflowOutputs","create_node","add_node","type","title_text","content_id","fit_canvas_to_nodes","canvas_manager","activate_node","draw_overview","element","attr","id","workflow","remove_node","clear_active_node","active_node","remove_all","v","destroy","wf","k","rectify_workflow_outputs","using_workflow_outputs","each","has_existing_pjas","workflow_outputs","length","pja_id","pja","action_type","self","node_changed","post_job_actions","pjas_to_rem","push","pja_name","create_pja","ot_id","ot","isWorkflowOutput","output_name","action_arguments","reload_active_node","from_simple","input_terminals","input_connections","t","cons","connectors","con_dict","i","c","handle1","input_subworkflow_step_id","attributes","undefined","act","tool_version","tool_state","errors","config_form","version","position","annotation","uuid","node_data","steps","data","initialImport_","offset","initialImport","Object","max_id","keys","prebuildNode","step","workflow_output","top","left","Math","parseInt","max","isArray","connect","other_node","output_terminals","redraw","x","callout","find","Galaxy","root","check_changes_in_active_form","active_form_has_changes","showAttributes","make_inactive","showForm","make_active","force","layout","n_pred","successors","other","j","node_ids_by_level","level_parents","pred_k","sk","ids","all_nodes","max_width","a","b","v_pad","height","h_pad","width","bounds_for_all_nodes","_","xmin","Infinity","p","ymin","e","xmax","ymax","min","round_up","n","new_pos","ceil","fix_delta","xmin_delta","ymin_delta","parent","bounds","css","children"],"mappings":"aAAAA,QAAQ,kCAAmC,eAAgB,SAASC,EAAWC,GAC3E,SAASC,EAASC,EAAKC,GADnBC,KAAAF,IAAAA,EACJE,KAASH,iBAAcE,EACnBC,KAAKF,WAAL,EACAE,KAAKD,SACLC,KAAKC,KAAAA,KACLD,KAAKE,aAAL,EACAF,KAAKG,yBAAL,EACAH,KAAKI,wBA0cT,OAxcIC,EAAAC,OAAKC,EAAAA,WACRC,mBAAA,SAAAC,GACD,OAASZ,KACLW,KAAoBR,KAAAO,uBAMfG,oBAAA,SAAAD,GAPoBA,IASzBC,KAAAA,qBAAqBD,IAAA,IAGhBE,sBAAA,SAAAF,GAZoBA,UAczBE,KAAAA,qBAAuBF,IAGlBG,kBAAA,SAAAC,EAAAC,GAjBoBD,GAmBzBD,KAAAA,sBAAmBC,GAEXb,KAAKW,mBAAAA,IACRf,EAAAmB,QACI,sDACMA,EAKV,gDAGAD,GAhCoBd,KAAAU,oBAAAI,IAoCjBE,yBAAKC,SAAoBC,EAAAA,EAAzBT,GACAO,QAAAA,KAAKG,mBAASC,KACdJ,EAAAC,oBAAAC,EAAAT,GAHJO,EAIOG,SAAAC,yBACI,IAKXC,YAAKC,SAALC,EAAAC,EAAAC,GACA,IAAAT,EAAKU,KAAAA,IAAAA,aAALH,EAAAC,EAAAC,GAKJH,OAJItB,KAAKF,SAAI6B,GACT3B,KAAK4B,sBACL5B,KAAAF,IAAOkB,eAAPa,gBAjDqB7B,KAAA4B,cAAAZ,GAmDfA,GAENA,SAAKc,SAAQC,GACbf,EAAKf,GAAAA,KAALA,WACAe,EAAKd,QAAMc,KAAX,KAAsBA,gBAAtBA,EAAAgB,IACAhC,KAAKI,aACLY,KAAKiB,MAAAA,EAAWD,IAAhBhB,EAzDqBhB,KAAAI,aAAA,EA2DzB8B,EAAAA,SAAalC,MAELkC,YAAKC,SAAAA,GACRnC,KAAAoC,aAAApB,GACDhB,KAAOmC,2BA/DcnC,KAAAE,MAAAc,EAAAgB,IAkEzBK,KAAAA,aAAY,GAERhC,WAAO,WACHiC,IAAAA,EAAEC,KACFC,EAAAA,KAAGN,KAAAA,MAAYI,SAAfG,EAAAH,GAFJA,EAAAC,UApEqBC,EAAAN,YAAAI,MA2ErBI,yBAAIC,WAEJtC,IAAEuC,GAA0BH,EACxBI,GAASC,EAWT,GAVIH,EAAAA,KAAAA,KAAAA,MAAAA,SAAAA,EAAAA,GACH3B,EAAA8B,kBAAA9B,EAAA8B,iBAAAC,OAAA,IACCH,GAAF,GAEQC,EAAAA,KAAAA,EAAAA,iBAAoB,SAApBG,EAAAC,GACH,sBAAAA,EAAAC,cAHLL,GAAA,QAQA,IAAAF,IAAA,IAAAE,EAAA,CAEI,IAAAM,EAAInC,KACAX,EAAAuC,KAAA5C,KAAIoD,MAAAA,SAAeX,EAAAzB,GACnB,GAASqC,SAATrC,EAAIA,KAAKqC,CACLrC,IAAAA,GAAKqC,EACL,OAAAD,EAAAA,mBACHpC,EAAAqC,oBACGC,GAAc,GAEd,IAAAA,KACIA,EAAAA,KAAAA,EAAAA,iBAAiBN,SAAjBA,EAAAC,GACH,qBAAAA,EAAAC,aAHLI,EAAAC,KAAAP,KAOQI,EAAAA,OAAe,GACf/C,EAAAuC,KAAAU,EAAYD,SAAAA,EAALG,GAFXJ,GAAA,SAIHpC,EAAAqC,iBAAAG,KAGOb,GACAtC,EAAAuC,KAAA5B,EAAIyC,iBAAqB,SAAAC,EAAAC,GAErB,IAAU,KADVP,EAAAQ,iBAAAD,EAAAxD,MACU,CACN+C,GAAAA,EACAW,IAAAA,GACAC,YAAAA,oBAHJD,YAAAF,EAAAxD,KAKAa,qBAEHA,EAAAqC,iBAAA,oBAAAM,EAAAxD,MAAA,KAXLa,EAAAqC,iBAAA,oBAAAM,EAAAxD,MAAA8C,KAiBHE,EAAAf,aAAApB,IAAA,IAAAoC,GACJD,EAAAY,0BAMT1D,UAAO,WACH,IAAAH,KAwDR8D,OAvDQ3D,EAAAA,KAAEuC,KAAK5B,MAAKiD,SAAAA,EAAZjD,GACIkD,IAAAA,KACA7D,EAAAuC,KAAA5B,EAAAiD,gBAAA,SAAAxB,EAAA0B,GACAD,EAAAC,EAAAhE,MAAA,KAGI,IAAAiE,KACI/D,EAAAuC,KAAAuB,EAAAE,WAAIC,SAAWC,EAAAC,GACXxC,GAAAA,EAAAA,QAAMyC,CACNZ,IAAAA,GAFJ7B,GAAAwC,EAAAC,QAAAzD,KAAAgB,GAII0C,YAAAA,EAAAA,QAAAA,MAEAJ,EAASH,EAAAQ,WAA+BD,MAAAA,+BAC3CE,IAAAF,IACDN,EAAAA,0BAAAM,GAEHN,EAAAG,GAAAD,EAZLJ,EAAAC,EAAAhE,MAAAiE,OAiBA/D,IAAAA,KACIW,EAAAqC,kBACIH,EAAAA,KAAAA,EAAAA,iBAAiBA,SADXqB,EAAAM,GAENhB,IAAAA,GACAC,YAAAA,EAAAA,YAHJD,YAAAgB,EAAAhB,YAKAR,iBAAqBH,EAAAA,kBANzBG,EAAAwB,EAAA3B,YAAA2B,EAAAhB,aAAA,KASHR,EAAAwB,EAAA3B,YAAA2B,EAAAhB,aAAAZ,IAGGjC,EAAA8B,mBACH9B,EAAA8B,qBAGGvB,IAAAA,GACAE,GAAAA,EAAAA,GACAqD,KAAAA,EAAAA,KACAC,WAAY/D,EAAK+D,WACjBC,aAAaA,EANDC,YAAAC,QAOZhB,WAAAA,EAAAA,WACAiB,OAAAA,EAAYnE,OACZoE,kBAAiBA,EACjB/B,SAAAA,EAAAA,EAAAA,SAAuBA,WACvBgC,WAAWA,EAXCD,WAYZ3E,iBAZYO,EAAAqC,iBAaZP,KAAAA,EAAAA,KAbJrC,MAAAO,EAAAP,MAeAP,iBAAiBoF,EAAjBxC,kBAEJ5C,EAASqF,EAAAA,IAAFD,KAEEC,MAAArF,IAET8D,YAAS,SAATwB,EAAAC,GACA,IAAIC,OAAJd,IAAAa,GAAAA,EACIE,EAAAA,KACAnD,EAAA,EADJmD,EAGID,EAAAA,KAASE,EAAAA,KAETC,EAASH,OAAbI,KAAAtD,EAAAtC,OAAA6C,OAEA,IAAIJ,EAAAA,EAEAA,GAAkBoD,EAClB1F,EAAAuC,KAAA4C,EAAAD,MAAA,SAAAvD,EAAAgE,GACA,IAAAhF,EAAAwB,EAAA1C,IAAAiG,aAAAC,EAAAzE,KAAAyE,EAAA7F,KAAA6F,EAAAvE,YAGIpB,IACI4F,EAAAA,KAAAA,KACH5F,EAFDuC,KAAAoD,EAAAlD,iBAAA,SAAA3C,EAAA8F,GAGHA,EAAAZ,KAAA,QAGGrE,EAAAA,gBAAiBgF,GACbE,EAAAA,UACAC,EAAAA,QAAMH,KAFVE,IAAAF,EAAAb,SAAAe,IAIHC,KAAAH,EAAAb,SAAAgB,OAGDN,EAAAA,GAASO,SAASP,EAAT7D,IAAiBqE,EAC1B7D,EAAAtC,MAAAc,EAAAgB,IAAAhB,EACA6E,EAAAO,KAAAE,IAAAT,EAAAQ,SAAArE,GAAA0D,GAGQ/C,IADJ3B,EAEO8B,iBAAAC,OAAA,EACH1C,GAAYgD,EAEJV,EAAAA,KAAAA,EAAAA,qBAAyB,SAAzBK,EAAAC,GACH,sBAAAA,EAAAC,cAHLP,GAAA,QAUZtC,EAAEuC,WAAU2C,EAAO,EAEflF,EAAAA,KAAEuC,EAAKoD,MAAK9B,SAAAA,EAAAA,GACR,IAAAlD,EAAOwB,EAAAtC,MAAAmG,SAAArE,GAAA0D,GACHrF,EAAAuC,KAAAoD,EAAI9B,kBAAe,SAAAzB,EAAAH,GACfA,IACHjC,EAAAkG,QAAAjE,KACCM,GAAFN,IAEIjC,EAAAuC,KAAAN,EAAIkC,SAAQ7E,EAAAA,GACZ6E,IAAEgC,EAAQC,EAAAA,MAAWC,SAAAA,EAAX1E,IAA8B6B,GACtC8C,EAAF,IAAAhH,EAJJ6E,EAAAgC,QAAAC,EAAAC,iBAAAE,EAAA/C,aAAA7C,EAAAiD,gBAAAxB,IAMH+B,EAAAmC,cAIDtG,GAEQW,EAAAA,KAAAA,EAAAA,iBAAA,SAAA0C,EAAAC,QACAiB,IAAA5D,EAAI6F,iBAAiB/E,oBAAc6B,EAAAxD,QACnC0G,EAAAA,kBAAoB9E,EAAK5B,MACzBE,EAAAW,EAAAc,SAAAgF,KAAA,YAAAnD,EAAAxD,MACH2G,KAAA,OAAA/E,KAAA,MAAAgF,OAAAC,KAAA,0CANLxE,EAAApC,aAAA,QAaR6G,6BAASC,WAELlH,KAAAkH,0BACA7G,KAAED,aAAF,EAIHC,EAAA,kBApRoByG,KAAA,QAsRzB/C,SACQ/D,KAAKoC,yBAAa,IAGlB2B,mBAAKnC,WACR,GAAA5B,KAAAoC,YAAA,CA3RoB,IAAApB,EAAAhB,KAAAoC,YA6RzBD,KAAAA,oBACQnC,KAAKoC,cAAapB,KAGrBmB,kBAAA,WACDnC,KAASmH,cAlSYnH,KAAAoC,YAAAgF,gBAoSzBxF,KAAAA,YAAe,MAEP5B,KAAAF,IAAKmH,kBAELrF,cAAK9B,SAAIuH,GACTrG,KAAKsG,aAALtG,IACAhB,KAAKoC,+BACRpC,KAAAmC,oBA3SoBnC,KAAAF,IAAAuH,SAAArG,EAAAiE,YAAAjE,GA6SzBoC,EAAAA,cACIpD,KAAKI,YAALY,IAGIoC,aAAK6D,SAAAA,EAAAA,GACLjH,KAAAI,aAASiH,EACZrH,KAAAoC,aAAApB,GAAAuG,IAnToBvH,KAAAiH,+BAsTjBjH,KAAAF,IAAAuH,SAAWrG,EAAAiE,YAAAjE,IAEfhB,KAAKI,IAAAA,0BAELoH,OAAIC,WACJzH,KAAI0H,+BACJ1H,KAAAI,aAAA,EAEI,IAAAqH,KACIA,KAEJpH,EAAAuC,KAAA5C,KAAI0H,MAAW1F,SAAQ4C,EAAAA,QACnBA,IAAA8C,EAAAA,KACHD,EAAAzF,GAAA,QAEL4C,IAAA8C,EAAA1F,KACO0F,EAAY1F,SAIP3B,EAAAuC,KAAA5C,KAAAE,MAAIyH,SAAUlD,EAAAA,GACdpE,EAAAuC,KAAA5B,EAAAiD,gBAAA,SAAA2D,EAAAzD,GACAsD,EAAAA,KAAAA,EAAAA,WAAA,SAAAhF,EAAA+B,GAEAkD,IAAAA,EAAWC,EAAAA,QAAUpE,KAP7BkE,EAAAzG,EAAAgB,KAAA,EAWJ0F,EAAAC,EAAA3F,IAAAuB,KAAAvC,EAAAgB,UAMQ,IADJ,IAAA6F,OACQJ,CAEH,IAAAK,KACJ,IAAA,IAAAC,KAAAN,EACG,IAAAK,EAAAA,IACAA,EAAAvE,KAAAwE,GAGJ,GAAA,IAAAD,EAAA/E,OACA,MAEI8E,EAAQC,KAAAA,GAGJL,IAAAA,IAAAA,KAAAA,EAAqBO,CACxB,IAAA1F,EAAAwF,EAAArF,UACJgF,EAAAnF,GACJ,IAAA,IAAA0F,KAAAN,EAAApF,GACUS,EAAQ2E,EAAApF,GAAA0F,KAAA,GAInB,IAAAP,EAAA1E,OAAA,CAKA1C,IAAEuC,EAAKiF,KAAAA,MAGHI,EAFA,GAGI5H,EAAAuC,KAAAiF,EAASK,SAAapG,EAAfmG,GAGXA,EAAIE,KAAAA,SAAJC,EAAAC,GACInC,OAAMoC,EAAAA,EAAVF,GAAAtG,SAAAqD,WAAAe,IAAA7F,EAAA6H,EAAAG,GAAAvG,SAAAqD,WAAAe,MAGI,IAAAiC,EAAIrG,EACJzB,EAVJ,GAWI8H,EAAAA,KAAAA,EAAAA,SAAiB7B,EAALtE,GACZkE,IAAAA,EAASpE,EAASyG,GALtBzG,EAAAzB,EAAAW,EAAAc,SAOAqE,EAAAA,GAAQgC,KAAYK,IAApBtC,EAAAC,KAAAA,IAhBJgC,EAAA/B,KAAAE,IAAA6B,EAAA9H,EAAAyB,GAAA2G,SAkBAvC,GAAA7F,EAAAyB,GAAAyG,SAhBI,KAkBAvH,GAAK2F,EAnBL,KAsBR+B,EAAAA,KAAAA,EAAsB,SAAAC,EAAA3H,GACd4H,EAAAA,aAAJF,qBAGYG,WAHZ,IAQID,EAJAE,EAJJD,EAAAA,EAKEjG,GAAU1C,EAAAA,EACR6I,EAAIC,EAAAA,EACJF,GAAM3D,EAAAA,EAUV,OARI8D,EAAAA,KAAAA,KAAO7C,MAAA,SAAiBD,EAAFnF,GACtB+H,IAAAA,EAAO3C,EAAAA,EAAAtE,SACPoH,EAAAA,EAAAA,WANJN,EAAAxC,KAAA+C,IAAAP,EAAAE,EAAA3C,MAQA8C,EAASL,KAAMA,IAARK,EAAcA,EAAMA,KAAMF,EAAAA,SAxZZA,EAAA3C,KAAA+C,IAAAJ,EAAAD,EAAA5C,KA0ZzBxE,EAAAA,KAAAA,IAAqBwH,EAAAJ,EAAA5C,IAAA8C,EAAAP,YAERW,KAAAA,EAAYC,KAAGJ,EAAAF,KAAAA,EAAAG,KAAAA,IAEvBxH,oBAAA,WAEG,SAAIkF,EAASA,EAAIyC,GACb,OAAAjD,KAAIkD,KAAAA,EAAWlD,GAAKmD,EAEvB,SAAAC,EAAA5C,EAAAyC,GACD,OAAAzC,EAAAyC,GAAAzC,EAAA,EAAAyC,IAEJzC,GADCR,KAAAmD,KAAA3C,EAAAyC,EAAAA,GAAA,GAAAA,GAGGlE,EAGJ,IAAIsE,EAAAA,KAAaD,uBACbE,EAAAA,KAAaF,iBAAiBT,WAClCY,EAAA3J,KAAAD,iBAAA4J,SAEAD,EAAatD,EAASsD,EAAYvE,KAAAA,KAC9BgB,EAAOhB,EAAgBsE,EAAAA,KAA3B,KAEAA,EAAArD,KAAAE,IAAAmD,EAAAtE,EAAAgB,MACAuD,EAAYN,KAAAA,IAASQ,EAAAzE,EAATe,KACZ,IAAIqC,EAAAA,EAASa,KAASQ,EACtBnB,EAAQrC,EAASqC,IAAQtC,EAEzBsC,EAAAW,EAAAQ,EAAAX,KAAA,IAAA,KAAAQ,EACAlB,EAAKxI,EAAiB8J,EAAIX,KAAA,IAAA,KAAAQ,EACtBvD,EAAAA,KAAMA,IADgBsC,GAAAtC,EAAAwD,EAAAlB,SAEtBvC,EAAKA,KAFiBI,IAAAiC,GAAArC,EAAAyD,EAAApB,UAItBA,KAAAA,iBAAQA,KAJZpC,KAAAA,EAMAD,IAAAA,EACAuC,MAAK1I,EACDwI,OAAQlI,IAGXL,KAJDD,iBAAA+J,WAAAlH,KAAA,WAKH,IAAAkG,EAAAzI,EAAAL,MAAAmF,WApcL9E,EAAAL,MAAA6J,IAAA,OAAAf,EAAA3C,KAAAsD,GAscO5J,EAAAA,MAAPgK,IAAA,MAAAf,EAAA5C,IAAAwD,QAAO7J","file":"../../../scripts/mvc/workflow/workflow-manager.js","sourcesContent":["define([\"mvc/workflow/workflow-connector\", \"libs/toastr\"], function(Connector, Toastr) {\n    function Workflow(app, canvas_container) {\n        this.app = app;\n        this.canvas_container = canvas_container;\n        this.id_counter = 0;\n        this.nodes = {};\n        this.name = null;\n        this.has_changes = false;\n        this.active_form_has_changes = false;\n        this.workflowOutputLabels = {};\n    }\n    $.extend(Workflow.prototype, {\n        canLabelOutputWith: function(label) {\n            if (label) {\n                return !(label in this.workflowOutputLabels);\n            } else {\n                // empty labels are non-exclusive, so allow this one.\n                return true;\n            }\n        },\n        registerOutputLabel: function(label) {\n            if (label) {\n                this.workflowOutputLabels[label] = true;\n            }\n        },\n        unregisterOutputLabel: function(label) {\n            if (label) {\n                delete this.workflowOutputLabels[label];\n            }\n        },\n        updateOutputLabel: function(fromLabel, toLabel) {\n            if (fromLabel) {\n                this.unregisterOutputLabel(fromLabel);\n            }\n            if (!this.canLabelOutputWith(toLabel)) {\n                Toastr.warning(\n                    \"Workflow contains duplicate workflow output labels \" +\n                        toLabel +\n                        \". This must be fixed before it can be saved.\"\n                );\n            }\n            if (toLabel) {\n                this.registerOutputLabel(toLabel);\n            }\n        },\n        attemptUpdateOutputLabel: function(node, outputName, label) {\n            if (this.canLabelOutputWith(label)) {\n                node.labelWorkflowOutput(outputName, label);\n                node.nodeView.redrawWorkflowOutputs();\n                return true;\n            } else {\n                return false;\n            }\n        },\n        create_node: function(type, title_text, content_id) {\n            var node = this.app.prebuildNode(type, title_text, content_id);\n            this.add_node(node);\n            this.fit_canvas_to_nodes();\n            this.app.canvas_manager.draw_overview();\n            this.activate_node(node);\n            return node;\n        },\n        add_node: function(node) {\n            node.id = this.id_counter;\n            node.element.attr(\"id\", \"wf-node-step-\" + node.id);\n            this.id_counter++;\n            this.nodes[node.id] = node;\n            this.has_changes = true;\n            node.workflow = this;\n        },\n        remove_node: function(node) {\n            if (this.active_node == node) {\n                this.clear_active_node();\n            }\n            delete this.nodes[node.id];\n            this.has_changes = true;\n        },\n        remove_all: function() {\n            var wf = this;\n            $.each(this.nodes, function(k, v) {\n                v.destroy();\n                wf.remove_node(v);\n            });\n        },\n        rectify_workflow_outputs: function() {\n            // Find out if we're using workflow_outputs or not.\n            var using_workflow_outputs = false;\n            var has_existing_pjas = false;\n            $.each(this.nodes, function(k, node) {\n                if (node.workflow_outputs && node.workflow_outputs.length > 0) {\n                    using_workflow_outputs = true;\n                }\n                $.each(node.post_job_actions, function(pja_id, pja) {\n                    if (pja.action_type === \"HideDatasetAction\") {\n                        has_existing_pjas = true;\n                    }\n                });\n            });\n            if (using_workflow_outputs !== false || has_existing_pjas !== false) {\n                // Using workflow outputs, or has existing pjas.  Remove all PJAs and recreate based on outputs.\n                var self = this;\n                $.each(this.nodes, function(k, node) {\n                    if (node.type === \"tool\") {\n                        var node_changed = false;\n                        if (node.post_job_actions === null) {\n                            node.post_job_actions = {};\n                            node_changed = true;\n                        }\n                        var pjas_to_rem = [];\n                        $.each(node.post_job_actions, function(pja_id, pja) {\n                            if (pja.action_type == \"HideDatasetAction\") {\n                                pjas_to_rem.push(pja_id);\n                            }\n                        });\n                        if (pjas_to_rem.length > 0) {\n                            $.each(pjas_to_rem, function(i, pja_name) {\n                                node_changed = true;\n                                delete node.post_job_actions[pja_name];\n                            });\n                        }\n                        if (using_workflow_outputs) {\n                            $.each(node.output_terminals, function(ot_id, ot) {\n                                var create_pja = !node.isWorkflowOutput(ot.name);\n                                if (create_pja === true) {\n                                    node_changed = true;\n                                    var pja = {\n                                        action_type: \"HideDatasetAction\",\n                                        output_name: ot.name,\n                                        action_arguments: {}\n                                    };\n                                    node.post_job_actions[\"HideDatasetAction\" + ot.name] = null;\n                                    node.post_job_actions[\"HideDatasetAction\" + ot.name] = pja;\n                                }\n                            });\n                        }\n                        // lastly, if this is the active node, and we made changes, reload the display at right.\n                        if (self.active_node == node && node_changed === true) {\n                            self.reload_active_node();\n                        }\n                    }\n                });\n            }\n        },\n        to_simple: function() {\n            var nodes = {};\n            $.each(this.nodes, function(i, node) {\n                var input_connections = {};\n                $.each(node.input_terminals, function(k, t) {\n                    input_connections[t.name] = null;\n                    // There should only be 0 or 1 connectors, so this is\n                    // really a sneaky if statement\n                    var cons = [];\n                    $.each(t.connectors, function(i, c) {\n                        if (c.handle1) {\n                            var con_dict = {\n                                id: c.handle1.node.id,\n                                output_name: c.handle1.name\n                            };\n                            var input_subworkflow_step_id = t.attributes.input.input_subworkflow_step_id;\n                            if (input_subworkflow_step_id !== undefined) {\n                                con_dict[\"input_subworkflow_step_id\"] = input_subworkflow_step_id;\n                            }\n                            cons[i] = con_dict;\n                            input_connections[t.name] = cons;\n                        }\n                    });\n                });\n                var post_job_actions = {};\n                if (node.post_job_actions) {\n                    $.each(node.post_job_actions, function(i, act) {\n                        var pja = {\n                            action_type: act.action_type,\n                            output_name: act.output_name,\n                            action_arguments: act.action_arguments\n                        };\n                        post_job_actions[act.action_type + act.output_name] = null;\n                        post_job_actions[act.action_type + act.output_name] = pja;\n                    });\n                }\n                if (!node.workflow_outputs) {\n                    node.workflow_outputs = [];\n                    // Just in case.\n                }\n                var node_data = {\n                    id: node.id,\n                    type: node.type,\n                    content_id: node.content_id,\n                    tool_version: node.config_form.version,\n                    tool_state: node.tool_state,\n                    errors: node.errors,\n                    input_connections: input_connections,\n                    position: $(node.element).position(),\n                    annotation: node.annotation,\n                    post_job_actions: node.post_job_actions,\n                    uuid: node.uuid,\n                    label: node.label,\n                    workflow_outputs: node.workflow_outputs\n                };\n                nodes[node.id] = node_data;\n            });\n            return { steps: nodes };\n        },\n        from_simple: function(data, initialImport_) {\n            var initialImport = initialImport_ === undefined ? true : initialImport_;\n            var wf = this;\n            var offset = 0;\n            if (initialImport) {\n                wf.name = data.name;\n            } else {\n                offset = Object.keys(wf.nodes).length;\n            }\n            var max_id = offset;\n            // First pass, nodes\n            var using_workflow_outputs = false;\n            $.each(data.steps, function(id, step) {\n                var node = wf.app.prebuildNode(step.type, step.name, step.content_id);\n                // If workflow being copied into another, wipe UUID and let\n                // Galaxy assign new ones.\n                if (!initialImport) {\n                    step.uuid = null;\n                    $.each(step.workflow_outputs, function(name, workflow_output) {\n                        workflow_output.uuid = null;\n                    });\n                }\n                node.init_field_data(step);\n                if (step.position) {\n                    node.element.css({\n                        top: step.position.top,\n                        left: step.position.left\n                    });\n                }\n                node.id = parseInt(step.id) + offset;\n                wf.nodes[node.id] = node;\n                max_id = Math.max(max_id, parseInt(id) + offset);\n                // For older workflows, it's possible to have HideDataset PJAs, but not WorkflowOutputs.\n                // Check for either, and then add outputs in the next pass.\n                if (!using_workflow_outputs) {\n                    if (node.workflow_outputs.length > 0) {\n                        using_workflow_outputs = true;\n                    } else {\n                        $.each(node.post_job_actions || [], function(pja_id, pja) {\n                            if (pja.action_type === \"HideDatasetAction\") {\n                                using_workflow_outputs = true;\n                            }\n                        });\n                    }\n                }\n            });\n            wf.id_counter = max_id + 1;\n            // Second pass, connections\n            $.each(data.steps, function(id, step) {\n                var node = wf.nodes[parseInt(id) + offset];\n                $.each(step.input_connections, function(k, v) {\n                    if (v) {\n                        if (!$.isArray(v)) {\n                            v = [v];\n                        }\n                        $.each(v, function(l, x) {\n                            var other_node = wf.nodes[parseInt(x.id) + offset];\n                            var c = new Connector();\n                            c.connect(other_node.output_terminals[x.output_name], node.input_terminals[k]);\n                            c.redraw();\n                        });\n                    }\n                });\n                if (using_workflow_outputs) {\n                    // Ensure that every output terminal has a WorkflowOutput or HideDatasetAction.\n                    $.each(node.output_terminals, function(ot_id, ot) {\n                        if (node.post_job_actions[\"HideDatasetAction\" + ot.name] === undefined) {\n                            node.addWorkflowOutput(ot.name);\n                            var callout = $(node.element).find(\".callout.\" + ot.name);\n                            callout.find(\"img\").attr(\"src\", Galaxy.root + \"static/images/fugue/asterisk-small.png\");\n                            wf.has_changes = true;\n                        }\n                    });\n                }\n            });\n        },\n        check_changes_in_active_form: function() {\n            // If active form has changed, save it\n            if (this.active_form_has_changes) {\n                this.has_changes = true;\n                // Submit form.\n                $(\"#right-content\")\n                    .find(\"form\")\n                    .submit();\n                this.active_form_has_changes = false;\n            }\n        },\n        reload_active_node: function() {\n            if (this.active_node) {\n                var node = this.active_node;\n                this.clear_active_node();\n                this.activate_node(node);\n            }\n        },\n        clear_active_node: function() {\n            if (this.active_node) {\n                this.active_node.make_inactive();\n                this.active_node = null;\n            }\n            this.app.showAttributes();\n        },\n        activate_node: function(node) {\n            if (this.active_node != node) {\n                this.check_changes_in_active_form();\n                this.clear_active_node();\n                this.app.showForm(node.config_form, node);\n                node.make_active();\n                this.active_node = node;\n            }\n        },\n        node_changed: function(node, force) {\n            this.has_changes = true;\n            if (this.active_node == node && force) {\n                // Force changes to be saved even on new connection (previously dumped)\n                this.check_changes_in_active_form();\n                this.app.showForm(node.config_form, node);\n            }\n            this.app.showWorkflowParameters();\n        },\n        layout: function() {\n            this.check_changes_in_active_form();\n            this.has_changes = true;\n            // Prepare predecessor / successor tracking\n            var n_pred = {};\n            var successors = {};\n            // First pass to initialize arrays even for nodes with no connections\n            $.each(this.nodes, function(id, node) {\n                if (n_pred[id] === undefined) {\n                    n_pred[id] = 0;\n                }\n                if (successors[id] === undefined) {\n                    successors[id] = [];\n                }\n            });\n            // Second pass to count predecessors and successors\n            $.each(this.nodes, function(id, node) {\n                $.each(node.input_terminals, function(j, t) {\n                    $.each(t.connectors, function(k, c) {\n                        // A connection exists from `other` to `node`\n                        var other = c.handle1.node;\n                        // node gains a predecessor\n                        n_pred[node.id] += 1;\n                        // other gains a successor\n                        successors[other.id].push(node.id);\n                    });\n                });\n            });\n            // Assemble order, tracking levels\n            var node_ids_by_level = [];\n            while (true) {\n                // Everything without a predecessor\n                var level_parents = [];\n                for (var pred_k in n_pred) {\n                    if (n_pred[pred_k] === 0) {\n                        level_parents.push(pred_k);\n                    }\n                }\n                if (level_parents.length === 0) {\n                    break;\n                }\n                node_ids_by_level.push(level_parents);\n                // Remove the parents from this level, and decrement the number\n                // of predecessors for each successor\n                for (var k in level_parents) {\n                    var v = level_parents[k];\n                    delete n_pred[v];\n                    for (var sk in successors[v]) {\n                        n_pred[successors[v][sk]] -= 1;\n                    }\n                }\n            }\n            if (n_pred.length) {\n                // ERROR: CYCLE! Currently we do nothing\n                return;\n            }\n            // Layout each level\n            var all_nodes = this.nodes;\n            var h_pad = 80;\n            var v_pad = 30;\n            var left = h_pad;\n            $.each(node_ids_by_level, function(i, ids) {\n                // We keep nodes in the same order in a level to give the user\n                // some control over ordering\n                ids.sort(function(a, b) {\n                    return $(all_nodes[a].element).position().top - $(all_nodes[b].element).position().top;\n                });\n                // Position each node\n                var max_width = 0;\n                var top = v_pad;\n                $.each(ids, function(j, id) {\n                    var node = all_nodes[id];\n                    var element = $(node.element);\n                    $(element).css({ top: top, left: left });\n                    max_width = Math.max(max_width, $(element).width());\n                    top += $(element).height() + v_pad;\n                });\n                left += max_width + h_pad;\n            });\n            // Need to redraw all connectors\n            $.each(all_nodes, function(_, node) {\n                node.redraw();\n            });\n        },\n        bounds_for_all_nodes: function() {\n            var xmin = Infinity,\n                xmax = -Infinity,\n                ymin = Infinity,\n                ymax = -Infinity,\n                p;\n            $.each(this.nodes, function(id, node) {\n                var e = $(node.element);\n                p = e.position();\n                xmin = Math.min(xmin, p.left);\n                xmax = Math.max(xmax, p.left + e.width());\n                ymin = Math.min(ymin, p.top);\n                ymax = Math.max(ymax, p.top + e.width());\n            });\n            return { xmin: xmin, xmax: xmax, ymin: ymin, ymax: ymax };\n        },\n        fit_canvas_to_nodes: function() {\n            // Math utils\n            function round_up(x, n) {\n                return Math.ceil(x / n) * n;\n            }\n            function fix_delta(x, n) {\n                if (x < n || x > 3 * n) {\n                    var new_pos = (Math.ceil((x % n) / n) + 1) * n;\n                    return -(x - new_pos);\n                }\n                return 0;\n            }\n            // Span of all elements\n            var bounds = this.bounds_for_all_nodes();\n            var position = this.canvas_container.position();\n            var parent = this.canvas_container.parent();\n            // Determine amount we need to expand on top/left\n            var xmin_delta = fix_delta(bounds.xmin, 100);\n            var ymin_delta = fix_delta(bounds.ymin, 100);\n            // May need to expand farther to fill viewport\n            xmin_delta = Math.max(xmin_delta, position.left);\n            ymin_delta = Math.max(ymin_delta, position.top);\n            var left = position.left - xmin_delta;\n            var top = position.top - ymin_delta;\n            // Same for width/height\n            var width = round_up(bounds.xmax + 100, 100) + xmin_delta;\n            var height = round_up(bounds.ymax + 100, 100) + ymin_delta;\n            width = Math.max(width, -left + parent.width());\n            height = Math.max(height, -top + parent.height());\n            // Grow the canvas container\n            this.canvas_container.css({\n                left: left,\n                top: top,\n                width: width,\n                height: height\n            });\n            // Move elements back if needed\n            this.canvas_container.children().each(function() {\n                var p = $(this).position();\n                $(this).css(\"left\", p.left + xmin_delta);\n                $(this).css(\"top\", p.top + ymin_delta);\n            });\n        }\n    });\n    return Workflow;\n});\n"]}