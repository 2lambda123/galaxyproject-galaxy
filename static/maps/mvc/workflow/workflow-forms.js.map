{"version":3,"sources":["mvc/workflow/workflow-forms.js"],"names":["define","Utils","Form","ToolFormBase","fixed","form","value","node","annotation","area","options","workflow","help","inputs","unshift","type","name","label","duplicate","onchange","new_label","input_id","input_element","element_list","set","i","trigger","n","id","data","match","model","attributes","datatypes","head_list","visit","head","input","action","post_job_actions","output_id","pja_arg","j","expanded","action_arguments","payload","p_id","d","_makeSection","input_terminal_names","input_terminals","slice","push","Object","keys","output_terminals","Tool","String","Boolean","ignore","host","window","location","extensions","key","0","1","a","b","output","input_config","flat","title","getWorkflowOutput","new_value","attemptUpdateOutputLabel","join","Default","Backbone","View","extend","initialize","this","self","request","Galaxy","root","url","content_id","create","success","update_field_data","_addLabelAnnotation","render","text_enable","text_disable","narrow","initial_errors","cls","initialmodel","_customize","process","resolve","get","postchange","current_state","tool_id","tool_version","version","$","debug","config_form","update","errors","emit","reject","response","deepeach","__class__","indexOf","is_workflow","length","textify","collapsible_value","test_param","undefined"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-forms.js","sourcesContent":["define([\"utils/utils\", \"mvc/form/form-view\", \"mvc/tool/tool-form-base\"], function(Utils, Form, ToolFormBase) {\n    /** Default form wrapper for non-tool modules in the workflow editor. */\n    var Default = Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            var node = options.node;\n            this.form = new Form(\n                Utils.merge(options, {\n                    onchange: function() {\n                        Utils.request({\n                            type: \"POST\",\n                            url: Galaxy.root + \"api/workflows/build_module\",\n                            data: {\n                                id: node.id,\n                                type: node.type,\n                                content_id: node.content_id,\n                                inputs: self.form.data.create()\n                            },\n                            success: function(data) {\n                                node.update_field_data(data);\n                            }\n                        });\n                    }\n                })\n            );\n            _addLabelAnnotation(this.form);\n            this.form.render();\n        }\n    });\n\n    /** Tool form wrapper for the workflow editor. */\n    var Tool = Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            var node = options.node;\n            this.form = new ToolFormBase(\n                Utils.merge(options, {\n                    text_enable: \"Set in Advance\",\n                    text_disable: \"Set at Runtime\",\n                    narrow: true,\n                    initial_errors: true,\n                    cls: \"ui-portlet-narrow\",\n                    initialmodel: function(process, form) {\n                        self._customize(form);\n                        process.resolve();\n                    },\n                    buildmodel: function(process, form) {\n                        form.model.get(\"postchange\")(process, form);\n                    },\n                    postchange: function(process, form) {\n                        var options = form.model.attributes;\n                        var current_state = {\n                            tool_id: options.id,\n                            tool_version: options.version,\n                            type: \"tool\",\n                            inputs: $.extend(true, {}, form.data.create())\n                        };\n                        Galaxy.emit.debug(\"tool-form-workflow::postchange()\", \"Sending current state.\", current_state);\n                        Utils.request({\n                            type: \"POST\",\n                            url: Galaxy.root + \"api/workflows/build_module\",\n                            data: current_state,\n                            success: function(data) {\n                                form.model.set(data.config_form);\n                                self._customize(form);\n                                form.update(data.config_form);\n                                form.errors(data.config_form);\n                                // This hasn't modified the workflow, just returned\n                                // module information for the tool to update the workflow\n                                // state stored on the client with. User needs to save\n                                // for this to take effect.\n                                node.update_field_data(data);\n                                Galaxy.emit.debug(\"tool-form-workflow::postchange()\", \"Received new model.\", data);\n                                process.resolve();\n                            },\n                            error: function(response) {\n                                Galaxy.emit.debug(\n                                    \"tool-form-workflow::postchange()\",\n                                    \"Refresh request failed.\",\n                                    response\n                                );\n                                process.reject();\n                            }\n                        });\n                    }\n                })\n            );\n        },\n\n        _customize: function(form) {\n            var options = form.model.attributes;\n            Utils.deepeach(options.inputs, function(input) {\n                if (input.type) {\n                    if ([\"data\", \"data_collection\"].indexOf(input.type) != -1) {\n                        input.type = \"hidden\";\n                        input.info = \"Data input '\" + input.name + \"' (\" + Utils.textify(input.extensions) + \")\";\n                        input.value = { __class__: \"RuntimeValue\" };\n                    } else if (!input.fixed) {\n                        input.collapsible_value = {\n                            __class__: \"RuntimeValue\"\n                        };\n                        input.is_workflow =\n                            (input.options && input.options.length == 0) ||\n                            [\"integer\", \"float\"].indexOf(input.type) != -1;\n                    }\n                }\n            });\n            Utils.deepeach(options.inputs, function(input) {\n                input.type == \"conditional\" && (input.test_param.collapsible_value = undefined);\n            });\n            _addSections(form);\n            _addLabelAnnotation(form);\n        }\n    });\n\n    /** Augments the module form definition by adding label and annotation fields */\n    function _addLabelAnnotation(form) {\n        var options = form.model.attributes;\n        var workflow = options.workflow;\n        var node = options.node;\n        options.inputs.unshift({\n            type: \"text\",\n            name: \"__annotation\",\n            label: \"Annotation\",\n            fixed: true,\n            value: node.annotation,\n            area: true,\n            help: \"Add an annotation or notes to this step. Annotations are available when a workflow is viewed.\"\n        });\n        options.inputs.unshift({\n            type: \"text\",\n            name: \"__label\",\n            label: \"Label\",\n            value: node.label,\n            help: \"Add a step label.\",\n            fixed: true,\n            onchange: function(new_label) {\n                var duplicate = false;\n                for (var i in workflow.nodes) {\n                    var n = workflow.nodes[i];\n                    if (n.label && n.label == new_label && n.id != node.id) {\n                        duplicate = true;\n                        break;\n                    }\n                }\n                var input_id = form.data.match(\"__label\");\n                var input_element = form.element_list[input_id];\n                input_element.model.set(\n                    \"error_text\",\n                    duplicate && \"Duplicate label. Please fix this before saving the workflow.\"\n                );\n                form.trigger(\"change\");\n            }\n        });\n    }\n\n    /** Builds all sub sections */\n    function _addSections(form) {\n        var options = form.model.attributes;\n        var inputs = options.inputs;\n        var datatypes = options.datatypes;\n        var node = options.node;\n        var workflow = options.workflow;\n        var post_job_actions = node.post_job_actions;\n        var output_id = node.output_terminals && Object.keys(node.output_terminals)[0];\n\n        /** Visit input nodes and enrich by name/value pairs from server data */\n        function visit(head, head_list) {\n            head_list = head_list || [];\n            head_list.push(head);\n            for (var i in head.inputs) {\n                var input = head.inputs[i];\n                var action = input.action;\n                if (action) {\n                    input.name = \"pja__\" + output_id + \"__\" + input.action;\n                    if (input.pja_arg) {\n                        input.name += \"__\" + input.pja_arg;\n                    }\n                    if (input.payload) {\n                        for (var p_id in input.payload) {\n                            input.payload[input.name + \"__\" + p_id] = input.payload[p_id];\n                            delete input.payload[p_id];\n                        }\n                    }\n                    var d = post_job_actions[input.action + output_id];\n                    if (d) {\n                        for (var j in head_list) {\n                            head_list[j].expanded = true;\n                        }\n                        if (input.pja_arg) {\n                            input.value = (d.action_arguments && d.action_arguments[input.pja_arg]) || input.value;\n                        } else {\n                            input.value = \"true\";\n                        }\n                    }\n                }\n                input.inputs && visit(input, head_list.slice(0));\n            }\n        }\n\n        /** Builds sub section with step actions/annotation */\n        function _makeSection(output_id, datatypes) {\n            var extensions = [];\n            var input_terminal_names = [];\n            for (var key in datatypes) {\n                extensions.push({ 0: datatypes[key], 1: datatypes[key] });\n            }\n            for (key in node.input_terminals) {\n                input_terminal_names.push(node.input_terminals[key].name);\n            }\n            extensions.sort(function(a, b) {\n                return a.label > b.label ? 1 : a.label < b.label ? -1 : 0;\n            });\n            extensions.unshift({\n                0: \"Sequences\",\n                1: \"Sequences\"\n            });\n            extensions.unshift({\n                0: \"Roadmaps\",\n                1: \"Roadmaps\"\n            });\n            extensions.unshift({\n                0: \"Leave unchanged\",\n                1: \"__empty__\"\n            });\n            var output;\n            var input_config = {\n                title: \"Configure Output: '\" + output_id + \"'\",\n                type: \"section\",\n                flat: true,\n                inputs: [\n                    {\n                        label: \"Label\",\n                        type: \"text\",\n                        value: ((output = node.getWorkflowOutput(output_id)) && output.label) || \"\",\n                        help:\n                            \"This will provide a short name to describe the output - this must be unique across workflows.\",\n                        onchange: function(new_value) {\n                            workflow.attemptUpdateOutputLabel(node, output_id, new_value);\n                        }\n                    },\n                    {\n                        action: \"RenameDatasetAction\",\n                        pja_arg: \"newname\",\n                        label: \"Rename dataset\",\n                        type: \"text\",\n                        value: \"\",\n                        ignore: \"\",\n                        help:\n                            'This action will rename the output dataset. Click <a href=\"https://galaxyproject.org/learn/advanced-workflow/variables/\">here</a> for more information. Valid inputs are: <strong>' +\n                            input_terminal_names.join(\", \") +\n                            \"</strong>.\"\n                    },\n                    {\n                        action: \"ChangeDatatypeAction\",\n                        pja_arg: \"newtype\",\n                        label: \"Change datatype\",\n                        type: \"select\",\n                        ignore: \"__empty__\",\n                        value: \"__empty__\",\n                        options: extensions,\n                        help: \"This action will change the datatype of the output to the indicated value.\"\n                    },\n                    {\n                        action: \"TagDatasetAction\",\n                        pja_arg: \"tags\",\n                        label: \"Add Tags\",\n                        type: \"text\",\n                        value: \"\",\n                        ignore: \"\",\n                        help: \"This action will set tags for the dataset.\"\n                    },\n                    {\n                        action: \"RemoveTagDatasetAction\",\n                        pja_arg: \"tags\",\n                        label: \"Remove Tags\",\n                        type: \"text\",\n                        value: \"\",\n                        ignore: \"\",\n                        help: \"This action will remove tags for the dataset.\"\n                    },\n                    {\n                        title: \"Assign columns\",\n                        type: \"section\",\n                        flat: true,\n                        inputs: [\n                            {\n                                action: \"ColumnSetAction\",\n                                pja_arg: \"chromCol\",\n                                label: \"Chrom column\",\n                                type: \"integer\",\n                                value: \"\",\n                                ignore: \"\"\n                            },\n                            {\n                                action: \"ColumnSetAction\",\n                                pja_arg: \"startCol\",\n                                label: \"Start column\",\n                                type: \"integer\",\n                                value: \"\",\n                                ignore: \"\"\n                            },\n                            {\n                                action: \"ColumnSetAction\",\n                                pja_arg: \"endCol\",\n                                label: \"End column\",\n                                type: \"integer\",\n                                value: \"\",\n                                ignore: \"\"\n                            },\n                            {\n                                action: \"ColumnSetAction\",\n                                pja_arg: \"strandCol\",\n                                label: \"Strand column\",\n                                type: \"integer\",\n                                value: \"\",\n                                ignore: \"\"\n                            },\n                            {\n                                action: \"ColumnSetAction\",\n                                pja_arg: \"nameCol\",\n                                label: \"Name column\",\n                                type: \"integer\",\n                                value: \"\",\n                                ignore: \"\"\n                            }\n                        ],\n                        help: \"This action will set column assignments in the output dataset. Blank fields are ignored.\"\n                    }\n                ]\n            };\n            visit(input_config);\n            return input_config;\n        }\n\n        if (output_id) {\n            inputs.push({\n                name: \"pja__\" + output_id + \"__EmailAction\",\n                label: \"Email notification\",\n                type: \"boolean\",\n                value: String(Boolean(post_job_actions[\"EmailAction\" + output_id])),\n                ignore: \"false\",\n                help: \"An email notification will be sent when the job has completed.\",\n                payload: {\n                    host: window.location.host\n                }\n            });\n            inputs.push({\n                name: \"pja__\" + output_id + \"__DeleteIntermediatesAction\",\n                label: \"Output cleanup\",\n                type: \"boolean\",\n                value: String(Boolean(post_job_actions[\"DeleteIntermediatesAction\" + output_id])),\n                ignore: \"false\",\n                help:\n                    \"Upon completion of this step, delete non-starred outputs from completed workflow steps if they are no longer required as inputs.\"\n            });\n            for (var i in node.output_terminals) {\n                inputs.push(_makeSection(i, datatypes));\n            }\n        }\n    }\n\n    return {\n        Default: Default,\n        Tool: Tool\n    };\n});\n"]}