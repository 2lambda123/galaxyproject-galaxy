{"version":3,"sources":["mvc/workflow/workflow-canvas.js"],"names":["define","CanvasManager","app","canvas_viewport","overview","this","cv","find","cc","ov","ScrollPanel","pageX","panel","e","$","extend","init_drag","prototype","x","y","self","min","width","move","max","Math","css","top","background-position-x","update_viewport_overlay","each","scroll_panel","x_adjust","bind","o","offset","p","position","y_adjust","left","d","offsetX","offsetY","draw_overview","fit_canvas_to_nodes","hasClass","removeClass","in_h","height","o_w","oc","o_h","new_x_offset","new_y_offset","pageY","in_w","addClass","workflow","op","offsetParent","new_size","cc_pos","canvas_el","cv_w","shift_w","shift_h","parent","cv_h","get","getContext","size","ceil","attr","c","fillStyle","lineWidth","node_element","node","nodes","id","strokeStyle","element","workflow_outputs","errors","fillRect","strokeRect","undefined","length","w","h","onmove","clearTimeout","panel_pos","panel_w","panel_h","viewport","viewport_w","viewport_h","min_x","viewport_offset","min_y","max_y","max_x","p_min_x","p_max_x","p_max_y","moved","t","p_min_y","timeout","setTimeout","test","stop","ui"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-canvas.js","sourcesContent":["define([], function() {\n    function CanvasManager(app, canvas_viewport, overview) {\n        this.app = app;\n        this.cv = canvas_viewport;\n        this.cc = this.cv.find(\"#canvas-container\");\n        this.overview = overview;\n        this.oc = overview.find(\"#overview-canvas\");\n        this.ov = overview.find(\"#overview-viewport\");\n        // Make overview box draggable\n        this.init_drag();\n    }\n    $.extend(CanvasManager.prototype, {\n        init_drag: function() {\n            var self = this;\n            var move = function(x, y) {\n                x = Math.min(x, self.cv.width() / 2);\n                x = Math.max(x, -self.cc.width() + self.cv.width() / 2);\n                y = Math.min(y, self.cv.height() / 2);\n                y = Math.max(y, -self.cc.height() + self.cv.height() / 2);\n                self.cc.css({\n                    left: x,\n                    top: y\n                });\n                self.cv.css({\n                    \"background-position-x\": x,\n                    \"background-position-y\": y\n                });\n                self.update_viewport_overlay();\n            };\n            // Dragging within canvas background\n            this.cc.each(function() {\n                this.scroll_panel = new ScrollPanel(this);\n            });\n            var x_adjust, y_adjust;\n            this.cv\n                .bind(\"dragstart\", function() {\n                    var o = $(this).offset();\n                    var p = self.cc.position();\n                    y_adjust = p.top - o.top;\n                    x_adjust = p.left - o.left;\n                })\n                .bind(\"drag\", function(e, d) {\n                    move(d.offsetX + x_adjust, d.offsetY + y_adjust);\n                })\n                .bind(\"dragend\", function() {\n                    self.app.workflow.fit_canvas_to_nodes();\n                    self.draw_overview();\n                });\n            this.overview.click(function(e) {\n                if (self.overview.hasClass(\"blockaclick\")) {\n                    self.overview.removeClass(\"blockaclick\");\n                } else {\n                    var in_w = self.cc.width(),\n                        in_h = self.cc.height(),\n                        o_w = self.oc.width(),\n                        o_h = self.oc.height(),\n                        new_x_offset = e.pageX - self.oc.offset().left - self.ov.width() / 2,\n                        new_y_offset = e.pageY - self.oc.offset().top - self.ov.height() / 2;\n                    move(-(new_x_offset / o_w * in_w), -(new_y_offset / o_h * in_h));\n                    self.app.workflow.fit_canvas_to_nodes();\n                    self.draw_overview();\n                }\n            });\n            // Dragging for overview pane\n            this.ov\n                .bind(\"drag\", function(e, d) {\n                    var in_w = self.cc.width(),\n                        in_h = self.cc.height(),\n                        o_w = self.oc.width(),\n                        o_h = self.oc.height(),\n                        new_x_offset = d.offsetX - self.overview.offset().left,\n                        new_y_offset = d.offsetY - self.overview.offset().top;\n                    move(-(new_x_offset / o_w * in_w), -(new_y_offset / o_h * in_h));\n                })\n                .bind(\"dragend\", function() {\n                    self.overview.addClass(\"blockaclick\");\n                    self.app.workflow.fit_canvas_to_nodes();\n                    self.draw_overview();\n                });\n            // Dragging for overview border (resize)\n            $(\"#overview-border\").bind(\"drag\", function(e, d) {\n                var op = $(this).offsetParent();\n                var opo = op.offset();\n                var new_size = Math.max(op.width() - (d.offsetX - opo.left), op.height() - (d.offsetY - opo.top));\n                $(this).css({\n                    width: new_size,\n                    height: new_size\n                });\n                self.draw_overview();\n            });\n\n            /*  Disable dragging for child element of the panel so that resizing can\n                only be done by dragging the borders */\n            $(\"#overview-border div\").bind(\"drag\", function() {});\n        },\n        update_viewport_overlay: function() {\n            var cc = this.cc,\n                cv = this.cv,\n                oc = this.oc,\n                ov = this.ov,\n                in_w = cc.width(),\n                in_h = cc.height(),\n                o_w = oc.width(),\n                o_h = oc.height(),\n                cc_pos = cc.position();\n            ov.css({\n                left: -(cc_pos.left / in_w * o_w),\n                top: -(cc_pos.top / in_h * o_h),\n                // Subtract 2 to account for borders (maybe just change box sizing style instead?)\n                width: cv.width() / in_w * o_w - 2,\n                height: cv.height() / in_h * o_h - 2\n            });\n        },\n        draw_overview: function() {\n            var canvas_el = $(\"#overview-canvas\"),\n                size = canvas_el\n                    .parent()\n                    .parent()\n                    .width(),\n                c = canvas_el.get(0).getContext(\"2d\"),\n                in_w = $(\"#canvas-container\").width(),\n                in_h = $(\"#canvas-container\").height();\n            var o_h, shift_h, o_w, shift_w;\n            // Fit canvas into overview area\n            var cv_w = this.cv.width();\n            var cv_h = this.cv.height();\n            if (in_w < cv_w && in_h < cv_h) {\n                // Canvas is smaller than viewport\n                o_w = in_w / cv_w * size;\n                shift_w = (size - o_w) / 2;\n                o_h = in_h / cv_h * size;\n                shift_h = (size - o_h) / 2;\n            } else if (in_w < in_h) {\n                // Taller than wide\n                shift_h = 0;\n                o_h = size;\n                o_w = Math.ceil(o_h * in_w / in_h);\n                shift_w = (size - o_w) / 2;\n            } else {\n                // Wider than tall\n                o_w = size;\n                shift_w = 0;\n                o_h = Math.ceil(o_w * in_h / in_w);\n                shift_h = (size - o_h) / 2;\n            }\n            canvas_el.parent().css({\n                left: shift_w,\n                top: shift_h,\n                width: o_w,\n                height: o_h\n            });\n            canvas_el.attr(\"width\", o_w);\n            canvas_el.attr(\"height\", o_h);\n            // Draw overview\n            $.each(this.app.workflow.nodes, function(id, node) {\n                c.fillStyle = \"#D2C099\";\n                c.strokeStyle = \"#D8B365\";\n                c.lineWidth = 1;\n                var node_element = $(node.element),\n                    position = node_element.position(),\n                    x = position.left / in_w * o_w,\n                    y = position.top / in_h * o_h,\n                    w = node_element.width() / in_w * o_w,\n                    h = node_element.height() / in_h * o_h;\n                if (node.errors) {\n                    c.fillStyle = \"#FFCCCC\";\n                    c.strokeStyle = \"#AA6666\";\n                } else if (node.workflow_outputs !== undefined && node.workflow_outputs.length > 0) {\n                    c.fillStyle = \"#E8A92D\";\n                    c.strokeStyle = \"#E8A92D\";\n                }\n                c.fillRect(x, y, w, h);\n                c.strokeRect(x, y, w, h);\n            });\n            this.update_viewport_overlay();\n        }\n    });\n\n    // FIXME: merge scroll panel into CanvasManager, clean up hardcoded stuff.\n    function ScrollPanel(panel) {\n        this.panel = panel;\n    }\n    $.extend(ScrollPanel.prototype, {\n        test: function(e, onmove) {\n            clearTimeout(this.timeout);\n            var x = e.pageX,\n                y = e.pageY,\n                // Panel size and position\n                panel = $(this.panel),\n                panel_pos = panel.position(),\n                panel_w = panel.width(),\n                panel_h = panel.height(),\n                // Viewport size and offset\n                viewport = panel.parent(),\n                viewport_w = viewport.width(),\n                viewport_h = viewport.height(),\n                viewport_offset = viewport.offset(),\n                // Edges of viewport (in page coordinates)\n                min_x = viewport_offset.left,\n                min_y = viewport_offset.top,\n                max_x = min_x + viewport.width(),\n                max_y = min_y + viewport.height(),\n                // Legal panel range\n                p_min_x = -(panel_w - viewport_w / 2),\n                p_min_y = -(panel_h - viewport_h / 2),\n                p_max_x = viewport_w / 2,\n                p_max_y = viewport_h / 2,\n                // Did the panel move?\n                moved = false,\n                // Constants\n                close_dist = 5,\n                nudge = 23;\n            if (x - close_dist < min_x) {\n                if (panel_pos.left < p_max_x) {\n                    var t = Math.min(nudge, p_max_x - panel_pos.left);\n                    panel.css(\"left\", panel_pos.left + t);\n                    moved = true;\n                }\n            } else if (x + close_dist > max_x) {\n                if (panel_pos.left > p_min_x) {\n                    var t = Math.min(nudge, panel_pos.left - p_min_x);\n                    panel.css(\"left\", panel_pos.left - t);\n                    moved = true;\n                }\n            } else if (y - close_dist < min_y) {\n                if (panel_pos.top < p_max_y) {\n                    var t = Math.min(nudge, p_max_y - panel_pos.top);\n                    panel.css(\"top\", panel_pos.top + t);\n                    moved = true;\n                }\n            } else if (y + close_dist > max_y) {\n                if (panel_pos.top > p_min_y) {\n                    var t = Math.min(nudge, panel_pos.top - p_min_x);\n                    panel.css(\"top\", panel_pos.top - t + \"px\");\n                    moved = true;\n                }\n            }\n            if (moved) {\n                // Keep moving even if mouse doesn't move\n                onmove();\n                var panel = this;\n                this.timeout = setTimeout(function() {\n                    panel.test(e, onmove);\n                }, 50);\n            }\n        },\n        stop: function(e, ui) {\n            clearTimeout(this.timeout);\n        }\n    });\n    return CanvasManager;\n});\n"]}