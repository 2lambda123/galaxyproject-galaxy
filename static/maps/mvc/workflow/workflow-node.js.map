{"version":3,"sources":["mvc/workflow/workflow-node.js"],"names":["define","NodeView","Backbone","Model","extend","initialize","app","attr","Node","element","this","input_terminals","output_terminals","getWorkflowOutput","workflow_outputs","outputName","_","findWhere","isWorkflowOutput","undefined","removeWorkflowOutput","splice","addWorkflowOutput","label","output_name","output","labelWorkflowOutput","changed","oldLabel","workflowOutput","workflow","updateOutputLabel","connectedOutputTerminals","_connectedTerminals","connectedTerminals","t","terminals","push","hasConnectedOutputTerminals","outputTerminals","length","connectedMappedInputTerminals","_connectedMappedTerminals","hasConnectedMappedInputTerminals","inputName","inputTerminals","inputTerminal","isMappedOver","mapped_outputs","isCollection","mapOver","mappedInputTerminals","_mappedTerminals","mappedTerminals","hasMappedOverInputTerminals","found","redraw","$","each","destroy","k","remove_node","remove","addClass","get","p","appendChild","removeChild","parentNode","removeClass","data","type","init_field_data","name","config_form","version","tool_version","errors","tool_state","tooltip","post_job_actions","annotation","node","nodeView","data_inputs","i","input","addDataInput","data_outputs","addRule","addDataOutput","node_changed","update_field_data","unused_outputs","outputViews","output_view","cur_name","data_names","cur_name_in_data_outputs","data_name","unused_output","terminalElement","terminal","connectors","x","wf_output","datatypes","extensions","destroyInvalidConnections","pja_in","renderToolErrors","new_body","newInputsDiv","old_body","newTerminalViews","difference","values","terminalViews","unusedView","el","render","updateDataOutput","markChanged","error","text","b","find","html","tmp"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-node.js","sourcesContent":["define([\"mvc/workflow/workflow-view-node\"], function(NodeView) {\n    var Node = Backbone.Model.extend({\n        initialize: function(app, attr) {\n            this.app = app;\n            this.element = attr.element;\n            this.input_terminals = {};\n            this.output_terminals = {};\n            this.errors = {};\n            this.workflow_outputs = [];\n        },\n        getWorkflowOutput: function(outputName) {\n            return _.findWhere(this.workflow_outputs, {\n                output_name: outputName\n            });\n        },\n        isWorkflowOutput: function(outputName) {\n            return this.getWorkflowOutput(outputName) != undefined;\n        },\n        removeWorkflowOutput: function(outputName) {\n            while (this.isWorkflowOutput(outputName)) {\n                this.workflow_outputs.splice(this.getWorkflowOutput(outputName), 1);\n            }\n        },\n        addWorkflowOutput: function(outputName, label) {\n            if (!this.isWorkflowOutput(outputName)) {\n                var output = { output_name: outputName };\n                if (label) {\n                    output[\"label\"] = label;\n                }\n                this.workflow_outputs.push(output);\n                return true;\n            }\n            return false;\n        },\n        labelWorkflowOutput: function(outputName, label) {\n            var changed = false;\n            var oldLabel = null;\n            if (this.isWorkflowOutput(outputName)) {\n                var workflowOutput = this.getWorkflowOutput(outputName);\n                oldLabel = workflowOutput[\"label\"];\n                workflowOutput[\"label\"] = label;\n                changed = oldLabel != label;\n            } else {\n                changed = this.addWorkflowOutput(outputName, label);\n            }\n            if (changed) {\n                this.app.workflow.updateOutputLabel(oldLabel, label);\n                this.markChanged();\n                this.nodeView.redrawWorkflowOutputs();\n            }\n            return changed;\n        },\n        connectedOutputTerminals: function() {\n            return this._connectedTerminals(this.output_terminals);\n        },\n        _connectedTerminals: function(terminals) {\n            var connectedTerminals = [];\n            $.each(terminals, function(_, t) {\n                if (t.connectors.length > 0) {\n                    connectedTerminals.push(t);\n                }\n            });\n            return connectedTerminals;\n        },\n        hasConnectedOutputTerminals: function() {\n            // return this.connectedOutputTerminals().length > 0; <- optimized this\n            var outputTerminals = this.output_terminals;\n            for (var outputName in outputTerminals) {\n                if (outputTerminals[outputName].connectors.length > 0) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        connectedMappedInputTerminals: function() {\n            return this._connectedMappedTerminals(this.input_terminals);\n        },\n        hasConnectedMappedInputTerminals: function() {\n            // return this.connectedMappedInputTerminals().length > 0; <- optimized this\n            var inputTerminals = this.input_terminals;\n            for (var inputName in inputTerminals) {\n                var inputTerminal = inputTerminals[inputName];\n                if (inputTerminal.connectors.length > 0 && inputTerminal.isMappedOver()) {\n                    return true;\n                }\n            }\n            return false;\n        },\n        _connectedMappedTerminals: function(terminals) {\n            var mapped_outputs = [];\n            $.each(terminals, function(_, t) {\n                var mapOver = t.mapOver();\n                if (mapOver.isCollection) {\n                    if (t.connectors.length > 0) {\n                        mapped_outputs.push(t);\n                    }\n                }\n            });\n            return mapped_outputs;\n        },\n        mappedInputTerminals: function() {\n            return this._mappedTerminals(this.input_terminals);\n        },\n        _mappedTerminals: function(terminals) {\n            var mappedTerminals = [];\n            $.each(terminals, function(_, t) {\n                var mapOver = t.mapOver();\n                if (mapOver.isCollection) {\n                    mappedTerminals.push(t);\n                }\n            });\n            return mappedTerminals;\n        },\n        hasMappedOverInputTerminals: function() {\n            var found = false;\n            _.each(this.input_terminals, function(t) {\n                var mapOver = t.mapOver();\n                if (mapOver.isCollection) {\n                    found = true;\n                }\n            });\n            return found;\n        },\n        redraw: function() {\n            $.each(this.input_terminals, function(_, t) {\n                t.redraw();\n            });\n            $.each(this.output_terminals, function(_, t) {\n                t.redraw();\n            });\n        },\n        destroy: function() {\n            $.each(this.input_terminals, function(k, t) {\n                t.destroy();\n            });\n            $.each(this.output_terminals, function(k, t) {\n                t.destroy();\n            });\n            this.app.workflow.remove_node(this);\n            $(this.element).remove();\n        },\n        make_active: function() {\n            $(this.element).addClass(\"toolForm-active\");\n        },\n        make_inactive: function() {\n            // Keep inactive nodes stacked from most to least recently active\n            // by moving element to the end of parent's node list\n            var element = this.element.get(0);\n            (function(p) {\n                p.removeChild(element);\n                p.appendChild(element);\n            })(element.parentNode);\n            // Remove active class\n            $(element).removeClass(\"toolForm-active\");\n        },\n        init_field_data: function(data) {\n            if (data.type) {\n                this.type = data.type;\n            }\n            this.name = data.name;\n            this.config_form = data.config_form;\n            this.tool_version = this.config_form && this.config_form.version;\n            this.tool_state = data.tool_state;\n            this.errors = data.errors;\n            this.tooltip = data.tooltip ? data.tooltip : \"\";\n            this.annotation = data.annotation;\n            this.post_job_actions = data.post_job_actions ? data.post_job_actions : {};\n            this.label = data.label;\n            this.uuid = data.uuid;\n            this.workflow_outputs = data.workflow_outputs ? data.workflow_outputs : [];\n            var node = this;\n            var nodeView = new NodeView({\n                el: this.element[0],\n                node: node\n            });\n            node.nodeView = nodeView;\n            $.each(data.data_inputs, function(i, input) {\n                nodeView.addDataInput(input);\n            });\n            if (data.data_inputs.length > 0 && data.data_outputs.length > 0) {\n                nodeView.addRule();\n            }\n            $.each(data.data_outputs, function(i, output) {\n                nodeView.addDataOutput(output);\n            });\n            nodeView.render();\n            this.app.workflow.node_changed(this, true);\n        },\n        update_field_data: function(data) {\n            var node = this;\n            var nodeView = node.nodeView;\n            // remove unused output views and remove pre-existing output views from data.data_outputs,\n            // so that these are not added twice.\n            var unused_outputs = [];\n            // nodeView.outputViews contains pre-existing outputs,\n            // while data.data_output contains what should be displayed.\n            // Now we gather the unused outputs\n            $.each(nodeView.outputViews, function(i, output_view) {\n                var cur_name = output_view.output.name;\n                var data_names = data.data_outputs;\n                var cur_name_in_data_outputs = false;\n                _.each(data_names, function(data_name) {\n                    if (data_name.name == cur_name) {\n                        cur_name_in_data_outputs = true;\n                    }\n                });\n                if (cur_name_in_data_outputs === false) {\n                    unused_outputs.push(cur_name);\n                }\n            });\n\n            // Remove the unused outputs\n            _.each(unused_outputs, function(unused_output) {\n                _.each(nodeView.outputViews[unused_output].terminalElement.terminal.connectors, function(x) {\n                    if (x) {\n                        x.destroy(); // Removes the noodle connectors\n                    }\n                });\n                nodeView.outputViews[unused_output].remove(); // removes the rendered output\n                delete nodeView.outputViews[unused_output]; // removes the reference to the output\n                delete node.output_terminals[unused_output]; // removes the output terminal\n            });\n            $.each(node.workflow_outputs, function(i, wf_output) {\n                if (wf_output && !node.output_terminals[wf_output.output_name]) {\n                    node.workflow_outputs.splice(i, 1); // removes output from list of workflow outputs\n                }\n            });\n            $.each(data.data_outputs, function(i, output) {\n                if (!nodeView.outputViews[output.name]) {\n                    nodeView.addDataOutput(output); // add data output if it does not yet exist\n                } else {\n                    // the output already exists, but the output formats may have changed.\n                    // Therefore we update the datatypes and destroy invalid connections.\n                    node.output_terminals[output.name].datatypes = output.extensions;\n                    node.output_terminals[output.name].destroyInvalidConnections();\n                }\n            });\n            this.tool_state = data.tool_state;\n            this.config_form = data.config_form;\n            this.tool_version = this.config_form && this.config_form.version;\n            this.errors = data.errors;\n            this.annotation = data[\"annotation\"];\n            this.label = data.label;\n            if (\"post_job_actions\" in data) {\n                // Won't be present in response for data inputs\n                var pja_in = data.post_job_actions;\n                this.post_job_actions = pja_in ? pja_in : {};\n            }\n            node.nodeView.renderToolErrors();\n            // Update input rows\n            var old_body = nodeView.$(\"div.inputs\");\n            var new_body = nodeView.newInputsDiv();\n            var newTerminalViews = {};\n            _.each(data.data_inputs, function(input) {\n                var terminalView = node.nodeView.addDataInput(input, new_body);\n                newTerminalViews[input.name] = terminalView;\n            });\n            // Cleanup any leftover terminals\n            _.each(_.difference(_.values(nodeView.terminalViews), _.values(newTerminalViews)), function(unusedView) {\n                unusedView.el.terminal.destroy();\n            });\n            nodeView.terminalViews = newTerminalViews;\n            node.nodeView.render();\n            // In general workflow editor assumes tool outputs don't change in # or\n            // type (not really valid right?) but adding special logic here for\n            // data collection input parameters that can have their collection\n            // change.\n            if (data.data_outputs.length == 1 && \"collection_type\" in data.data_outputs[0]) {\n                nodeView.updateDataOutput(data.data_outputs[0]);\n            }\n            old_body.replaceWith(new_body);\n            if (\"workflow_outputs\" in data) {\n                // Won't be present in response for data inputs\n                this.workflow_outputs = workflow_outputs ? workflow_outputs : [];\n            }\n            // If active, reactivate with new config_form\n            this.markChanged();\n            this.redraw();\n        },\n        error: function(text) {\n            var b = $(this.element).find(\".toolFormBody\");\n            b.find(\"div\").remove();\n            var tmp = \"<div style='color: red; text-style: italic;'>\" + text + \"</div>\";\n            this.config_form = tmp;\n            b.html(tmp);\n            this.app.workflow.node_changed(this);\n        },\n        markChanged: function() {\n            this.app.workflow.node_changed(this);\n        }\n    });\n    return Node;\n});\n"]}