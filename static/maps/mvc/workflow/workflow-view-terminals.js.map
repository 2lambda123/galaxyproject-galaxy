{"version":3,"sources":["mvc/workflow/workflow-view-terminals.js"],"names":["define","Globals","Terminals","Connector","TerminalMappingView","Backbone","View","extend","tagName","className","initialize","options","this","tooltip","delay","title","model","bind","render","mapOver","isCollection","show","hide","InputTerminalMappingView","events","click","mouseenter","mouseleave","onMouseEnter","e","terminal","connected","css","onMouseLeave","onClick","resetMapping","TerminalView","setupMappingView","terminalMapping","terminalMappingClass","terminalMappingView","terminalMappingViewClass","terminalElements","el","BaseInputTerminalView","node","input","name","terminalForInput","multiple","input_terminals","dropinit","dropstart","dropend","drop","hover","onDropInit","d","drag","hasClass","canAccept","onDropStart","proxy","connectors","inner_color","onDropEnd","onDrop","redraw","onHover","element","length","t","$","each","appendTo","x","append","addClass","_","destroy","offset","remove","top","InputTerminal","left","width","padding-right","TerminalMapping","InputCollectionTerminal","output","terminalForOutput","BaseOutputTerminalView","dragstart","dragend","onmove","po","offsetX","offsetY","onDrag","onDragStart","available","offsetParent","check_changes_in_active_form","y","dragging","canvas_manager","update_viewport_overlay","get","connector","h","OutputTerminal","c","OutputTerminalView","type","extensions","OutputCollectionTerminalView","stop","InputTerminalView","collection_type","collection_type_source","datatypes","InputCollectionTerminalView","OutputCollectionTerminal"],"mappings":"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","file":"../../../scripts/mvc/workflow/workflow-view-terminals.js","sourcesContent":["define(\n    [\"mvc/workflow/workflow-globals\", \"mvc/workflow/workflow-terminals\", \"mvc/workflow/workflow-connector\"],\n    function(Globals, Terminals, Connector) {\n        var TerminalMappingView = Backbone.View.extend({\n            tagName: \"div\",\n            className: \"fa-icon-button fa fa-folder-o\",\n            initialize: function(options) {\n                var mapText = \"Run tool in parallel over collection\";\n                this.$el.tooltip({ delay: 500, title: mapText });\n                this.model.bind(\"change\", _.bind(this.render, this));\n            },\n            render: function() {\n                if (this.model.mapOver.isCollection) {\n                    this.$el.show();\n                } else {\n                    this.$el.hide();\n                }\n            }\n        });\n\n        var InputTerminalMappingView = TerminalMappingView.extend({\n            events: {\n                click: \"onClick\",\n                mouseenter: \"onMouseEnter\",\n                mouseleave: \"onMouseLeave\"\n            },\n            onMouseEnter: function(e) {\n                var model = this.model;\n                if (!model.terminal.connected() && model.mapOver.isCollection) {\n                    this.$el.css(\"color\", \"red\");\n                }\n            },\n            onMouseLeave: function(e) {\n                this.$el.css(\"color\", \"black\");\n            },\n            onClick: function(e) {\n                var model = this.model;\n                if (!model.terminal.connected() && model.mapOver.isCollection) {\n                    // TODO: Consider prompting...\n                    model.terminal.resetMapping();\n                }\n            }\n        });\n\n        var TerminalView = Backbone.View.extend({\n            setupMappingView: function(terminal) {\n                var terminalMapping = new this.terminalMappingClass({\n                    terminal: terminal\n                });\n                var terminalMappingView = new this.terminalMappingViewClass({\n                    model: terminalMapping\n                });\n                terminalMappingView.render();\n                terminal.terminalMappingView = terminalMappingView;\n                this.terminalMappingView = terminalMappingView;\n            },\n            terminalElements: function() {\n                if (this.terminalMappingView) {\n                    return [this.terminalMappingView.el, this.el];\n                } else {\n                    return [this.el];\n                }\n            }\n        });\n\n        var BaseInputTerminalView = TerminalView.extend({\n            className: \"terminal input-terminal\",\n            initialize: function(options) {\n                var node = options.node;\n                var input = options.input;\n                var name = input.name;\n                var terminal = this.terminalForInput(input);\n                if (!terminal.multiple) {\n                    this.setupMappingView(terminal);\n                }\n                this.el.terminal = terminal;\n                terminal.node = node;\n                terminal.name = name;\n                node.input_terminals[name] = terminal;\n            },\n            events: {\n                dropinit: \"onDropInit\",\n                dropstart: \"onDropStart\",\n                dropend: \"onDropEnd\",\n                drop: \"onDrop\",\n                hover: \"onHover\"\n            },\n            onDropInit: function(e, d) {\n                var terminal = this.el.terminal;\n                // Accept a dragable if it is an output terminal and has a\n                // compatible type\n                return $(d.drag).hasClass(\"output-terminal\") && terminal.canAccept(d.drag.terminal);\n            },\n            onDropStart: function(e, d) {\n                if (d.proxy.terminal) {\n                    d.proxy.terminal.connectors[0].inner_color = \"#BBFFBB\";\n                }\n            },\n            onDropEnd: function(e, d) {\n                if (d.proxy.terminal) {\n                    d.proxy.terminal.connectors[0].inner_color = \"#FFFFFF\";\n                }\n            },\n            onDrop: function(e, d) {\n                var terminal = this.el.terminal;\n                new Connector(d.drag.terminal, terminal).redraw();\n            },\n            onHover: function() {\n                var element = this.el;\n                var terminal = element.terminal;\n                // If connected, create a popup to allow disconnection\n                if (terminal.connectors.length > 0) {\n                    // Create callout\n                    var t = $(\"<div class='callout'></div>\")\n                        .css({ display: \"none\" })\n                        .appendTo(\"body\")\n                        .append(\n                            $(\"<div class='button'></div>\").append(\n                                $(\"<div/>\")\n                                    .addClass(\"fa-icon-button fa fa-times\")\n                                    .click(function() {\n                                        $.each(terminal.connectors, function(_, x) {\n                                            if (x) {\n                                                x.destroy();\n                                            }\n                                        });\n                                        t.remove();\n                                    })\n                            )\n                        )\n                        .bind(\"mouseleave\", function() {\n                            $(this).remove();\n                        });\n                    // Position it and show\n                    t\n                        .css({\n                            top: $(element).offset().top - 2,\n                            left: $(element).offset().left - t.width(),\n                            \"padding-right\": $(element).width()\n                        })\n                        .show();\n                }\n            }\n        });\n\n        var InputTerminalView = BaseInputTerminalView.extend({\n            terminalMappingClass: Terminals.TerminalMapping,\n            terminalMappingViewClass: InputTerminalMappingView,\n            terminalForInput: function(input) {\n                return new Terminals.InputTerminal({\n                    element: this.el,\n                    input: input\n                });\n            }\n        });\n\n        var InputCollectionTerminalView = BaseInputTerminalView.extend({\n            terminalMappingClass: Terminals.TerminalMapping,\n            terminalMappingViewClass: InputTerminalMappingView,\n            terminalForInput: function(input) {\n                return new Terminals.InputCollectionTerminal({\n                    element: this.el,\n                    input: input\n                });\n            }\n        });\n\n        var BaseOutputTerminalView = TerminalView.extend({\n            className: \"terminal output-terminal\",\n            initialize: function(options) {\n                var node = options.node;\n                var output = options.output;\n                var name = output.name;\n                var terminal = this.terminalForOutput(output);\n                this.setupMappingView(terminal);\n                this.el.terminal = terminal;\n                terminal.node = node;\n                terminal.name = name;\n                node.output_terminals[name] = terminal;\n            },\n            events: {\n                drag: \"onDrag\",\n                dragstart: \"onDragStart\",\n                dragend: \"onDragEnd\"\n            },\n            onDrag: function(e, d) {\n                var onmove = function() {\n                    var po = $(d.proxy)\n                            .offsetParent()\n                            .offset(),\n                        x = d.offsetX - po.left,\n                        y = d.offsetY - po.top;\n                    $(d.proxy).css({ left: x, top: y });\n                    d.proxy.terminal.redraw();\n                    // FIXME: global\n                    Globals.canvas_manager.update_viewport_overlay();\n                };\n                onmove();\n                $(\"#canvas-container\")\n                    .get(0)\n                    .scroll_panel.test(e, onmove);\n            },\n            onDragStart: function(e, d) {\n                $(d.available).addClass(\"input-terminal-active\");\n                // Save PJAs in the case of change datatype actions.\n                Globals.workflow.check_changes_in_active_form();\n                // Drag proxy div\n                var h = $('<div class=\"drag-terminal\" style=\"position: absolute;\"></div>')\n                    .appendTo(\"#canvas-container\")\n                    .get(0);\n                // Terminal and connection to display noodle while dragging\n                h.terminal = new Terminals.OutputTerminal({ element: h });\n                var c = new Connector();\n                c.dragging = true;\n                c.connect(this.el.terminal, h.terminal);\n                return h;\n            },\n            onDragEnd: function(e, d) {\n                var connector = d.proxy.terminal.connectors[0];\n                // check_changes_in_active_form may change the state and cause a\n                // the connection to have already been destroyed. There must be better\n                // ways to handle this but the following check fixes some serious GUI\n                // bugs for now.\n                if (connector) {\n                    connector.destroy();\n                }\n                $(d.proxy).remove();\n                $(d.available).removeClass(\"input-terminal-active\");\n                $(\"#canvas-container\")\n                    .get(0)\n                    .scroll_panel.stop();\n            }\n        });\n\n        var OutputTerminalView = BaseOutputTerminalView.extend({\n            terminalMappingClass: Terminals.TerminalMapping,\n            terminalMappingViewClass: TerminalMappingView,\n            terminalForOutput: function(output) {\n                var type = output.extensions;\n                var terminal = new Terminals.OutputTerminal({\n                    element: this.el,\n                    datatypes: type\n                });\n                return terminal;\n            }\n        });\n\n        var OutputCollectionTerminalView = BaseOutputTerminalView.extend({\n            terminalMappingClass: Terminals.TerminalMapping,\n            terminalMappingViewClass: TerminalMappingView,\n            terminalForOutput: function(output) {\n                var collection_type = output.collection_type;\n                var collection_type_source = output.collection_type_source;\n                var terminal = new Terminals.OutputCollectionTerminal({\n                    element: this.el,\n                    collection_type: collection_type,\n                    collection_type_source: collection_type_source,\n                    datatypes: output.extensions\n                });\n                return terminal;\n            }\n        });\n\n        return {\n            InputTerminalView: InputTerminalView,\n            OutputTerminalView: OutputTerminalView,\n            InputCollectionTerminalView: InputCollectionTerminalView,\n            OutputCollectionTerminalView: OutputCollectionTerminalView\n        };\n    }\n);\n"]}