{"version":3,"sources":["mvc/tool/tool-form-composite.js"],"names":["define","View","initialize","$","Utils","render","Ui","Form","FormData","ToolFormBase","Modal","Webhooks","WorkflowIcons","window","extend","self","_refresh","options","this","modal","parent","Galaxy","model","Backbone","Model","deferred","Deferred","setElement","margin","memo","child","$steps","height","$message","css","append","$el","_configure","forms","resize","steps","icon","title","step","children","step_version","outerHeight","index","fixed_title","collapsed","_handleWorkflowParameter","value","callback","match","re","exec","String","wp_name","wp_inputs","step_type","data_resolved","visitInputs","is_runtime_value","input","is_data_input","data_ref","sustain_version","sustain_repeats","sustain_conditionals","narrow","text_enable","text_disable","get","i","cls_enable","debug","cls_disable","errors","step_label","step_name","initial_errors","cls","annotation","needs_refresh","always_refresh","_","escape","help","parms","_isDataStep","output_connections","sub_step","step_index","messages","hide_operations","each","type","step_linked","name","output_connection","j","input_step_index","links","push","label","connection","connections_by_name","input_name","wp_input","parseInt","wp_linked","action_arguments","flavor","optional","collapsible_value","collapsible_preview","backdrop","style","post_job_actions","pja","arg","_renderHistory","_renderStep","inputs","context","__class__","indexOf","Button","length","is_workflow","default_value","execute_btn","isEmpty","step_version_changes","message","status","persistent","fade","_renderHeader","_renderParameters","wp_form","_execute","Label","history_form","empty","Message","test_param","cases","form","addClass","postchange","onchange","current_state","input_list","input_def","tool_id","tool_version","request","wait","process","portlet","is_simple_input","merge","_append","show_progress","id","version","data","create","resolve","emit","url","root","success","field_list","new_value","values","response","multiple","html","wp_value","reduce","short_str","hide_label","numOfUnfinishedShownContents","link","_refresh_history","setTimeout","ignore","_refreshStep","history_form_data","new_history_name","percentage","parameters","promise","job_inputs","job_input_id","input_value","input_id","input_field","validated","source_step","v","wp_field","split","join","undefined","urlRoot","_refreshHistory","history","currHistoryPanel","error","clearTimeout","input_found","step_related_errors","_enabled","body","buttons","_submit","complete","history_id","replacement_params","parameters_normalized","batch","wait_text","enabled","lst","highlight","job_def","hide","_templateSuccess","isArray","WebhookView","toolId","toolVersion","err_data","error_messages","matchResponse","show","_templateError","err_msg","Close","$container","set","startsWith","sanitize","text","JSON","stringify"],"mappings":"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","file":"../../../scripts/mvc/tool/tool-form-composite.js","sourcesContent":["/** This is the run workflow tool form view. */\ndefine(\n    [\n        \"utils/utils\",\n        \"utils/deferred\",\n        \"mvc/ui/ui-misc\",\n        \"mvc/form/form-view\",\n        \"mvc/form/form-data\",\n        \"mvc/tool/tool-form-base\",\n        \"mvc/ui/ui-modal\",\n        \"mvc/webhooks\",\n        \"mvc/workflow/workflow-icons\"\n    ],\n    function(Utils, Deferred, Ui, Form, FormData, ToolFormBase, Modal, Webhooks, WorkflowIcons) {\n        var View = Backbone.View.extend({\n            initialize: function(options) {\n                var self = this;\n                this.modal = parent.Galaxy.modal || new Modal.View();\n                this.model = (options && options.model) || new Backbone.Model(options);\n                this.deferred = new Deferred();\n                this.setElement(\n                    $(\"<div/>\")\n                        .addClass(\"ui-form-composite\")\n                        .append((this.$message = $(\"<div/>\")))\n                        .append((this.$header = $(\"<div/>\")))\n                        .append((this.$steps = $(\"<div/>\")))\n                );\n                $(\"body\").append(this.$el);\n                this._configure();\n                this.render();\n                $(window).resize(function() {\n                    self._refresh();\n                });\n            },\n\n            /** Refresh height of scrollable div below header, handle scrolling by lazy loading steps */\n            _refresh: function(step_index) {\n                var margin =\n                    _.reduce(\n                        this.$el.children(),\n                        function(memo, child) {\n                            return memo + $(child).outerHeight();\n                        },\n                        0\n                    ) -\n                    this.$steps.height() +\n                    90;\n                this.$steps.css(\"height\", $(window).height() - margin);\n            },\n\n            /** Configures form/step options for each workflow step */\n            _configure: function() {\n                var self = this;\n                this.forms = [];\n                this.steps = [];\n                this.links = [];\n                this.parms = [];\n                _.each(this.model.get(\"steps\"), function(step, i) {\n                    Galaxy.emit.debug(\"tool-form-composite::initialize()\", i + \" : Preparing workflow step.\");\n                    var icon = WorkflowIcons[step.step_type];\n                    var title = parseInt(i + 1) + \": \" + (step.step_label || step.step_name);\n                    if (step.annotation) {\n                        title += \" - \" + step.annotation;\n                    }\n                    if (step.step_version) {\n                        title += \" (Galaxy Version \" + step.step_version + \")\";\n                    }\n                    step = Utils.merge(\n                        {\n                            index: i,\n                            fixed_title: _.escape(title),\n                            icon: icon || \"\",\n                            help: null,\n                            citations: null,\n                            collapsible: true,\n                            collapsed: i > 0 && !self._isDataStep(step),\n                            sustain_version: true,\n                            sustain_repeats: true,\n                            sustain_conditionals: true,\n                            narrow: true,\n                            text_enable: \"Edit\",\n                            text_disable: \"Undo\",\n                            cls_enable: \"fa fa-edit\",\n                            cls_disable: \"fa fa-undo\",\n                            errors: step.messages,\n                            initial_errors: true,\n                            cls: \"ui-portlet-narrow\",\n                            hide_operations: true,\n                            needs_refresh: false,\n                            always_refresh: step.step_type != \"tool\"\n                        },\n                        step\n                    );\n                    self.steps[i] = step;\n                    self.links[i] = [];\n                    self.parms[i] = {};\n                });\n\n                // build linear index of step input pairs\n                _.each(this.steps, function(step, i) {\n                    FormData.visitInputs(step.inputs, function(input, name) {\n                        self.parms[i][name] = input;\n                    });\n                });\n\n                // iterate through data input modules and collect linked sub steps\n                _.each(this.steps, function(step, i) {\n                    _.each(step.output_connections, function(output_connection) {\n                        _.each(self.steps, function(sub_step, j) {\n                            sub_step.step_index === output_connection.input_step_index && self.links[i].push(sub_step);\n                        });\n                    });\n                });\n\n                // convert all connected data inputs to hidden fields with proper labels,\n                // and track the linked source step\n                _.each(this.steps, function(step, i) {\n                    _.each(self.steps, function(sub_step, j) {\n                        var connections_by_name = {};\n                        _.each(step.output_connections, function(connection) {\n                            sub_step.step_index === connection.input_step_index &&\n                                (connections_by_name[connection.input_name] = connection);\n                        });\n                        _.each(self.parms[j], function(input, name) {\n                            var connection = connections_by_name[name];\n                            if (connection) {\n                                input.type = \"hidden\";\n                                input.help = input.step_linked ? input.help + \", \" : \"\";\n                                input.help +=\n                                    \"Output dataset '\" + connection.output_name + \"' from step \" + (parseInt(i) + 1);\n                                input.step_linked = input.step_linked || [];\n                                input.step_linked.push(step);\n                            }\n                        });\n                    });\n                });\n\n                // identify and configure workflow parameters\n                var wp_count = 0;\n                this.wp_inputs = {};\n                function _handleWorkflowParameter(value, callback) {\n                    var re = /\\$\\{(.+?)\\}/g,\n                        match;\n                    while ((match = re.exec(String(value)))) {\n                        var wp_name = match[1];\n                        callback(\n                            (self.wp_inputs[wp_name] = self.wp_inputs[wp_name] || {\n                                label: wp_name,\n                                name: wp_name,\n                                type: \"text\",\n                                color: \"hsl( \" + ++wp_count * 100 + \", 70%, 30% )\",\n                                style: \"ui-form-wp-source\",\n                                links: []\n                            })\n                        );\n                    }\n                }\n                _.each(this.steps, function(step, i) {\n                    _.each(self.parms[i], function(input, name) {\n                        _handleWorkflowParameter(input.value, function(wp_input) {\n                            wp_input.links.push(step);\n                            input.wp_linked = true;\n                            input.type = \"text\";\n                            input.backdrop = true;\n                            input.style = \"ui-form-wp-target\";\n                        });\n                    });\n                    _.each(step.post_job_actions, function(pja) {\n                        _.each(pja.action_arguments, function(arg) {\n                            _handleWorkflowParameter(arg, function() {});\n                        });\n                    });\n                });\n\n                // select fields are shown for dynamic fields if all putative data inputs are available,\n                // or if an explicit reference is specified as data_ref and available\n                _.each(this.steps, function(step, i) {\n                    if (step.step_type == \"tool\") {\n                        var data_resolved = true;\n                        FormData.visitInputs(step.inputs, function(input, name, context) {\n                            var is_runtime_value = input.value && input.value.__class__ == \"RuntimeValue\";\n                            var is_data_input = [\"data\", \"data_collection\"].indexOf(input.type) != -1;\n                            var data_ref = context[input.data_ref];\n                            input.step_linked && !self._isDataStep(input.step_linked) && (data_resolved = false);\n                            input.options &&\n                                ((input.options.length == 0 && !data_resolved) || input.wp_linked) &&\n                                (input.is_workflow = true);\n                            data_ref &&\n                                (input.is_workflow =\n                                    (data_ref.step_linked && !self._isDataStep(data_ref.step_linked)) ||\n                                    input.wp_linked);\n                            (is_data_input ||\n                                (input.value && input.value.__class__ == \"RuntimeValue\" && !input.step_linked)) &&\n                                (step.collapsed = false);\n                            is_runtime_value && (input.value = input.default_value);\n                            input.flavor = \"workflow\";\n                            if (!is_runtime_value && !is_data_input && input.type !== \"hidden\" && !input.wp_linked) {\n                                if (input.optional || (!Utils.isEmpty(input.value) && input.value !== \"\")) {\n                                    input.collapsible_value = input.value;\n                                    input.collapsible_preview = true;\n                                }\n                            }\n                        });\n                    }\n                });\n            },\n\n            render: function() {\n                var self = this;\n                this.deferred.reset();\n                this._renderHeader();\n                this._renderMessage();\n                this._renderParameters();\n                this._renderHistory();\n                _.each(this.steps, function(step) {\n                    self._renderStep(step);\n                });\n            },\n\n            /** Render header */\n            _renderHeader: function() {\n                var self = this;\n                this.execute_btn = new Ui.Button({\n                    icon: \"fa-check\",\n                    title: \"Run workflow\",\n                    cls: \"btn btn-primary\",\n                    onclick: function() {\n                        self._execute();\n                    }\n                });\n                this.$header\n                    .addClass(\"ui-form-header\")\n                    .empty()\n                    .append(\n                        new Ui.Label({\n                            title: \"Workflow: \" + this.model.get(\"name\")\n                        }).$el\n                    )\n                    .append(this.execute_btn.$el);\n            },\n\n            /** Render message */\n            _renderMessage: function() {\n                this.$message.empty();\n                if (this.model.get(\"has_upgrade_messages\")) {\n                    this.$message.append(\n                        new Ui.Message({\n                            message:\n                                \"Some tools in this workflow may have changed since it was last saved or some errors were found. The workflow may still run, but any new options will have default values. Please review the messages below to make a decision about whether the changes will affect your analysis.\",\n                            status: \"warning\",\n                            persistent: true,\n                            fade: false\n                        }).$el\n                    );\n                }\n                var step_version_changes = this.model.get(\"step_version_changes\");\n                if (step_version_changes && step_version_changes.length > 0) {\n                    this.$message.append(\n                        new Ui.Message({\n                            message:\n                                \"Some tools are being executed with different versions compared to those available when this workflow was last saved because the other versions are not or no longer available on this Galaxy instance. To upgrade your workflow and dismiss this message simply edit the workflow and re-save it.\",\n                            status: \"warning\",\n                            persistent: true,\n                            fade: false\n                        }).$el\n                    );\n                }\n            },\n\n            /** Render workflow parameters */\n            _renderParameters: function() {\n                var self = this;\n                this.wp_form = null;\n                if (!_.isEmpty(this.wp_inputs)) {\n                    this.wp_form = new Form({\n                        title: \"<b>Workflow Parameters</b>\",\n                        inputs: this.wp_inputs,\n                        cls: \"ui-portlet-narrow\",\n                        onchange: function() {\n                            _.each(self.wp_form.input_list, function(input_def, i) {\n                                _.each(input_def.links, function(step) {\n                                    self._refreshStep(step);\n                                });\n                            });\n                        }\n                    });\n                    this._append(this.$steps.empty(), this.wp_form.$el);\n                }\n            },\n\n            /** Render workflow parameters */\n            _renderHistory: function() {\n                this.history_form = new Form({\n                    cls: \"ui-portlet-narrow\",\n                    title: \"<b>History Options</b>\",\n                    inputs: [\n                        {\n                            type: \"conditional\",\n                            name: \"new_history\",\n                            test_param: {\n                                name: \"check\",\n                                label: \"Send results to a new history\",\n                                type: \"boolean\",\n                                value: \"false\",\n                                help: \"\"\n                            },\n                            cases: [\n                                {\n                                    value: \"true\",\n                                    inputs: [\n                                        {\n                                            name: \"name\",\n                                            label: \"History name\",\n                                            type: \"text\",\n                                            value: this.model.get(\"name\")\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ]\n                });\n                this._append(this.$steps, this.history_form.$el);\n            },\n\n            /** Render step */\n            _renderStep: function(step) {\n                var self = this;\n                var form = null;\n                this.deferred.execute(function(promise) {\n                    self.$steps.addClass(\"ui-steps\");\n                    if (step.step_type == \"tool\") {\n                        step.postchange = function(process, form) {\n                            var self = this;\n                            var current_state = {\n                                tool_id: step.id,\n                                tool_version: step.version,\n                                inputs: $.extend(true, {}, form.data.create())\n                            };\n                            form.wait(true);\n                            Galaxy.emit.debug(\n                                \"tool-form-composite::postchange()\",\n                                \"Sending current state.\",\n                                current_state\n                            );\n                            Utils.request({\n                                type: \"POST\",\n                                url: Galaxy.root + \"api/tools/\" + step.id + \"/build\",\n                                data: current_state,\n                                success: function(data) {\n                                    form.update(data);\n                                    form.wait(false);\n                                    Galaxy.emit.debug(\"tool-form-composite::postchange()\", \"Received new model.\", data);\n                                    process.resolve();\n                                },\n                                error: function(response) {\n                                    Galaxy.emit.debug(\n                                        \"tool-form-composite::postchange()\",\n                                        \"Refresh request failed.\",\n                                        response\n                                    );\n                                    process.reject();\n                                }\n                            });\n                        };\n                        form = new ToolFormBase(step);\n                        if (step.post_job_actions && step.post_job_actions.length) {\n                            form.portlet.append(\n                                $(\"<div/>\")\n                                    .addClass(\"ui-form-element-disabled\")\n                                    .append(\n                                        $(\"<div/>\")\n                                            .addClass(\"ui-form-title\")\n                                            .html(\"<b>Job Post Actions</b>\")\n                                    )\n                                    .append(\n                                        $(\"<div/>\")\n                                            .addClass(\"ui-form-preview\")\n                                            .html(\n                                                _.reduce(\n                                                    step.post_job_actions,\n                                                    function(memo, value) {\n                                                        return memo + \" \" + value.short_str;\n                                                    },\n                                                    \"\"\n                                                )\n                                            )\n                                    )\n                            );\n                        }\n                    } else {\n                        var is_simple_input = [\"data_input\", \"data_collection_input\"].indexOf(step.step_type) != -1;\n                        _.each(step.inputs, function(input) {\n                            input.flavor = \"module\";\n                            input.hide_label = is_simple_input;\n                        });\n                        form = new Form(\n                            Utils.merge(\n                                {\n                                    title: step.fixed_title,\n                                    onchange: function() {\n                                        _.each(self.links[step.index], function(link) {\n                                            self._refreshStep(link);\n                                        });\n                                    },\n                                    inputs:\n                                        step.inputs && step.inputs.length > 0\n                                            ? step.inputs\n                                            : [\n                                                  {\n                                                      type: \"hidden\",\n                                                      name: \"No options available.\",\n                                                      ignore: null\n                                                  }\n                                              ]\n                                },\n                                step\n                            )\n                        );\n                    }\n                    self.forms[step.index] = form;\n                    self._append(self.$steps, form.$el);\n                    self._refresh();\n                    step.needs_refresh && self._refreshStep(step);\n                    form.portlet[!self.show_progress ? \"enable\" : \"disable\"]();\n                    self.show_progress &&\n                        self.execute_btn.model.set({\n                            wait: true,\n                            wait_text: \"Preparing...\",\n                            percentage: (step.index + 1) * 100.0 / self.steps.length\n                        });\n                    Galaxy.emit.debug(\n                        \"tool-form-composite::initialize()\",\n                        step.index + \" : Workflow step state ready.\",\n                        step\n                    );\n                    setTimeout(function() {\n                        promise.resolve();\n                    }, 0);\n                });\n            },\n\n            /** Refreshes step values from source step values */\n            _refreshStep: function(step) {\n                var self = this;\n                var form = this.forms[step.index];\n                if (form) {\n                    _.each(self.parms[step.index], function(input, name) {\n                        if (input.step_linked || input.wp_linked) {\n                            var field = form.field_list[form.data.match(name)];\n                            if (field) {\n                                var new_value = undefined;\n                                if (input.step_linked) {\n                                    new_value = { values: [] };\n                                    _.each(input.step_linked, function(source_step) {\n                                        if (self._isDataStep(source_step)) {\n                                            var value = self.forms[source_step.index].data.create().input;\n                                            value &&\n                                                _.each(value.values, function(v) {\n                                                    new_value.values.push(v);\n                                                });\n                                        }\n                                    });\n                                    if (!input.multiple && new_value.values.length > 0) {\n                                        new_value = {\n                                            values: [new_value.values[0]]\n                                        };\n                                    }\n                                } else if (input.wp_linked) {\n                                    new_value = input.value;\n                                    var re = /\\$\\{(.+?)\\}/g,\n                                        match;\n                                    while ((match = re.exec(input.value))) {\n                                        var wp_field = self.wp_form.field_list[self.wp_form.data.match(match[1])];\n                                        var wp_value = wp_field && wp_field.value();\n                                        if (wp_value) {\n                                            new_value = new_value.split(match[0]).join(wp_value);\n                                        }\n                                    }\n                                }\n                                if (new_value !== undefined) {\n                                    field.value(new_value);\n                                }\n                            }\n                        }\n                    });\n                    form.trigger(\"change\");\n                } else {\n                    step.needs_refresh = true;\n                }\n            },\n\n            /** Refresh the history after job submission while form is shown */\n            _refreshHistory: function() {\n                var self = this;\n                var history = parent.Galaxy && parent.Galaxy.currHistoryPanel && parent.Galaxy.currHistoryPanel.model;\n                this._refresh_history && clearTimeout(this._refresh_history);\n                if (history) {\n                    history.refresh().success(function() {\n                        if (history.numOfUnfinishedShownContents() === 0) {\n                            self._refresh_history = setTimeout(function() {\n                                self._refreshHistory();\n                            }, history.UPDATE_DELAY);\n                        }\n                    });\n                }\n            },\n\n            /** Build remaining steps */\n            _execute: function() {\n                var self = this;\n                this.show_progress = true;\n                this._enabled(false);\n                this.deferred.execute(function(promise) {\n                    setTimeout(function() {\n                        promise.resolve();\n                        self._submit();\n                    }, 0);\n                });\n            },\n\n            /** Validate and submit workflow */\n            _submit: function() {\n                var self = this;\n                var history_form_data = this.history_form.data.create();\n                var job_def = {\n                    new_history_name: history_form_data[\"new_history|name\"]\n                        ? history_form_data[\"new_history|name\"]\n                        : null,\n                    history_id: !history_form_data[\"new_history|name\"] ? this.model.get(\"history_id\") : null,\n                    replacement_params: this.wp_form ? this.wp_form.data.create() : {},\n                    parameters: {},\n                    // Tool form will submit flat maps for each parameter\n                    // (e.g. \"repeat_0|cond|param\": \"foo\" instead of nested\n                    // data structures).\n                    parameters_normalized: true,\n                    // Tool form always wants a list of invocations back\n                    // so that inputs can be batched.\n                    batch: true\n                };\n                var validated = true;\n                for (var i in this.forms) {\n                    var form = this.forms[i];\n                    var job_inputs = form.data.create();\n                    var step = self.steps[i];\n                    var step_index = step.step_index;\n                    form.trigger(\"reset\");\n                    for (var job_input_id in job_inputs) {\n                        var input_value = job_inputs[job_input_id];\n                        var input_id = form.data.match(job_input_id);\n                        var input_field = form.field_list[input_id];\n                        var input_def = form.input_list[input_id];\n                        if (!input_def.step_linked) {\n                            if (this._isDataStep(step)) {\n                                validated = input_value && input_value.values && input_value.values.length > 0;\n                            } else {\n                                validated =\n                                    input_def.optional ||\n                                    (input_def.is_workflow && input_value !== \"\") ||\n                                    (!input_def.is_workflow && input_value !== null);\n                            }\n                            if (!validated) {\n                                form.highlight(input_id);\n                                break;\n                            }\n                            job_def.parameters[step_index] = job_def.parameters[step_index] || {};\n                            job_def.parameters[step_index][job_input_id] = job_inputs[job_input_id];\n                        }\n                    }\n                    if (!validated) {\n                        break;\n                    }\n                }\n                if (!validated) {\n                    self._enabled(true);\n                    Galaxy.emit.debug(\"tool-form-composite::submit()\", \"Validation failed.\", job_def);\n                } else {\n                    Galaxy.emit.debug(\"tool-form-composite::submit()\", \"Validation complete.\", job_def);\n                    Utils.request({\n                        type: \"POST\",\n                        url: Galaxy.root + \"api/workflows/\" + this.model.id + \"/invocations\",\n                        data: job_def,\n                        success: function(response) {\n                            Galaxy.emit.debug(\"tool-form-composite::submit\", \"Submission successful.\", response);\n                            self.$el.children().hide();\n                            self.$el.append(self._templateSuccess(response));\n\n                            // Show Webhook if job is running\n                            if ($.isArray(response) && response.length > 0) {\n                                self.$el.append($(\"<div/>\", { id: \"webhook-view\" }));\n                                var WebhookApp = new Webhooks.WebhookView({\n                                    urlRoot: Galaxy.root + \"api/webhooks/workflow\",\n                                    toolId: job_def.tool_id,\n                                    toolVersion: job_def.tool_version\n                                });\n                            }\n\n                            self._refreshHistory();\n                        },\n                        error: function(response) {\n                            Galaxy.emit.debug(\"tool-form-composite::submit\", \"Submission failed.\", response);\n                            var input_found = false;\n                            if (response && response.err_data) {\n                                for (var i in self.forms) {\n                                    var form = self.forms[i];\n                                    var step_related_errors = response.err_data[form.model.get(\"step_index\")];\n                                    if (step_related_errors) {\n                                        var error_messages = form.data.matchResponse(step_related_errors);\n                                        for (var input_id in error_messages) {\n                                            form.highlight(input_id, error_messages[input_id]);\n                                            input_found = true;\n                                            break;\n                                        }\n                                    }\n                                }\n                            }\n                            if (!input_found) {\n                                self.modal.show({\n                                    title: \"Workflow submission failed\",\n                                    body: self._templateError(job_def, response && response.err_msg),\n                                    buttons: {\n                                        Close: function() {\n                                            self.modal.hide();\n                                        }\n                                    }\n                                });\n                            }\n                        },\n                        complete: function() {\n                            self._enabled(true);\n                        }\n                    });\n                }\n            },\n\n            /** Append new dom to body */\n            _append: function($container, $el) {\n                $container.append(\"<p/>\").append($el);\n            },\n\n            /** Set enabled/disabled state */\n            _enabled: function(enabled) {\n                this.execute_btn.model.set({\n                    wait: !enabled,\n                    wait_text: \"Sending...\",\n                    percentage: -1\n                });\n                this.wp_form && this.wp_form.portlet[enabled ? \"enable\" : \"disable\"]();\n                this.history_form && this.history_form.portlet[enabled ? \"enable\" : \"disable\"]();\n                _.each(this.forms, function(form) {\n                    form && form.portlet[enabled ? \"enable\" : \"disable\"]();\n                });\n            },\n\n            /** Is data input module/step */\n            _isDataStep: function(steps) {\n                var lst = $.isArray(steps) ? steps : [steps];\n                for (var i = 0; i < lst.length; i++) {\n                    var step = lst[i];\n                    if (!step || !step.step_type || !step.step_type.startsWith(\"data\")) {\n                        return false;\n                    }\n                }\n                return true;\n            },\n\n            /** Templates */\n            _templateSuccess: function(response) {\n                if ($.isArray(response) && response.length > 0) {\n                    return $(\"<div/>\")\n                        .addClass(\"donemessagelarge\")\n                        .append(\n                            $(\"<p/>\").html(\n                                \"Successfully invoked workflow <b>\" +\n                                    Utils.sanitize(this.model.get(\"name\")) +\n                                    \"</b>\" +\n                                    (response.length > 1 ? \" <b>\" + response.length + \" times</b>\" : \"\") +\n                                    \".\"\n                            )\n                        )\n                        .append(\n                            $(\"<p/>\")\n                                .append(\"<b/>\")\n                                .text(\n                                    \"You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from 'running' to 'finished' if completed successfully or 'error' if problems were encountered.\"\n                                )\n                        );\n                } else {\n                    return this._templateError(response, \"Invalid success response. No invocations found.\");\n                }\n            },\n\n            _templateError: function(response, err_msg) {\n                return $(\"<div/>\")\n                    .addClass(\"errormessagelarge\")\n                    .append(\n                        $(\"<p/>\").text(\n                            \"The server could not complete the request. Please contact the Galaxy Team if this error persists. \" +\n                                (JSON.stringify(err_msg) || \"\")\n                        )\n                    )\n                    .append($(\"<pre/>\").text(JSON.stringify(response, null, 4)));\n            }\n        });\n        return {\n            View: View\n        };\n    }\n);\n"]}