{"version":3,"sources":["mvc/tool/tools.js"],"names":["define","_","data","ToolForm","VisibilityMixin","show","this","set","hide","toggle","get","is_visible","attributes","hidden","name","Backbone","Model","extend","label","type","value","html","num_samples","initialize","options","unescape","copy","ToolParameter","toJSON","set_value","ToolParameterCollection","Collection","model","DataToolParameter","IntegerToolParameter","parseInt","get_samples","d3","scale","linear","FloatToolParameter","parseFloat","SelectToolParameter","map","option","subModelTypes","integer","float","select","description","inputs","outputs","urlRoot","Galaxy","p_class","p","prototype","rval","call","remove_inputs","types","i","tool","filter","input","indexOf","only_samplable_inputs","incompatible_inputs","Tool","valid_inputs","each","apply_search_results","results","id","set_input_value","keys","self","set_input_values","inputs_dict","input_name","run","_run","rerun","input_dict","regions","target_dataset_id","target_dataset","payload","tool_id","additional_params","ajax_settings","JSON","contentType","get_inputs_dict","interval","run_deferred","$","Deferred","when","ss_deferred","util","then","url","stringify","dataType","success_fn","response","go","result","ToolCollection","View","open","ToolSectionLabel","defaults","elems","cur_label","elt","all_hidden","ToolSearch","min_chars_for_search","clear_btn_url","ToolSection","search_hint_string","visible","do_search","query","clear_key","root","on","length","setTimeout","clearTimeout","timer","clear_search","ga","q","parse","ToolPanel","tool_search","elt_dict","layout","clear_search_results","model_class","tools","panel_elt","parse_elt","update_visible","$link","append","templates","formStyle","find","e","preventDefault","$el","version","tool_link","upload","ToolSectionLabelView","tagName","router","push","text","BaseView","className","render","panel_section","tool_view","label_view","section_body","ToolLinkView","ToolSearchView","update_open","children","slideDown","slideUp","events","focus_and_select","keyup :input","change :input","click #search-clear-btn","clear","tooltip","focus","ToolPanelView","val","query_changed","evData","which","section_title_view","handle_search_results","search_view","click","ToolSectionView","ToolFormView","attr","tool_form","trigger","tool_panel_view","remove","collection","show_tool","tool_form_view","css","template","fetch","done","width","join","variable"],"mappings":"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","file":"../../../scripts/mvc/tool/tools.js","sourcesContent":["/**\n * Model, view, and controller objects for Galaxy tools and tool panel.\n */\n\ndefine([\"libs/underscore\", \"viz/trackster/util\", \"mvc/dataset/data\", \"mvc/tool/tool-form\"], function(\n    _,\n    util,\n    data,\n    ToolForm\n) {\n    \"use strict\";\n\n    /**\n * Mixin for tracking model visibility.\n */\n    var VisibilityMixin = {\n        hidden: false,\n\n        show: function() {\n            this.set(\"hidden\", false);\n        },\n\n        hide: function() {\n            this.set(\"hidden\", true);\n        },\n\n        toggle: function() {\n            this.set(\"hidden\", !this.get(\"hidden\"));\n        },\n\n        is_visible: function() {\n            return !this.attributes.hidden;\n        }\n    };\n\n    /**\n * A tool parameter.\n */\n    var ToolParameter = Backbone.Model.extend({\n        defaults: {\n            name: null,\n            label: null,\n            type: null,\n            value: null,\n            html: null,\n            num_samples: 5\n        },\n\n        initialize: function(options) {\n            this.attributes.html = unescape(this.attributes.html);\n        },\n\n        copy: function() {\n            return new ToolParameter(this.toJSON());\n        },\n\n        set_value: function(value) {\n            this.set(\"value\", value || \"\");\n        }\n    });\n\n    var ToolParameterCollection = Backbone.Collection.extend({\n        model: ToolParameter\n    });\n\n    /**\n * A data tool parameter.\n */\n    var DataToolParameter = ToolParameter.extend({});\n\n    /**\n * An integer tool parameter.\n */\n    var IntegerToolParameter = ToolParameter.extend({\n        set_value: function(value) {\n            this.set(\"value\", parseInt(value, 10));\n        },\n\n        /**\n     * Returns samples from a tool input.\n     */\n        get_samples: function() {\n            return d3.scale\n                .linear()\n                .domain([this.get(\"min\"), this.get(\"max\")])\n                .ticks(this.get(\"num_samples\"));\n        }\n    });\n\n    var FloatToolParameter = IntegerToolParameter.extend({\n        set_value: function(value) {\n            this.set(\"value\", parseFloat(value));\n        }\n    });\n\n    /**\n * A select tool parameter.\n */\n    var SelectToolParameter = ToolParameter.extend({\n        /**\n     * Returns tool options.\n     */\n        get_samples: function() {\n            return _.map(this.get(\"options\"), function(option) {\n                return option[0];\n            });\n        }\n    });\n\n    // Set up dictionary of parameter types.\n    ToolParameter.subModelTypes = {\n        integer: IntegerToolParameter,\n        float: FloatToolParameter,\n        data: DataToolParameter,\n        select: SelectToolParameter\n    };\n\n    /**\n * A Galaxy tool.\n */\n    var Tool = Backbone.Model.extend({\n        // Default attributes.\n        defaults: {\n            id: null,\n            name: null,\n            description: null,\n            target: null,\n            inputs: [],\n            outputs: []\n        },\n\n        urlRoot: Galaxy.root + \"api/tools\",\n\n        initialize: function(options) {\n            // Set parameters.\n            this.set(\n                \"inputs\",\n                new ToolParameterCollection(\n                    _.map(options.inputs, function(p) {\n                        var p_class = ToolParameter.subModelTypes[p.type] || ToolParameter;\n                        return new p_class(p);\n                    })\n                )\n            );\n        },\n\n        /**\n     *\n     */\n        toJSON: function() {\n            var rval = Backbone.Model.prototype.toJSON.call(this);\n\n            // Convert inputs to JSON manually.\n            rval.inputs = this.get(\"inputs\").map(function(i) {\n                return i.toJSON();\n            });\n            return rval;\n        },\n\n        /**\n     * Removes inputs of a particular type; this is useful because not all inputs can be handled by\n     * client and server yet.\n     */\n        remove_inputs: function(types) {\n            var tool = this,\n                incompatible_inputs = tool.get(\"inputs\").filter(function(input) {\n                    return types.indexOf(input.get(\"type\")) !== -1;\n                });\n            tool.get(\"inputs\").remove(incompatible_inputs);\n        },\n\n        /**\n     * Returns object copy, optionally including only inputs that can be sampled.\n     */\n        copy: function(only_samplable_inputs) {\n            var copy = new Tool(this.toJSON());\n\n            // Return only samplable inputs if flag is set.\n            if (only_samplable_inputs) {\n                var valid_inputs = new Backbone.Collection();\n                copy.get(\"inputs\").each(function(input) {\n                    if (input.get_samples()) {\n                        valid_inputs.push(input);\n                    }\n                });\n                copy.set(\"inputs\", valid_inputs);\n            }\n\n            return copy;\n        },\n\n        apply_search_results: function(results) {\n            _.indexOf(results, this.attributes.id) !== -1 ? this.show() : this.hide();\n            return this.is_visible();\n        },\n\n        /**\n     * Set a tool input's value.\n     */\n        set_input_value: function(name, value) {\n            this.get(\"inputs\")\n                .find(function(input) {\n                    return input.get(\"name\") === name;\n                })\n                .set(\"value\", value);\n        },\n\n        /**\n     * Set many input values at once.\n     */\n        set_input_values: function(inputs_dict) {\n            var self = this;\n            _.each(_.keys(inputs_dict), function(input_name) {\n                self.set_input_value(input_name, inputs_dict[input_name]);\n            });\n        },\n\n        /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     */\n        run: function() {\n            return this._run();\n        },\n\n        /**\n     * Rerun tool using regions and a target dataset.\n     */\n        rerun: function(target_dataset, regions) {\n            return this._run({\n                action: \"rerun\",\n                target_dataset_id: target_dataset.id,\n                regions: regions\n            });\n        },\n\n        /**\n     * Returns input dict for tool's inputs.\n     */\n        get_inputs_dict: function() {\n            var input_dict = {};\n            this.get(\"inputs\").each(function(input) {\n                input_dict[input.get(\"name\")] = input.get(\"value\");\n            });\n            return input_dict;\n        },\n\n        /**\n     * Run tool; returns a Deferred that resolves to the tool's output(s).\n     * NOTE: this method is a helper method and should not be called directly.\n     */\n        _run: function(additional_params) {\n            // Create payload.\n            var payload = _.extend(\n                {\n                    tool_id: this.id,\n                    inputs: this.get_inputs_dict()\n                },\n                additional_params\n            );\n\n            // Because job may require indexing datasets, use server-side\n            // deferred to ensure that job is run. Also use deferred that\n            // resolves to outputs from tool.\n            var run_deferred = $.Deferred(),\n                ss_deferred = new util.ServerStateDeferred({\n                    ajax_settings: {\n                        url: this.urlRoot,\n                        data: JSON.stringify(payload),\n                        dataType: \"json\",\n                        contentType: \"application/json\",\n                        type: \"POST\"\n                    },\n                    interval: 2000,\n                    success_fn: function(response) {\n                        return response !== \"pending\";\n                    }\n                });\n\n            // Run job and resolve run_deferred to tool outputs.\n            $.when(ss_deferred.go()).then(function(result) {\n                run_deferred.resolve(new data.DatasetCollection(result));\n            });\n            return run_deferred;\n        }\n    });\n    _.extend(Tool.prototype, VisibilityMixin);\n\n    /**\n * Tool view.\n */\n    var ToolView = Backbone.View.extend({});\n\n    /**\n * Wrap collection of tools for fast access/manipulation.\n */\n    var ToolCollection = Backbone.Collection.extend({\n        model: Tool\n    });\n\n    /**\n * Label or section header in tool panel.\n */\n    var ToolSectionLabel = Backbone.Model.extend(VisibilityMixin);\n\n    /**\n * Section of tool panel with elements (labels and tools).\n */\n    var ToolSection = Backbone.Model.extend({\n        defaults: {\n            elems: [],\n            open: false\n        },\n\n        clear_search_results: function() {\n            _.each(this.attributes.elems, function(elt) {\n                elt.show();\n            });\n\n            this.show();\n            this.set(\"open\", false);\n        },\n\n        apply_search_results: function(results) {\n            var all_hidden = true,\n                cur_label;\n            _.each(this.attributes.elems, function(elt) {\n                if (elt instanceof ToolSectionLabel) {\n                    cur_label = elt;\n                    cur_label.hide();\n                } else if (elt instanceof Tool) {\n                    if (elt.apply_search_results(results)) {\n                        all_hidden = false;\n                        if (cur_label) {\n                            cur_label.show();\n                        }\n                    }\n                }\n            });\n\n            if (all_hidden) {\n                this.hide();\n            } else {\n                this.show();\n                this.set(\"open\", true);\n            }\n        }\n    });\n    _.extend(ToolSection.prototype, VisibilityMixin);\n\n    /**\n * Tool search that updates results when query is changed. Result value of null\n * indicates that query was not run; if not null, results are from search using\n * query.\n */\n    var ToolSearch = Backbone.Model.extend({\n        defaults: {\n            search_hint_string: \"search tools\",\n            min_chars_for_search: 3,\n            clear_btn_url: \"\",\n            visible: true,\n            query: \"\",\n            results: null,\n            // ESC (27) will clear the input field and tool search filters\n            clear_key: 27\n        },\n\n        urlRoot: Galaxy.root + \"api/tools\",\n\n        initialize: function() {\n            this.on(\"change:query\", this.do_search);\n        },\n\n        /**\n     * Do the search and update the results.\n     */\n        do_search: function() {\n            var query = this.attributes.query;\n\n            // If query is too short, do not search.\n            if (query.length < this.attributes.min_chars_for_search) {\n                this.set(\"results\", null);\n                return;\n            }\n\n            // Do search via AJAX.\n            var q = query;\n            // Stop previous ajax-request\n            if (this.timer) {\n                clearTimeout(this.timer);\n            }\n            // Start a new ajax-request in X ms\n            $(\"#search-clear-btn\").hide();\n            $(\"#search-spinner\").show();\n            var self = this;\n            this.timer = setTimeout(function() {\n                // log the search to analytics if present\n                if (typeof ga !== \"undefined\") {\n                    ga(\"send\", \"pageview\", Galaxy.root + \"?q=\" + q);\n                }\n                $.get(\n                    self.urlRoot,\n                    { q: q },\n                    function(data) {\n                        self.set(\"results\", data);\n                        $(\"#search-spinner\").hide();\n                        $(\"#search-clear-btn\").show();\n                    },\n                    \"json\"\n                );\n            }, 400);\n        },\n\n        clear_search: function() {\n            this.set(\"query\", \"\");\n            this.set(\"results\", null);\n        }\n    });\n    _.extend(ToolSearch.prototype, VisibilityMixin);\n\n    /**\n * Tool Panel.\n */\n    var ToolPanel = Backbone.Model.extend({\n        initialize: function(options) {\n            this.attributes.tool_search = options.tool_search;\n            this.attributes.tool_search.on(\"change:results\", this.apply_search_results, this);\n            this.attributes.tools = options.tools;\n            this.attributes.layout = new Backbone.Collection(this.parse(options.layout));\n        },\n\n        /**\n     * Parse tool panel dictionary and return collection of tool panel elements.\n     */\n        parse: function(response) {\n            // Recursive function to parse tool panel elements.\n            var self = this,\n                // Helper to recursively parse tool panel.\n                parse_elt = function(elt_dict) {\n                    var type = elt_dict.model_class;\n                    // There are many types of tools; for now, anything that ends in 'Tool'\n                    // is treated as a generic tool.\n                    if (type.indexOf(\"Tool\") === type.length - 4) {\n                        return self.attributes.tools.get(elt_dict.id);\n                    } else if (type === \"ToolSection\") {\n                        // Parse elements.\n                        var elems = _.map(elt_dict.elems, parse_elt);\n                        elt_dict.elems = elems;\n                        return new ToolSection(elt_dict);\n                    } else if (type === \"ToolSectionLabel\") {\n                        return new ToolSectionLabel(elt_dict);\n                    }\n                };\n\n            return _.map(response, parse_elt);\n        },\n\n        clear_search_results: function() {\n            this.get(\"layout\").each(function(panel_elt) {\n                if (panel_elt instanceof ToolSection) {\n                    panel_elt.clear_search_results();\n                } else {\n                    // Label or tool, so just show.\n                    panel_elt.show();\n                }\n            });\n        },\n\n        apply_search_results: function() {\n            var results = this.get(\"tool_search\").get(\"results\");\n            if (results === null) {\n                this.clear_search_results();\n                return;\n            }\n\n            var cur_label = null;\n            this.get(\"layout\").each(function(panel_elt) {\n                if (panel_elt instanceof ToolSectionLabel) {\n                    cur_label = panel_elt;\n                    cur_label.hide();\n                } else if (panel_elt instanceof Tool) {\n                    if (panel_elt.apply_search_results(results)) {\n                        if (cur_label) {\n                            cur_label.show();\n                        }\n                    }\n                } else {\n                    // Starting new section, so clear current label.\n                    cur_label = null;\n                    panel_elt.apply_search_results(results);\n                }\n            });\n        }\n    });\n\n    /**\n * View classes for Galaxy tools and tool panel.\n *\n * Views use the templates defined below for rendering. Views update as needed\n * based on (a) model/collection events and (b) user interactions; in this sense,\n * they are controllers are well and the HTML is the real view in the MVC architecture.\n */\n\n    /**\n * Base view that handles visibility based on model's hidden attribute.\n */\n    var BaseView = Backbone.View.extend({\n        initialize: function() {\n            this.model.on(\"change:hidden\", this.update_visible, this);\n            this.update_visible();\n        },\n        update_visible: function() {\n            this.model.attributes.hidden ? this.$el.hide() : this.$el.show();\n        }\n    });\n\n    /**\n * Link to a tool.\n */\n    var ToolLinkView = BaseView.extend({\n        tagName: \"div\",\n\n        render: function() {\n            // create element\n            var $link = $(\"<div/>\");\n            $link.append(templates.tool_link(this.model.toJSON()));\n\n            var formStyle = this.model.get(\"form_style\", null);\n            // open upload dialog for upload tool\n            if (this.model.id === \"upload1\") {\n                $link.find(\"a\").on(\"click\", function(e) {\n                    e.preventDefault();\n                    Galaxy.upload.show();\n                });\n            } else if (formStyle === \"regular\") {\n                // regular tools\n                var self = this;\n                $link.find(\"a\").on(\"click\", function(e) {\n                    e.preventDefault();\n                    Galaxy.router.push(\"/\", {\n                        tool_id: self.model.id,\n                        version: self.model.get(\"version\")\n                    });\n                });\n            }\n\n            // add element\n            this.$el.append($link);\n            return this;\n        }\n    });\n\n    /**\n * Panel label/section header.\n */\n    var ToolSectionLabelView = BaseView.extend({\n        tagName: \"div\",\n        className: \"toolPanelLabel\",\n\n        render: function() {\n            this.$el.append($(\"<span/>\").text(this.model.attributes.text));\n            return this;\n        }\n    });\n\n    /**\n * Panel section.\n */\n    var ToolSectionView = BaseView.extend({\n        tagName: \"div\",\n        className: \"toolSectionWrapper\",\n\n        initialize: function() {\n            BaseView.prototype.initialize.call(this);\n            this.model.on(\"change:open\", this.update_open, this);\n        },\n\n        render: function() {\n            // Build using template.\n            this.$el.append(templates.panel_section(this.model.toJSON()));\n\n            // Add tools to section.\n            var section_body = this.$el.find(\".toolSectionBody\");\n            _.each(this.model.attributes.elems, function(elt) {\n                if (elt instanceof Tool) {\n                    var tool_view = new ToolLinkView({\n                        model: elt,\n                        className: \"toolTitle\"\n                    });\n                    tool_view.render();\n                    section_body.append(tool_view.$el);\n                } else if (elt instanceof ToolSectionLabel) {\n                    var label_view = new ToolSectionLabelView({\n                        model: elt\n                    });\n                    label_view.render();\n                    section_body.append(label_view.$el);\n                } else {\n                    // TODO: handle nested section bodies?\n                }\n            });\n            return this;\n        },\n\n        events: {\n            \"click .toolSectionTitle > a\": \"toggle\"\n        },\n\n        /**\n     * Toggle visibility of tool section.\n     */\n        toggle: function() {\n            this.model.set(\"open\", !this.model.attributes.open);\n        },\n\n        /**\n     * Update whether section is open or close.\n     */\n        update_open: function() {\n            this.model.attributes.open\n                ? this.$el.children(\".toolSectionBody\").slideDown(\"fast\")\n                : this.$el.children(\".toolSectionBody\").slideUp(\"fast\");\n        }\n    });\n\n    var ToolSearchView = Backbone.View.extend({\n        tagName: \"div\",\n        id: \"tool-search\",\n        className: \"bar\",\n\n        events: {\n            click: \"focus_and_select\",\n            \"keyup :input\": \"query_changed\",\n            \"change :input\": \"query_changed\",\n            \"click #search-clear-btn\": \"clear\"\n        },\n\n        render: function() {\n            this.$el.append(templates.tool_search(this.model.toJSON()));\n            if (!this.model.is_visible()) {\n                this.$el.hide();\n            }\n\n            // Adjust top for issue 2907 depending on whether the messagebox is visible.\n            if ($(\"#messagebox\").is(\":visible\")) {\n                this.$el.css(\"top\", \"95px\");\n            }\n\n            this.$el.find(\"[title]\").tooltip();\n            return this;\n        },\n\n        focus_and_select: function() {\n            this.$el\n                .find(\":input\")\n                .focus()\n                .select();\n        },\n\n        clear: function() {\n            this.model.clear_search();\n            this.$el.find(\":input\").val(\"\");\n            this.focus_and_select();\n            return false;\n        },\n\n        query_changed: function(evData) {\n            // check for the 'clear key' (ESC) first\n            if (this.model.attributes.clear_key && this.model.attributes.clear_key === evData.which) {\n                this.clear();\n                return false;\n            }\n            this.model.set(\"query\", this.$el.find(\":input\").val());\n        }\n    });\n\n    /**\n * Tool panel view. Events triggered include:\n * tool_link_click(click event, tool_model)\n */\n    var ToolPanelView = Backbone.View.extend({\n        tagName: \"div\",\n        className: \"toolMenu\",\n\n        /**\n     * Set up view.\n     */\n        initialize: function() {\n            this.model.get(\"tool_search\").on(\"change:results\", this.handle_search_results, this);\n        },\n\n        render: function() {\n            var self = this;\n\n            // Render search.\n            var search_view = new ToolSearchView({\n                model: this.model.get(\"tool_search\")\n            });\n            search_view.render();\n            self.$el.append(search_view.$el);\n\n            // Render panel.\n            this.model.get(\"layout\").each(function(panel_elt) {\n                if (panel_elt instanceof ToolSection) {\n                    var section_title_view = new ToolSectionView({\n                        model: panel_elt\n                    });\n                    section_title_view.render();\n                    self.$el.append(section_title_view.$el);\n                } else if (panel_elt instanceof Tool) {\n                    var tool_view = new ToolLinkView({\n                        model: panel_elt,\n                        className: \"toolTitleNoSection\"\n                    });\n                    tool_view.render();\n                    self.$el.append(tool_view.$el);\n                } else if (panel_elt instanceof ToolSectionLabel) {\n                    var label_view = new ToolSectionLabelView({\n                        model: panel_elt\n                    });\n                    label_view.render();\n                    self.$el.append(label_view.$el);\n                }\n            });\n\n            // Setup tool link click eventing.\n            self.$el.find(\"a.tool-link\").click(function(e) {\n                // Tool id is always the first class.\n                var tool_id = $(this)\n                        .attr(\"class\")\n                        .split(/\\s+/)[0],\n                    tool = self.model.get(\"tools\").get(tool_id);\n\n                self.trigger(\"tool_link_click\", e, tool);\n            });\n\n            return this;\n        },\n\n        handle_search_results: function() {\n            var results = this.model.get(\"tool_search\").get(\"results\");\n            if (results && results.length === 0) {\n                $(\"#search-no-results\").show();\n            } else {\n                $(\"#search-no-results\").hide();\n            }\n        }\n    });\n\n    /**\n * View for working with a tool: setting parameters and inputs and executing the tool.\n */\n    var ToolFormView = Backbone.View.extend({\n        className: \"toolForm\",\n\n        render: function() {\n            this.$el.children().remove();\n            this.$el.append(templates.tool_form(this.model.toJSON()));\n        }\n    });\n\n    /**\n * Integrated tool menu + tool execution.\n */\n    var IntegratedToolMenuAndView = Backbone.View.extend({\n        className: \"toolMenuAndView\",\n\n        initialize: function() {\n            this.tool_panel_view = new ToolPanelView({\n                collection: this.collection\n            });\n            this.tool_form_view = new ToolFormView();\n        },\n\n        render: function() {\n            // Render and append tool panel.\n            this.tool_panel_view.render();\n            this.tool_panel_view.$el.css(\"float\", \"left\");\n            this.$el.append(this.tool_panel_view.$el);\n\n            // Append tool form view.\n            this.tool_form_view.$el.hide();\n            this.$el.append(this.tool_form_view.$el);\n\n            // On tool link click, show tool.\n            var self = this;\n            this.tool_panel_view.on(\"tool_link_click\", function(e, tool) {\n                // Prevents click from activating link:\n                e.preventDefault();\n                // Show tool that was clicked on:\n                self.show_tool(tool);\n            });\n        },\n\n        /**\n     * Fetch and display tool.\n     */\n        show_tool: function(tool) {\n            var self = this;\n            tool.fetch().done(function() {\n                self.tool_form_view.model = tool;\n                self.tool_form_view.render();\n                self.tool_form_view.$el.show();\n                $(\"#left\").width(\"650px\");\n            });\n        }\n    });\n\n    // TODO: move into relevant views\n    var templates = {\n        // the search bar at the top of the tool panel\n        tool_search: _.template(\n            [\n                '<input id=\"tool-search-query\" class=\"search-query parent-width\" name=\"query\" ',\n                'placeholder=\"<%- search_hint_string %>\" autocomplete=\"off\" type=\"text\" />',\n                '<a id=\"search-clear-btn\" title=\"clear search (esc)\"> </a>',\n                //TODO: replace with icon\n                '<span id=\"search-spinner\" class=\"search-spinner fa fa-spinner fa-spin\"></span>'\n            ].join(\"\")\n        ),\n\n        // the category level container in the tool panel (e.g. 'Get Data', 'Text Manipulation')\n        panel_section: _.template(\n            [\n                '<div class=\"toolSectionTitle\" id=\"title_<%- id %>\">',\n                '<a href=\"javascript:void(0)\"><span><%- name %></span></a>',\n                \"</div>\",\n                '<div id=\"<%- id %>\" class=\"toolSectionBody\" style=\"display: none;\">',\n                '<div class=\"toolSectionBg\"></div>',\n                \"<div>\"\n            ].join(\"\")\n        ),\n\n        // a single tool's link in the tool panel; will load the tool form in the center panel\n        tool_link: _.template(\n            [\n                '<a class=\"<%- id %> tool-link\" href=\"<%= link %>\" target=\"<%- target %>\" minsizehint=\"<%- min_width %>\">',\n                '<span class=\"labels\">',\n                \"<% _.each( labels, function( label ){ %>\",\n                '<span class=\"label label-default label-<%- label %>\">',\n                \"<%- label %>\",\n                \"</span>\",\n                \"<% }); %>\",\n                \"</span>\",\n                '<span class=\"tool-old-link\">',\n                \"<%- name %>\",\n                \"</span>\",\n                \" <%- description %>\",\n                \"</a>\"\n            ].join(\"\")\n        ),\n\n        // the tool form for entering tool parameters, viewing help and executing the tool\n        // loaded when a tool link is clicked in the tool panel\n        tool_form: _.template(\n            [\n                '<div class=\"toolFormTitle\"><%- tool.name %> (version <%- tool.version %>)</div>',\n                '<div class=\"toolFormBody\">',\n                \"<% _.each( tool.inputs, function( input ){ %>\",\n                '<div class=\"form-row\">',\n                '<label for=\"<%- input.name %>\"><%- input.label %>:</label>',\n                '<div class=\"form-row-input\">',\n                \"<%= input.html %>\",\n                \"</div>\",\n                '<div class=\"toolParamHelp\" style=\"clear: both;\">',\n                \"<%- input.help %>\",\n                \"</div>\",\n                '<div style=\"clear: both;\"></div>',\n                \"</div>\",\n                \"<% }); %>\",\n                \"</div>\",\n                '<div class=\"form-row form-actions\">',\n                '<input type=\"submit\" class=\"btn btn-primary\" name=\"runtool_btn\" value=\"Execute\" />',\n                \"</div>\",\n                '<div class=\"toolHelp\">',\n                '<div class=\"toolHelpBody\"><% tool.help %></div>',\n                \"</div>\"\n                // TODO: we need scoping here because 'help' is the dom for the help menu in the masthead\n                // which implies a leaky variable that I can't find\n            ].join(\"\"),\n            { variable: \"tool\" }\n        )\n    };\n\n    // Exports\n    return {\n        ToolParameter: ToolParameter,\n        IntegerToolParameter: IntegerToolParameter,\n        SelectToolParameter: SelectToolParameter,\n        Tool: Tool,\n        ToolCollection: ToolCollection,\n        ToolSearch: ToolSearch,\n        ToolPanel: ToolPanel,\n        ToolPanelView: ToolPanelView,\n        ToolFormView: ToolFormView\n    };\n});\n"]}