{"version":3,"sources":["mvc/tool/tool-form.js"],"names":["define","Utils","Modal","initialize","Webhooks","View","Backbone","ToolFormBase","listen_to_history","always_refresh","buildmodel","Galaxy","modal","process","form","this","options","merge","build_url","build_data","job_id","model","attributes","root","version","id","$","extend","params","success","get","url","self","_customize","data","debug","display","error_message","response","status","window","location","redirect","message","resolve","persistent","large","err_msg","is","hide","$el","prepend","Ui","Message","show","title","body","buttons","Close","current_state","emit","reject","tool_id","tool_version","inputs","create","wait","request","type","update","Button","error","deferred","append","label","name","ignore","value","help","wait_cls","onclick","execute_button","portlet","disable","submit","unwait","enable","job_def","execute","push","trigger","validate","callback","$f","action","children","WebhookApp","urlRoot","toolId","enctype","parent","currHistoryPanel","attr","key","appendTo","input_found","remove","_templateSuccess","jobs","length","WebhookView","refreshContents","job_inputs","batch_n","err_data","batch_src","error_messages","matchResponse","job_input_id","input_id","input_value","input_field","input_def","optional","_templateError","match","field_list","input_list","njobs","$message","njobs_text","addClass","n","values","text","src","highlight","_","each","outputs","output","hid","JSON","stringify"],"mappings":"aACAA,QAAQ,cAAe,iBAAkB,kBAAmB,0BAA2B,gBAAiB,SADxGC,EACAD,EAOIE,EACIC,EACIC,GAsUR,OACIC,KArUIC,SAAYD,KAAIE,QAGJC,WAAAA,SAAAA,GACAC,IAAAA,EAAAA,KACAC,KAAAA,MAAAA,OAAYC,OAAAC,OAASC,IAAAA,EAASC,KAC1BC,KAAAD,KAAIE,IAAAA,EALhBf,EAAMgB,OAQUC,mBAAJ,EACIC,gBAAJ,EACIC,WAASJ,SAAQI,EAArBN,GACIM,IAAQJ,EAAAF,EAAAO,MAAAC,WAGRJ,EAAmBK,GACnBJ,KACAA,EAAWH,EAAcI,OAC5BA,EACOI,EAAYL,OAAWI,KAAA,YAAkBP,EAAQQ,oBAEzDN,EAAAP,OAAAY,KAAA,aAAAP,EAAAS,GAAA,UACUN,EAAAO,EAAAC,UAAAhB,OAAAiB,SACDV,gBADCC,EAAA,SAGNU,EAASL,UAAAL,EAAA,aAAeH,EAAAQ,SAGhBvB,EAAA6B,KACHC,IAAAb,EACDJ,KAAAK,EACAa,QAAKC,SAALC,GACYC,EACRC,SAOAC,EAAAA,MAAAA,IAAiBC,GACjBC,EAAAA,WAAezB,GACf0B,OAAOC,KAAPN,MAIQO,gCAJR,4BAMO5B,GAGC6B,EAAAA,WAdJC,OAARH,SAAA9B,OAAAY,MAgBYsB,MAAAA,SAAYP,EAHDC,GAIXO,IAAAA,EAAOR,GAAAA,EAAAS,SAAA,kBALf,KAAAR,EAQGC,OAAAC,SACH9B,OACIA,KACW,cACD0B,EAAAA,OACGK,SAAA/B,OAAAY,KAAA,YAAAP,EAAAS,KAEDd,EAAOC,IAAPoC,GAAaC,UAChBnC,EAAAoC,IAAAC,QAHI,IAAAC,EAAAC,SAJjBV,QAAAN,EAUHE,OAAA,SAEGM,YAAA,EAIJC,OAAA,IACHI,KAGGvC,OAAAC,OACYD,OAAAC,MAAA0C,MACQC,MADR,sBAEFC,KAAenB,EACNoB,SAH3BC,MAAA,WAKA/C,OAAAC,MAAAqC,WAKUU,OAHIC,KAAAzB,MAID,gCACOD,qCACFI,GAEFM,EAARiB,aAIAhD,WAAQgD,SAARhD,EAAAC,GACH,IAAA6C,GAbLG,QAAAhD,EAAAO,MAAAS,IAAA,MAeHiC,aAAAjD,EAAAO,MAAAS,IAAA,WArGbkC,OAAAtC,EAAAC,QAAA,KAAAb,EAAAoB,KAAA+B,WA2GgBnD,EAAAoD,MAAhB,GACgBvD,OAAKG,KAAKoC,MAA1B,0BAAA,yBAAAS,GAhHwB1D,EAAAkE,SA2FJC,KAAM,OAwBlBrC,IAAApB,OAAAY,KAAe,aAAAT,EAAAO,MAAAS,IAAA,MAAA,SACvBI,KAAAyB,EACmBtC,QAAMC,SAAzBY,GACApB,EAAAuD,OAAAnC,GACqBpB,EAAOwD,MAAP,GAAc3D,OAAAiD,KAAAzB,MAAA,0BAAA,sBAAAD,GAEtBrB,EAAcG,WAElBuD,MAAA,SAAAjC,GACK3B,OAAAiD,KAAAzB,MAAA,0BALqB,0BAAAG,GAMtBzB,EAAWgD,cAKZ/C,IAXuBC,KAAnCyD,SAAAzD,KAAAD,KAAA0D,SAeAxD,KAAAA,WAAA,UAtBAD,KAAKmC,IAAIuB,OAAO1D,KAAKD,KAAKoC,MA0BtBlC,WAAAA,SAAQgD,GACJU,IAAAA,EAAAA,KACAC,EAAM7D,EAAAO,MAAAC,WAENc,EAAS,IAJOgB,EAAAkB,QAKhBM,KAAAA,WACAC,QAAAA,YANgB7D,EAAA2D,KAAA,KAAA3D,EAAAQ,QAAA,IAOhBR,MAAAA,UACA8D,IAAAA,iCARgBC,SAApB,8BAWHC,QAAA,WArJuBC,EAAAf,OA+HhBpD,EAAKoE,QAAQC,UAyBzBnD,EAAAoD,OAAApE,EAAA,WAvBgBiE,EAAeI,SACfvE,EAAKoE,QAAQI,cA4BzBtE,EAAIuE,SAAUC,QAAAP,GAGVjB,EAAQ5C,QAAUc,EAAK+B,WAH3BjD,EAAAgD,OAAAyB,MAKK3E,MAAK4E,oCACL1D,KAAK2D,qBACNhF,KAAOiD,SACPgC,QAAYA,QACZhB,OAAA,aACHC,MAAA,aACG7D,UAAA,MAAmBL,EAAAS,SAAc,KAAA,eAC7ByE,KACAC,sLAaJV,OAAA,SAAApE,EAAA4E,GACH,IAAA5D,EAAAjB,KACDJ,GACAV,QAAAe,EAAcS,GACV2C,aADUpD,EAAAQ,QAEVO,OAAKpB,KAAOY,KAAPW,KAAc+B,UAGf2B,GADJ/D,KAAAA,KAAAA,QAAS,UACL+D,EAAAA,SAAAA,GAGA,OAFA5D,OAAAA,KAAAG,MAAS4D,sBAAT,gDACA/D,GAAA4D,KAGI5D,GAAAA,EAAAA,SAASyC,OAASlD,KAAA,oBAAgB,CAClC,IAAAsE,EAAAnE,EAAA,WAAIsE,MACAC,OAAAA,EAAAA,OACAC,OAAAA,EAAQX,OAF8BY,QAA1CnF,EAAAmF,UAcInE,OATRoE,EAAAA,KAAAA,EAAOzF,OAAUyF,SAAOzF,EAAO0F,GAhBzBR,EAAApB,OAAA/C,EAAA,YAAA4E,MAAA3B,KAAA4B,EAAA1B,MAAAA,OAmBNe,EACAjF,OACA6F,SAAIC,QACJrB,SACIsB,cACAd,GAAAA,KAGIjF,OAAAiD,KAAAzB,MAAA,sBAAA,uBAAAoD,GACHtF,EAAAkE,SACJC,KAAA,OACDrC,IAAApB,OAAK8F,KAAAA,YACDzE,KAAAA,EACIuB,QAAAA,SAAAA,GAKK,GAJLC,GAAAA,IACAC,EAAAA,IAAAA,WAASR,OACLS,EAAAA,IAAAA,OAAAA,EAAOiD,iBAAWrE,IAEjBA,EAAAsE,MAAAtE,EAAAsE,KAAAC,OAAA,EAAA,CAHI7E,EAAAkB,IAAAuB,OAAA/C,EAAA,UAAAD,GAAA,kBAHb,IAAArB,EAAA0G,aASHb,QAAAtF,OAAAY,KAAA,oBACJ2E,OAAAX,EAAAzB,UAzBGsC,OAAOzF,QAAUyF,OAAOzF,OAAO0F,kBAAoBD,OAAOzF,OAAO0F,iBAAiBU,mBAEtFxC,MAAO,SAASjC,GACZsD,GAAYA,IA6BdjF,OAAAiD,KAAAzB,MAASoD,oBAAS,qBAAAjD,GACpB0E,IAAAA,GAAqBhD,EACrBiD,GAAAA,GAAJ3E,EAAA4E,SAAA,CACIC,IAAYC,EAAhBpF,EAAAlB,KAAAoB,KAAAmF,cAAA/E,EAAA4E,UACSI,IAAAA,IAATC,KAAyBP,EAAY,CAC7BQ,EAAAA,KAAcR,UAAWM,EAA7BF,EAAAG,IACIA,GAAqBrF,EACrBuF,OAGA9G,GACAqB,EAAApB,MAAA0C,MACHC,MAAA,wBACImE,KAAUC,EAAXC,eAAuBJ,EAA3BlF,GAAgDA,EAAAS,SACvCjC,SACL4C,MAAA,WACH1B,EAAApB,MAAAqC,eAeG0C,SAAA,SAAIsB,GACAA,IAAAA,EAAAA,EAAAjD,OACHiD,GAAM,EACHE,EAAA,KAQA,IAAA,IAAAG,KAAAN,EAAA,CACH,IAAAQ,EAAAR,EAAAM,GACJC,EAAAxG,KAAAD,KAAAoB,KAAA2F,MAAAP,GACJG,EAAA1G,KAAAD,KAAAgH,WAAAP,GACMG,EAAP3G,KAAAD,KAAAiH,WAAAR,GAzRwB,GAAAA,GAAAG,GAAAD,EAAA,CA8RpB,IAAIO,EAAQ1F,UAAZ,MAA0BuE,EAEtBoB,OADAC,KAAAA,KAAAA,UAAaF,IACbC,EAQAA,GAAAA,GAAAT,EAESW,MADL,CAFR,IAAAC,EAAAZ,EAAAa,OAAAxB,OAOAoB,EAASxD,EACH,GAAA+C,EACUa,OACPC,IACGd,EAAAa,OAAA,GAAAE,IAGZ,GAAON,EACJ,GAAA,OAAAd,EACSS,EAAAA,OACf,GAAAT,IAAAoB,EAaJ,OArU2BxH,KAAAD,KAAA0H,UAoQJjB,EAuDR,mFAUf,EAGE,IAAA,IAAAN,EACG5G,EAAAA,OADV,GAAA4G,IAAAmB,EAnDoB,OA5RxBrH,KAAAD,KAAA0H,UAqR4BjB,EACA,gHACIa,EACA,wDACAnB,EACA,UAED,QAhCXtG,OAAOiD,KAAKzB,MAAM,wBAAyB,oCAoCnD,OAAO,GAGXwE,iBAAkB,SAASrE,GACvB,GAAIA,EAASsE,MAAQtE,EAASsE,KAAKC,OAAS,EAAG,CAC3C,IAAImB,EAAQ1F,EAASsE,KAAKC,OACtBqB,EAAsB,GAATF,EAAa,YAAcA,EAAQ,aAChDC,EAAWvG,EAAE,UACZyG,SAAS,oBACT1D,OACG/C,EAAE,QAAQ4G,KACNJ,EAAa,iFAiBzB,OAdAO,EAAEC,KAAKpG,EAASqG,QAAS,SAASC,GAC9BX,EAASxD,OACL/C,EAAE,QACGyG,SAAS,cACT1D,OAAO/C,EAAE,QAAQ4G,KAAKM,EAAOC,IAAM,KAAOD,EAAOjE,UAG9DsD,EAASxD,OACL/C,EAAE,QACG+C,OAAO,QACP6D,KACG,yPAGLL,EAEP,OAAOlH,KAAK6G,eAAetF,EAAU,6CAI7CsF,eAAgB,SAAStF,EAAUS,GAC/B,OAAOrB,EAAE,UACJyG,SAAS,qBACT1D,OACG/C,EAAE,QAAQ4G,KACN,sGACKvF,GAAW,MAGvB0B,OAAO/C,EAAE,UAAU4G,KAAKQ,KAAKC,UAAUzG,EAAU,KAAM","file":"../../../scripts/mvc/tool/tool-form.js","sourcesContent":["/* This is the regular tool form */\ndefine([\"utils/utils\", \"mvc/ui/ui-misc\", \"mvc/ui/ui-modal\", \"mvc/tool/tool-form-base\", \"mvc/webhooks\"], function(\n    Utils,\n    Ui,\n    Modal,\n    ToolFormBase,\n    Webhooks\n) {\n    var View = Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            this.modal = parent.Galaxy.modal || new Modal.View();\n            this.form = new ToolFormBase(\n                Utils.merge(\n                    {\n                        listen_to_history: true,\n                        always_refresh: false,\n                        buildmodel: function(process, form) {\n                            var options = form.model.attributes;\n\n                            // build request url\n                            var build_url = \"\";\n                            var build_data = {};\n                            var job_id = options.job_id;\n                            if (job_id) {\n                                build_url = Galaxy.root + \"api/jobs/\" + job_id + \"/build_for_rerun\";\n                            } else {\n                                build_url = Galaxy.root + \"api/tools/\" + options.id + \"/build\";\n                                build_data = $.extend({}, Galaxy.params);\n                                build_data[\"tool_id\"] && delete build_data[\"tool_id\"];\n                            }\n                            options.version && (build_data[\"tool_version\"] = options.version);\n\n                            // get initial model\n                            Utils.get({\n                                url: build_url,\n                                data: build_data,\n                                success: function(data) {\n                                    if (!data.display) {\n                                        window.location = Galaxy.root;\n                                        return;\n                                    }\n                                    form.model.set(data);\n                                    self._customize(form);\n                                    Galaxy.emit.debug(\n                                        \"tool-form-base::_buildModel()\",\n                                        \"Initial tool model ready.\",\n                                        data\n                                    );\n                                    process.resolve();\n                                },\n                                error: function(response, status) {\n                                    var error_message = (response && response.err_msg) || \"Uncaught error.\";\n                                    if (status == 401) {\n                                        window.location =\n                                            Galaxy.root +\n                                            \"user/login?\" +\n                                            $.param({\n                                                redirect: Galaxy.root + \"?tool_id=\" + options.id\n                                            });\n                                    } else if (form.$el.is(\":empty\")) {\n                                        form.$el.prepend(\n                                            new Ui.Message({\n                                                message: error_message,\n                                                status: \"danger\",\n                                                persistent: true,\n                                                large: true\n                                            }).$el\n                                        );\n                                    } else {\n                                        Galaxy.modal &&\n                                            Galaxy.modal.show({\n                                                title: \"Tool request failed\",\n                                                body: error_message,\n                                                buttons: {\n                                                    Close: function() {\n                                                        Galaxy.modal.hide();\n                                                    }\n                                                }\n                                            });\n                                    }\n                                    Galaxy.emit.debug(\n                                        \"tool-form-base::_buildModel()\",\n                                        \"Initial tool model request failed.\",\n                                        response\n                                    );\n                                    process.reject();\n                                }\n                            });\n                        },\n                        postchange: function(process, form) {\n                            var current_state = {\n                                tool_id: form.model.get(\"id\"),\n                                tool_version: form.model.get(\"version\"),\n                                inputs: $.extend(true, {}, form.data.create())\n                            };\n                            form.wait(true);\n                            Galaxy.emit.debug(\"tool-form::postchange()\", \"Sending current state.\", current_state);\n                            Utils.request({\n                                type: \"POST\",\n                                url: Galaxy.root + \"api/tools/\" + form.model.get(\"id\") + \"/build\",\n                                data: current_state,\n                                success: function(data) {\n                                    form.update(data);\n                                    form.wait(false);\n                                    Galaxy.emit.debug(\"tool-form::postchange()\", \"Received new model.\", data);\n                                    process.resolve();\n                                },\n                                error: function(response) {\n                                    Galaxy.emit.debug(\"tool-form::postchange()\", \"Refresh request failed.\", response);\n                                    process.reject();\n                                }\n                            });\n                        }\n                    },\n                    options\n                )\n            );\n            this.deferred = this.form.deferred;\n            this.setElement(\"<div/>\");\n            this.$el.append(this.form.$el);\n        },\n\n        _customize: function(form) {\n            var self = this;\n            var options = form.model.attributes;\n            // build execute button\n            var execute_button = new Ui.Button({\n                icon: \"fa-check\",\n                tooltip: \"Execute: \" + options.name + \" (\" + options.version + \")\",\n                title: \"Execute\",\n                cls: \"btn btn-primary ui-clear-float\",\n                wait_cls: \"btn btn-info ui-clear-float\",\n                onclick: function() {\n                    execute_button.wait();\n                    form.portlet.disable();\n                    self.submit(options, function() {\n                        execute_button.unwait();\n                        form.portlet.enable();\n                    });\n                }\n            });\n            options.buttons = { execute: execute_button };\n\n            // remap feature\n            if (options.job_id && options.job_remap) {\n                options.inputs.push({\n                    label: \"Resume dependencies from this job\",\n                    name: \"rerun_remap_job_id\",\n                    type: \"select\",\n                    display: \"radio\",\n                    ignore: \"__ignore__\",\n                    value: \"__ignore__\",\n                    options: [[\"Yes\", options.job_id], [\"No\", \"__ignore__\"]],\n                    help:\n                        \"The previous run of this tool failed and other tools were waiting for it to finish successfully. Use this option to resume those tools using the new output(s) of this tool run.\"\n                });\n            }\n        },\n\n        /** Submit a regular job.\n         * @param{dict}     options   - Specifies tool id and version\n         * @param{function} callback  - Called when request has completed\n         */\n        submit: function(options, callback) {\n            var self = this;\n            var job_def = {\n                tool_id: options.id,\n                tool_version: options.version,\n                inputs: this.form.data.create()\n            };\n            this.form.trigger(\"reset\");\n            if (!self.validate(job_def)) {\n                Galaxy.emit.debug(\"tool-form::submit()\", \"Submission canceled. Validation failed.\");\n                callback && callback();\n                return;\n            }\n            if (options.action !== Galaxy.root + \"tool_runner/index\") {\n                var $f = $(\"<form/>\").attr({\n                    action: options.action,\n                    method: options.method,\n                    enctype: options.enctype\n                });\n                _.each(job_def.inputs, function(value, key) {\n                    $f.append($(\"<input/>\").attr({ name: key, value: value }));\n                });\n                $f\n                    .hide()\n                    .appendTo(\"body\")\n                    .submit()\n                    .remove();\n                callback && callback();\n                return;\n            }\n            Galaxy.emit.debug(\"tool-form::submit()\", \"Validation complete.\", job_def);\n            Utils.request({\n                type: \"POST\",\n                url: Galaxy.root + \"api/tools\",\n                data: job_def,\n                success: function(response) {\n                    callback && callback();\n                    self.$el.children().hide();\n                    self.$el.append(self._templateSuccess(response));\n                    // Show Webhook if job is running\n                    if (response.jobs && response.jobs.length > 0) {\n                        self.$el.append($(\"<div/>\", { id: \"webhook-view\" }));\n                        var WebhookApp = new Webhooks.WebhookView({\n                            urlRoot: Galaxy.root + \"api/webhooks/tool\",\n                            toolId: job_def.tool_id\n                        });\n                    }\n                    parent.Galaxy && parent.Galaxy.currHistoryPanel && parent.Galaxy.currHistoryPanel.refreshContents();\n                },\n                error: function(response) {\n                    callback && callback();\n                    Galaxy.emit.debug(\"tool-form::submit\", \"Submission failed.\", response);\n                    var input_found = false;\n                    if (response && response.err_data) {\n                        var error_messages = self.form.data.matchResponse(response.err_data);\n                        for (var input_id in error_messages) {\n                            self.form.highlight(input_id, error_messages[input_id]);\n                            input_found = true;\n                            break;\n                        }\n                    }\n                    if (!input_found) {\n                        self.modal.show({\n                            title: \"Job submission failed\",\n                            body: self._templateError(job_def, response && response.err_msg),\n                            buttons: {\n                                Close: function() {\n                                    self.modal.hide();\n                                }\n                            }\n                        });\n                    }\n                }\n            });\n        },\n\n        /** Validate job dictionary.\n         * @param{dict}     job_def   - Job execution dictionary\n        */\n        validate: function(job_def) {\n            var job_inputs = job_def.inputs;\n            var batch_n = -1;\n            var batch_src = null;\n            for (var job_input_id in job_inputs) {\n                var input_value = job_inputs[job_input_id];\n                var input_id = this.form.data.match(job_input_id);\n                var input_field = this.form.field_list[input_id];\n                var input_def = this.form.input_list[input_id];\n                if (!input_id || !input_def || !input_field) {\n                    Galaxy.emit.debug(\"tool-form::validate()\", \"Retrieving input objects failed.\");\n                    continue;\n                }\n                if (!input_def.optional && input_value == null) {\n                    this.form.highlight(input_id);\n                    return false;\n                }\n                if (input_value && input_value.batch) {\n                    var n = input_value.values.length;\n                    var src = n > 0 && input_value.values[0] && input_value.values[0].src;\n                    if (src) {\n                        if (batch_src === null) {\n                            batch_src = src;\n                        } else if (batch_src !== src) {\n                            this.form.highlight(\n                                input_id,\n                                \"Please select either dataset or dataset list fields for all batch mode fields.\"\n                            );\n                            return false;\n                        }\n                    }\n                    if (batch_n === -1) {\n                        batch_n = n;\n                    } else if (batch_n !== n) {\n                        this.form.highlight(\n                            input_id,\n                            \"Please make sure that you select the same number of inputs for all batch mode fields. This field contains <b>\" +\n                                n +\n                                \"</b> selection(s) while a previous field contains <b>\" +\n                                batch_n +\n                                \"</b>.\"\n                        );\n                        return false;\n                    }\n                }\n            }\n            return true;\n        },\n\n        _templateSuccess: function(response) {\n            if (response.jobs && response.jobs.length > 0) {\n                var njobs = response.jobs.length;\n                var njobs_text = njobs == 1 ? \"1 job has\" : njobs + \" jobs have\";\n                var $message = $(\"<div/>\")\n                    .addClass(\"donemessagelarge\")\n                    .append(\n                        $(\"<p/>\").text(\n                            njobs_text + \" been successfully added to the queue - resulting in the following datasets:\"\n                        )\n                    );\n                _.each(response.outputs, function(output) {\n                    $message.append(\n                        $(\"<p/>\")\n                            .addClass(\"messagerow\")\n                            .append($(\"<b/>\").text(output.hid + \": \" + output.name))\n                    );\n                });\n                $message.append(\n                    $(\"<p/>\")\n                        .append(\"<b/>\")\n                        .text(\n                            \"You can check the status of queued jobs and view the resulting data by refreshing the History pane. When the job has been run the status will change from 'running' to 'finished' if completed successfully or 'error' if problems were encountered.\"\n                        )\n                );\n                return $message;\n            } else {\n                return this._templateError(response, \"Invalid success response. No jobs found.\");\n            }\n        },\n\n        _templateError: function(response, err_msg) {\n            return $(\"<div/>\")\n                .addClass(\"errormessagelarge\")\n                .append(\n                    $(\"<p/>\").text(\n                        \"The server could not complete the request. Please contact the Galaxy Team if this error persists. \" +\n                            (err_msg || \"\")\n                    )\n                )\n                .append($(\"<pre/>\").text(JSON.stringify(response, null, 4)));\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n"]}