{"version":3,"sources":["mvc/grid/grid-view.js"],"names":["jQuery","ajaxSettings","traditional","define","Utils","Templates","PopupMenu","Backbone","View","extend","initialize","title","grid_config","this","self","GridModel","window","add_tag_to_grid_filter","dict_format","tag","tag_name","tag_value","$","slideToggle","is","add_filter_condition","url_data","_","v","items","ajax","filters","k","url","url_base","response","init_grid","embedded","setElement","overflow","css","padding","handle_refresh","top","Galaxy","inArray","refresh_frames","currHistoryPanel","loadCurrentHistory","options","setWindowTitle","attributes","allow_title_display","get","grid","replace","$el","html","find","header","body","message","footer","use_hide_message","setTimeout","init_grid_elements","init_grid_controls","init_refresh_on_change","submit_operation","each","off","click","select","keyup","set_sort_condition","attr","text_input","text_input_obj","val","column_key","remove_filter_condition","parent","remove","check_all_items","on","checkboxes","change","update_checked","check_count","text","filter","length","rating","set_page","e","execute","items_length","button","item","index","_add_operation","operation","settings","operation_config","confirmation_text","confirm","func","preventDefault","label","allowed","allow_popup","popup","addItem","href","url_args","target","onclick","encode_id","findItemByHtml","name","value","t","add_filter","filter_element","container","append","go_page_one","cur_sort","new_sort","col_key","indexOf","substring","sort_arrow","addClass","category_filter","cur_value","set_categorical_filter","filter_value","new_value","empty","removeClass","new_page","children","id","split","page_num","cur_page","set","parseInt","number_of_checked_ids","operation_button","findWhere","operations","item_ids","operation_name","check","state","prop","undefined","href_parts","href_parms_str","href_parms","update_grid","toLowerCase","location","param","get_url_data","can_async_op","go_to","async","advanced_search","method","type","data","insert","show","json","alert","response_text","parseJSON","hide","complete"],"mappings":"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","file":"../../../scripts/mvc/grid/grid-view.js","sourcesContent":["// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n// not appended to the identifier of a nested array.\njQuery.ajaxSettings.traditional = true;\n\n// dependencies\ndefine([\"utils/utils\", \"mvc/grid/grid-model\", \"mvc/grid/grid-template\", \"mvc/ui/popup-menu\"], function(\n    Utils,\n    GridModel,\n    Templates,\n    PopupMenu\n) {\n    // grid view\n    return Backbone.View.extend({\n        // model\n        grid: null,\n\n        // Initialize\n        initialize: function(grid_config) {\n            this.grid = new GridModel();\n            this.dict_format = grid_config.dict_format;\n            this.title = grid_config.title;\n            var self = this;\n            window.add_tag_to_grid_filter = function(tag_name, tag_value) {\n                // Put tag name and value together.\n                var tag = tag_name + (tag_value !== undefined && tag_value !== \"\" ? \":\" + tag_value : \"\");\n                var advanced_search = $(\"#advanced-search\").is(\":visible\");\n                if (!advanced_search) {\n                    $(\"#standard-search\").slideToggle(\"fast\");\n                    $(\"#advanced-search\").slideToggle(\"fast\");\n                }\n                self.add_filter_condition(\"tags\", tag);\n            };\n\n            // set element\n            if (this.dict_format) {\n                this.setElement(\"<div/>\");\n                if (grid_config.url_base && !grid_config.items) {\n                    var url_data = grid_config.url_data || {};\n                    _.each(grid_config.filters, function(v, k) {\n                        url_data[\"f-\" + k] = v;\n                    });\n                    $.ajax({\n                        url: grid_config.url_base + \"?\" + $.param(url_data),\n                        success: function(response) {\n                            response.embedded = grid_config.embedded;\n                            response.filters = grid_config.filters || {};\n                            self.init_grid(response);\n                        }\n                    });\n                } else {\n                    this.init_grid(grid_config);\n                }\n            } else {\n                this.setElement(\"#grid-container\");\n                this.init_grid(grid_config);\n            }\n\n            // fix padding\n            if (grid_config.use_panels) {\n                $(\"#center\").css({\n                    padding: \"10px\",\n                    overflow: \"auto\"\n                });\n            }\n        },\n\n        // refresh frames\n        handle_refresh: function(refresh_frames) {\n            if (refresh_frames) {\n                if ($.inArray(\"history\", refresh_frames) > -1) {\n                    if (top.Galaxy && top.Galaxy.currHistoryPanel) {\n                        top.Galaxy.currHistoryPanel.loadCurrentHistory();\n                    }\n                }\n            }\n        },\n\n        // Initialize\n        init_grid: function(grid_config) {\n            this.grid.set(grid_config);\n\n            // get options\n            var options = this.grid.attributes;\n\n            if (this.allow_title_display && options.title) {\n                Utils.setWindowTitle(options.title);\n            }\n            // handle refresh requests\n            this.handle_refresh(options.refresh_frames);\n\n            // strip protocol and domain\n            var url = this.grid.get(\"url_base\");\n            url = url.replace(/^.*\\/\\/[^\\/]+/, \"\");\n            this.grid.set(\"url_base\", url);\n\n            // append main template\n            this.$el.html(Templates.grid(options));\n\n            // update div contents\n            this.$el.find(\"#grid-table-header\").html(Templates.header(options));\n            this.$el.find(\"#grid-table-body\").html(Templates.body(options));\n            this.$el.find(\"#grid-table-footer\").html(Templates.footer(options));\n\n            // update message\n            if (options.message) {\n                this.$el.find(\"#grid-message\").html(Templates.message(options));\n                var self = this;\n                if (options.use_hide_message) {\n                    setTimeout(function() {\n                        self.$el.find(\"#grid-message\").html(\"\");\n                    }, 5000);\n                }\n            }\n\n            // configure elements\n            this.init_grid_elements();\n            this.init_grid_controls();\n\n            // attach global event handler\n            // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n            init_refresh_on_change();\n        },\n\n        // Initialize grid controls\n        init_grid_controls: function() {\n            // link\n            var self = this;\n\n            // Initialize grid operation button.\n            this.$el.find(\".operation-button\").each(function() {\n                $(this).off();\n                $(this).click(function() {\n                    self.submit_operation(this);\n                    return false;\n                });\n            });\n\n            // Initialize text filters to select text on click and use normal font when user is typing.\n            this.$el.find(\"input[type=text]\").each(function() {\n                $(this).off();\n                $(this)\n                    .click(function() {\n                        $(this).select();\n                    })\n                    .keyup(function() {\n                        $(this).css(\"font-style\", \"normal\");\n                    });\n            });\n\n            // Initialize sort links.\n            this.$el.find(\".sort-link\").each(function() {\n                $(this).off();\n                $(this).click(function() {\n                    self.set_sort_condition($(this).attr(\"sort_key\"));\n                    return false;\n                });\n            });\n\n            // Initialize text filters.\n            this.$el.find(\".text-filter-form\").each(function() {\n                $(this).off();\n                $(this).submit(function() {\n                    var column_key = $(this).attr(\"column_key\");\n                    var text_input_obj = $(\"#input-\" + column_key + \"-filter\");\n                    var text_input = text_input_obj.val();\n                    text_input_obj.val(\"\");\n                    self.add_filter_condition(column_key, text_input);\n                    return false;\n                });\n            });\n\n            // Initialize categorical filters.\n            this.$el.find(\".text-filter-val > a\").each(function() {\n                $(this).off();\n                $(this).click(function() {\n                    // Remove visible element.\n                    $(this)\n                        .parent()\n                        .remove();\n\n                    // Remove filter condition.\n                    self.remove_filter_condition($(this).attr(\"filter_key\"), $(this).attr(\"filter_val\"));\n\n                    // Return\n                    return false;\n                });\n            });\n\n            // Initialize categorical filters.\n            this.$el.find(\".categorical-filter > a\").each(function() {\n                $(this).off();\n                $(this).click(function() {\n                    self.set_categorical_filter($(this).attr(\"filter_key\"), $(this).attr(\"filter_val\"));\n                    return false;\n                });\n            });\n\n            // Initialize standard, advanced search toggles.\n            this.$el.find(\".advanced-search-toggle\").each(function() {\n                $(this).off();\n                $(this).click(function() {\n                    self.$el.find(\"#standard-search\").slideToggle(\"fast\");\n                    self.$el.find(\"#advanced-search\").slideToggle(\"fast\");\n                    return false;\n                });\n            });\n\n            // Add event to check all box\n            this.$el.find(\"#check_all\").off();\n            this.$el.find(\"#check_all\").on(\"click\", function() {\n                self.check_all_items();\n            });\n        },\n\n        // Initialize grid elements.\n        init_grid_elements: function() {\n            // Initialize grid selection checkboxes.\n            this.$el.find(\".grid\").each(function() {\n                var checkboxes = $(this).find(\"input.grid-row-select-checkbox\");\n                var check_count = $(this).find(\"span.grid-selected-count\");\n                var update_checked = function() {\n                    check_count.text($(checkboxes).filter(\":checked\").length);\n                };\n\n                $(checkboxes).each(function() {\n                    $(this).change(update_checked);\n                });\n                update_checked();\n            });\n\n            // Initialize ratings.\n            if (this.$el.find(\".community_rating_star\").length !== 0)\n                this.$el.find(\".community_rating_star\").rating({});\n\n            // get options\n            var options = this.grid.attributes;\n            var self = this;\n\n            //\n            // add page click events\n            //\n            this.$el.find(\".page-link > a\").each(function() {\n                $(this).click(function() {\n                    self.set_page($(this).attr(\"page_num\"));\n                    return false;\n                });\n            });\n\n            //\n            // add inbound/outbound events\n            //\n            this.$el.find(\".use-target\").each(function() {\n                $(this).click(function(e) {\n                    self.execute({\n                        href: $(this).attr(\"href\"),\n                        target: $(this).attr(\"target\")\n                    });\n                    return false;\n                });\n            });\n\n            // empty grid?\n            var items_length = options.items.length;\n            if (items_length == 0) {\n                return;\n            }\n\n            // add operation popup menus\n            _.each(options.items, function(item, index) {\n                var button = self.$(\"#grid-\" + index + \"-popup\").off();\n                var popup = new PopupMenu(button);\n                _.each(options[\"operations\"], function(operation) {\n                    self._add_operation(popup, operation, item);\n                });\n            });\n        },\n\n        /** Add an operation to the items menu */\n        _add_operation: function(popup, operation, item) {\n            var self = this;\n            var settings = item.operation_config[operation.label];\n            if (settings.allowed && operation.allow_popup) {\n                popup.addItem({\n                    html: operation.label,\n                    href: settings.url_args,\n                    target: settings.target,\n                    confirmation_text: operation.confirm,\n                    func: function(e) {\n                        e.preventDefault();\n                        var label = $(e.target).html();\n                        if (operation.onclick) {\n                            operation.onclick(item.encode_id);\n                        } else {\n                            self.execute(this.findItemByHtml(label));\n                        }\n                    }\n                });\n            }\n        },\n\n        // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n        add_filter_condition: function(name, value) {\n            // Do nothing is value is empty.\n            if (value === \"\") {\n                return false;\n            }\n\n            // Add condition to grid.\n            this.grid.add_filter(name, value, true);\n\n            // Add button that displays filter and provides a button to delete it.\n            var t = $(Templates.filter_element(name, value));\n            var self = this;\n            t.click(function() {\n                // Remove visible element.\n                $(this).remove();\n\n                // Remove filter condition.\n                self.remove_filter_condition(name, value);\n            });\n\n            // append to container\n            var container = this.$el.find(\"#\" + name + \"-filtering-criteria\");\n            container.append(t);\n\n            // execute\n            this.go_page_one();\n            this.execute();\n        },\n\n        // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n        remove_filter_condition: function(name, value) {\n            // Remove filter condition.\n            this.grid.remove_filter(name, value);\n\n            // Execute\n            this.go_page_one();\n            this.execute();\n        },\n\n        // Set sort condition for grid.\n        set_sort_condition: function(col_key) {\n            // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n            // currently sorted column, sort is reversed.\n            var cur_sort = this.grid.get(\"sort_key\");\n            var new_sort = col_key;\n            if (cur_sort.indexOf(col_key) !== -1) {\n                // Reverse sort.\n                if (cur_sort.substring(0, 1) !== \"-\") {\n                    new_sort = \"-\" + col_key;\n                }\n            }\n\n            // Remove sort arrows elements.\n            this.$el.find(\".sort-arrow\").remove();\n\n            // Add sort arrow element to new sort column.\n            var sort_arrow = new_sort.substring(0, 1) == \"-\" ? \"&uarr;\" : \"&darr;\";\n            var t = $(\"<span>\" + sort_arrow + \"</span>\").addClass(\"sort-arrow\");\n\n            // Add to header\n            this.$el.find(\"#\" + col_key + \"-header\").append(t);\n\n            // Update grid.\n            this.grid.set(\"sort_key\", new_sort);\n            this.go_page_one();\n            this.execute();\n        },\n\n        // Set new value for categorical filter.\n        set_categorical_filter: function(name, new_value) {\n            // Update filter hyperlinks to reflect new filter value.\n            var category_filter = this.grid.get(\"categorical_filters\")[name],\n                cur_value = this.grid.get(\"filters\")[name];\n            var self = this;\n            this.$el.find(\".\" + name + \"-filter\").each(function() {\n                var text = $.trim($(this).text());\n                var filter = category_filter[text];\n                var filter_value = filter[name];\n                if (filter_value == new_value) {\n                    // Remove filter link since grid will be using this filter. It is assumed that\n                    // this element has a single child, a hyperlink/anchor with text.\n                    $(this).empty();\n                    $(this).addClass(\"current-filter\");\n                    $(this).append(text);\n                } else if (filter_value == cur_value) {\n                    // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n                    // this element has a single child, a hyperlink/anchor.\n                    $(this).empty();\n                    var t = $('<a href=\"#\">' + text + \"</a>\");\n                    t.click(function() {\n                        self.set_categorical_filter(name, filter_value);\n                    });\n                    $(this).removeClass(\"current-filter\");\n                    $(this).append(t);\n                }\n            });\n\n            // Update grid.\n            this.grid.add_filter(name, new_value);\n            this.go_page_one();\n            this.execute();\n        },\n\n        // Set page to view.\n        set_page: function(new_page) {\n            // Update page hyperlink to reflect new page.\n            var self = this;\n            this.$el.find(\".page-link\").each(function() {\n                var id = $(this).attr(\"id\"),\n                    page_num = parseInt(id.split(\"-\")[2], 10), // Id has form 'page-link-<page_num>\n                    cur_page = self.grid.get(\"cur_page\"),\n                    text;\n                if (page_num === new_page) {\n                    // Remove link to page since grid will be on this page. It is assumed that\n                    // this element has a single child, a hyperlink/anchor with text.\n                    text = $(this)\n                        .children()\n                        .text();\n                    $(this).empty();\n                    $(this).addClass(\"inactive-link\");\n                    $(this).text(text);\n                } else if (page_num === cur_page) {\n                    // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n                    // this element has a single child, a hyperlink/anchor.\n                    text = $(this).text();\n                    $(this).empty();\n                    $(this).removeClass(\"inactive-link\");\n                    var t = $('<a href=\"#\">' + text + \"</a>\");\n                    t.click(function() {\n                        self.set_page(page_num);\n                    });\n                    $(this).append(t);\n                }\n            });\n\n            if (new_page === \"all\") {\n                this.grid.set(\"cur_page\", new_page);\n            } else {\n                this.grid.set(\"cur_page\", parseInt(new_page, 10));\n            }\n            this.execute();\n        },\n\n        // confirmation/submission of operation request\n        submit_operation: function(operation_button, confirmation_text) {\n            // identify operation\n            var operation_name = $(operation_button).val();\n\n            // verify in any item is selected\n            var number_of_checked_ids = this.$el.find('input[name=\"id\"]:checked').length;\n            if (!number_of_checked_ids > 0) {\n                return false;\n            }\n\n            // Check to see if there's grid confirmation text for this operation\n            var operation = _.findWhere(this.grid.attributes.operations, {\n                label: operation_name\n            });\n            if (operation && !confirmation_text) {\n                confirmation_text = operation.confirm || \"\";\n            }\n\n            // collect ids\n            var item_ids = [];\n            this.$el.find(\"input[name=id]:checked\").each(function() {\n                item_ids.push($(this).val());\n            });\n\n            // execute operation\n            var options = {\n                operation: operation_name,\n                id: item_ids,\n                confirmation_text: confirmation_text\n            };\n            if (operation.target == \"top\") {\n                options = _.extend(options, {\n                    href: operation.href,\n                    target: operation.target\n                });\n            }\n            this.execute(options);\n            return true;\n        },\n\n        check_all_items: function() {\n            var check = this.$(\".grid-row-select-checkbox\");\n            var state = this.$(\"#check_all\").prop(\"checked\");\n            _.each(check, function(c) {\n                $(c).prop(\"checked\", state);\n            });\n            this.init_grid_elements();\n        },\n\n        // Go back to page one; this is useful when a filter is applied.\n        go_page_one: function() {\n            // Need to go back to page 1 if not showing all.\n            var cur_page = this.grid.get(\"cur_page\");\n            if (cur_page !== null && cur_page !== undefined && cur_page !== \"all\") {\n                this.grid.set(\"cur_page\", 1);\n            }\n        },\n\n        //\n        // execute operations and hyperlink requests\n        //\n        execute: function(options) {\n            // get url\n            var id = null;\n            var href = null;\n            var operation = null;\n            var confirmation_text = null;\n            var target = null;\n\n            // check for options\n            if (options) {\n                // get options\n                href = options.href;\n                operation = options.operation;\n                id = options.id;\n                confirmation_text = options.confirmation_text;\n                target = options.target;\n\n                // check if input contains the operation tag\n                if (href !== undefined && href.indexOf(\"operation=\") != -1) {\n                    // Get operation, id in hyperlink's href.\n                    var href_parts = href.split(\"?\");\n                    if (href_parts.length > 1) {\n                        var href_parms_str = href_parts[1];\n                        var href_parms = href_parms_str.split(\"&\");\n                        for (var index = 0; index < href_parms.length; index++) {\n                            if (href_parms[index].indexOf(\"operation\") != -1) {\n                                // Found operation parm; get operation value.\n                                operation = href_parms[index].split(\"=\")[1];\n                                operation = operation.replace(/\\+/g, \" \");\n                            } else if (href_parms[index].indexOf(\"id\") != -1) {\n                                // Found id parm; get id value.\n                                id = href_parms[index].split(\"=\")[1];\n                            }\n                        }\n                    }\n                }\n            }\n\n            // check for operation details\n            if (operation && id) {\n                // show confirmation box\n                if (\n                    confirmation_text &&\n                    confirmation_text != \"\" &&\n                    confirmation_text != \"None\" &&\n                    confirmation_text != \"null\"\n                )\n                    if (!confirm(confirmation_text)) return false;\n\n                // use small characters for operation?!\n                operation = operation.toLowerCase();\n\n                // Update grid.\n                this.grid.set({\n                    operation: operation,\n                    item_ids: id\n                });\n\n                // Do operation. If operation cannot be performed asynchronously, redirect to location.\n                if (target == \"top\") {\n                    window.top.location = href + \"?\" + $.param(this.grid.get_url_data());\n                } else if (this.grid.can_async_op(operation) || this.dict_format) {\n                    this.update_grid();\n                } else {\n                    this.go_to(target, href);\n                }\n\n                // done\n                return false;\n            }\n\n            // refresh grid\n            if (href) {\n                this.go_to(target, href);\n                return false;\n            }\n\n            // refresh grid\n            if (this.grid.get(\"async\") || this.dict_format) {\n                this.update_grid();\n            } else {\n                this.go_to(target, href);\n            }\n\n            // done\n            return false;\n        },\n\n        // go to url\n        go_to: function(target, href) {\n            // get aysnc status\n            var async = this.grid.get(\"async\");\n            this.grid.set(\"async\", false);\n\n            // get slide status\n            var advanced_search = this.$el.find(\"#advanced-search\").is(\":visible\");\n            this.grid.set(\"advanced_search\", advanced_search);\n\n            // get default url\n            if (!href) {\n                href = this.grid.get(\"url_base\") + \"?\" + $.param(this.grid.get_url_data());\n            }\n\n            // clear grid of transient request attributes.\n            this.grid.set({\n                operation: undefined,\n                item_ids: undefined,\n                async: async\n            });\n            switch (target) {\n                case \"center\":\n                    $(\"#galaxy_main\").attr(\"src\", href);\n                    break;\n                case \"top\":\n                    window.top.location = href;\n                    break;\n                default:\n                    window.location = href;\n            }\n        },\n\n        // Update grid.\n        update_grid: function() {\n            // If there's an operation, do POST; otherwise, do GET.\n            var method = this.grid.get(\"operation\") ? \"POST\" : \"GET\";\n\n            // Show overlay to indicate loading and prevent user actions.\n            this.$el.find(\".loading-elt-overlay\").show();\n            var self = this;\n            $.ajax({\n                type: method,\n                url: self.grid.get(\"url_base\"),\n                data: self.grid.get_url_data(),\n                error: function(response) {\n                    alert(\"Grid refresh failed\");\n                },\n                success: function(response_text) {\n                    // backup\n                    var embedded = self.grid.get(\"embedded\");\n                    var insert = self.grid.get(\"insert\");\n                    var advanced_search = self.$el.find(\"#advanced-search\").is(\":visible\");\n\n                    // request new configuration\n                    var json = self.dict_format ? response_text : $.parseJSON(response_text);\n\n                    // update\n                    json.embedded = embedded;\n                    json.insert = insert;\n                    json.advanced_search = advanced_search;\n\n                    // Initialize new grid config\n                    self.init_grid(json);\n\n                    // Hide loading overlay.\n                    self.$el.find(\".loading-elt-overlay\").hide();\n                },\n                complete: function() {\n                    // Clear grid of transient request attributes.\n                    self.grid.set({\n                        operation: undefined,\n                        item_ids: undefined\n                    });\n                }\n            });\n        }\n    });\n});\n"]}