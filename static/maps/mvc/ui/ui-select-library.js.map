{"version":3,"sources":["mvc/ui/ui-select-library.js"],"names":["define","Utils","Ui","Table","List","Libraries","Backbone","Collection","extend","url","Galaxy","root","LibraryDatasets","initialize","Model","library_id","this","self","on","config","reset","get","View","libraries","datasets","options","library_select","Select","onchange","value","dataset_list","name","optional","multiple","data","each","model","id","update","text","library_current","push","setElement","_template","$","append","$el","fetch","success","trigger","undefined","val"],"mappings":"aACAA,QAAQ,cAAe,iBAAkB,kBAAmB,kBAAmB,SAASC,EAAOC,EAAIC,EAAOC,GAA1GJ,IAAQK,EAAAC,SAAeC,WAAhBC,QACHC,IAAAC,OAAAC,KAAA,gCAMIC,EAAkBN,SAASC,WAAWC,QAD1CK,WAAA,WACID,IAAAA,EAAAA,KACAC,KAAAA,OAAY,IAAAP,SAAAQ,OAAWC,WAAA,OACnBC,KAAIC,OAAOC,GAAX,SAAA,WACAD,EAAKE,OAASC,OAAId,OAGjBG,IAFD,WAJyC,OAAAC,OAAAC,KAAA,iBAAAK,KAAAG,OAAAE,IAAA,cAAA,eAkHjD,OACIC,KArGOhB,SAASgB,KAAKd,QAArBc,WAAOhB,SAAcE,GAErBK,IAAAA,EAAYG,KAKRA,KAAKO,UAAY,IAAIlB,EADrBW,KAAAQ,SAAA,IAAAZ,EAKAI,KAAKS,QAAUA,EAEfT,KAAAU,eAAA,IAAAxB,EAAAyB,OAAAL,MACAM,SAAA,SAAAC,GACKH,EAAAA,SAAiBP,OAAOQ,IAAAA,aAAYE,MAOzCb,KAAKc,aAAe,IAAI1B,EAAKkB,MAD7BS,KAAA,UACAC,SAAKF,EAAeE,SAChBD,SAAMN,EADwBQ,SAE9BD,SAAUP,WACVQ,EAAAA,QAAUR,aAOdT,KAAKO,UAAUL,GAAG,QAAS,WAD3B,IAAAgB,KACAjB,EAAKM,UAAaY,KAAA,SAASC,GACnBF,EAAAA,MACCX,MAAUY,EAAKE,GAChBH,MAAUE,EAAAf,IAAA,YAAAJ,EAAVS,eAAAY,OAAAJ,KASRlB,KAAKQ,SAASN,GAAG,QAAS,WAD1B,IAAAgB,KAEI,OADsBjB,EAAAS,eAAWa,QAE7BC,EAAAA,SAAAA,KAAkBvB,SAAKS,GACG,SAA1Bc,EAAAA,IAAAA,SACKhB,EAALiB,MACQL,MAAUA,EAAVC,GACAH,MAAUE,EAAAf,IAAA,YAKjBJ,EAPDa,aAAAQ,OAAAJ,KAaRlB,KAAKE,GAAG,SAAU,WADlBO,EAAAG,UAAAH,EAAAG,SAAAX,EAAAY,WAMAb,KAAK0B,WAAW1B,KAAK2B,aADrB3B,KAAA4B,EAAA,mBAAAC,OAAA7B,KAAAU,eAAAoB,KACA9B,KAAK0B,IAAAA,OAAW1B,KAAK2B,aAArBG,KAKA9B,KAAKO,UAAUwB,OADf3B,OAAA,EACA4B,QAAKzB,WACDH,EAAOM,eADUuB,QAAA,eAEGC,IAApBF,EAASvB,QAAAI,OACLZ,EAAKS,MAAAA,EAAeuB,QAAQpB,WASxCA,MAAO,SAASsB,GADhB,OAAAnC,KAAAc,aAAAD,MAAAsB,IAMAR,UAAW,WADX,MACAA","file":"../../../scripts/mvc/ui/ui-select-library.js","sourcesContent":["// dependencies\ndefine([\"utils/utils\", \"mvc/ui/ui-misc\", \"mvc/ui/ui-table\", \"mvc/ui/ui-list\"], function(Utils, Ui, Table, List) {\n    // collection of libraries\n    var Libraries = Backbone.Collection.extend({\n        url: Galaxy.root + \"api/libraries?deleted=false\"\n    });\n\n    // collection of dataset\n    var LibraryDatasets = Backbone.Collection.extend({\n        initialize: function() {\n            var self = this;\n            this.config = new Backbone.Model({ library_id: null });\n            this.config.on(\"change\", function() {\n                self.fetch({ reset: true });\n            });\n        },\n        url: function() {\n            return Galaxy.root + \"api/libraries/\" + this.config.get(\"library_id\") + \"/contents\";\n        }\n    });\n\n    // hda/hdca content selector ui element\n    var View = Backbone.View.extend({\n        // initialize\n        initialize: function(options) {\n            // link this\n            var self = this;\n\n            // collections\n            this.libraries = new Libraries();\n            this.datasets = new LibraryDatasets();\n\n            // link app and options\n            this.options = options;\n\n            // select field for the library\n            // TODO: Remove this once the library API supports searching for library datasets\n            this.library_select = new Ui.Select.View({\n                onchange: function(value) {\n                    self.datasets.config.set(\"library_id\", value);\n                }\n            });\n\n            // create ui-list view to keep track of selected data libraries\n            this.dataset_list = new List.View({\n                name: \"dataset\",\n                optional: options.optional,\n                multiple: options.multiple,\n                onchange: function() {\n                    self.trigger(\"change\");\n                }\n            });\n\n            // add reset handler for fetched libraries\n            this.libraries.on(\"reset\", function() {\n                var data = [];\n                self.libraries.each(function(model) {\n                    data.push({\n                        value: model.id,\n                        label: model.get(\"name\")\n                    });\n                });\n                self.library_select.update(data);\n            });\n\n            // add reset handler for fetched library datasets\n            this.datasets.on(\"reset\", function() {\n                var data = [];\n                var library_current = self.library_select.text();\n                if (library_current !== null) {\n                    self.datasets.each(function(model) {\n                        if (model.get(\"type\") === \"file\") {\n                            data.push({\n                                value: model.id,\n                                label: model.get(\"name\")\n                            });\n                        }\n                    });\n                }\n                self.dataset_list.update(data);\n            });\n\n            // add change event. fires on trigger\n            this.on(\"change\", function() {\n                options.onchange && options.onchange(self.value());\n            });\n\n            // create elements\n            this.setElement(this._template());\n            this.$(\".library-select\").append(this.library_select.$el);\n            this.$el.append(this.dataset_list.$el);\n\n            // initial fetch of libraries\n            this.libraries.fetch({\n                reset: true,\n                success: function() {\n                    self.library_select.trigger(\"change\");\n                    if (self.options.value !== undefined) {\n                        self.value(self.options.value);\n                    }\n                }\n            });\n        },\n\n        /** Return/Set currently selected library datasets */\n        value: function(val) {\n            return this.dataset_list.value(val);\n        },\n\n        /** Template */\n        _template: function() {\n            return (\n                '<div class=\"ui-select-library\">' +\n                '<div class=\"library ui-margin-bottom\">' +\n                '<span class=\"library-title\">Select Library</span>' +\n                '<span class=\"library-select\"/>' +\n                \"</div>\" +\n                \"</div>\"\n            );\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n"]}