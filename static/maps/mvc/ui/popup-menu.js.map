{"version":3,"sources":["mvc/ui/popup-menu.js"],"names":["define","PopupMenu","Backbone","View","extend","initialize","$button","this","length","$","options","data","menu","click","event","remove","_renderAndShow","clickEvent","render","appendTo","_setUpCloseBehavior","css","_getShownPosition","show","hide","$el","find","each","html","option","attr","func","i","li","children","call","id","template","divider","_templateOptions","join","target","check","_","map","header","pageX","href","menuWidth","checked","document","width","window","x","Math","min","err","scrollLeft","max","pageY","left","parent","closePopup","off","index","one","splice","has","contents","findItemByHtml","item","removeItem","_create","findIndexByHtml","convertedOptions","initial_options","optionKey","toString","optionVal","create","jQuery","newOption","make_popupmenu","button_element","convertLinksToOptions","$parent","selector","type","linkHref","push","location","elem","$link","text","linkTarget","confirmText","confirm","fromExistingDom","$buttonElement","$menuElement","make_popup_menus","menuElementLinkSelector","popupMenusCreated","menuSelector","fromDom","buttonSelectorBuildFn","addClass"],"mappings":"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","file":"../../../scripts/mvc/ui/popup-menu.js","sourcesContent":["define(\n    [\n        //jquery\n        //backbone\n    ],\n    function() {\n        // =============================================================================\n        /**\n * view for a popup menu\n */\n        var PopupMenu = Backbone.View.extend({\n            //TODO: maybe better as singleton off the Galaxy obj\n            /** Cache the desired button element and options, set up the button click handler\n     *  NOTE: attaches this view as HTML/jQ data on the button for later use.\n     */\n            initialize: function($button, options) {\n                // default settings\n                this.$button = $button;\n                if (!this.$button.length) {\n                    this.$button = $(\"<div/>\");\n                }\n                this.options = options || [];\n                this.$button.data(\"popupmenu\", this);\n\n                // set up button click -> open menu behavior\n                var menu = this;\n                this.$button.click(function(event) {\n                    // if there's already a menu open, remove it\n                    $(\".popmenu-wrapper\").remove();\n                    menu._renderAndShow(event);\n                    return false;\n                });\n            },\n\n            // render the menu, append to the page body at the click position, and set up the 'click-away' handlers, show\n            _renderAndShow: function(clickEvent) {\n                this.render();\n                this.$el\n                    .appendTo(\"body\")\n                    .css(this._getShownPosition(clickEvent))\n                    .show();\n                this._setUpCloseBehavior();\n            },\n\n            // render the menu\n            // this menu doesn't attach itself to the DOM ( see _renderAndShow )\n            render: function() {\n                // render the menu body absolute and hidden, fill with template\n                this.$el\n                    .addClass(\"popmenu-wrapper\")\n                    .hide()\n                    .css({ position: \"absolute\" })\n                    .html(this.template(this.$button.attr(\"id\"), this.options));\n\n                // set up behavior on each link/anchor elem\n                if (this.options.length) {\n                    var menu = this;\n                    //precondition: there should be one option per li\n                    this.$el.find(\"li\").each(function(i, li) {\n                        var option = menu.options[i];\n\n                        // if the option has 'func', call that function when the anchor is clicked\n                        if (option.func) {\n                            $(this)\n                                .children(\"a.popupmenu-option\")\n                                .click(function(event) {\n                                    option.func.call(menu, event, option);\n                                    // We must preventDefault otherwise clicking \"cancel\"\n                                    // on a purge or something still navigates and causes\n                                    // the action.\n                                    event.preventDefault();\n                                    // bubble up so that an option click will call the close behavior\n                                });\n                        }\n                    });\n                }\n                return this;\n            },\n\n            template: function(id, options) {\n                return ['<ul id=\"', id, '-menu\" class=\"dropdown-menu\">', this._templateOptions(options), \"</ul>\"].join(\n                    \"\"\n                );\n            },\n\n            _templateOptions: function(options) {\n                if (!options.length) {\n                    return \"<li>(no options)</li>\";\n                }\n                return _.map(options, function(option) {\n                    if (option.divider) {\n                        return '<li class=\"divider\"></li>';\n                    } else if (option.header) {\n                        return ['<li class=\"head\"><a href=\"javascript:void(0);\">', option.html, \"</a></li>\"].join(\"\");\n                    }\n                    var href = option.href || \"javascript:void(0);\",\n                        target = option.target ? ' target=\"' + option.target + '\"' : \"\",\n                        check = option.checked ? '<span class=\"fa fa-check\"></span>' : \"\";\n                    return [\n                        '<li><a class=\"popupmenu-option\" href=\"',\n                        href,\n                        '\"',\n                        target,\n                        \">\",\n                        check,\n                        option.html,\n                        \"</a></li>\"\n                    ].join(\"\");\n                }).join(\"\");\n            },\n\n            // get the absolute position/offset for the menu\n            _getShownPosition: function(clickEvent) {\n                // display menu horiz. centered on click...\n                var menuWidth = this.$el.width();\n                var x = clickEvent.pageX - menuWidth / 2;\n\n                // adjust to handle horiz. scroll and window dimensions ( draw entirely on visible screen area )\n                x = Math.min(x, $(document).scrollLeft() + $(window).width() - menuWidth - 5);\n                x = Math.max(x, $(document).scrollLeft() + 5);\n                return {\n                    top: clickEvent.pageY,\n                    left: x\n                };\n            },\n\n            // bind an event handler to all available frames so that when anything is clicked\n            // the menu is removed from the DOM and the event handler unbinds itself\n            _setUpCloseBehavior: function() {\n                var menu = this;\n                //TODO: alternately: focus hack, blocking overlay, jquery.blockui\n\n                // function to close popup and unbind itself\n                function closePopup(event) {\n                    $(document).off(\"click.close_popup\");\n                    if (window && window.parent !== window) {\n                        try {\n                            $(window.parent.document).off(\"click.close_popup\");\n                        } catch (err) {}\n                    } else {\n                        try {\n                            $(\"iframe#galaxy_main\")\n                                .contents()\n                                .off(\"click.close_popup\");\n                        } catch (err) {}\n                    }\n                    menu.remove();\n                }\n\n                $(\"html\").one(\"click.close_popup\", closePopup);\n                if (window && window.parent !== window) {\n                    try {\n                        $(window.parent.document)\n                            .find(\"html\")\n                            .one(\"click.close_popup\", closePopup);\n                    } catch (err) {}\n                } else {\n                    try {\n                        $(\"iframe#galaxy_main\")\n                            .contents()\n                            .one(\"click.close_popup\", closePopup);\n                    } catch (err) {}\n                }\n            },\n\n            // add a menu option/item at the given index\n            addItem: function(item, index) {\n                // append to end if no index\n                index = index >= 0 ? index : this.options.length;\n                this.options.splice(index, 0, item);\n                return this;\n            },\n\n            // remove a menu option/item at the given index\n            removeItem: function(index) {\n                if (index >= 0) {\n                    this.options.splice(index, 1);\n                }\n                return this;\n            },\n\n            // search for a menu option by its html\n            findIndexByHtml: function(html) {\n                for (var i = 0; i < this.options.length; i++) {\n                    if (_.has(this.options[i], \"html\") && this.options[i].html === html) {\n                        return i;\n                    }\n                }\n                return null;\n            },\n\n            // search for a menu option by its html\n            findItemByHtml: function(html) {\n                return this.options[this.findIndexByHtml(html)];\n            },\n\n            // string representation\n            toString: function() {\n                return \"PopupMenu\";\n            }\n        });\n        /** shortcut to new for when you don't need to preserve the ref */\n        PopupMenu.create = function _create($button, options) {\n            return new PopupMenu($button, options);\n        };\n\n        // -----------------------------------------------------------------------------\n        // the following class functions are bridges from the original make_popupmenu and make_popup_menus\n        // to the newer backbone.js PopupMenu\n\n        /** Create a PopupMenu from simple map initial_options activated by clicking button_element.\n *      Converts initial_options to object array used by PopupMenu.\n *  @param {jQuery|DOMElement} button_element element which, when clicked, activates menu\n *  @param {Object} initial_options map of key -> values, where\n *      key is option text, value is fn to call when option is clicked\n *  @returns {PopupMenu} the PopupMenu created\n */\n        PopupMenu.make_popupmenu = function(button_element, initial_options) {\n            var convertedOptions = [];\n            _.each(initial_options, function(optionVal, optionKey) {\n                var newOption = { html: optionKey };\n\n                // keys with null values indicate: header\n                if (optionVal === null) {\n                    // !optionVal? (null only?)\n                    newOption.header = true;\n\n                    // keys with function values indicate: a menu option\n                } else if (jQuery.type(optionVal) === \"function\") {\n                    newOption.func = optionVal;\n                }\n                //TODO:?? any other special optionVals?\n                // there was no divider option originally\n                convertedOptions.push(newOption);\n            });\n            return new PopupMenu($(button_element), convertedOptions);\n        };\n\n        /** Find all anchors in $parent (using selector) and covert anchors into a PopupMenu options map.\n *  @param {jQuery} $parent the element that contains the links to convert to options\n *  @param {String} selector jq selector string to find links\n *  @returns {Object[]} the options array to initialize a PopupMenu\n */\n        //TODO: lose parent and selector, pass in array of links, use map to return options\n        PopupMenu.convertLinksToOptions = function($parent, selector) {\n            $parent = $($parent);\n            selector = selector || \"a\";\n            var options = [];\n            $parent.find(selector).each(function(elem, i) {\n                var option = {},\n                    $link = $(elem);\n\n                // convert link text to the option text (html) and the href into the option func\n                option.html = $link.text();\n                if ($link.attr(\"href\")) {\n                    var linkHref = $link.attr(\"href\"),\n                        linkTarget = $link.attr(\"target\"),\n                        confirmText = $link.attr(\"confirm\");\n\n                    option.func = function() {\n                        // if there's a \"confirm\" attribute, throw up a confirmation dialog, and\n                        //  if the user cancels - do nothing\n                        if (confirmText && !confirm(confirmText)) {\n                            return;\n                        }\n\n                        // if there's no confirm attribute, or the user accepted the confirm dialog:\n                        switch (linkTarget) {\n                            // relocate the center panel\n                            case \"_parent\":\n                                window.parent.location = linkHref;\n                                break;\n\n                            // relocate the entire window\n                            case \"_top\":\n                                window.top.location = linkHref;\n                                break;\n\n                            // relocate this panel\n                            default:\n                                window.location = linkHref;\n                        }\n                    };\n                }\n                options.push(option);\n            });\n            return options;\n        };\n\n        /** Create a single popupmenu from existing DOM button and anchor elements\n *  @param {jQuery} $buttonElement the element that when clicked will open the menu\n *  @param {jQuery} $menuElement the element that contains the anchors to convert into a menu\n *  @param {String} menuElementLinkSelector jq selector string used to find anchors to be made into menu options\n *  @returns {PopupMenu} the PopupMenu (Backbone View) that can render, control the menu\n */\n        PopupMenu.fromExistingDom = function($buttonElement, $menuElement, menuElementLinkSelector) {\n            $buttonElement = $($buttonElement);\n            $menuElement = $($menuElement);\n            var options = PopupMenu.convertLinksToOptions($menuElement, menuElementLinkSelector);\n            // we're done with the menu (having converted it to an options map)\n            $menuElement.remove();\n            return new PopupMenu($buttonElement, options);\n        };\n\n        /** Create all popupmenus within a document or a more specific element\n *  @param {DOMElement} parent the DOM element in which to search for popupmenus to build (defaults to document)\n *  @param {String} menuSelector jq selector string to find popupmenu menu elements (defaults to \"div[popupmenu]\")\n *  @param {Function} buttonSelectorBuildFn the function to build the jq button selector.\n *      Will be passed $menuElement, parent.\n *      (Defaults to return '#' + $menuElement.attr( 'popupmenu' ); )\n *  @returns {PopupMenu[]} array of popupmenus created\n */\n        PopupMenu.make_popup_menus = function(parent, menuSelector, buttonSelectorBuildFn) {\n            parent = parent || document;\n            // orig. Glx popupmenu menus have a (non-std) attribute 'popupmenu'\n            //  which contains the id of the button that activates the menu\n            menuSelector = menuSelector || \"div[popupmenu]\";\n            // default to (orig. Glx) matching button to menu by using the popupmenu attr of the menu as the id of the button\n            buttonSelectorBuildFn =\n                buttonSelectorBuildFn ||\n                function($menuElement, parent) {\n                    return \"#\" + $menuElement.attr(\"popupmenu\");\n                };\n\n            // aggregate and return all PopupMenus\n            var popupMenusCreated = [];\n            $(parent)\n                .find(menuSelector)\n                .each(function() {\n                    var $menuElement = $(this),\n                        $buttonElement = $(parent).find(buttonSelectorBuildFn($menuElement, parent));\n                    popupMenusCreated.push(PopupMenu.fromDom($buttonElement, $menuElement));\n                    $buttonElement.addClass(\"popup\");\n                });\n            return popupMenusCreated;\n        };\n\n        // =============================================================================\n        return PopupMenu;\n    }\n);\n"]}