{"version":3,"sources":["mvc/ui/ui-select-content.js"],"names":["define","Utils","Ui","Select","Batch","DISABLED","ENABLED","LINKED","Configurations","data","src","icon","tooltip","multiple","batch","data_collection","workflow_data","workflow_data_multiple","module_data","module_data_collection","View","self","src_labels","pagelimit","statustimer","button_product","value","Backbone","extend","initialize","options","$batch_div","this","$batch","linked","clone","enabled","hda","hdca","$el","setElement","lastenter","target","RadioButton","on","e","_handleDrop","$","model","listenTo","render","addClass","append","html","_changeType","_changeValue","_changeWait","css","set","preventDefault","new_value","undefined","current","get","removeClass","id_list","fields","history","result","details","_changeData","Galaxy","_changeCurrent","debug","onchange","_","each","$batchfield","unwait","config","config_id","isArray","length","_batch","values","extensions","textify","i","emit","push","searchable","a","b","optional","hid","trigger","field","show","batchmode","empty","String","select_options","item","c","keep","label","tags","individual","error_text","button_type","button_width","max","margin-left","new_id","new_src","findWhere","current_value","items","name","_handleDropStatus","id","add","list","map_over_type","indexOf","ev","drop_data","JSON","parse","originalEvent","dataTransfer","getData","history_content_type","status","setTimeout"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-select-content.js","sourcesContent":["define([\"utils/utils\", \"mvc/ui/ui-misc\", \"mvc/ui/ui-select-default\"], function(Utils, Ui, Select) {\n    /** Batch mode variations */\n    var Batch = { DISABLED: \"disabled\", ENABLED: \"enabled\", LINKED: \"linked\" };\n\n    /** List of available content selectors options */\n    var Configurations = {\n        data: [\n            {\n                src: \"hda\",\n                icon: \"fa-file-o\",\n                tooltip: \"Single dataset\",\n                multiple: false,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.LINKED\n            },\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.LINKED\n            }\n        ],\n        data_multiple: [\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collections\",\n                multiple: true,\n                batch: Batch.DISABLED\n            }\n        ],\n        data_collection: [\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.DISABLED\n            }\n        ],\n        workflow_data: [\n            {\n                src: \"hda\",\n                icon: \"fa-file-o\",\n                tooltip: \"Single dataset\",\n                multiple: false,\n                batch: Batch.DISABLED\n            }\n        ],\n        workflow_data_multiple: [\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.DISABLED\n            }\n        ],\n        workflow_data_collection: [\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.DISABLED\n            }\n        ],\n        module_data: [\n            {\n                src: \"hda\",\n                icon: \"fa-file-o\",\n                tooltip: \"Single dataset\",\n                multiple: false,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.ENABLED\n            }\n        ],\n        module_data_collection: [\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hdca\",\n                icon: \"fa-folder\",\n                tooltip: \"Multiple collections\",\n                multiple: true,\n                batch: Batch.ENABLED\n            }\n        ]\n    };\n\n    /** View for hda and hdca content selector ui elements */\n    var View = Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    src_labels: { hda: \"dataset\", hdca: \"dataset collection\" },\n                    pagelimit: 100,\n                    statustimer: 1000\n                }).set(options);\n            this.setElement($(\"<div/>\").addClass(\"ui-select-content\"));\n            this.button_product = new Ui.RadioButton.View({\n                value: \"false\",\n                data: [\n                    {\n                        icon: \"fa fa-chain\",\n                        value: \"false\",\n                        tooltip:\n                            \"Linked inputs will be run in matched order with other datasets e.g. use this for matching forward and reverse reads.\"\n                    },\n                    {\n                        icon: \"fa fa-chain-broken\",\n                        value: \"true\",\n                        tooltip: \"Unlinked dataset inputs will be run against *all* other inputs.\"\n                    }\n                ]\n            });\n            var $batch_div = $(\"<div/>\")\n                .addClass(\"ui-form-info\")\n                .append($(\"<i/>\").addClass(\"fa fa-sitemap\"))\n                .append(\n                    $(\"<span/>\").html(\n                        \"This is a batch mode input field. Separate jobs will be triggered for each dataset selection.\"\n                    )\n                );\n            this.$batch = {\n                linked: $batch_div.clone(),\n                enabled: $batch_div\n                    .clone()\n                    .append(\n                        $(\"<div/>\")\n                            .append(\n                                $(\"<div/>\")\n                                    .addClass(\"ui-form-title\")\n                                    .html(\"Batch options:\")\n                            )\n                            .append(this.button_product.$el)\n                    )\n                    .append($(\"<div/>\").css(\"clear\", \"both\"))\n            };\n\n            // add drag-drop event handlers\n            this.$el\n                .on(\"dragenter\", function(e) {\n                    this.lastenter = e.target;\n                    self.$el.addClass(\"ui-dragover\");\n                })\n                .on(\"dragover\", function(e) {\n                    e.preventDefault();\n                })\n                .on(\"dragleave\", function(e) {\n                    this.lastenter === e.target && self.$el.removeClass(\"ui-dragover\");\n                })\n                .on(\"drop\", function(e) {\n                    self._handleDrop(e);\n                });\n\n            // track current history elements\n            this.history = {};\n\n            // add listeners\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(this.model, \"change:current\", this._changeCurrent, this);\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(\n                this.model,\n                \"change:type change:optional change:multiple change:extensions\",\n                this._changeType,\n                this\n            );\n            this.render();\n\n            // add change event\n            this.on(\"change\", function() {\n                options.onchange && options.onchange(self.value());\n            });\n        },\n\n        render: function() {\n            this._changeType();\n            this._changeValue();\n            this._changeWait();\n        },\n\n        /** Indicate that select fields are being updated */\n        wait: function() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Indicate that the options update has been completed */\n        unwait: function() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Update data representing selectable options */\n        update: function(options) {\n            this.model.set(\"data\", options);\n        },\n\n        /** Return the currently selected dataset values */\n        value: function(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            var current = this.model.get(\"current\");\n            if (this.config[current]) {\n                var id_list = this.fields[current].value();\n                if (id_list !== null) {\n                    id_list = $.isArray(id_list) ? id_list : [id_list];\n                    if (id_list.length > 0) {\n                        var result = this._batch({ values: [] });\n                        for (var i in id_list) {\n                            var details = this.history[id_list[i] + \"_\" + this.config[current].src];\n                            if (details) {\n                                result.values.push(details);\n                            } else {\n                                Galaxy.emit.debug(\n                                    \"ui-select-content::value()\",\n                                    \"Requested details not found for '\" + id_list[i] + \"'.\"\n                                );\n                                return null;\n                            }\n                        }\n                        result.values.sort(function(a, b) {\n                            return a.hid - b.hid;\n                        });\n                        return result;\n                    }\n                }\n            } else {\n                Galaxy.emit.debug(\"ui-select-content::value()\", \"Invalid value/source '\" + new_value + \"'.\");\n            }\n            return null;\n        },\n\n        /** Change of current select field */\n        _changeCurrent: function() {\n            var self = this;\n            _.each(this.fields, function(field, i) {\n                if (self.model.get(\"current\") == i) {\n                    field.$el.show();\n                    _.each(self.$batch, function($batchfield, batchmode) {\n                        $batchfield[self.config[i].batch == batchmode ? \"show\" : \"hide\"]();\n                    });\n                    self.button_type.value(i);\n                } else {\n                    field.$el.hide();\n                }\n            });\n        },\n\n        /** Change of type */\n        _changeType: function() {\n            var self = this;\n\n            // identify selector type identifier i.e. [ flavor ]_[ type ]_[ multiple ]\n            var config_id =\n                (this.model.get(\"flavor\") ? this.model.get(\"flavor\") + \"_\" : \"\") +\n                String(this.model.get(\"type\")) +\n                (this.model.get(\"multiple\") ? \"_multiple\" : \"\");\n            if (Configurations[config_id]) {\n                this.config = Configurations[config_id];\n            } else {\n                this.config = Configurations[\"data\"];\n                Galaxy.emit.debug(\n                    \"ui-select-content::_changeType()\",\n                    \"Invalid configuration/type id '\" + config_id + \"'.\"\n                );\n            }\n\n            // prepare extension component of error message\n            var data = self.model.get(\"data\");\n            var extensions = Utils.textify(this.model.get(\"extensions\"));\n            var src_labels = this.model.get(\"src_labels\");\n\n            // build views\n            this.fields = [];\n            this.button_data = [];\n            _.each(this.config, function(c, i) {\n                self.button_data.push({\n                    value: i,\n                    icon: c.icon,\n                    tooltip: c.tooltip\n                });\n                self.fields.push(\n                    new Select.View({\n                        optional: self.model.get(\"optional\"),\n                        multiple: c.multiple,\n                        searchable:\n                            !c.multiple || (data && data[c.src] && data[c.src].length > self.model.get(\"pagelimit\")),\n                        individual: true,\n                        error_text:\n                            \"No \" +\n                            (extensions ? extensions + \" \" : \"\") +\n                            (src_labels[c.src] || \"content\") +\n                            \" available.\",\n                        onchange: function() {\n                            self.trigger(\"change\");\n                        }\n                    })\n                );\n            });\n            this.button_type = new Ui.RadioButton.View({\n                value: this.model.get(\"current\"),\n                data: this.button_data,\n                onchange: function(value) {\n                    self.model.set(\"current\", value);\n                    self.trigger(\"change\");\n                }\n            });\n\n            // append views\n            this.$el.empty();\n            var button_width = 0;\n            if (this.fields.length > 1) {\n                this.$el.append(this.button_type.$el);\n                button_width = Math.max(0, this.fields.length * 36) + \"px\";\n            }\n            _.each(this.fields, function(field) {\n                self.$el.append(field.$el.css({ \"margin-left\": button_width }));\n            });\n            _.each(this.$batch, function($batchfield, batchmode) {\n                self.$el.append($batchfield.css({ \"margin-left\": button_width }));\n            });\n            this.model.set(\"current\", 0);\n            this._changeCurrent();\n            this._changeData();\n        },\n\n        /** Change of wait flag */\n        _changeWait: function() {\n            var self = this;\n            _.each(this.fields, function(field) {\n                field[self.model.get(\"wait\") ? \"wait\" : \"unwait\"]();\n            });\n        },\n\n        /** Change of available options */\n        _changeData: function() {\n            var options = this.model.get(\"data\");\n            var self = this;\n            var select_options = {};\n            _.each(options, function(items, src) {\n                select_options[src] = [];\n                _.each(items, function(item) {\n                    select_options[src].push({\n                        hid: item.hid,\n                        keep: item.keep,\n                        label: item.hid + \": \" + item.name,\n                        value: item.id,\n                        tags: item.tags\n                    });\n                    self.history[item.id + \"_\" + src] = item;\n                });\n            });\n            _.each(this.config, function(c, i) {\n                select_options[c.src] &&\n                    self.fields[i].add(select_options[c.src], function(a, b) {\n                        return b.hid - a.hid;\n                    });\n            });\n        },\n\n        /** Change of incoming value */\n        _changeValue: function() {\n            var new_value = this.model.get(\"value\");\n            if (new_value && new_value.values && new_value.values.length > 0) {\n                // create list with content ids\n                var list = [];\n                _.each(new_value.values, function(value) {\n                    list.push(value.id);\n                });\n                // sniff first suitable field type from config list\n                var src = new_value.values[0].src;\n                var multiple = new_value.values.length > 1;\n                for (var i = 0; i < this.config.length; i++) {\n                    var field = this.fields[i];\n                    var c = this.config[i];\n                    if (c.src == src && [multiple, true].indexOf(c.multiple) !== -1) {\n                        this.model.set(\"current\", i);\n                        field.value(list);\n                        break;\n                    }\n                }\n            } else {\n                _.each(this.fields, function(field) {\n                    field.value(null);\n                });\n            }\n        },\n\n        /** Handles drop events e.g. from history panel */\n        _handleDrop: function(ev) {\n            try {\n                var data = this.model.get(\"data\");\n                var current = this.model.get(\"current\");\n                var config = this.config[current];\n                var field = this.fields[current];\n                var drop_data = JSON.parse(ev.originalEvent.dataTransfer.getData(\"text\"))[0];\n                var new_id = drop_data.id;\n                var new_src = drop_data.history_content_type == \"dataset\" ? \"hda\" : \"hdca\";\n                var new_value = { id: new_id, src: new_src };\n                if (data && _.findWhere(data[new_src], new_value)) {\n                    if (config.src == new_src) {\n                        var current_value = field.value();\n                        if (current_value && config.multiple) {\n                            if (current_value.indexOf(new_id) == -1) {\n                                current_value.push(new_id);\n                            }\n                        } else {\n                            current_value = new_id;\n                        }\n                        field.value(current_value);\n                    } else {\n                        this.model.set(\"value\", { values: [new_value] });\n                        this.model.trigger(\"change:value\");\n                    }\n                    this.trigger(\"change\");\n                    this._handleDropStatus(\"success\");\n                } else {\n                    this._handleDropStatus(\"danger\");\n                }\n            } catch (e) {\n                this._handleDropStatus(\"danger\");\n            }\n            ev.preventDefault();\n        },\n\n        /** Highlight drag result */\n        _handleDropStatus: function(status) {\n            var self = this;\n            this.$el.removeClass(\"ui-dragover\").addClass(\"ui-dragover-\" + status);\n            setTimeout(function() {\n                self.$el.removeClass(\"ui-dragover-\" + status);\n            }, this.model.get(\"statustimer\"));\n        },\n\n        /** Assists in identifying the batch mode */\n        _batch: function(result) {\n            result[\"batch\"] = false;\n            var current = this.model.get(\"current\");\n            var config = this.config[current];\n            if (config.src == \"hdca\" && !config.multiple) {\n                var hdca = this.history[this.fields[current].value() + \"_hdca\"];\n                if (hdca && hdca.map_over_type) {\n                    result[\"batch\"] = true;\n                }\n            }\n            if (config.batch == Batch.LINKED || config.batch == Batch.ENABLED) {\n                result[\"batch\"] = true;\n                if (config.batch == Batch.ENABLED && this.button_product.value() === \"true\") {\n                    result[\"product\"] = true;\n                }\n            }\n            return result;\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n"]}