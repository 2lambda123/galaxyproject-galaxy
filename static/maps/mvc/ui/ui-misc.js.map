{"version":3,"sources":["mvc/ui/ui-misc.js"],"names":["define","Label","tagName","initialize","Utils","listenTo","Slider","Options","Drilldown","render","Modal","Backbone","View","extend","title","set","options","this","model","Model","setElement","get","new_title","value","fade","message","status","addClass","persistent","update","removeClass","cls","$el","self","fadeOut","UnescapedMessage","Message","messageForDisplay","window","clearTimeout","timeout","setTimeout","type","disabled","visible","_","escape","$","input","new_val","undefined","placeholder","datalist","isArray","area","autocomplete","source","response","change","_onchange","events","attr","removeAttr","attr_name","id","css","append","length","request","show","text","val","each","Upload","Hidden","$info","_readFile","reader","FileReader","wait","result","hide","Buttons","ButtonDefault","ButtonIcon","ButtonCheck","ButtonMenu","$file","$text","RadioButton","Checkbox","$wait","e","file","target","files","onload","readAsText","Button","ButtonLink","Input","Radio","Select"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-misc.js","sourcesContent":["/**\n *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n */\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/ui/ui-select-default\",\n        \"mvc/ui/ui-slider\",\n        \"mvc/ui/ui-options\",\n        \"mvc/ui/ui-drilldown\",\n        \"mvc/ui/ui-buttons\",\n        \"mvc/ui/ui-modal\"\n    ],\n    function(Utils, Select, Slider, Options, Drilldown, Buttons, Modal) {\n        /** Label wrapper */\n        var Label = Backbone.View.extend({\n            tagName: \"label\",\n            initialize: function(options) {\n                this.model = (options && options.model) || new Backbone.Model(options);\n                this.tagName = options.tagName || this.tagName;\n                this.setElement($(\"<\" + this.tagName + \"/>\"));\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            title: function(new_title) {\n                this.model.set(\"title\", new_title);\n            },\n            value: function() {\n                return this.model.get(\"title\");\n            },\n            render: function() {\n                this.$el\n                    .removeClass()\n                    .addClass(\"ui-label\")\n                    .addClass(this.model.get(\"cls\"))\n                    .html(this.model.get(\"title\"));\n                return this;\n            }\n        });\n\n        /** Displays messages used e.g. in the tool form */\n        var Message = Backbone.View.extend({\n            initialize: function(options) {\n                this.model =\n                    (options && options.model) ||\n                    new Backbone.Model({\n                        message: null,\n                        status: \"info\",\n                        cls: \"\",\n                        persistent: false,\n                        fade: true\n                    }).set(options);\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            update: function(options) {\n                this.model.set(options);\n            },\n            render: function() {\n                this.$el\n                    .removeClass()\n                    .addClass(\"ui-message\")\n                    .addClass(this.model.get(\"cls\"));\n                var status = this.model.get(\"status\");\n                if (this.model.get(\"large\")) {\n                    this.$el.addClass(\n                        ((status == \"success\" && \"done\") || (status == \"danger\" && \"error\") || status) + \"messagelarge\"\n                    );\n                } else {\n                    this.$el.addClass(\"alert\").addClass(\"alert-\" + status);\n                }\n                if (this.model.get(\"message\")) {\n                    this.$el.html(this.messageForDisplay());\n                    this.$el[this.model.get(\"fade\") ? \"fadeIn\" : \"show\"]();\n                    this.timeout && window.clearTimeout(this.timeout);\n                    if (!this.model.get(\"persistent\")) {\n                        var self = this;\n                        this.timeout = window.setTimeout(function() {\n                            self.model.set(\"message\", \"\");\n                        }, 3000);\n                    }\n                } else {\n                    this.$el.fadeOut();\n                }\n                return this;\n            },\n            messageForDisplay: function() {\n                return _.escape(this.model.get(\"message\"));\n            }\n        });\n\n        var UnescapedMessage = Message.extend({\n            messageForDisplay: function() {\n                return this.model.get(\"message\");\n            }\n        });\n\n        /** Renders an input element used e.g. in the tool form */\n        var Input = Backbone.View.extend({\n            initialize: function(options) {\n                this.model =\n                    (options && options.model) ||\n                    new Backbone.Model({\n                        type: \"text\",\n                        placeholder: \"\",\n                        disabled: false,\n                        readonly: false,\n                        visible: true,\n                        cls: \"\",\n                        area: false,\n                        color: null,\n                        style: null\n                    }).set(options);\n                this.tagName = this.model.get(\"area\") ? \"textarea\" : \"input\";\n                this.setElement($(\"<\" + this.tagName + \"/>\"));\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            events: {\n                input: \"_onchange\"\n            },\n            value: function(new_val) {\n                new_val !== undefined && this.model.set(\"value\", typeof new_val === \"string\" ? new_val : \"\");\n                return this.model.get(\"value\");\n            },\n            render: function() {\n                var self = this;\n                this.$el\n                    .removeClass()\n                    .addClass(\"ui-\" + this.tagName)\n                    .addClass(this.model.get(\"cls\"))\n                    .addClass(this.model.get(\"style\"))\n                    .attr(\"id\", this.model.id)\n                    .attr(\"type\", this.model.get(\"type\"))\n                    .attr(\"placeholder\", this.model.get(\"placeholder\"))\n                    .css(\"color\", this.model.get(\"color\") || \"\")\n                    .css(\"border-color\", this.model.get(\"color\") || \"\");\n                var datalist = this.model.get(\"datalist\");\n                if ($.isArray(datalist) && datalist.length > 0) {\n                    this.$el.autocomplete({\n                        source: function(request, response) {\n                            response(self.model.get(\"datalist\"));\n                        },\n                        change: function() {\n                            self._onchange();\n                        }\n                    });\n                }\n                if (this.model.get(\"value\") !== this.$el.val()) {\n                    this.$el.val(this.model.get(\"value\"));\n                }\n                _.each([\"readonly\", \"disabled\"], function(attr_name) {\n                    self.model.get(attr_name) ? self.$el.attr(attr_name, true) : self.$el.removeAttr(attr_name);\n                });\n                this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n                return this;\n            },\n            _onchange: function() {\n                this.value(this.$el.val());\n                this.model.get(\"onchange\") && this.model.get(\"onchange\")(this.model.get(\"value\"));\n            }\n        });\n\n        /** Creates a hidden element input field used e.g. in the tool form */\n        var Hidden = Backbone.View.extend({\n            initialize: function(options) {\n                this.model = (options && options.model) || new Backbone.Model(options);\n                this.setElement(\n                    $(\"<div/>\")\n                        .append((this.$info = $(\"<div/>\")))\n                        .append((this.$hidden = $(\"<div/>\")))\n                );\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            value: function(new_val) {\n                new_val !== undefined && this.model.set(\"value\", new_val);\n                return this.model.get(\"value\");\n            },\n            render: function() {\n                this.$el.attr(\"id\", this.model.id);\n                this.$hidden.val(this.model.get(\"value\"));\n                this.model.get(\"info\") ? this.$info.show().text(this.model.get(\"info\")) : this.$info.hide();\n                return this;\n            }\n        });\n\n        /** Creates a upload element input field */\n        var Upload = Backbone.View.extend({\n            initialize: function(options) {\n                var self = this;\n                this.model = (options && options.model) || new Backbone.Model(options);\n                this.setElement(\n                    $(\"<div/>\")\n                        .append((this.$info = $(\"<div/>\")))\n                        .append(\n                            (this.$file = $(\"<input/>\")\n                                .attr(\"type\", \"file\")\n                                .addClass(\"ui-margin-bottom\"))\n                        )\n                        .append(\n                            (this.$text = $(\"<textarea/>\")\n                                .addClass(\"ui-textarea\")\n                                .attr(\"disabled\", true))\n                        )\n                        .append((this.$wait = $(\"<i/>\").addClass(\"fa fa-spinner fa-spin\")))\n                );\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.$file.on(\"change\", function(e) {\n                    self._readFile(e);\n                });\n                this.render();\n            },\n            value: function(new_val) {\n                new_val !== undefined && this.model.set(\"value\", new_val);\n                return this.model.get(\"value\");\n            },\n            render: function() {\n                this.$el.attr(\"id\", this.model.id);\n                this.model.get(\"info\") ? this.$info.show().text(this.model.get(\"info\")) : this.$info.hide();\n                this.model.get(\"value\") ? this.$text.text(this.model.get(\"value\")).show() : this.$text.hide();\n                this.model.get(\"wait\") ? this.$wait.show() : this.$wait.hide();\n                return this;\n            },\n            _readFile: function(e) {\n                var self = this;\n                var file = e.target.files && e.target.files[0];\n                if (file) {\n                    var reader = new FileReader();\n                    reader.onload = function() {\n                        self.model.set({ wait: false, value: this.result });\n                    };\n                    this.model.set({ wait: true, value: null });\n                    reader.readAsText(file);\n                }\n            }\n        });\n\n        return {\n            Button: Buttons.ButtonDefault,\n            ButtonIcon: Buttons.ButtonIcon,\n            ButtonCheck: Buttons.ButtonCheck,\n            ButtonMenu: Buttons.ButtonMenu,\n            ButtonLink: Buttons.ButtonLink,\n            Input: Input,\n            Label: Label,\n            Message: Message,\n            UnescapedMessage: UnescapedMessage,\n            Upload: Upload,\n            Modal: Modal,\n            RadioButton: Options.RadioButton,\n            Checkbox: Options.Checkbox,\n            Radio: Options.Radio,\n            Select: Select,\n            Hidden: Hidden,\n            Slider: Slider,\n            Drilldown: Drilldown\n        };\n    }\n);\n"]}