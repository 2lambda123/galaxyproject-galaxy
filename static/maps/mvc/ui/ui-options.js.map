{"version":3,"sources":["mvc/ui/ui-options.js"],"names":["define","Utils","Buttons","Base","Backbone","View","extend","initialize","options","self","model","visible","data","uid","error_text","wait_text","multiple","optional","onchange","this","listenTo","_changeValue","_changeWait","_changeData","_changeVisible","on","get","value","render","$el","empty","removeClass","all_button","append","$message","$","ButtonCheck","onclick","$options","_template","trigger","prop","_getValue","update","_templateOptions","_","each","title","placement","option","_templateOption","tooltip","$menu","hide","length","css","show","_messageShow","_setValue","new_value","first","isArray","undefined","wait","set","unwait","val","selected","values","push","v","isEmpty","addClass","id","type","name","pair","text","Radio","BaseIcons","Checkbox","attr","prototype","RadioButton","call","closest","icon","label"],"mappings":"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","file":"../../../scripts/mvc/ui/ui-options.js","sourcesContent":["/** Base class for options based ui elements **/\ndefine([\"utils/utils\", \"mvc/ui/ui-buttons\"], function(Utils, Buttons) {\n    var Base = Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    visible: true,\n                    data: [],\n                    id: Utils.uid(),\n                    error_text: \"No options available.\",\n                    wait_text: \"Please wait...\",\n                    multiple: false,\n                    optional: false,\n                    onchange: function() {}\n                }).set(options);\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(this.model, \"change:visible\", this._changeVisible, this);\n            this.on(\"change\", function() {\n                self.model.get(\"onchange\")(self.value());\n            });\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            this.$el\n                .empty()\n                .removeClass()\n                .addClass(\"ui-options\")\n                .append((this.$message = $(\"<div/>\")))\n                .append((this.$menu = $(\"<div/>\").addClass(\"ui-options-menu\")))\n                .append((this.$options = $(this._template())));\n\n            // add select/unselect all button\n            this.all_button = null;\n            if (this.model.get(\"multiple\")) {\n                this.all_button = new Buttons.ButtonCheck({\n                    onclick: function() {\n                        self.$(\"input\").prop(\"checked\", self.all_button.value() !== 0);\n                        self.value(self._getValue());\n                        self.trigger(\"change\");\n                    }\n                });\n                this.$menu.append(this.all_button.$el);\n            }\n\n            // finalize dom\n            this._changeData();\n            this._changeWait();\n            this._changeVisible();\n        },\n\n        /** Update available options */\n        update: function(options) {\n            this.model.set(\"data\", options);\n        },\n\n        _changeData: function() {\n            var self = this;\n            this.$options.empty();\n            if (this._templateOptions) {\n                this.$options.append(this._templateOptions(this.model.get(\"data\")));\n            } else {\n                _.each(this.model.get(\"data\"), function(option) {\n                    self.$options.append(\n                        $(self._templateOption(option))\n                            .addClass(\"ui-option\")\n                            .tooltip({\n                                title: option.tooltip,\n                                placement: \"bottom\"\n                            })\n                    );\n                });\n            }\n            var self = this;\n            this.$(\"input\").on(\"change\", function() {\n                self.value(self._getValue());\n                self.trigger(\"change\");\n            });\n            this._changeValue();\n            this._changeWait();\n        },\n\n        _changeVisible: function() {\n            this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n        },\n\n        _changeWait: function() {\n            if (this.model.get(\"wait\")) {\n                if (this.length() === 0) {\n                    this._messageShow(this.model.get(\"wait_text\"), \"info\");\n                    this.$options.hide();\n                    this.$menu.hide();\n                }\n            } else {\n                if (this.length() === 0) {\n                    this._messageShow(this.model.get(\"error_text\"), \"danger\");\n                    this.$options.hide();\n                    this.$menu.hide();\n                } else {\n                    this.$message.hide();\n                    this.$options.css(\"display\", \"inline-block\");\n                    this.$menu.show();\n                }\n            }\n        },\n\n        _changeValue: function() {\n            this._setValue(this.model.get(\"value\"));\n            if (this._getValue() === null && !this.model.get(\"multiple\") && !this.model.get(\"optional\")) {\n                this._setValue(this.first());\n            }\n            this.all_button &&\n                this.all_button.value($.isArray(this._getValue()) ? this._getValue().length : 0, this.length());\n        },\n\n        /** Return/Set current selection */\n        value: function(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            return this._getValue();\n        },\n\n        /** Return first available option */\n        first: function() {\n            var options = this.$(\"input\").first();\n            return options.length > 0 ? options.val() : null;\n        },\n\n        /** Show a spinner indicating that the select options are currently loaded */\n        wait: function() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner indicating that the request has been completed */\n        unwait: function() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Returns the number of options */\n        length: function() {\n            return this.$(\".ui-option\").length;\n        },\n\n        /** Set value to dom */\n        _setValue: function(new_value) {\n            var self = this;\n            if (new_value !== undefined) {\n                this.$(\"input\").prop(\"checked\", false);\n                if (new_value !== null) {\n                    var values = $.isArray(new_value) ? new_value : [new_value];\n                    _.each(values, function(v) {\n                        self\n                            .$('input[value=\"' + v + '\"]')\n                            .first()\n                            .prop(\"checked\", true);\n                    });\n                }\n            }\n        },\n\n        /** Return current selection */\n        _getValue: function() {\n            var selected = [];\n            this.$(\":checked\").each(function() {\n                selected.push($(this).val());\n            });\n            if (Utils.isEmpty(selected)) {\n                return null;\n            }\n            return this.model.get(\"multiple\") ? selected : selected[0];\n        },\n\n        /** Show message instead if options */\n        _messageShow: function(text, status) {\n            this.$message\n                .show()\n                .removeClass()\n                .addClass(\"ui-message alert alert-\" + status)\n                .html(text);\n        },\n\n        /** Main template function */\n        _template: function() {\n            return $(\"<div/>\").addClass(\"ui-options-list\");\n        }\n    });\n\n    /** Iconized **/\n    var BaseIcons = Base.extend({\n        _templateOption: function(pair) {\n            var id = Utils.uid();\n            return $(\"<div/>\")\n                .addClass(\"ui-option\")\n                .append(\n                    $(\"<input/>\").attr({\n                        id: id,\n                        type: this.model.get(\"type\"),\n                        name: this.model.id,\n                        value: pair.value\n                    })\n                )\n                .append(\n                    $(\"<label/>\")\n                        .addClass(\"ui-options-label\")\n                        .attr(\"for\", id)\n                        .html(pair.label)\n                );\n        }\n    });\n\n    /** Radio button field **/\n    var Radio = {};\n    Radio.View = BaseIcons.extend({\n        initialize: function(options) {\n            options.type = \"radio\";\n            BaseIcons.prototype.initialize.call(this, options);\n        }\n    });\n\n    /** Checkbox options field **/\n    var Checkbox = {};\n    Checkbox.View = BaseIcons.extend({\n        initialize: function(options) {\n            options.type = \"checkbox\";\n            options.multiple = true;\n            BaseIcons.prototype.initialize.call(this, options);\n        }\n    });\n\n    /** Radio button options field styled as classic buttons **/\n    var RadioButton = {};\n    RadioButton.View = Base.extend({\n        initialize: function(options) {\n            Base.prototype.initialize.call(this, options);\n        },\n\n        /** Set current value */\n        _setValue: function(new_value) {\n            if (new_value !== undefined) {\n                this.$(\"input\").prop(\"checked\", false);\n                this.$(\"label\").removeClass(\"active\");\n                this.$('[value=\"' + new_value + '\"]')\n                    .prop(\"checked\", true)\n                    .closest(\"label\")\n                    .addClass(\"active\");\n            }\n        },\n\n        /** Template for a single option */\n        _templateOption: function(pair) {\n            var $el = $(\"<label/>\").addClass(\"btn btn-default\");\n            pair.icon &&\n                $el.append(\n                    $(\"<i/>\")\n                        .addClass(\"fa\")\n                        .addClass(pair.icon)\n                        .addClass(!pair.label && \"no-padding\")\n                );\n            $el.append(\n                $(\"<input/>\").attr({\n                    type: \"radio\",\n                    name: this.model.id,\n                    value: pair.value\n                })\n            );\n            pair.label && $el.append(pair.label);\n            return $el;\n        },\n\n        /** Main template function */\n        _template: function() {\n            return $(\"<div/>\")\n                .addClass(\"btn-group ui-radiobutton\")\n                .attr(\"data-toggle\", \"buttons\");\n        }\n    });\n\n    return {\n        Base: Base,\n        BaseIcons: BaseIcons,\n        Radio: Radio,\n        RadioButton: RadioButton,\n        Checkbox: Checkbox\n    };\n});\n"]}