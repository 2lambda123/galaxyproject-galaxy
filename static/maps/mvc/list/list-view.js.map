{"version":3,"sources":["mvc/list/list-view.js"],"names":["define","LIST_ITEM","LoadingIndicator","BASE_MVC","_l","logNamespace","ListPanel","Backbone","View","extend","LoggableMixin","_logNamespace","viewClass","ListItemView","collectionClass","Collection","className","fxSpeed","emptyMsg","noneFoundMsg","searchPlaceholder","attributes","options","this","logger","log","_","has","filters","searchFor","selecting","undefined","selected","lastSelected","dragItems","views","collection","_createDefaultCollection","$scrollContainer","title","subtitle","_setUpListeners","off","error","on","model","xhr","msg","details","console","loading","_showLoadingIndicator","loading-done","_hideLoadingIndicator","trigger","_setUpViewListeners","_setUpCollectionListeners","stopListening","listenTo","changes","renderItems","added","length","removed","addItemView","first","removeItemView","ev","lastSelectedView","viewFromModelId","selectRange","view","showSelectors","altKey","id","view:de-selected","without","render","speed","$newRender","_buildNewRender","_setUpBehaviors","_queueNewRender","templates","_renderControls","el","_renderTitle","_renderSubtitle","_renderSearch","$controls","find","$","replaceWith","$where","panel","$el","fadeOut","next","_swapNewRender","fadeIn","empty","attr","append","children","_renderMultiselectActionMenu","$menu","actions","preventDefault","multiselectActions","$newMenu","join","map","html","action","click","parent","func","$actions","$whereTo","$list","$messages","_createItemView","itemModel","$emptyMessage","_renderEmptyMessage","toggle","freeViews","_filterCollection","bind","_filterItem","_attachItems","matchesAll","_setUpItemViewListeners","filter","_destroyItemViews","every","forEach","fn","call","_getItemViewClass","_getItemViewOptions","_destroyItemView","selectable","contains","draggable","self","v","args","Array","dataTransfer","setData","prototype","arguments","_renderItemView$el","apply","json","getSelectedModels","text","JSON","stringify","each","collapse","modelIndex","queue","debug","expandAll","_attachView","collapseAll","_insertIntoListAt","indexOf","is","index","$what","eq","useFx","isUndefined","splice","hide","prepend","after","viewsWhereModel","isMatch","properties","viewA","viewB","indexB","indexA","remove","initialVal","onfirstsearch","viewRange","searchItems","slice","THROTTLE_SELECTOR_FX_AT","searchInput","placeholder","_firstSearch","clearSearch","force","$search","val","deselectAll","event","slideDown","hideSelectors","getSelectedViews","slideUp","hideSelector","toggleSelectors","selectAll","select","deselect","indicator","callback","range","scrollToTop","constructor","scrollTo","scrollToItem","show","scrollPosition","scrollTop","pos","animate","elTemplate","ModelListPanel","events","click .select-all","setModel","toString","oldModelId","wrapTemplate","_setUpModelListeners","modelCollectionKey","initialize","freeModel","controlsTemplate","get","clone","unshift","info","toJSON","controls"],"mappings":"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","file":"../../../scripts/mvc/list/list-view.js","sourcesContent":["define(\n    [\"mvc/list/list-item\", \"ui/loading-indicator\", \"mvc/base-mvc\", \"utils/localization\", \"ui/search-input\"],\n    function(LIST_ITEM, LoadingIndicator, BASE_MVC, _l) {\n        \"use strict\";\n\n        var logNamespace = \"list\";\n        /* ============================================================================\nTODO:\n\n============================================================================ */\n        /** @class View for a list/collection of models and the sub-views of those models.\n *      Sub-views must (at least have the interface if not) inherit from ListItemView.\n *      (For a list panel that also includes some 'container' model (History->HistoryContents)\n *      use ModelWithListPanel)\n *\n *  Allows for:\n *      searching collection/sub-views\n *      selecting/multi-selecting sub-views\n *\n *  Currently used:\n *      for dataset/dataset-choice\n *      as superclass of ModelListPanel\n */\n        var ListPanel = Backbone.View.extend(BASE_MVC.LoggableMixin).extend(\n            /** @lends ListPanel.prototype */ {\n                _logNamespace: logNamespace,\n\n                /** class to use for constructing the sub-views */\n                viewClass: LIST_ITEM.ListItemView,\n                /** class to used for constructing collection of sub-view models */\n                collectionClass: Backbone.Collection,\n\n                tagName: \"div\",\n                className: \"list-panel\",\n\n                /** (in ms) that jquery effects will use */\n                fxSpeed: \"fast\",\n\n                /** string to display when the collection has no contents */\n                emptyMsg: _l(\"This list is empty\"),\n                /** displayed when no items match the search terms */\n                noneFoundMsg: _l(\"No matching items found\"),\n                /** string used for search placeholder */\n                searchPlaceholder: _l(\"search\"),\n\n                // ......................................................................... SET UP\n                /** Set up the view, set up storage, bind listeners to HistoryContents events\n     *  @param {Object} attributes optional settings for the list\n     */\n                initialize: function(attributes, options) {\n                    attributes = attributes || {};\n                    // set the logger if requested\n                    if (attributes.logger) {\n                        this.logger = attributes.logger;\n                    }\n                    this.log(this + \".initialize:\", attributes);\n\n                    // ---- instance vars\n                    /** how quickly should jquery fx run? */\n                    this.fxSpeed = _.has(attributes, \"fxSpeed\") ? attributes.fxSpeed : this.fxSpeed;\n\n                    /** filters for displaying subviews */\n                    this.filters = [];\n                    /** current search terms */\n                    this.searchFor = attributes.searchFor || \"\";\n\n                    /** loading indicator */\n                    // this.indicator = new LoadingIndicator( this.$el );\n\n                    /** currently showing selectors on items? */\n                    this.selecting = attributes.selecting !== undefined ? attributes.selecting : true;\n                    //this.selecting = false;\n\n                    /** cached selected item.model.ids to persist btwn renders */\n                    this.selected = attributes.selected || [];\n                    /** the last selected item.model.id */\n                    this.lastSelected = null;\n\n                    /** are sub-views draggable */\n                    this.dragItems = attributes.dragItems || false;\n\n                    /** list item view class (when passed models) */\n                    this.viewClass = attributes.viewClass || this.viewClass;\n\n                    /** list item views */\n                    this.views = [];\n                    /** list item models */\n                    this.collection = attributes.collection || this._createDefaultCollection();\n\n                    /** filter fns run over collection items to see if they should show in the list */\n                    this.filters = attributes.filters || [];\n\n                    /** override $scrollContainer fn via attributes - fn should return jq for elem to call scrollTo on */\n                    this.$scrollContainer = attributes.$scrollContainer || this.$scrollContainer;\n\n                    /** @type {String} generic title */\n                    this.title = attributes.title || \"\";\n                    /** @type {String} generic subtitle */\n                    this.subtitle = attributes.subtitle || \"\";\n\n                    this._setUpListeners();\n                },\n\n                // ------------------------------------------------------------------------ listeners\n                /** create any event listeners for the list */\n                _setUpListeners: function() {\n                    this.off();\n\n                    //TODO: move errorHandler down into list-view from history-view or\n                    //  pass to global error handler (Galaxy)\n                    this.on({\n                        error: function(model, xhr, options, msg, details) {\n                            //this.errorHandler( model, xhr, options, msg, details );\n                            console.error(model, xhr, options, msg, details);\n                        },\n                        // show hide the loading indicator\n                        loading: function() {\n                            this._showLoadingIndicator(\"loading...\", 40);\n                        },\n                        \"loading-done\": function() {\n                            this._hideLoadingIndicator(40);\n                        }\n                    });\n\n                    // throw the first render up as a diff namespace using once (for outside consumption)\n                    this.once(\"rendered\", function() {\n                        this.trigger(\"rendered:initial\", this);\n                    });\n\n                    this._setUpCollectionListeners();\n                    this._setUpViewListeners();\n                    return this;\n                },\n\n                /** create and return a collection for when none is initially passed */\n                _createDefaultCollection: function() {\n                    // override\n                    return new this.collectionClass([]);\n                },\n\n                /** listening for collection events */\n                _setUpCollectionListeners: function() {\n                    this.log(this + \"._setUpCollectionListeners\", this.collection);\n                    this.stopListening(this.collection);\n\n                    // bubble up error events\n                    this.listenTo(this.collection, {\n                        error: function(model, xhr, options, msg, details) {\n                            this.trigger(\"error\", model, xhr, options, msg, details);\n                        },\n                        update: function(collection, options) {\n                            var changes = options.changes;\n                            // console.info( collection + ', update:', changes, '\\noptions:', options );\n                            // more than one: render everything\n                            if (options.renderAll || changes.added.length + changes.removed.length > 1) {\n                                return this.renderItems();\n                            }\n                            // otherwise, let the single add/remove handlers do it\n                            if (changes.added.length === 1) {\n                                return this.addItemView(_.first(changes.added), collection, options);\n                            }\n                            if (changes.removed.length === 1) {\n                                return this.removeItemView(_.first(changes.removed), collection, options);\n                            }\n                        }\n                    });\n                    return this;\n                },\n\n                /** listening for sub-view events that bubble up with the 'view:' prefix */\n                _setUpViewListeners: function() {\n                    this.log(this + \"._setUpViewListeners\");\n\n                    // shift to select a range\n                    this.on({\n                        \"view:selected\": function(view, ev) {\n                            if (ev && ev.shiftKey && this.lastSelected) {\n                                var lastSelectedView = this.viewFromModelId(this.lastSelected);\n                                if (lastSelectedView) {\n                                    this.selectRange(view, lastSelectedView);\n                                }\n                            } else if (ev && ev.altKey && !this.selecting) {\n                                this.showSelectors();\n                            }\n                            this.selected.push(view.model.id);\n                            this.lastSelected = view.model.id;\n                        },\n\n                        \"view:de-selected\": function(view, ev) {\n                            this.selected = _.without(this.selected, view.model.id);\n                        }\n                    });\n                },\n\n                // ------------------------------------------------------------------------ rendering\n                /** Render this content, set up ui.\n     *  @param {Number or String} speed   the speed of the render\n     */\n                render: function(speed) {\n                    this.log(this + \".render\", speed);\n                    var $newRender = this._buildNewRender();\n                    this._setUpBehaviors($newRender);\n                    this._queueNewRender($newRender, speed);\n                    return this;\n                },\n\n                /** Build a temp div containing the new children for the view's $el. */\n                _buildNewRender: function() {\n                    this.debug(this + \"(ListPanel)._buildNewRender\");\n                    var $newRender = $(this.templates.el({}, this));\n                    this._renderControls($newRender);\n                    this._renderTitle($newRender);\n                    this._renderSubtitle($newRender);\n                    this._renderSearch($newRender);\n                    this.renderItems($newRender);\n                    return $newRender;\n                },\n\n                /** Build a temp div containing the new children for the view's $el. */\n                _renderControls: function($newRender) {\n                    this.debug(this + \"(ListPanel)._renderControls\");\n                    var $controls = $(this.templates.controls({}, this));\n                    $newRender.find(\".controls\").replaceWith($controls);\n                    return $controls;\n                },\n\n                /** return a jQuery object containing the title DOM */\n                _renderTitle: function($where) {\n                    //$where = $where || this.$el;\n                    //$where.find( '.title' ).replaceWith( ... )\n                },\n\n                /** return a jQuery object containing the subtitle DOM (if any) */\n                _renderSubtitle: function($where) {\n                    //$where = $where || this.$el;\n                    //$where.find( '.title' ).replaceWith( ... )\n                },\n\n                /** Fade out the old el, swap in the new contents, then fade in.\n     *  @param {Number or String} speed   jq speed to use for rendering effects\n     *  @fires rendered when rendered\n     */\n                _queueNewRender: function($newRender, speed) {\n                    speed = speed === undefined ? this.fxSpeed : speed;\n                    var panel = this;\n                    panel.log(\"_queueNewRender:\", $newRender, speed);\n\n                    $(panel).queue(\"fx\", [\n                        function(next) {\n                            panel.$el.fadeOut(speed, next);\n                        },\n                        function(next) {\n                            panel._swapNewRender($newRender);\n                            next();\n                        },\n                        function(next) {\n                            panel.$el.fadeIn(speed, next);\n                        },\n                        function(next) {\n                            panel.trigger(\"rendered\", panel);\n                            next();\n                        }\n                    ]);\n                },\n\n                /** empty out the current el, move the $newRender's children in */\n                _swapNewRender: function($newRender) {\n                    this.$el\n                        .empty()\n                        .attr(\"class\", this.className)\n                        .append($newRender.children());\n                    if (this.selecting) {\n                        this.showSelectors(0);\n                    }\n                    return this;\n                },\n\n                /** Set up any behaviors, handlers (ep. plugins) that need to be called when the entire view has been built but\n     *  not attached to the page yet.\n     */\n                _setUpBehaviors: function($where) {\n                    $where = $where || this.$el;\n                    this.$controls($where)\n                        .find(\"[title]\")\n                        .tooltip();\n                    // set up the pupup for actions available when multi selecting\n                    this._renderMultiselectActionMenu($where);\n                    return this;\n                },\n\n                /** render a menu containing the actions available to sets of selected items */\n                _renderMultiselectActionMenu: function($where) {\n                    $where = $where || this.$el;\n                    var $menu = $where.find(\".list-action-menu\"),\n                        actions = this.multiselectActions();\n                    if (!actions.length) {\n                        return $menu.empty();\n                    }\n\n                    var $newMenu = $(\n                        [\n                            '<div class=\"list-action-menu btn-group\">',\n                            '<button class=\"list-action-menu-btn btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">',\n                            _l(\"For all selected\"),\n                            \"...\",\n                            \"</button>\",\n                            '<ul class=\"dropdown-menu pull-right\" role=\"menu\">',\n                            \"</ul>\",\n                            \"</div>\"\n                        ].join(\"\")\n                    );\n                    var $actions = actions.map(function(action) {\n                        var html = ['<li><a href=\"javascript:void(0);\">', action.html, \"</a></li>\"].join(\"\");\n                        return $(html).click(function(ev) {\n                            ev.preventDefault();\n                            return action.func(ev);\n                        });\n                    });\n                    $newMenu.find(\"ul\").append($actions);\n                    $menu.replaceWith($newMenu);\n                    return $newMenu;\n                },\n\n                /** return a list of plain objects used to render multiselect actions menu. Each object should have:\n     *      html: an html string used as the anchor contents\n     *      func: a function called when the anchor is clicked (passed the click event)\n     */\n                multiselectActions: function() {\n                    return [];\n                },\n\n                // ------------------------------------------------------------------------ sub-$element shortcuts\n                /** the scroll container for this panel - can be $el, $el.parent(), or grandparent depending on context */\n                $scrollContainer: function($where) {\n                    // override or set via attributes.$scrollContainer\n                    return ($where || this.$el).parent().parent();\n                },\n                /** convenience selector for the section that displays the list controls */\n                $controls: function($where) {\n                    return ($where || this.$el).find(\"> .controls\");\n                },\n                /** list-items: where the subviews are contained in the view's dom */\n                $list: function($where) {\n                    return ($where || this.$el).find(\"> .list-items\");\n                },\n                /** container where list messages are attached */\n                $messages: function($where) {\n                    //TODO: controls isn't really correct here (only for ModelListPanel)\n                    return ($where || this.$el).find(\"> .controls .messages\");\n                },\n                /** the message displayed when no views can be shown (no views, none matching search) */\n                $emptyMessage: function($where) {\n                    return ($where || this.$el).find(\"> .empty-message\");\n                },\n\n                // ------------------------------------------------------------------------ hda sub-views\n                /** render the subviews for the list's collection */\n                renderItems: function($whereTo) {\n                    $whereTo = $whereTo || this.$el;\n                    var panel = this;\n                    panel.log(this + \".renderItems\", $whereTo);\n\n                    var $list = panel.$list($whereTo);\n                    panel.freeViews();\n                    // console.log( 'views freed' );\n                    //TODO:? cache and re-use views?\n                    var shownModels = panel._filterCollection();\n                    // console.log( 'models filtered:', shownModels );\n\n                    panel.views = shownModels.map(function(itemModel) {\n                        var view = panel._createItemView(itemModel);\n                        return view;\n                    });\n\n                    $list.empty();\n                    // console.log( 'list emptied' );\n                    if (panel.views.length) {\n                        panel._attachItems($whereTo);\n                        // console.log( 'items attached' );\n                    }\n                    panel._renderEmptyMessage($whereTo).toggle(!panel.views.length);\n                    panel.trigger(\"views:ready\", panel.views);\n\n                    // console.log( '------------------------------------------- rendering items' );\n                    return panel.views;\n                },\n\n                /** Filter the collection to only those models that should be currently viewed */\n                _filterCollection: function() {\n                    // override this\n                    var panel = this;\n                    return panel.collection.filter(_.bind(panel._filterItem, panel));\n                },\n\n                /** Should the model be viewable in the current state?\n     *     Checks against this.filters and this.searchFor\n     */\n                _filterItem: function(model) {\n                    // override this\n                    var panel = this;\n                    return (\n                        _.every(\n                            panel.filters.map(function(fn) {\n                                return fn.call(model);\n                            })\n                        ) &&\n                        (!panel.searchFor || model.matchesAll(panel.searchFor))\n                    );\n                },\n\n                /** Create a view for a model and set up it's listeners */\n                _createItemView: function(model) {\n                    var ViewClass = this._getItemViewClass(model);\n                    var options = _.extend(this._getItemViewOptions(model), {\n                        model: model\n                    });\n                    var view = new ViewClass(options);\n                    this._setUpItemViewListeners(view);\n                    return view;\n                },\n\n                /** Free a view for a model. Note: does not remove it from the DOM */\n                _destroyItemView: function(view) {\n                    this.stopListening(view);\n                    this.views = _.without(this.views, view);\n                },\n\n                _destroyItemViews: function(view) {\n                    var self = this;\n                    self.views.forEach(function(v) {\n                        self.stopListening(v);\n                    });\n                    self.views = [];\n                    return self;\n                },\n\n                /** free any sub-views the list has */\n                freeViews: function() {\n                    return this._destroyItemViews();\n                },\n\n                /** Get the bbone view class based on the model */\n                _getItemViewClass: function(model) {\n                    // override this\n                    return this.viewClass;\n                },\n\n                /** Get the options passed to the new view based on the model */\n                _getItemViewOptions: function(model) {\n                    // override this\n                    return {\n                        //logger      : this.logger,\n                        fxSpeed: this.fxSpeed,\n                        expanded: false,\n                        selectable: this.selecting,\n                        selected: _.contains(this.selected, model.id),\n                        draggable: this.dragItems\n                    };\n                },\n\n                /** Set up listeners for new models */\n                _setUpItemViewListeners: function(view) {\n                    var panel = this;\n                    // send all events to the panel, re-namspaceing them with the view prefix\n                    this.listenTo(view, \"all\", function() {\n                        var args = Array.prototype.slice.call(arguments, 0);\n                        args[0] = \"view:\" + args[0];\n                        panel.trigger.apply(panel, args);\n                    });\n\n                    // drag multiple - hijack ev.setData to add all selected items\n                    this.listenTo(\n                        view,\n                        \"draggable:dragstart\",\n                        function(ev, v) {\n                            //TODO: set multiple drag data here\n                            var json = {},\n                                selected = this.getSelectedModels();\n                            if (selected.length) {\n                                json = selected.toJSON();\n                            } else {\n                                json = [v.model.toJSON()];\n                            }\n                            ev.dataTransfer.setData(\"text\", JSON.stringify(json));\n                            //ev.dataTransfer.setDragImage( v.el, 60, 60 );\n                        },\n                        this\n                    );\n\n                    return panel;\n                },\n\n                /** Attach views in this.views to the model based on $whereTo */\n                _attachItems: function($whereTo) {\n                    var self = this;\n                    // console.log( '_attachItems:', $whereTo, this.$list( $whereTo ) );\n                    //ASSUMES: $list has been emptied\n                    this.$list($whereTo).append(\n                        this.views.map(function(view) {\n                            return self._renderItemView$el(view);\n                        })\n                    );\n                    return this;\n                },\n\n                /** get a given subview's $el (or whatever may wrap it) and return it */\n                _renderItemView$el: function(view) {\n                    // useful to wrap and override\n                    return view.render(0).$el;\n                },\n\n                /** render the empty/none-found message */\n                _renderEmptyMessage: function($whereTo) {\n                    this.debug(\"_renderEmptyMessage\", $whereTo, this.searchFor);\n                    var text = this.searchFor ? this.noneFoundMsg : this.emptyMsg;\n                    return this.$emptyMessage($whereTo).text(text);\n                },\n\n                /** expand all item views */\n                expandAll: function() {\n                    _.each(this.views, function(view) {\n                        view.expand();\n                    });\n                },\n\n                /** collapse all item views */\n                collapseAll: function() {\n                    _.each(this.views, function(view) {\n                        view.collapse();\n                    });\n                },\n\n                // ------------------------------------------------------------------------ collection/views syncing\n                /** Add a view (if the model should be viewable) to the panel */\n                addItemView: function(model, collection, options) {\n                    // console.log( this + '.addItemView:', model );\n                    var panel = this;\n                    // get the index of the model in the list of filtered models shown by this list\n                    // in order to insert the view in the proper place\n                    //TODO:? potentially expensive\n                    var modelIndex = panel._filterCollection().indexOf(model);\n                    if (modelIndex === -1) {\n                        return undefined;\n                    }\n                    var view = panel._createItemView(model);\n                    // console.log( 'adding and rendering:', modelIndex, view.toString() );\n\n                    $(view).queue(\"fx\", [\n                        function(next) {\n                            // hide the empty message first if only view\n                            if (panel.$emptyMessage().is(\":visible\")) {\n                                panel.$emptyMessage().fadeOut(panel.fxSpeed, next);\n                            } else {\n                                next();\n                            }\n                        },\n                        function(next) {\n                            panel._attachView(view, modelIndex);\n                            next();\n                        }\n                    ]);\n                    return view;\n                },\n\n                /** internal fn to add view (to both panel.views and panel.$list) */\n                _attachView: function(view, modelIndex, useFx) {\n                    // console.log( this + '._attachView:', view, modelIndex, useFx );\n                    useFx = _.isUndefined(useFx) ? true : useFx;\n                    modelIndex = modelIndex || 0;\n                    var panel = this;\n\n                    // use the modelIndex to splice into views and insert at the proper index in the DOM\n                    panel.views.splice(modelIndex, 0, view);\n                    panel._insertIntoListAt(modelIndex, panel._renderItemView$el(view).hide());\n\n                    panel.trigger(\"view:attached\", view);\n                    if (useFx) {\n                        view.$el.slideDown(panel.fxSpeed, function() {\n                            panel.trigger(\"view:attached:rendered\");\n                        });\n                    } else {\n                        view.$el.show();\n                        panel.trigger(\"view:attached:rendered\");\n                    }\n                    return view;\n                },\n\n                /** insert a jq object as a child of list-items at the specified *DOM index* */\n                _insertIntoListAt: function(index, $what) {\n                    // console.log( this + '._insertIntoListAt:', index, $what );\n                    var $list = this.$list();\n                    if (index === 0) {\n                        $list.prepend($what);\n                    } else {\n                        $list\n                            .children()\n                            .eq(index - 1)\n                            .after($what);\n                    }\n                    return $what;\n                },\n\n                /** Remove a view from the panel (if found) */\n                removeItemView: function(model, collection, options) {\n                    var panel = this;\n                    var view = _.find(panel.views, function(v) {\n                        return v.model === model;\n                    });\n                    if (!view) {\n                        return undefined;\n                    }\n                    panel.views = _.without(panel.views, view);\n                    panel.trigger(\"view:removed\", view);\n\n                    // potentially show the empty message if no views left\n                    // use anonymous queue here - since remove can happen multiple times\n                    $({}).queue(\"fx\", [\n                        function(next) {\n                            view.$el.fadeOut(panel.fxSpeed, next);\n                        },\n                        function(next) {\n                            view.remove();\n                            panel.trigger(\"view:removed:rendered\");\n                            if (!panel.views.length) {\n                                panel._renderEmptyMessage().fadeIn(panel.fxSpeed, next);\n                            } else {\n                                next();\n                            }\n                        }\n                    ]);\n                    return view;\n                },\n\n                /** get views based on model.id */\n                viewFromModelId: function(id) {\n                    return _.find(this.views, function(v) {\n                        return v.model.id === id;\n                    });\n                },\n\n                /** get views based on model */\n                viewFromModel: function(model) {\n                    return model ? this.viewFromModelId(model.id) : undefined;\n                },\n\n                /** get views based on model properties */\n                viewsWhereModel: function(properties) {\n                    return this.views.filter(function(view) {\n                        return _.isMatch(view.model.attributes, properties);\n                    });\n                },\n\n                /** A range of views between (and including) viewA and viewB */\n                viewRange: function(viewA, viewB) {\n                    if (viewA === viewB) {\n                        return viewA ? [viewA] : [];\n                    }\n\n                    var indexA = this.views.indexOf(viewA),\n                        indexB = this.views.indexOf(viewB);\n\n                    // handle not found\n                    if (indexA === -1 || indexB === -1) {\n                        if (indexA === indexB) {\n                            return [];\n                        }\n                        return indexA === -1 ? [viewB] : [viewA];\n                    }\n                    // reverse if indeces are\n                    //note: end inclusive\n                    return indexA < indexB\n                        ? this.views.slice(indexA, indexB + 1)\n                        : this.views.slice(indexB, indexA + 1);\n                },\n\n                // ------------------------------------------------------------------------ searching\n                /** render a search input for filtering datasets shown\n     *      (see SearchableMixin in base-mvc for implementation of the actual searching)\n     *      return will start the search\n     *      esc will clear the search\n     *      clicking the clear button will clear the search\n     *      uses searchInput in ui.js\n     */\n                _renderSearch: function($where) {\n                    $where.find(\".controls .search-input\").searchInput({\n                        placeholder: this.searchPlaceholder,\n                        initialVal: this.searchFor,\n                        onfirstsearch: _.bind(this._firstSearch, this),\n                        onsearch: _.bind(this.searchItems, this),\n                        onclear: _.bind(this.clearSearch, this)\n                    });\n                    return $where;\n                },\n\n                /** What to do on the first search entered */\n                _firstSearch: function(searchFor) {\n                    // override to load model details if necc.\n                    this.log(\"onFirstSearch\", searchFor);\n                    return this.searchItems(searchFor);\n                },\n\n                /** filter view list to those that contain the searchFor terms */\n                searchItems: function(searchFor, force) {\n                    this.log(\"searchItems\", searchFor, this.searchFor, force);\n                    if (!force && this.searchFor === searchFor) {\n                        return this;\n                    }\n                    this.searchFor = searchFor;\n                    this.renderItems();\n                    this.trigger(\"search:searching\", searchFor, this);\n                    var $search = this.$(\"> .controls .search-query\");\n                    if ($search.val() !== searchFor) {\n                        $search.val(searchFor);\n                    }\n                    return this;\n                },\n\n                /** clear the search filters and show all views that are normally shown */\n                clearSearch: function(searchFor) {\n                    //this.log( 'onSearchClear', this );\n                    this.searchFor = \"\";\n                    this.trigger(\"search:clear\", this);\n                    this.$(\"> .controls .search-query\").val(\"\");\n                    this.renderItems();\n                    return this;\n                },\n\n                // ------------------------------------------------------------------------ selection\n                /** @type Integer when the number of list item views is >= to this, don't animate selectors */\n                THROTTLE_SELECTOR_FX_AT: 20,\n\n                /** show selectors on all visible itemViews and associated controls */\n                showSelectors: function(speed) {\n                    speed = speed !== undefined ? speed : this.fxSpeed;\n                    this.selecting = true;\n                    this.$(\".list-actions\").slideDown(speed);\n                    speed = this.views.length >= this.THROTTLE_SELECTOR_FX_AT ? 0 : speed;\n                    _.each(this.views, function(view) {\n                        view.showSelector(speed);\n                    });\n                    //this.selected = [];\n                    //this.lastSelected = null;\n                },\n\n                /** hide selectors on all visible itemViews and associated controls */\n                hideSelectors: function(speed) {\n                    speed = speed !== undefined ? speed : this.fxSpeed;\n                    this.selecting = false;\n                    this.$(\".list-actions\").slideUp(speed);\n                    speed = this.views.length >= this.THROTTLE_SELECTOR_FX_AT ? 0 : speed;\n                    _.each(this.views, function(view) {\n                        view.hideSelector(speed);\n                    });\n                    this.selected = [];\n                    this.lastSelected = null;\n                },\n\n                /** show or hide selectors on all visible itemViews and associated controls */\n                toggleSelectors: function() {\n                    if (!this.selecting) {\n                        this.showSelectors();\n                    } else {\n                        this.hideSelectors();\n                    }\n                },\n\n                /** select all visible items */\n                selectAll: function(event) {\n                    _.each(this.views, function(view) {\n                        view.select(event);\n                    });\n                },\n\n                /** deselect all visible items */\n                deselectAll: function(event) {\n                    this.lastSelected = null;\n                    _.each(this.views, function(view) {\n                        view.deselect(event);\n                    });\n                },\n\n                /** select a range of datasets between A and B */\n                selectRange: function(viewA, viewB) {\n                    var range = this.viewRange(viewA, viewB);\n                    _.each(range, function(view) {\n                        view.select();\n                    });\n                    return range;\n                },\n\n                /** return an array of all currently selected itemViews */\n                getSelectedViews: function() {\n                    return _.filter(this.views, function(v) {\n                        return v.selected;\n                    });\n                },\n\n                /** return a collection of the models of all currenly selected items */\n                getSelectedModels: function() {\n                    // console.log( '(getSelectedModels)' );\n                    return new this.collection.constructor(\n                        _.map(this.getSelectedViews(), function(view) {\n                            return view.model;\n                        })\n                    );\n                },\n\n                // ------------------------------------------------------------------------ loading indicator\n                /** hide the $el and display a loading indicator (in the $el's parent) when loading new data */\n                _showLoadingIndicator: function(msg, speed, callback) {\n                    this.debug(\"_showLoadingIndicator\", this.indicator, msg, speed, callback);\n                    speed = speed !== undefined ? speed : this.fxSpeed;\n                    if (!this.indicator) {\n                        this.indicator = new LoadingIndicator(this.$el);\n                        this.debug(\"\\t created\", this.indicator);\n                    }\n                    if (!this.$el.is(\":visible\")) {\n                        this.indicator.show(0, callback);\n                    } else {\n                        this.$el.fadeOut(speed);\n                        this.indicator.show(msg, speed, callback);\n                    }\n                },\n\n                /** hide the loading indicator */\n                _hideLoadingIndicator: function(speed, callback) {\n                    this.debug(\"_hideLoadingIndicator\", this.indicator, speed, callback);\n                    speed = speed !== undefined ? speed : this.fxSpeed;\n                    if (this.indicator) {\n                        this.indicator.hide(speed, callback);\n                    }\n                },\n\n                // ------------------------------------------------------------------------ scrolling\n                /** get the current scroll position of the panel in its parent */\n                scrollPosition: function() {\n                    return this.$scrollContainer().scrollTop();\n                },\n\n                /** set the current scroll position of the panel in its parent */\n                scrollTo: function(pos, speed) {\n                    speed = speed || 0;\n                    this.$scrollContainer().animate({ scrollTop: pos }, speed);\n                    return this;\n                },\n\n                /** Scrolls the panel to the top. */\n                scrollToTop: function(speed) {\n                    return this.scrollTo(0, speed);\n                },\n\n                /** scroll to the given view in list-items */\n                scrollToItem: function(view, speed) {\n                    if (!view) {\n                        return this;\n                    }\n                    return this;\n                },\n\n                /** Scrolls the panel to show the content with the given id. */\n                scrollToId: function(id, speed) {\n                    return this.scrollToItem(this.viewFromModelId(id), speed);\n                },\n\n                // ------------------------------------------------------------------------ panel events\n                /** event map */\n                events: {\n                    \"click .select-all\": \"selectAll\",\n                    \"click .deselect-all\": \"deselectAll\"\n                },\n\n                // ------------------------------------------------------------------------ misc\n                /** Return a string rep of the panel */\n                toString: function() {\n                    return \"ListPanel(\" + this.collection + \")\";\n                }\n            }\n        );\n\n        // ............................................................................ TEMPLATES\n        /** underscore templates */\n        ListPanel.prototype.templates = (function() {\n            var elTemplate = BASE_MVC.wrapTemplate([\n                // temp container\n                \"<div>\",\n                '<div class=\"controls\"></div>',\n                '<div class=\"list-items\"></div>',\n                '<div class=\"empty-message infomessagesmall\"></div>',\n                \"</div>\"\n            ]);\n\n            var controlsTemplate = BASE_MVC.wrapTemplate([\n                '<div class=\"controls\">',\n                '<div class=\"title\">',\n                '<div class=\"name\"><%- view.title %></div>',\n                \"</div>\",\n                '<div class=\"subtitle\"><%- view.subtitle %></div>',\n                // buttons, controls go here\n                '<div class=\"actions\"></div>',\n                // deleted msg, etc.\n                '<div class=\"messages\"></div>',\n\n                '<div class=\"search\">',\n                '<div class=\"search-input\"></div>',\n                \"</div>\",\n\n                // show when selectors are shown\n                '<div class=\"list-actions\">',\n                '<div class=\"btn-group\">',\n                '<button class=\"select-all btn btn-default\"',\n                'data-mode=\"select\">',\n                _l(\"All\"),\n                \"</button>\",\n                '<button class=\"deselect-all btn btn-default\"',\n                'data-mode=\"select\">',\n                _l(\"None\"),\n                \"</button>\",\n                \"</div>\",\n                '<div class=\"list-action-menu btn-group\">',\n                \"</div>\",\n                \"</div>\",\n                \"</div>\"\n            ]);\n\n            return {\n                el: elTemplate,\n                controls: controlsTemplate\n            };\n        })();\n\n        //=============================================================================\n        /** View for a model that has a sub-collection (e.g. History, DatasetCollection)\n *  Allows:\n *      the model to be reset\n *      auto assign panel.collection to panel.model[ panel.modelCollectionKey ]\n *\n */\n        var ModelListPanel = ListPanel.extend({\n            /** key of attribute in model to assign to this.collection */\n            modelCollectionKey: \"contents\",\n\n            initialize: function(attributes) {\n                ListPanel.prototype.initialize.call(this, attributes);\n                this.selecting = attributes.selecting !== undefined ? attributes.selecting : false;\n\n                this.setModel(this.model, attributes);\n            },\n\n            /** release/free/shutdown old models and set up panel for new models\n     *  @fires new-model with the panel as parameter\n     */\n            setModel: function(model, attributes) {\n                attributes = attributes || {};\n                this.debug(this + \".setModel:\", model, attributes);\n\n                this.freeModel();\n                this.freeViews();\n\n                if (model) {\n                    var oldModelId = this.model ? this.model.get(\"id\") : null;\n\n                    // set up the new model with user, logger, storage, events\n                    this.model = model;\n                    if (this.logger) {\n                        this.model.logger = this.logger;\n                    }\n                    this._setUpModelListeners();\n\n                    //TODO: relation btwn model, collection becoming tangled here\n                    // free the collection, and assign the new collection to either\n                    //  the model[ modelCollectionKey ], attributes.collection, or an empty vanilla collection\n                    this.stopListening(this.collection);\n                    this.collection =\n                        this.model[this.modelCollectionKey] || attributes.collection || this._createDefaultCollection();\n                    this._setUpCollectionListeners();\n\n                    if (oldModelId && model.get(\"id\") !== oldModelId) {\n                        this.trigger(\"new-model\", this);\n                    }\n                }\n                return this;\n            },\n\n            /** free the current model and all listeners for it, free any views for the model */\n            freeModel: function() {\n                // stop/release the previous model, and clear cache to sub-views\n                if (this.model) {\n                    this.stopListening(this.model);\n                    //TODO: see base-mvc\n                    //this.model.free();\n                    //this.model = null;\n                }\n                return this;\n            },\n\n            // ------------------------------------------------------------------------ listening\n            /** listening for model events */\n            _setUpModelListeners: function() {\n                // override\n                this.log(this + \"._setUpModelListeners\", this.model);\n                // bounce model errors up to the panel\n                this.listenTo(\n                    this.model,\n                    \"error\",\n                    function() {\n                        var args = Array.prototype.slice.call(arguments, 0);\n                        //args.unshift( 'model:error' );\n                        args.unshift(\"error\");\n                        this.trigger.apply(this, args);\n                    },\n                    this\n                );\n\n                // debugging\n                if (this.logger) {\n                    this.listenTo(this.model, \"all\", function(event) {\n                        this.info(this + \"(model)\", event, arguments);\n                    });\n                }\n                return this;\n            },\n\n            /** Build a temp div containing the new children for the view's $el.\n     */\n            _renderControls: function($newRender) {\n                this.debug(this + \"(ModelListPanel)._renderControls\");\n                var json = this.model ? this.model.toJSON() : {},\n                    $controls = $(this.templates.controls(json, this));\n                $newRender.find(\".controls\").replaceWith($controls);\n                return $controls;\n            },\n\n            // ------------------------------------------------------------------------ misc\n            /** Return a string rep of the panel */\n            toString: function() {\n                return \"ModelListPanel(\" + this.model + \")\";\n            }\n        });\n\n        // ............................................................................ TEMPLATES\n        /** underscore templates */\n        ModelListPanel.prototype.templates = (function() {\n            var controlsTemplate = BASE_MVC.wrapTemplate([\n                '<div class=\"controls\">',\n                '<div class=\"title\">',\n                //TODO: this is really the only difference - consider factoring titlebar out\n                '<div class=\"name\"><%- model.name %></div>',\n                \"</div>\",\n                '<div class=\"subtitle\"><%- view.subtitle %></div>',\n                '<div class=\"actions\"></div>',\n                '<div class=\"messages\"></div>',\n\n                '<div class=\"search\">',\n                '<div class=\"search-input\"></div>',\n                \"</div>\",\n\n                '<div class=\"list-actions\">',\n                '<div class=\"btn-group\">',\n                '<button class=\"select-all btn btn-default\"',\n                'data-mode=\"select\">',\n                _l(\"All\"),\n                \"</button>\",\n                '<button class=\"deselect-all btn btn-default\"',\n                'data-mode=\"select\">',\n                _l(\"None\"),\n                \"</button>\",\n                \"</div>\",\n                '<div class=\"list-action-menu btn-group\">',\n                \"</div>\",\n                \"</div>\",\n                \"</div>\"\n            ]);\n\n            return _.extend(_.clone(ListPanel.prototype.templates), {\n                controls: controlsTemplate\n            });\n        })();\n\n        //=============================================================================\n        return {\n            ListPanel: ListPanel,\n            ModelListPanel: ModelListPanel\n        };\n    }\n);\n"]}