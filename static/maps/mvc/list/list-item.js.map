{"version":3,"sources":["mvc/list/list-item.js"],"names":["define","BASE_MVC","_l","ExpandableView","Backbone","View","extend","LoggableMixin","_logNamespace","initialize","attributes","expanded","this","log","undefined","fxSpeed","render","speed","$newRender","_buildNewRender","_setUpBehaviors","$","templates","el","model","toJSON","_renderDetails","show","_queueNewRender","view","_swapNewRender","trigger","next","queue","$el","fadeOut","fadeIn","empty","attr","_","isFunction","className","children","$where","tooltip","placement","$newDetails","details","toggleExpanded","expand","collapse","_fetchModelDetails","always","_expand","hasDetails","fetch","$details","replaceWith","slideDown","debug","slideUp","SelectableViewMixin","call","DraggableViewMixin","_setUpListeners","prototype","isSelectable","on","hide","showSelector","_renderWarnings","_renderTitleBar","draggable","append","_renderPrimaryActions","draggableOn","_renderSubtitle","selectable","$warnings","json","each","warnings","templateFn","subtitle","events","click .title-bar","keydown .title-bar","click .selector","_clickTitleBar","event","stopPropagation","_keyDownTitleBar","altKey","toggleSelect","KEYCODE_SPACE","KEYCODE_RETURN","modelString","type","keyCode","toString","ListItemView","wrapTemplate","detailsTemplate","titleBar","FoldoutListItemView","foldoutStyle","foldout","foldoutPanelClass","_getFoldoutPanelOptions","_createFoldoutPanel","_attachFoldout","_getFoldoutPanelClass","options","$whereTo","_expandByDrilldown","listenTo"],"mappings":"aAAAA,QAAQ,eAAgB,sBAAuB,SAASC,EAAUC,GAC9D,IAQIC,EAAiBC,SAASC,KAAKC,OAAOL,EAASM,eAAeD,QAC9DE,cATJ,OAaIC,WAAA,SAAAC,GAEAD,KAAAA,SAAYC,EAAAC,WAAA,EACRC,KAAAC,IAAA,eAAAD,KAAAD,UACAC,KAAKD,aAAWG,IAAhBJ,EAAgBA,QAAhBA,EAAAK,QAAAH,KAAAG,SAKJA,QAAA,OAOAC,OAAQ,SAASC,GACb,IAAIC,EAAaN,KAAKO,kBACtB,OAFJH,KAAQI,gBAASH,GACbL,KAAIM,gBAAaA,EAAKC,GACjBC,MAQTD,gBAAiB,WAAjBA,IAAAA,EAAiBE,EAAAT,KAAAU,UAAAC,GAAAX,KAAWY,MAAAC,SAAAb,OAIpB,OAHJA,KAAAD,UACIO,KAAAA,SAAaG,GAAOC,YAAkBE,KAALE,iBAArCC,QAEIT,GASRU,gBAAiB,SAASV,EAAYD,GAAtCW,IAAAA,EAAAA,KAEe,KADXX,OAAkBH,IAAVG,EAAsBL,KAAKG,QAAUE,IAIzCY,EAAKC,eAAeZ,GADpBD,EAAAA,QAAa,WAAAY,IAEbA,EAAAA,GAAKE,MAAQ,MACV,SAAAC,GACKC,EAARC,IAAcC,QACVlB,EAASe,IAGT,SAASA,GACLH,EAAKC,eAAeZ,GACpBc,KAGAH,SAASO,GAEbP,EAASG,IAATI,OAAenB,EAAAe,IAEXA,SAAAA,GAbRH,EAAAE,QAAA,WAAAF,GAgBHG,QAILF,eAAgB,SAASZ,GAOzB,OAAAN,KAAAsB,IALSG,QACAC,KAAK,QAASC,EAAEC,WAAW5B,KAAK6B,WAAa7B,KAAK6B,YAAc7B,KAAK6B,WAO9ErB,OAAAA,EAAiBsB,aAAjBtB,gBAAiB,SAASuB,IAO1BA,EAAAA,GAAA/B,KAAAsB,KAGIS,KAASA,WAAUC,SAAnBC,UAAA,YAKJnB,SAAAA,SAAgBiB,GAEZ,OADAA,EAAIG,GAAczB,KAAEa,KACfd,KAAAA,eAITM,eAAA,WACA,IAAAoB,EAAAzB,EAAAT,KAAAU,UAAAyB,QAAAnC,KAAAY,MAAAC,SAAAb,OAJI,OADAA,KAAKQ,gBAAgB0B,GACdA,GAaNE,eAAA,SAAAC,GACD,OAAAA,OAAAnC,IAAOmC,GAAPrC,KAAAD,SAAAsC,GAJIrC,KAAKqC,SAELrC,KAAKsC,WAEFtC,MAOXqC,OAAQ,WAOR,IAAApB,EAAAjB,KALI,OAAOiB,EAAKsB,qBAAqBC,OAAO,WACpCvB,EAAKwB,aAObF,mBAAoB,WAOpB,OAAAvC,KAAAY,MAAA8B,aAGQR,OAAAA,OAFClC,KAAAY,MAAA+B,SAML1B,QAAK2B,WACD3B,IAAAA,EAAKE,KADTe,EAAAjB,EAAAH,iBAjJiEG,EAAA2B,WAAAC,YAAAX,GAsJrEjB,EAAAlB,UAAA,EALIkB,EAAK2B,WAAWE,UAAU7B,EAAKd,QAAS,WACpCc,EAAKE,QAAQ,WAAYF,MAa5BqB,SAFD,WAGHtC,KAAA+C,MAAA/C,KAAA,6BAhKL,IAAAiB,EAAAjB,KA4JQiB,EAAKlB,UAAW,EAOxBC,KAAA4C,WAAAI,QAAA/B,EAAAd,QAAA,WACAc,EAAAE,QAAA,YAAAF,QAkBY1B,EAAAA,EAAyBM,OACzBR,EAAAA,MAAS4D,EAAAA,oBAA+BC,EAAxCC,oBACA9D,QAAS8D,MACTtB,UAAKuB,YAGTvD,WAAA,SAAAC,GACAsD,EAAiBC,UAAAxD,WAAWqD,KAAAlD,KAAAF,GACxBT,EAAA4D,oBAAApD,WAAAqD,KAAAlD,KAAAF,GACAT,EACI8D,mBACSG,WAAAA,KAActD,KAAAF,GACnBE,KAAIsD,mBAIHF,gBAAA,WAeT,OAXApD,KAAOuD,GA1B2D,aAiB9D,SAASD,GAYjBA,EACAtD,KAAAS,EAAA,oBAAA+C,OAEQlD,KAAaf,EAAAA,oBAAyBgB,QAG1CD,MAEOA,MAKPf,gBAAe8D,WACX,IAAA/C,EAAiBf,EAAA8D,UAAA9C,gBAAA2C,KAAAlD,MAKpB,OAJGM,EAAKmD,SAAL,aAAAZ,YAAA7C,KAAA0D,mBACHpD,EAAAwB,SAAA,cAAAe,YAAA7C,KAAA2D,mBACGrD,EAAKsD,SAAW,oBAAAC,OAAA7D,KAAA8D,yBAChBxD,EAAKyD,KAAL,0BAAAlB,YAAA7C,KAAAgE,mBACH1D,GAILY,eAAA,SAAAZ,GAMI,OALJoD,EAAiBL,UAAAnC,eAAWgC,KAAAlD,KAAAM,GACpBW,KAAOgD,YACPC,KAAAA,aAAc,GAElBlE,KAAA4D,WACO3C,KAAKP,cAAZV,KAAAsB,KAMJoC,gBAAA,WACAC,IAAAA,EAAiB3D,KACNS,EAAOC,EAAAA,gCAlEoDyD,EAAAlD,EAAAL,MAAAC,SAwElE,OAHJc,EAAAyC,KAAAnD,EAAAP,UAAA2D,SAAA,SAAAC,GACAR,EAAAA,OAAuBrD,EAAA6D,EAAAH,EAAAlD,OAEnBiD,GAIJF,gBAAiB,WACb,OAASvD,EAAAT,KAAKU,UAAU6D,SAASvE,KAAKY,MAAMC,SAAnCb,QAIb8D,sBAAA,WAEI,UAnFkEE,gBAAA,WA6ElE,OAAOvD,EAAET,KAAKU,UAAU6D,SAASvE,KAAKY,MAAMC,SAAUb,QAgBlDwE,QAEIC,mBAAKhB,iBACRiB,qBAAA,mBAJLC,kBAKO,gBAPXC,eAAgB,SAASC,GAYzBA,EAAAC,kBACAC,EAAkBC,QACdhF,KAAAiF,aAAAJ,GACIK,KAAAA,YACAC,KAAAA,gBAOAN,KAAMC,kBAVdC,iBAAkB,SAASF,GAmBnBO,OACGP,GACV,YAAAA,EAAAQ,MAJD,KAzHRR,EAAAS,SA0HkB,KA1HlBT,EAAAS,UAiIAtF,KAAAoC,iBACAyC,EAAAC,mBACuBpE,IAUf6E,SAAA,WAjBI,MAAO,iBAkBXvF,KAAAY,MACAZ,KAAAY,MAAA,GAAA,cAnB2C,QA8BvC4E,EAAAnC,UAAA3C,WAyDJC,GAxDItB,EAAAoG,cACA,6BArBJ,+BAkCA,yBA9BA,6CAiCAC,SAEA,sCA/BA,gCAoCArB,8BACAsB,WAgCItB,YACHsB,SA7DkBtG,EAASoG,cAGxB,6CAEA,mCACA,sBACA,gDACA,SACA,+BACA,UAmCRG,WAiBIrB,SA/CmBlF,EAASoG,cAmChCI,iCAaI1D,QA3CkB9C,EAASoG,cAE3B,iCAwDJ,IAAAG,EAAAJ,EAAA9F,QAGImG,aAEIC,UACsBC,kBAH1B,KAYAlG,WAAA,SAAAC,GACYiG,cAAZ/F,KAAO6F,eAjD+B7F,KAAAD,UAAA,GAoD1CC,KAAA6F,aAAA/F,EAAA+F,cAAA7F,KAAA6F,aACAG,KAAAA,kBAAyBlG,EAAAiG,mBAAW/F,KAAA+F,kBAE5BP,EAAAnC,UAAAxD,WAAAqD,KAAAlD,KAAAF,GACA+F,KAAAA,QAAAA,KAAcI,uBA/BtBnF,eAAgB,WAoChB,GAAA,cAAAd,KAAA6F,aACAK,OAAAA,IAEI,IAAAhE,EAAe4D,EAAAzC,UAAfvC,eAAAoC,KAAAlD,MACA8F,OAAAA,KAAUI,eAAe1C,KAAzBsC,QAAA5D,IAIJ+D,oBAAA,WACA5D,IAAQzB,EAAAZ,KAAAY,MACAK,EAAJjB,KAAAmG,sBAAAvF,GACAwF,EAAY7D,KAAAA,wBAA4B3B,GAMvC,OALYiF,IAAAA,EACL5E,EAAAA,OAAKwB,GACF7B,MAAIK,MA5BnBkF,sBAAuB,WAEnB,OAAOnG,KAAK+F,mBAuCZ9E,wBAAmB6E,WACf7E,OAEJA,aAAajB,KAAA6F,aAChB1F,QAAAH,KAAAG,UAKLyF,eAAoBvC,SAApByC,EAA8BpF,GA/BtB,OAgCAgF,EAAAA,GAAkBrG,KAASoG,EAAAA,cAGvBzF,KAAA8F,QAAAA,EAAA1F,OAAA,GACA0F,EAEJrF,EAAA,eANJ+C,OAhCW6C,EAASxC,OAAOiC,EAAQxE,MA+BvCe,OAAA,WA1BQ,IAAIpB,EAAOjB,KAyCnB,OAAAiB,EAAAsB,qBAAAC,OAAA,WACO,YAAAvB,EAAA4E,aACHtG,EAAgBA,UADb,cAEWiG,EAAAA,cACdI,EAAAA,wBA/BAU,mBAAoB,WAChB,IAAIrF,EAAOjB,KAEXiB,EAAKsF,SAAStF,EAAK6E,QAAS,QAAS,WACjC7E,EAAKE,QAAQ,sBAAuBF,EAAMA,EAAK6E,WAEnD7E,EAAKE,QAAQ,qBAAsBF,EAAMA,EAAK6E,YAsBtD,OAhBAF,EAAoBvC,UAAU3C,UAAa,WACvC,IAAIgF,EAAkBrG,EAASoG,cAEvB,wBAEA,UAEJ,cAGJ,OAAO9D,EAAEjC,UAAW8F,EAAanC,UAAU3C,WACvCyB,QAASuD,IAX0B,IAiBvCnG,eAAgBA,EAChBiG,aAAcA,EACdI,oBAAqBA","file":"../../../scripts/mvc/list/list-item.js","sourcesContent":["define([\"mvc/base-mvc\", \"utils/localization\"], function(BASE_MVC, _l) {\n    \"use strict\";\n\n    var logNamespace = \"list\";\n    //==============================================================================\n    /** A view which, when first rendered, shows only summary data/attributes, but\n *      can be expanded to show further details (and optionally fetch those\n *      details from the server).\n */\n    var ExpandableView = Backbone.View.extend(BASE_MVC.LoggableMixin).extend({\n        _logNamespace: logNamespace,\n\n        //TODO: Although the reasoning behind them is different, this shares a lot with HiddenUntilActivated above: combine them\n        //PRECONDITION: model must have method hasDetails\n        //PRECONDITION: subclasses must have templates.el and templates.details\n\n        initialize: function(attributes) {\n            /** are the details of this view expanded/shown or not? */\n            this.expanded = attributes.expanded || false;\n            this.log(\"\\t expanded:\", this.expanded);\n            this.fxSpeed = attributes.fxSpeed !== undefined ? attributes.fxSpeed : this.fxSpeed;\n        },\n\n        // ........................................................................ render main\n        /** jq fx speed */\n        fxSpeed: \"fast\",\n\n        /** Render this content, set up ui.\n     *  @param {Number or String} speed   the speed of the render\n     */\n        render: function(speed) {\n            var $newRender = this._buildNewRender();\n            this._setUpBehaviors($newRender);\n            this._queueNewRender($newRender, speed);\n            return this;\n        },\n\n        /** Build a temp div containing the new children for the view's $el.\n     *      If the view is already expanded, build the details as well.\n     */\n        _buildNewRender: function() {\n            // create a new render using a skeleton template, render title buttons, render body, and set up events, etc.\n            var $newRender = $(this.templates.el(this.model.toJSON(), this));\n            if (this.expanded) {\n                this.$details($newRender).replaceWith(this._renderDetails().show());\n            }\n            return $newRender;\n        },\n\n        /** Fade out the old el, swap in the new contents, then fade in.\n     *  @param {Number or String} speed   jq speed to use for rendering effects\n     *  @fires rendered when rendered\n     */\n        _queueNewRender: function($newRender, speed) {\n            speed = speed === undefined ? this.fxSpeed : speed;\n            var view = this;\n\n            if (speed === 0) {\n                view._swapNewRender($newRender);\n                view.trigger(\"rendered\", view);\n            } else {\n                $(view).queue(\"fx\", [\n                    function(next) {\n                        view.$el.fadeOut(speed, next);\n                    },\n                    function(next) {\n                        view._swapNewRender($newRender);\n                        next();\n                    },\n                    function(next) {\n                        view.$el.fadeIn(speed, next);\n                    },\n                    function(next) {\n                        view.trigger(\"rendered\", view);\n                        next();\n                    }\n                ]);\n            }\n        },\n\n        /** empty out the current el, move the $newRender's children in */\n        _swapNewRender: function($newRender) {\n            return this.$el\n                .empty()\n                .attr(\"class\", _.isFunction(this.className) ? this.className() : this.className)\n                .append($newRender.children());\n        },\n\n        /** set up js behaviors, event handlers for elements within the given container\n     *  @param {jQuery} $container jq object that contains the elements to process (defaults to this.$el)\n     */\n        _setUpBehaviors: function($where) {\n            $where = $where || this.$el;\n            // set up canned behavior on children (bootstrap, popupmenus, editable_text, etc.)\n            //make_popup_menus( $where );\n            $where.find(\"[title]\").tooltip({ placement: \"bottom\" });\n        },\n\n        // ......................................................................... details\n        /** shortcut to details DOM (as jQ) */\n        $details: function($where) {\n            $where = $where || this.$el;\n            return $where.find(\"> .details\");\n        },\n\n        /** build the DOM for the details and set up behaviors on it */\n        _renderDetails: function() {\n            var $newDetails = $(this.templates.details(this.model.toJSON(), this));\n            this._setUpBehaviors($newDetails);\n            return $newDetails;\n        },\n\n        // ......................................................................... expansion/details\n        /** Show or hide the details\n     *  @param {Boolean} expand if true, expand; if false, collapse\n     */\n        toggleExpanded: function(expand) {\n            expand = expand === undefined ? !this.expanded : expand;\n            if (expand) {\n                this.expand();\n            } else {\n                this.collapse();\n            }\n            return this;\n        },\n\n        /** Render and show the full, detailed body of this view including extra data and controls.\n     *      note: if the model does not have detailed data, fetch that data before showing the body\n     *  @fires expanded when a body has been expanded\n     */\n        expand: function() {\n            var view = this;\n            return view._fetchModelDetails().always(function() {\n                view._expand();\n            });\n        },\n\n        /** Check for model details and, if none, fetch them.\n     *  @returns {jQuery.promise} the model.fetch.xhr if details are being fetched, an empty promise if not\n     */\n        _fetchModelDetails: function() {\n            if (!this.model.hasDetails()) {\n                return this.model.fetch();\n            }\n            return jQuery.when();\n        },\n\n        /** Inner fn called when expand (public) has fetched the details */\n        _expand: function() {\n            var view = this,\n                $newDetails = view._renderDetails();\n            view.$details().replaceWith($newDetails);\n            // needs to be set after the above or the slide will not show\n            view.expanded = true;\n            view.$details().slideDown(view.fxSpeed, function() {\n                view.trigger(\"expanded\", view);\n            });\n        },\n\n        /** Hide the body/details of an HDA.\n     *  @fires collapsed when a body has been collapsed\n     */\n        collapse: function() {\n            this.debug(this + \"(ExpandableView).collapse\");\n            var view = this;\n            view.expanded = false;\n            this.$details().slideUp(view.fxSpeed, function() {\n                view.trigger(\"collapsed\", view);\n            });\n        }\n    });\n\n    //==============================================================================\n    /** A view that is displayed in some larger list/grid/collection.\n *      Inherits from Expandable, Selectable, Draggable.\n *  The DOM contains warnings, a title bar, and a series of primary action controls.\n *      Primary actions are meant to be easily accessible item functions (such as delete)\n *      that are rendered in the title bar.\n *\n *  Details are rendered when the user clicks the title bar or presses enter/space when\n *      the title bar is in focus.\n *\n *  Designed as a base class for history panel contents - but usable elsewhere (I hope).\n */\n    var ListItemView = ExpandableView.extend(\n        BASE_MVC.mixin(BASE_MVC.SelectableViewMixin, BASE_MVC.DraggableViewMixin, {\n            tagName: \"div\",\n            className: \"list-item\",\n\n            /** Set up the base class and all mixins */\n            initialize: function(attributes) {\n                ExpandableView.prototype.initialize.call(this, attributes);\n                BASE_MVC.SelectableViewMixin.initialize.call(this, attributes);\n                BASE_MVC.DraggableViewMixin.initialize.call(this, attributes);\n                this._setUpListeners();\n            },\n\n            /** event listeners */\n            _setUpListeners: function() {\n                // hide the primary actions in the title bar when selectable and narrow\n                this.on(\n                    \"selectable\",\n                    function(isSelectable) {\n                        if (isSelectable) {\n                            this.$(\".primary-actions\").hide();\n                        } else {\n                            this.$(\".primary-actions\").show();\n                        }\n                    },\n                    this\n                );\n                return this;\n            },\n\n            // ........................................................................ rendering\n            /** In this override, call methods to build warnings, titlebar and primary actions */\n            _buildNewRender: function() {\n                var $newRender = ExpandableView.prototype._buildNewRender.call(this);\n                $newRender.children(\".warnings\").replaceWith(this._renderWarnings());\n                $newRender.children(\".title-bar\").replaceWith(this._renderTitleBar());\n                $newRender.children(\".primary-actions\").append(this._renderPrimaryActions());\n                $newRender.find(\"> .title-bar .subtitle\").replaceWith(this._renderSubtitle());\n                return $newRender;\n            },\n\n            /** In this override, render the selector controls and set up dragging before the swap */\n            _swapNewRender: function($newRender) {\n                ExpandableView.prototype._swapNewRender.call(this, $newRender);\n                if (this.selectable) {\n                    this.showSelector(0);\n                }\n                if (this.draggable) {\n                    this.draggableOn();\n                }\n                return this.$el;\n            },\n\n            /** Render any warnings the item may need to show (e.g. \"I'm deleted\") */\n            _renderWarnings: function() {\n                var view = this,\n                    $warnings = $('<div class=\"warnings\"></div>'),\n                    json = view.model.toJSON();\n                //TODO:! unordered (map)\n                _.each(view.templates.warnings, function(templateFn) {\n                    $warnings.append($(templateFn(json, view)));\n                });\n                return $warnings;\n            },\n\n            /** Render the title bar (the main/exposed SUMMARY dom element) */\n            _renderTitleBar: function() {\n                return $(this.templates.titleBar(this.model.toJSON(), this));\n            },\n\n            /** Return an array of jQ objects containing common/easily-accessible item controls */\n            _renderPrimaryActions: function() {\n                // override this\n                return [];\n            },\n\n            /** Render the title bar (the main/exposed SUMMARY dom element) */\n            _renderSubtitle: function() {\n                return $(this.templates.subtitle(this.model.toJSON(), this));\n            },\n\n            // ......................................................................... events\n            /** event map */\n            events: {\n                // expand the body when the title is clicked or when in focus and space or enter is pressed\n                \"click .title-bar\": \"_clickTitleBar\",\n                \"keydown .title-bar\": \"_keyDownTitleBar\",\n                \"click .selector\": \"toggleSelect\"\n            },\n\n            /** expand when the title bar is clicked */\n            _clickTitleBar: function(event) {\n                event.stopPropagation();\n                if (event.altKey) {\n                    this.toggleSelect(event);\n                    if (!this.selectable) {\n                        this.showSelector();\n                    }\n                } else {\n                    this.toggleExpanded();\n                }\n            },\n\n            /** expand when the title bar is in focus and enter or space is pressed */\n            _keyDownTitleBar: function(event) {\n                // bail (with propagation) if keydown and not space or enter\n                var KEYCODE_SPACE = 32,\n                    KEYCODE_RETURN = 13;\n                if (\n                    event &&\n                    event.type === \"keydown\" &&\n                    (event.keyCode === KEYCODE_SPACE || event.keyCode === KEYCODE_RETURN)\n                ) {\n                    this.toggleExpanded();\n                    event.stopPropagation();\n                    return false;\n                }\n                return true;\n            },\n\n            // ......................................................................... misc\n            /** String representation */\n            toString: function() {\n                var modelString = this.model ? this.model + \"\" : \"(no model)\";\n                return \"ListItemView(\" + modelString + \")\";\n            }\n        })\n    );\n\n    // ............................................................................ TEMPLATES\n    /** underscore templates */\n    ListItemView.prototype.templates = (function() {\n        var elTemplato = BASE_MVC.wrapTemplate([\n            '<div class=\"list-element\">',\n            // errors, messages, etc.\n            '<div class=\"warnings\"></div>',\n\n            // multi-select checkbox\n            '<div class=\"selector\">',\n            '<span class=\"fa fa-2x fa-square-o\"></span>',\n            \"</div>\",\n            // space for title bar buttons - gen. floated to the right\n            '<div class=\"primary-actions\"></div>',\n            '<div class=\"title-bar\"></div>',\n\n            // expandable area for more details\n            '<div class=\"details\"></div>',\n            \"</div>\"\n        ]);\n\n        var warnings = {};\n\n        var titleBarTemplate = BASE_MVC.wrapTemplate(\n            [\n                // adding a tabindex here allows focusing the title bar and the use of keydown to expand the dataset display\n                '<div class=\"title-bar clear\" tabindex=\"0\">',\n                //TODO: prob. belongs in dataset-list-item\n                '<span class=\"state-icon\"></span>',\n                '<div class=\"title\">',\n                '<span class=\"name\"><%- element.name %></span>',\n                \"</div>\",\n                '<div class=\"subtitle\"></div>',\n                \"</div>\"\n            ],\n            \"element\"\n        );\n\n        var subtitleTemplate = BASE_MVC.wrapTemplate([\n            // override this\n            '<div class=\"subtitle\"></div>'\n        ]);\n\n        var detailsTemplate = BASE_MVC.wrapTemplate([\n            // override this\n            '<div class=\"details\"></div>'\n        ]);\n\n        return {\n            el: elTemplato,\n            warnings: warnings,\n            titleBar: titleBarTemplate,\n            subtitle: subtitleTemplate,\n            details: detailsTemplate\n        };\n    })();\n\n    //==============================================================================\n    /** A view that is displayed in some larger list/grid/collection.\n *  *AND* can display some sub-list of it's own when expanded (e.g. dataset collections).\n *  This list will 'foldout' when the item is expanded depending on this.foldoutStyle:\n *      If 'foldout': will expand vertically to show the nested list\n *      If 'drilldown': will overlay the parent list\n *\n *  Inherits from ListItemView.\n *\n *  _renderDetails does the work of creating this.details: a sub-view that shows the nested list\n */\n    var FoldoutListItemView = ListItemView.extend({\n        /** If 'foldout': show the sub-panel inside the expanded item\n     *  If 'drilldown': only fire events and handle by pub-sub\n     *      (allow the panel containing this item to attach it, hide itself, etc.)\n     */\n        foldoutStyle: \"foldout\",\n        /** Panel view class to instantiate for the sub-panel */\n        foldoutPanelClass: null,\n\n        /** override to:\n     *      add attributes foldoutStyle and foldoutPanelClass for config poly\n     *      disrespect attributes.expanded if drilldown\n     */\n        initialize: function(attributes) {\n            if (this.foldoutStyle === \"drilldown\") {\n                this.expanded = false;\n            }\n            this.foldoutStyle = attributes.foldoutStyle || this.foldoutStyle;\n            this.foldoutPanelClass = attributes.foldoutPanelClass || this.foldoutPanelClass;\n\n            ListItemView.prototype.initialize.call(this, attributes);\n            this.foldout = this._createFoldoutPanel();\n        },\n\n        /** in this override, attach the foldout panel when rendering details */\n        _renderDetails: function() {\n            if (this.foldoutStyle === \"drilldown\") {\n                return $();\n            }\n            var $newDetails = ListItemView.prototype._renderDetails.call(this);\n            return this._attachFoldout(this.foldout, $newDetails);\n        },\n\n        /** In this override, handle collection expansion. */\n        _createFoldoutPanel: function() {\n            var model = this.model;\n            var FoldoutClass = this._getFoldoutPanelClass(model),\n                options = this._getFoldoutPanelOptions(model),\n                foldout = new FoldoutClass(\n                    _.extend(options, {\n                        model: model\n                    })\n                );\n            return foldout;\n        },\n\n        /** Stub to return proper foldout panel class */\n        _getFoldoutPanelClass: function() {\n            // override\n            return this.foldoutPanelClass;\n        },\n\n        /** Stub to return proper foldout panel options */\n        _getFoldoutPanelOptions: function() {\n            return {\n                // propagate foldout style down\n                foldoutStyle: this.foldoutStyle,\n                fxSpeed: this.fxSpeed\n            };\n        },\n\n        /** Render the foldout panel inside the view, hiding controls */\n        _attachFoldout: function(foldout, $whereTo) {\n            $whereTo = $whereTo || this.$(\"> .details\");\n            this.foldout = foldout.render(0);\n            foldout.$(\"> .controls\").hide();\n            return $whereTo.append(foldout.$el);\n        },\n\n        /** In this override, branch on foldoutStyle to show expanded */\n        expand: function() {\n            var view = this;\n            return view._fetchModelDetails().always(function() {\n                if (view.foldoutStyle === \"foldout\") {\n                    view._expand();\n                } else if (view.foldoutStyle === \"drilldown\") {\n                    view._expandByDrilldown();\n                }\n            });\n        },\n\n        /** For drilldown, set up close handler and fire expanded:drilldown\n     *      containing views can listen to this and handle other things\n     *      (like hiding themselves) by listening for expanded/collapsed:drilldown\n     */\n        _expandByDrilldown: function() {\n            var view = this;\n            // attachment and rendering done by listener\n            view.listenTo(view.foldout, \"close\", function() {\n                view.trigger(\"collapsed:drilldown\", view, view.foldout);\n            });\n            view.trigger(\"expanded:drilldown\", view, view.foldout);\n        }\n    });\n\n    // ............................................................................ TEMPLATES\n    /** underscore templates */\n    FoldoutListItemView.prototype.templates = (function() {\n        var detailsTemplate = BASE_MVC.wrapTemplate(\n            [\n                '<div class=\"details\">',\n                // override with more info (that goes above the panel)\n                \"</div>\"\n            ],\n            \"collection\"\n        );\n\n        return _.extend({}, ListItemView.prototype.templates, {\n            details: detailsTemplate\n        });\n    })();\n\n    //==============================================================================\n    return {\n        ExpandableView: ExpandableView,\n        ListItemView: ListItemView,\n        FoldoutListItemView: FoldoutListItemView\n    };\n});\n"]}