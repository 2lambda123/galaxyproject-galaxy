{"version":3,"sources":["mvc/dataset/data.js"],"names":["define","Modal","Frames","mod_icon_btn","DatasetMetadata","Backbone","Model","extend","Dataset","defaults","id","type","name","initialize","this","get","_set_metadata","on","metadata","_","each","keys","attributes","k","indexOf","new_key","split","set","silent","get_metadata","attribute","urlRoot","Galaxy","root","chunk_url","first_data_chunk","prototype","offset","at_eof","options","call","url_viz","get_next_chunk","$","getJSON","self","success","chunk","ck_data","rval","next_chunk","resolve","DatasetCollection","Collection","model","TabularDatasetChunkedView","View","row_count","loading_chunk","$el","expand_to_container","attempt_to_fetch","height","scroll_elt","func","loading_indicator","show","scrolled_to_bottom","when","_renderChunk","then","result","hide","render","attr","append","cellpadding","data_table","header_container","header_row","appendTo","column_names","j","first_chunk","scroll","_renderCell","column_types","colspan","undefined","cell_contents","$cell","index","addClass","length","_renderRow","cells","num_columns","row","slice","join","range","line","find","TopLevelTabularDatasetChunkedView","parents","p","css","EmbeddedTabularDatasetChunkedView","scrollTop","col","chrom","start","end","dataset_id","innerHeight","el","scrollHeight","file_ext","genome_build","modal","frame","array","match","console","search","str","log","title","icon_class","btn_viz","IconButtonView","IconButton","setElement","events","mouseover tr","mouseleave","btn_viz_pars","e","target","parent","children","eq","top","html","position","off","url","isNaN","parseFloat","n","isFinite","is_numeric","gene_region","left","window","createModelAndView","click","add","model_config","param","parent_elt","TabularDataset","createTabularDatasetChunkedView","dataset_config","embedded","view"],"mappings":"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","file":"../../../scripts/mvc/dataset/data.js","sourcesContent":["// Additional dependencies: jQuery, underscore.\ndefine([\"mvc/ui/ui-modal\", \"mvc/ui/ui-frames\", \"mvc/ui/icon-button\"], function(Modal, Frames, mod_icon_btn) {\n    /**\n * Dataset metedata.\n */\n    var DatasetMetadata = Backbone.Model.extend({});\n\n    /**\n * A dataset. In Galaxy, datasets are associated with a history, so\n * this object is also known as a HistoryDatasetAssociation.\n */\n    var Dataset = Backbone.Model.extend({\n        defaults: {\n            id: \"\",\n            type: \"\",\n            name: \"\",\n            hda_ldda: \"hda\",\n            metadata: null\n        },\n\n        initialize: function() {\n            // Metadata can be passed in as a model or a set of attributes; if it's\n            // already a model, there's no need to set metadata.\n            if (!this.get(\"metadata\")) {\n                this._set_metadata();\n            }\n\n            // Update metadata on change.\n            this.on(\"change\", this._set_metadata, this);\n        },\n\n        _set_metadata: function() {\n            var metadata = new DatasetMetadata();\n\n            // Move metadata from dataset attributes to metadata object.\n            _.each(\n                _.keys(this.attributes),\n                function(k) {\n                    if (k.indexOf(\"metadata_\") === 0) {\n                        // Found metadata.\n                        var new_key = k.split(\"metadata_\")[1];\n                        metadata.set(new_key, this.attributes[k]);\n                        delete this.attributes[k];\n                    }\n                },\n                this\n            );\n\n            // Because this is an internal change, silence it.\n            this.set(\"metadata\", metadata, { silent: true });\n        },\n\n        /**\n     * Returns dataset metadata for a given attribute.\n     */\n        get_metadata: function(attribute) {\n            return this.attributes.metadata.get(attribute);\n        },\n\n        urlRoot: Galaxy.root + \"api/datasets\"\n    });\n\n    /**\n * A tabular dataset. This object extends dataset to provide incremental chunked data.\n */\n    var TabularDataset = Dataset.extend({\n        defaults: _.extend({}, Dataset.prototype.defaults, {\n            chunk_url: null,\n            first_data_chunk: null,\n            offset: 0,\n            at_eof: false\n        }),\n\n        initialize: function(options) {\n            Dataset.prototype.initialize.call(this);\n\n            // If first data chunk is available, next chunk is 1.\n            if (this.attributes.first_data_chunk) {\n                this.attributes.offset = this.attributes.first_data_chunk.offset;\n            }\n            this.attributes.chunk_url = Galaxy.root + \"dataset/display?dataset_id=\" + this.id;\n            this.attributes.url_viz = Galaxy.root + \"visualization\";\n        },\n\n        /**\n     * Returns a jQuery Deferred object that resolves to the next data chunk or null if at EOF.\n     */\n        get_next_chunk: function() {\n            // If already at end of file, do nothing.\n            if (this.attributes.at_eof) {\n                return null;\n            }\n\n            // Get next chunk.\n            var self = this,\n                next_chunk = $.Deferred();\n            $.getJSON(this.attributes.chunk_url, {\n                offset: self.attributes.offset\n            }).success(function(chunk) {\n                var rval;\n                if (chunk.ck_data !== \"\") {\n                    // Found chunk.\n                    rval = chunk;\n                    self.attributes.offset = chunk.offset;\n                } else {\n                    // At EOF.\n                    self.attributes.at_eof = true;\n                    rval = null;\n                }\n                next_chunk.resolve(rval);\n            });\n\n            return next_chunk;\n        }\n    });\n\n    var DatasetCollection = Backbone.Collection.extend({\n        model: Dataset\n    });\n\n    /**\n * Provides a base for table-based, dynamic view of a tabular dataset.\n * Do not instantiate directly; use either TopLevelTabularDatasetChunkedView\n * or EmbeddedTabularDatasetChunkedView.\n */\n    var TabularDatasetChunkedView = Backbone.View.extend({\n        /**\n     * Initialize view and, importantly, set a scroll element.\n     */\n        initialize: function(options) {\n            // Row count for rendering.\n            this.row_count = 0;\n            this.loading_chunk = false;\n\n            // load trackster button\n            new TabularButtonTracksterView({\n                model: options.model,\n                $el: this.$el\n            });\n        },\n\n        expand_to_container: function() {\n            if (this.$el.height() < this.scroll_elt.height()) {\n                this.attempt_to_fetch();\n            }\n        },\n\n        attempt_to_fetch: function(func) {\n            var self = this;\n            if (!this.loading_chunk && this.scrolled_to_bottom()) {\n                this.loading_chunk = true;\n                this.loading_indicator.show();\n                $.when(self.model.get_next_chunk()).then(function(result) {\n                    if (result) {\n                        self._renderChunk(result);\n                        self.loading_chunk = false;\n                    }\n                    self.loading_indicator.hide();\n                    self.expand_to_container();\n                });\n            }\n        },\n\n        render: function() {\n            // Add loading indicator.\n            this.loading_indicator = $(\"<div/>\").attr(\"id\", \"loading_indicator\");\n            this.$el.append(this.loading_indicator);\n\n            // Add data table and header.\n            var data_table = $(\"<table/>\").attr({\n                id: \"content_table\",\n                cellpadding: 0\n            });\n            this.$el.append(data_table);\n            var column_names = this.model.get_metadata(\"column_names\"),\n                header_container = $(\"<thead/>\").appendTo(data_table),\n                header_row = $(\"<tr/>\").appendTo(header_container);\n            if (column_names) {\n                header_row.append(\"<th>\" + column_names.join(\"</th><th>\") + \"</th>\");\n            } else {\n                for (var j = 1; j <= this.model.get_metadata(\"columns\"); j++) {\n                    header_row.append(\"<th>\" + j + \"</th>\");\n                }\n            }\n\n            // Render first chunk.\n            var self = this,\n                first_chunk = this.model.get(\"first_data_chunk\");\n            if (first_chunk) {\n                // First chunk is bootstrapped, so render now.\n                this._renderChunk(first_chunk);\n            } else {\n                // No bootstrapping, so get first chunk and then render.\n                $.when(self.model.get_next_chunk()).then(function(result) {\n                    self._renderChunk(result);\n                });\n            }\n\n            // -- Show new chunks during scrolling. --\n\n            // Set up chunk loading when scrolling using the scrolling element.\n            this.scroll_elt.scroll(function() {\n                self.attempt_to_fetch();\n            });\n        },\n\n        /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n        scrolled_to_bottom: function() {\n            return false;\n        },\n\n        // -- Helper functions. --\n\n        _renderCell: function(cell_contents, index, colspan) {\n            var $cell = $(\"<td>\").text(cell_contents);\n            var column_types = this.model.get_metadata(\"column_types\");\n            if (colspan !== undefined) {\n                $cell.attr(\"colspan\", colspan).addClass(\"stringalign\");\n            } else if (column_types) {\n                if (index < column_types.length) {\n                    if (column_types[index] === \"str\" || column_types[index] === \"list\") {\n                        /* Left align all str columns, right align the rest */\n                        $cell.addClass(\"stringalign\");\n                    }\n                }\n            }\n            return $cell;\n        },\n\n        _renderRow: function(line) {\n            // Check length of cells to ensure this is a complete row.\n            var cells = line.split(\"\\t\"),\n                row = $(\"<tr>\"),\n                num_columns = this.model.get_metadata(\"columns\");\n\n            if (this.row_count % 2 !== 0) {\n                row.addClass(\"dark_row\");\n            }\n\n            if (cells.length === num_columns) {\n                _.each(\n                    cells,\n                    function(cell_contents, index) {\n                        row.append(this._renderCell(cell_contents, index));\n                    },\n                    this\n                );\n            } else if (cells.length > num_columns) {\n                // SAM file or like format with optional metadata included.\n                _.each(\n                    cells.slice(0, num_columns - 1),\n                    function(cell_contents, index) {\n                        row.append(this._renderCell(cell_contents, index));\n                    },\n                    this\n                );\n                row.append(this._renderCell(cells.slice(num_columns - 1).join(\"\\t\"), num_columns - 1));\n            } else if (cells.length === 1) {\n                // Comment line, just return the one cell.\n                row.append(this._renderCell(line, 0, num_columns));\n            } else {\n                // cells.length is greater than one, but less than num_columns.  Render cells and pad tds.\n                // Possibly a SAM file or like format with optional metadata missing.\n                // Could also be a tabular file with a line with missing columns.\n                _.each(\n                    cells,\n                    function(cell_contents, index) {\n                        row.append(this._renderCell(cell_contents, index));\n                    },\n                    this\n                );\n                _.each(_.range(num_columns - cells.length), function() {\n                    row.append($(\"<td>\"));\n                });\n            }\n\n            this.row_count++;\n            return row;\n        },\n\n        _renderChunk: function(chunk) {\n            var data_table = this.$el.find(\"table\");\n            _.each(\n                chunk.ck_data.split(\"\\n\"),\n                function(line, index) {\n                    if (line !== \"\") {\n                        data_table.append(this._renderRow(line));\n                    }\n                },\n                this\n            );\n        }\n    });\n\n    /**\n * Tabular view that is placed at the top level of page. Scrolling occurs\n * view top-level elements outside of view.\n */\n    var TopLevelTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n        initialize: function(options) {\n            TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n            // Scrolling happens in top-level elements.\n            var scroll_elt = _.find(this.$el.parents(), function(p) {\n                return $(p).css(\"overflow\") === \"auto\";\n            });\n\n            // If no scrolling element found, use window.\n            if (!scroll_elt) {\n                scroll_elt = window;\n            }\n\n            // Wrap scrolling element for easy access.\n            this.scroll_elt = $(scroll_elt);\n        },\n\n        /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n        scrolled_to_bottom: function() {\n            return this.$el.height() - this.scroll_elt.scrollTop() - this.scroll_elt.height() <= 0;\n        }\n    });\n\n    /**\n * Tabular view tnat is embedded in a page. Scrolling occurs in view's el.\n */\n    var EmbeddedTabularDatasetChunkedView = TabularDatasetChunkedView.extend({\n        initialize: function(options) {\n            TabularDatasetChunkedView.prototype.initialize.call(this, options);\n\n            // Because view is embedded, set up div to do scrolling.\n            this.scroll_elt = this.$el.css({\n                position: \"relative\",\n                overflow: \"scroll\",\n                height: options.height || \"500px\"\n            });\n        },\n\n        /**\n     * Returns true if user has scrolled to the bottom of the view.\n     */\n        scrolled_to_bottom: function() {\n            return this.$el.scrollTop() + this.$el.innerHeight() >= this.el.scrollHeight;\n        }\n    });\n\n    /** Button for trackster visualization */\n    var TabularButtonTracksterView = Backbone.View.extend({\n        // gene region columns\n        col: {\n            chrom: null,\n            start: null,\n            end: null\n        },\n\n        // url for trackster\n        url_viz: null,\n\n        // dataset id\n        dataset_id: null,\n\n        // database key\n        genome_build: null,\n\n        // data type\n        file_ext: null,\n\n        // backbone initialize\n        initialize: function(options) {\n            // check if environment is available\n            var Galaxy = parent.Galaxy;\n\n            // link galaxy modal or create one\n            if (Galaxy && Galaxy.modal) {\n                this.modal = Galaxy.modal;\n            }\n\n            // link galaxy frames\n            if (Galaxy && Galaxy.frame) {\n                this.frame = Galaxy.frame;\n            }\n\n            // check\n            if (!this.modal || !this.frame) {\n                return;\n            }\n\n            // model/metadata\n            var model = options.model;\n            var metadata = model.get(\"metadata\");\n\n            // check for datatype\n            if (!model.get(\"file_ext\")) {\n                return;\n            }\n\n            // get data type\n            this.file_ext = model.get(\"file_ext\");\n\n            // check for bed-file format\n            if (this.file_ext == \"bed\") {\n                // verify that metadata exists\n                if (metadata.get(\"chromCol\") && metadata.get(\"startCol\") && metadata.get(\"endCol\")) {\n                    // read in columns\n                    this.col.chrom = metadata.get(\"chromCol\") - 1;\n                    this.col.start = metadata.get(\"startCol\") - 1;\n                    this.col.end = metadata.get(\"endCol\") - 1;\n                } else {\n                    console.log(\"TabularButtonTrackster : Bed-file metadata incomplete.\");\n                    return;\n                }\n            }\n\n            // check for vcf-file format\n            if (this.file_ext == \"vcf\") {\n                // search array\n                function search(str, array) {\n                    for (var j = 0; j < array.length; j++) if (array[j].match(str)) return j;\n                    return -1;\n                }\n\n                // load\n                this.col.chrom = search(\"Chrom\", metadata.get(\"column_names\"));\n                this.col.start = search(\"Pos\", metadata.get(\"column_names\"));\n                this.col.end = null;\n\n                // verify that metadata exists\n                if (this.col.chrom == -1 || this.col.start == -1) {\n                    console.log(\"TabularButtonTrackster : VCF-file metadata incomplete.\");\n                    return;\n                }\n            }\n\n            // check\n            if (this.col.chrom === undefined) {\n                return;\n            }\n\n            // get dataset id\n            if (model.id) {\n                this.dataset_id = model.id;\n            } else {\n                console.log(\"TabularButtonTrackster : Dataset identification is missing.\");\n                return;\n            }\n\n            // get url\n            if (model.get(\"url_viz\")) {\n                this.url_viz = model.get(\"url_viz\");\n            } else {\n                console.log(\"TabularButtonTrackster : Url for visualization controller is missing.\");\n                return;\n            }\n\n            // get genome_build / database key\n            if (model.get(\"genome_build\")) {\n                this.genome_build = model.get(\"genome_build\");\n            }\n\n            // create the icon\n            var btn_viz = new mod_icon_btn.IconButtonView({\n                model: new mod_icon_btn.IconButton({\n                    title: \"Visualize\",\n                    icon_class: \"chart_curve\",\n                    id: \"btn_viz\"\n                })\n            });\n\n            // set element\n            this.setElement(options.$el);\n\n            // add to element\n            this.$el.append(btn_viz.render().$el);\n\n            // hide the button\n            this.hide();\n        },\n\n        /** Add event handlers */\n        events: {\n            \"mouseover tr\": \"show\",\n            mouseleave: \"hide\"\n        },\n\n        // show button\n        show: function(e) {\n            var self = this;\n\n            // is numeric\n            function is_numeric(n) {\n                return !isNaN(parseFloat(n)) && isFinite(n);\n            }\n\n            // check\n            if (this.col.chrom === null) return;\n\n            // get selected data line\n            var row = $(e.target).parent();\n\n            // verify that location has been found\n            var chrom = row\n                .children()\n                .eq(this.col.chrom)\n                .html();\n            var start = row\n                .children()\n                .eq(this.col.start)\n                .html();\n\n            // end is optional\n            var end = this.col.end\n                ? row\n                      .children()\n                      .eq(this.col.end)\n                      .html()\n                : start;\n\n            // double check location\n            if (!chrom.match(\"^#\") && chrom !== \"\" && is_numeric(start)) {\n                // get target gene region\n                var btn_viz_pars = {\n                    dataset_id: this.dataset_id,\n                    gene_region: chrom + \":\" + start + \"-\" + end\n                };\n\n                // get button position\n                var offset = row.offset();\n                var left = offset.left - 10;\n                var top = offset.top - $(window).scrollTop() + 3;\n\n                // update css\n                $(\"#btn_viz\").css({\n                    position: \"fixed\",\n                    top: top + \"px\",\n                    left: left + \"px\"\n                });\n                $(\"#btn_viz\").off(\"click\");\n                $(\"#btn_viz\").click(function() {\n                    self.frame.add({\n                        title: \"Trackster\",\n                        url: self.url_viz + \"/trackster?\" + $.param(btn_viz_pars)\n                    });\n                });\n\n                // show the button\n                $(\"#btn_viz\").show();\n            } else {\n                // hide the button\n                $(\"#btn_viz\").hide();\n            }\n        },\n\n        /** hide button */\n        hide: function() {\n            this.$(\"#btn_viz\").hide();\n        }\n    });\n\n    // -- Utility functions. --\n\n    /**\n * Create a model, attach it to a view, render view, and attach it to a parent element.\n */\n    var createModelAndView = function(model, view, model_config, parent_elt) {\n        // Create model, view.\n        var a_view = new view({\n            model: new model(model_config)\n        });\n\n        // Render view and add to parent element.\n        a_view.render();\n        if (parent_elt) {\n            parent_elt.append(a_view.$el);\n        }\n\n        return a_view;\n    };\n\n    /**\n * Create a tabular dataset chunked view (and requisite tabular dataset model)\n * and appends to parent_elt.\n */\n    var createTabularDatasetChunkedView = function(options) {\n        // If no model, create and set model from dataset config.\n        if (!options.model) {\n            options.model = new TabularDataset(options.dataset_config);\n        }\n\n        var parent_elt = options.parent_elt;\n        var embedded = options.embedded;\n\n        // Clean up options so that only needed options are passed to view.\n        delete options.embedded;\n        delete options.parent_elt;\n        delete options.dataset_config;\n\n        // Create and set up view.\n        var view = embedded\n            ? new EmbeddedTabularDatasetChunkedView(options)\n            : new TopLevelTabularDatasetChunkedView(options);\n        view.render();\n\n        if (parent_elt) {\n            parent_elt.append(view.$el);\n            // If we're sticking this in another element, once it's appended check\n            // to make sure we've filled enough space.\n            // Without this, the scroll elements don't work.\n            view.expand_to_container();\n        }\n\n        return view;\n    };\n\n    return {\n        Dataset: Dataset,\n        TabularDataset: TabularDataset,\n        DatasetCollection: DatasetCollection,\n        TabularDatasetChunkedView: TabularDatasetChunkedView,\n        createTabularDatasetChunkedView: createTabularDatasetChunkedView\n    };\n});\n"]}