{"version":3,"sources":["mvc/dataset/dataset-li.js"],"names":["_super","_listItem2","default","ListItemView","DatasetListItemView","extend","_logNamespace","className","prototype","id","logNamespace","this","model","get","join","initialize","attributes","logger","log","call","_setUpListeners","self","listenTo","change","inReadyState","expanded","fetch","silent","done","render","_","has","changed","keys","length","$","html","_renderNametags","_fetchModelDetails","view","hasDetails","jQuery","when","remove","speed","callback","fxSpeed","Backbone","_swapNewRender","$newRender","$el","addClass","_renderPrimaryActions","_renderDisplayButton","state","NOT_VIEWABLE","_states2","DISCARDED","displayBtnData","classes","disabled","title","_localization2","UPLOAD","NEW","href","urls","display","ev","Galaxy","frame","active","addDataset","faIcon","_faIconButton2","_renderDetails","templates","noAccess","toJSON","$details","find","empty","append","_renderSecondaryActions","_renderSummary","prepend","_renderDetailMessages","_renderDisplayApplications","_setUpBehaviors","summaryRenderFn","summaries","json","unknown","each","detailMessages","templateFn","$warnings","displayApplications","debug","FAILED_METADATA","_renderDownloadButton","_renderShowParamsButton","preventDefault","showParamsInstance","_vue2","_show_params2","document","createElement","onclick","add","mountView","page","center","propsData","metadataId","$mount","hasData","isEmpty","download","_renderMetaFileDownloadButton","tpl","trigger","meta_file","meta_download","file_type","modelString","purged","template","warnings","failed_metadata","tags","wrapTemplate","events","clone","click .display-btn","detailsTemplate","click .download-btn","summaryTemplates","EMPTY","detailMessageTemplates","error","_baseMvc2","details","deleted","noAccessTemplate","OK","QUEUED","RUNNING","SETTING_METADATA","PAUSED","ERROR","resubmitted","displayApplicationsTemplate"],"mappings":"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","file":"../../../scripts/mvc/dataset/dataset-li.js","sourcesContent":["import LIST_ITEM from \"mvc/list/list-item\";\nimport STATES from \"mvc/dataset/states\";\nimport faIconButton from \"ui/fa-icon-button\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\nimport Vue from \"libs/vue\";\nimport ShowParams from \"components/show_params.vue\";\n\nvar logNamespace = \"dataset\";\n/*==============================================================================\nTODO:\n    straighten out state rendering and templates used\n    inaccessible/STATES.NOT_VIEWABLE is a special case\n    simplify button rendering\n\n==============================================================================*/\nvar _super = LIST_ITEM.ListItemView;\n/** @class Read only list view for either LDDAs, HDAs, or HDADCEs.\n *      Roughly, any DatasetInstance (and not a raw Dataset).\n */\nvar DatasetListItemView = _super.extend(\n    /** @lends DatasetListItemView.prototype */ {\n        _logNamespace: logNamespace,\n\n        className: `${_super.prototype.className} dataset`,\n        //TODO:?? doesn't exactly match an hda's type_id\n        id: function() {\n            return [\"dataset\", this.model.get(\"id\")].join(\"-\");\n        },\n\n        /** Set up: instance vars, options, and event handlers */\n        initialize: function(attributes) {\n            if (attributes.logger) {\n                this.logger = this.model.logger = attributes.logger;\n            }\n            this.log(`${this}.initialize:`, attributes);\n            _super.prototype.initialize.call(this, attributes);\n\n            /** where should pages from links be displayed? (default to new tab/window) */\n            this.linkTarget = attributes.linkTarget || \"_blank\";\n        },\n\n        /** event listeners */\n        _setUpListeners: function() {\n            _super.prototype._setUpListeners.call(this);\n            var self = this;\n\n            // re-rendering on any model changes\n            return self.listenTo(self.model, {\n                change: function(model) {\n                    // if the model moved into the ready state and is expanded without details, fetch those details now\n                    if (\n                        self.model.changedAttributes().state &&\n                        self.model.inReadyState() &&\n                        self.expanded &&\n                        !self.model.hasDetails()\n                    ) {\n                        // normally, will render automatically (due to fetch -> change),\n                        // but! setting_metadata sometimes doesn't cause any other changes besides state\n                        // so, not rendering causes it to seem frozen in setting_metadata state\n                        self.model.fetch({ silent: true }).done(() => {\n                            self.render();\n                        });\n                    } else {\n                        if (_.has(model.changed, \"tags\") && _.keys(model.changed).length === 1) {\n                            // If only the tags have changed, rerender specifically\n                            // the titlebar region.  Otherwise default to the full\n                            // render.\n                            self.$(\".nametags\").html(self._renderNametags());\n                        } else {\n                            self.render();\n                        }\n                    }\n                }\n            });\n        },\n\n        // ......................................................................... expandable\n        /** In this override, only get details if in the ready state, get rerunnable if in other states.\n         *  Note: fetch with no 'change' event triggering to prevent automatic rendering.\n         */\n        _fetchModelDetails: function() {\n            var view = this;\n            if (view.model.inReadyState() && !view.model.hasDetails()) {\n                return view.model.fetch({ silent: true });\n            }\n            return jQuery.when();\n        },\n\n        // ......................................................................... removal\n        /** Remove this view's html from the DOM and remove all event listeners.\n         *  @param {Number or String} speed jq effect speed\n         *  @param {Function} callback      an optional function called when removal is done (scoped to this view)\n         */\n        remove: function(speed, callback) {\n            var view = this;\n            speed = speed || this.fxSpeed;\n            this.$el.fadeOut(speed, () => {\n                Backbone.View.prototype.remove.call(view);\n                if (callback) {\n                    callback.call(view);\n                }\n            });\n        },\n\n        // ......................................................................... rendering\n        /* TODO:\n        dataset states are the issue primarily making dataset rendering complex\n            each state should have it's own way of displaying/set of details\n            often with different actions that can be applied\n        throw in deleted/purged/visible and things get complicated easily\n        I've considered (a couple of times) - creating a view for each state\n            - but recreating the view during an update...seems wrong\n    */\n        /** In this override, add the dataset state as a class for use with state-based CSS */\n        _swapNewRender: function($newRender) {\n            _super.prototype._swapNewRender.call(this, $newRender);\n            if (this.model.has(\"state\")) {\n                this.$el.addClass(`state-${this.model.get(\"state\")}`);\n            }\n            return this.$el;\n        },\n\n        // ................................................................................ titlebar\n        /** In this override, add the dataset display button. */\n        _renderPrimaryActions: function() {\n            // render just the display for read-only\n            return [this._renderDisplayButton()];\n        },\n\n        /** Render icon-button to display dataset data */\n        _renderDisplayButton: function() {\n            // don't show display if not viewable or not accessible\n            var state = this.model.get(\"state\");\n            if (state === STATES.NOT_VIEWABLE || state === STATES.DISCARDED || !this.model.get(\"accessible\")) {\n                return null;\n            }\n\n            var displayBtnData = {\n                target: this.linkTarget,\n                classes: \"display-btn\"\n            };\n\n            // show a disabled display if the data's been purged\n            if (this.model.get(\"purged\")) {\n                displayBtnData.disabled = true;\n                displayBtnData.title = _l(\"Cannot display datasets removed from disk\");\n\n                // disable if still uploading\n            } else if (state === STATES.UPLOAD) {\n                displayBtnData.disabled = true;\n                displayBtnData.title = _l(\"This dataset must finish uploading before it can be viewed\");\n\n                // disable if still new\n            } else if (state === STATES.NEW) {\n                displayBtnData.disabled = true;\n                displayBtnData.title = _l(\"This dataset is not yet viewable\");\n            } else {\n                displayBtnData.title = _l(\"View data\");\n\n                // default link for dataset\n                displayBtnData.href = this.model.urls.display;\n\n                // add frame manager option onclick event\n                var self = this;\n                displayBtnData.onclick = ev => {\n                    if (Galaxy.frame && Galaxy.frame.active) {\n                        // Add dataset to frames.\n                        Galaxy.frame.addDataset(self.model.get(\"id\"));\n                        ev.preventDefault();\n                    }\n                };\n            }\n            displayBtnData.faIcon = \"fa-eye\";\n            return faIconButton(displayBtnData);\n        },\n\n        // ......................................................................... rendering details\n        /** Render the enclosing div of the hda body and, if expanded, the html in the body\n         *  @returns {jQuery} rendered DOM\n         */\n        _renderDetails: function() {\n            //TODO: generalize to be allow different details for each state\n\n            // no access - render nothing but a message\n            if (this.model.get(\"state\") === STATES.NOT_VIEWABLE) {\n                return $(this.templates.noAccess(this.model.toJSON(), this));\n            }\n\n            var $details = _super.prototype._renderDetails.call(this);\n            $details\n                .find(\".actions .left\")\n                .empty()\n                .append(this._renderSecondaryActions());\n            $details\n                .find(\".summary\")\n                .html(this._renderSummary())\n                .prepend(this._renderDetailMessages());\n            $details.find(\".display-applications\").html(this._renderDisplayApplications());\n\n            this._setUpBehaviors($details);\n            return $details;\n        },\n\n        /** Defer to the appropo summary rendering fn based on state */\n        _renderSummary: function() {\n            var json = this.model.toJSON();\n            var summaryRenderFn = this.templates.summaries[json.state];\n            summaryRenderFn = summaryRenderFn || this.templates.summaries.unknown;\n            return summaryRenderFn(json, this);\n        },\n\n        /** Render messages to be displayed only when the details are shown */\n        _renderDetailMessages: function() {\n            var view = this;\n            var $warnings = $('<div class=\"detail-messages\"></div>');\n            var json = view.model.toJSON();\n            //TODO:! unordered (map)\n            _.each(view.templates.detailMessages, templateFn => {\n                $warnings.append($(templateFn(json, view)));\n            });\n            return $warnings;\n        },\n\n        /** Render the external display application links */\n        _renderDisplayApplications: function() {\n            if (this.model.isDeletedOrPurged()) {\n                return \"\";\n            }\n            // render both old and new display apps using the same template\n            return [\n                this.templates.displayApplications(this.model.get(\"display_apps\"), this),\n                this.templates.displayApplications(this.model.get(\"display_types\"), this)\n            ].join(\"\");\n        },\n\n        // ......................................................................... secondary/details actions\n        /** A series of links/buttons for less commonly used actions: re-run, info, etc. */\n        _renderSecondaryActions: function() {\n            this.debug(\"_renderSecondaryActions\");\n            switch (this.model.get(\"state\")) {\n                case STATES.NOT_VIEWABLE:\n                    return [];\n                case STATES.OK:\n                case STATES.FAILED_METADATA:\n                case STATES.ERROR:\n                    return [this._renderDownloadButton(), this._renderShowParamsButton()];\n            }\n            return [this._renderShowParamsButton()];\n        },\n\n        /** Render icon-button to show the input and output (stdout/err) for the job that created this.\n         *  @returns {jQuery} rendered DOM\n         */\n        _renderShowParamsButton: function() {\n            // gen. safe to show in all cases\n            let self = this;\n            return faIconButton({\n                title: _l(\"View details\"),\n                classes: \"params-btn\",\n                faIcon: \"fa-info-circle\",\n                onclick: function(ev) {\n                    ev.preventDefault();\n                    let showParamsInstance = Vue.extend( ShowParams ),\n                        mountView = document.createElement( \"div\" );\n                    if ( Galaxy.frame && Galaxy.frame.active ) {\n                        Galaxy.frame.add({\n                            title: \"Dataset details\"\n                        });\n                        let $elFrame = $( \".corner.frame\" ),\n                            $elLatestFrame = $( $elFrame[ $elFrame.length - 1 ] ).find( \".f-content\" );\n                        // open metadata in a scratchbook\n                        $elLatestFrame.html( mountView );\n                    }\n                    else {\n                        // open metadata in the center panel of the Galaxy \n                        Galaxy.page.center.display( mountView );\n                    }\n                    new showParamsInstance({ propsData: { metadataId: self.model.get( \"id\" ) } }).$mount( mountView );\n                }\n            });\n        },\n\n        /** Render icon-button/popupmenu to download the data (and/or the associated meta files (bai, etc.)) for this.\n         *  @returns {jQuery} rendered DOM\n         */\n        _renderDownloadButton: function() {\n            // don't show anything if the data's been purged\n            if (this.model.get(\"purged\") || !this.model.hasData()) {\n                return null;\n            }\n\n            // return either: a popupmenu with links to download assoc. meta files (if there are meta files)\n            //  or a single download icon-button (if there are no meta files)\n            if (!_.isEmpty(this.model.get(\"meta_files\"))) {\n                return this._renderMetaFileDownloadButton();\n            }\n\n            return $(\n                [\n                    '<a class=\"download-btn icon-btn\" ',\n                    'href=\"',\n                    this.model.urls.download,\n                    `\" title=\"${_l(\"Download\")}\" download>`,\n                    '<span class=\"fa fa-floppy-o\"></span>',\n                    \"</a>\"\n                ].join(\"\")\n            );\n        },\n\n        /** Render the download button which opens a dropdown with links to download assoc. meta files (indeces, etc.) */\n        _renderMetaFileDownloadButton: function() {\n            var urls = this.model.urls;\n            return $(\n                [\n                    '<div class=\"metafile-dropdown dropdown\">',\n                    '<a class=\"download-btn icon-btn\" href=\"javascript:void(0)\" data-toggle=\"dropdown\"',\n                    ` title=\"${_l(\"Download\")}\">`,\n                    '<span class=\"fa fa-floppy-o\"></span>',\n                    \"</a>\",\n                    '<ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"dLabel\">',\n                    `<li><a href=\"${urls.download}\" download>`,\n                    _l(\"Download dataset\"),\n                    \"</a></li>\",\n                    _.map(this.model.get(\"meta_files\"), meta_file =>\n                        [\n                            '<li><a href=\"',\n                            urls.meta_download + meta_file.file_type,\n                            '\">',\n                            _l(\"Download\"),\n                            \" \",\n                            meta_file.file_type,\n                            \"</a></li>\"\n                        ].join(\"\")\n                    ).join(\"\\n\"),\n                    \"</ul>\",\n                    \"</div>\"\n                ].join(\"\\n\")\n            );\n        },\n\n        _renderNametags: function() {\n            var tpl = _.template(\n                [\n                    \"<% _.each(_.sortBy(_.uniq(tags), function(x) { return x }), function(tag){ %>\",\n                    '<% if (tag.indexOf(\"name:\") == 0){ %>',\n                    '<span class=\"label label-info\"><%- tag.slice(5) %></span>',\n                    \"<% } %>\",\n                    \"<% }); %>\"\n                ].join(\"\")\n            );\n            return tpl({ tags: this.model.get(\"tags\") });\n        },\n\n        // ......................................................................... misc\n        events: _.extend(_.clone(_super.prototype.events), {\n            \"click .display-btn\": function(ev) {\n                this.trigger(\"display\", this, ev);\n            },\n            \"click .params-btn\": function(ev) {\n                this.trigger(\"params\", this, ev);\n            },\n            \"click .download-btn\": function(ev) {\n                this.trigger(\"download\", this, ev);\n            }\n        }),\n\n        // ......................................................................... misc\n        /** String representation */\n        toString: function() {\n            var modelString = this.model ? `${this.model}` : \"(no model)\";\n            return `DatasetListItemView(${modelString})`;\n        }\n    }\n);\n\n// ............................................................................ TEMPLATES\n/** underscore templates */\nDatasetListItemView.prototype.templates = (() => {\n    //TODO: move to require text! plugin\n\n    var warnings = _.extend({}, _super.prototype.templates.warnings, {\n        failed_metadata: BASE_MVC.wrapTemplate([\n            // failed metadata is rendered as a warning on an otherwise ok dataset view\n            '<% if( model.state === \"failed_metadata\" ){ %>',\n            '<div class=\"warningmessagesmall\">',\n            _l(\"An error occurred setting the metadata for this dataset\"),\n            \"</div>\",\n            \"<% } %>\"\n        ]),\n        error: BASE_MVC.wrapTemplate([\n            // error during index fetch - show error on dataset\n            \"<% if( model.error ){ %>\",\n            '<div class=\"errormessagesmall\">',\n            _l(\"There was an error getting the data for this dataset\"),\n            \": <%- model.error %>\",\n            \"</div>\",\n            \"<% } %>\"\n        ]),\n        purged: BASE_MVC.wrapTemplate([\n            \"<% if( model.purged ){ %>\",\n            '<div class=\"purged-msg warningmessagesmall\">',\n            _l(\"This dataset has been deleted and removed from disk\"),\n            \"</div>\",\n            \"<% } %>\"\n        ]),\n        deleted: BASE_MVC.wrapTemplate([\n            // deleted not purged\n            \"<% if( model.deleted && !model.purged ){ %>\",\n            '<div class=\"deleted-msg warningmessagesmall\">',\n            _l(\"This dataset has been deleted\"),\n            \"</div>\",\n            \"<% } %>\"\n        ])\n\n        //NOTE: hidden warning is only needed for HDAs\n    });\n\n    var detailsTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"details\">',\n            '<div class=\"summary\"></div>',\n\n            '<div class=\"actions clear\">',\n            '<div class=\"left\"></div>',\n            '<div class=\"right\"></div>',\n            \"</div>\",\n\n            // do not display tags, annotation, display apps, or peek when deleted\n            \"<% if( !dataset.deleted && !dataset.purged ){ %>\",\n            '<div class=\"tags-display\"></div>',\n            '<div class=\"annotation-display\"></div>',\n\n            '<div class=\"display-applications\"></div>',\n\n            \"<% if( dataset.peek ){ %>\",\n            '<pre class=\"dataset-peek\"><%= dataset.peek %></pre>',\n            \"<% } %>\",\n            \"<% } %>\",\n            \"</div>\"\n        ],\n        \"dataset\"\n    );\n\n    var noAccessTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"details\">',\n            '<div class=\"summary\">',\n            _l(\"You do not have permission to view this dataset\"),\n            \"</div>\",\n            \"</div>\"\n        ],\n        \"dataset\"\n    );\n\n    //TODO: still toooooooooooooo complex - rework\n    var summaryTemplates = {};\n    summaryTemplates[STATES.OK] = summaryTemplates[STATES.FAILED_METADATA] = BASE_MVC.wrapTemplate(\n        [\n            \"<% if( dataset.misc_blurb ){ %>\",\n            '<div class=\"blurb\">',\n            '<span class=\"value\"><%- dataset.misc_blurb %></span>',\n            \"</div>\",\n            \"<% } %>\",\n\n            \"<% if( dataset.file_ext ){ %>\",\n            '<div class=\"datatype\">',\n            '<label class=\"prompt\">',\n            _l(\"format\"),\n            \"</label>\",\n            '<span class=\"value\"><%- dataset.file_ext %></span>',\n            \"</div>\",\n            \"<% } %>\",\n\n            \"<% if( dataset.metadata_dbkey ){ %>\",\n            '<div class=\"dbkey\">',\n            '<label class=\"prompt\">',\n            _l(\"database\"),\n            \"</label>\",\n            '<span class=\"value\">',\n            \"<%- dataset.metadata_dbkey %>\",\n            \"</span>\",\n            \"</div>\",\n            \"<% } %>\",\n\n            \"<% if( dataset.misc_info ){ %>\",\n            '<div class=\"info\">',\n            '<span class=\"value\"><%- dataset.misc_info %></span>',\n            \"</div>\",\n            \"<% } %>\"\n        ],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.NEW] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"This is a new dataset and not all of its data are available yet\"), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.NOT_VIEWABLE] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"You do not have permission to view this dataset\"), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.DISCARDED] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"The job creating this dataset was cancelled before completion\"), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.QUEUED] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"This job is waiting to run\"), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.RUNNING] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"This job is currently running\"), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.UPLOAD] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"This dataset is currently uploading\"), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.SETTING_METADATA] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"Metadata is being auto-detected\"), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.PAUSED] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l('This job is paused. Use the \"Resume Paused Jobs\" in the history menu to resume'), \"</div>\"],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.ERROR] = BASE_MVC.wrapTemplate(\n        [\n            \"<% if( !dataset.purged ){ %>\",\n            \"<div><%- dataset.misc_blurb %></div>\",\n            \"<% } %>\",\n            '<span class=\"help-text\">',\n            _l(\"An error occurred with this dataset\"),\n            \":</span>\",\n            '<div class=\"job-error-text\"><%- dataset.misc_info %></div>'\n        ],\n        \"dataset\"\n    );\n    summaryTemplates[STATES.EMPTY] = BASE_MVC.wrapTemplate(\n        [\"<div>\", _l(\"No data\"), \": <i><%- dataset.misc_blurb %></i></div>\"],\n        \"dataset\"\n    );\n    summaryTemplates.unknown = BASE_MVC.wrapTemplate(\n        ['<div>Error: unknown dataset state: \"<%- dataset.state %>\"</div>'],\n        \"dataset\"\n    );\n\n    // messages to be displayed only within the details section ('below the fold')\n    var detailMessageTemplates = {\n        resubmitted: BASE_MVC.wrapTemplate([\n            // deleted not purged\n            \"<% if( model.resubmitted ){ %>\",\n            '<div class=\"resubmitted-msg infomessagesmall\">',\n            _l(\"The job creating this dataset has been resubmitted\"),\n            \"</div>\",\n            \"<% } %>\"\n        ])\n    };\n\n    // this is applied to both old and new style display apps\n    var displayApplicationsTemplate = BASE_MVC.wrapTemplate(\n        [\n            \"<% _.each( apps, function( app ){ %>\",\n            '<div class=\"display-application\">',\n            '<span class=\"display-application-location\"><%- app.label %></span> ',\n            '<span class=\"display-application-links\">',\n            \"<% _.each( app.links, function( link ){ %>\",\n            '<a target=\"<%- link.target %>\" href=\"<%- link.href %>\">',\n            \"<% print( _l( link.text ) ); %>\",\n            \"</a> \",\n            \"<% }); %>\",\n            \"</span>\",\n            \"</div>\",\n            \"<% }); %>\"\n        ],\n        \"apps\"\n    );\n\n    return _.extend({}, _super.prototype.templates, {\n        warnings: warnings,\n        details: detailsTemplate,\n        noAccess: noAccessTemplate,\n        summaries: summaryTemplates,\n        detailMessages: detailMessageTemplates,\n        displayApplications: displayApplicationsTemplate\n    });\n})();\n\n// ============================================================================\nexport default {\n    DatasetListItemView: DatasetListItemView\n};\n"]}