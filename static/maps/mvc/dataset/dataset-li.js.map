{"version":3,"sources":["mvc/dataset/dataset-li.js"],"names":["define","LIST_ITEM","STATES","faIconButton","BASE_MVC","_l","logNamespace","_super","ListItemView","DatasetListItemView","extend","_logNamespace","className","prototype","id","this","model","get","join","attributes","logger","initialize","call","linkTarget","_setUpListeners","self","change","listenTo","changedAttributes","state","inReadyState","fetch","render","hasDetails","silent","done","changed","_","keys","length","$","html","_renderNametags","_fetchModelDetails","view","jQuery","when","callback","speed","fxSpeed","$el","fadeOut","Backbone","View","remove","_swapNewRender","$newRender","has","addClass","_renderDisplayButton","target","classes","NOT_VIEWABLE","DISCARDED","displayBtnData","disabled","title","UPLOAD","NEW","urls","href","display","onclick","ev","Galaxy","frame","active","preventDefault","faIcon","_renderDetails","$details","find","_renderSummary","templates","noAccess","_renderDisplayApplications","_renderDetailMessages","empty","append","_renderSecondaryActions","json","summaryRenderFn","_setUpBehaviors","detailMessages","$warnings","templateFn","summaries","unknown","isDeletedOrPurged","toJSON","each","displayApplications","_renderDownloadButton","_renderShowParamsButton","OK","stopPropagation","show_params","add","url","hasData","isEmpty","clone","download","template","_renderMetaFileDownloadButton","modelString","map","meta_file","meta_download","file_type","wrapTemplate","summaryTemplates","noAccessTemplate","SETTING_METADATA","PAUSED","click .download-btn","detailMessageTemplates","toString","displayApplicationsTemplate","warnings","failed_metadata","error","purged","deleted","detailsTemplate","FAILED_METADATA","QUEUED","RUNNING","ERROR","EMPTY","resubmitted","details"],"mappings":"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","file":"../../../scripts/mvc/dataset/dataset-li.js","sourcesContent":["define(\n    [\"mvc/list/list-item\", \"mvc/dataset/states\", \"ui/fa-icon-button\", \"mvc/base-mvc\", \"utils/localization\"],\n    function(LIST_ITEM, STATES, faIconButton, BASE_MVC, _l) {\n        \"use strict\";\n\n        var logNamespace = \"dataset\";\n        /*==============================================================================\nTODO:\n    straighten out state rendering and templates used\n    inaccessible/STATES.NOT_VIEWABLE is a special case\n    simplify button rendering\n\n==============================================================================*/\n        var _super = LIST_ITEM.ListItemView;\n        /** @class Read only list view for either LDDAs, HDAs, or HDADCEs.\n *      Roughly, any DatasetInstance (and not a raw Dataset).\n */\n        var DatasetListItemView = _super.extend(\n            /** @lends DatasetListItemView.prototype */ {\n                _logNamespace: logNamespace,\n\n                className: _super.prototype.className + \" dataset\",\n                //TODO:?? doesn't exactly match an hda's type_id\n                id: function() {\n                    return [\"dataset\", this.model.get(\"id\")].join(\"-\");\n                },\n\n                /** Set up: instance vars, options, and event handlers */\n                initialize: function(attributes) {\n                    if (attributes.logger) {\n                        this.logger = this.model.logger = attributes.logger;\n                    }\n                    this.log(this + \".initialize:\", attributes);\n                    _super.prototype.initialize.call(this, attributes);\n\n                    /** where should pages from links be displayed? (default to new tab/window) */\n                    this.linkTarget = attributes.linkTarget || \"_blank\";\n                },\n\n                /** event listeners */\n                _setUpListeners: function() {\n                    _super.prototype._setUpListeners.call(this);\n                    var self = this;\n\n                    // re-rendering on any model changes\n                    return self.listenTo(self.model, {\n                        change: function(model) {\n                            // if the model moved into the ready state and is expanded without details, fetch those details now\n                            if (\n                                self.model.changedAttributes().state &&\n                                self.model.inReadyState() &&\n                                self.expanded &&\n                                !self.model.hasDetails()\n                            ) {\n                                // normally, will render automatically (due to fetch -> change),\n                                // but! setting_metadata sometimes doesn't cause any other changes besides state\n                                // so, not rendering causes it to seem frozen in setting_metadata state\n                                self.model.fetch({ silent: true }).done(function() {\n                                    self.render();\n                                });\n                            } else {\n                                if (_.has(model.changed, \"tags\") && _.keys(model.changed).length === 1) {\n                                    // If only the tags have changed, rerender specifically\n                                    // the titlebar region.  Otherwise default to the full\n                                    // render.\n                                    self.$(\".nametags\").html(self._renderNametags());\n                                } else {\n                                    self.render();\n                                }\n                            }\n                        }\n                    });\n                },\n\n                // ......................................................................... expandable\n                /** In this override, only get details if in the ready state, get rerunnable if in other states.\n     *  Note: fetch with no 'change' event triggering to prevent automatic rendering.\n     */\n                _fetchModelDetails: function() {\n                    var view = this;\n                    if (view.model.inReadyState() && !view.model.hasDetails()) {\n                        return view.model.fetch({ silent: true });\n                    }\n                    return jQuery.when();\n                },\n\n                // ......................................................................... removal\n                /** Remove this view's html from the DOM and remove all event listeners.\n     *  @param {Number or String} speed jq effect speed\n     *  @param {Function} callback      an optional function called when removal is done (scoped to this view)\n     */\n                remove: function(speed, callback) {\n                    var view = this;\n                    speed = speed || this.fxSpeed;\n                    this.$el.fadeOut(speed, function() {\n                        Backbone.View.prototype.remove.call(view);\n                        if (callback) {\n                            callback.call(view);\n                        }\n                    });\n                },\n\n                // ......................................................................... rendering\n                /* TODO:\n        dataset states are the issue primarily making dataset rendering complex\n            each state should have it's own way of displaying/set of details\n            often with different actions that can be applied\n        throw in deleted/purged/visible and things get complicated easily\n        I've considered (a couple of times) - creating a view for each state\n            - but recreating the view during an update...seems wrong\n    */\n                /** In this override, add the dataset state as a class for use with state-based CSS */\n                _swapNewRender: function($newRender) {\n                    _super.prototype._swapNewRender.call(this, $newRender);\n                    if (this.model.has(\"state\")) {\n                        this.$el.addClass(\"state-\" + this.model.get(\"state\"));\n                    }\n                    return this.$el;\n                },\n\n                // ................................................................................ titlebar\n                /** In this override, add the dataset display button. */\n                _renderPrimaryActions: function() {\n                    // render just the display for read-only\n                    return [this._renderDisplayButton()];\n                },\n\n                /** Render icon-button to display dataset data */\n                _renderDisplayButton: function() {\n                    // don't show display if not viewable or not accessible\n                    var state = this.model.get(\"state\");\n                    if (state === STATES.NOT_VIEWABLE || state === STATES.DISCARDED || !this.model.get(\"accessible\")) {\n                        return null;\n                    }\n\n                    var displayBtnData = {\n                        target: this.linkTarget,\n                        classes: \"display-btn\"\n                    };\n\n                    // show a disabled display if the data's been purged\n                    if (this.model.get(\"purged\")) {\n                        displayBtnData.disabled = true;\n                        displayBtnData.title = _l(\"Cannot display datasets removed from disk\");\n\n                        // disable if still uploading\n                    } else if (state === STATES.UPLOAD) {\n                        displayBtnData.disabled = true;\n                        displayBtnData.title = _l(\"This dataset must finish uploading before it can be viewed\");\n\n                        // disable if still new\n                    } else if (state === STATES.NEW) {\n                        displayBtnData.disabled = true;\n                        displayBtnData.title = _l(\"This dataset is not yet viewable\");\n                    } else {\n                        displayBtnData.title = _l(\"View data\");\n\n                        // default link for dataset\n                        displayBtnData.href = this.model.urls.display;\n\n                        // add frame manager option onclick event\n                        var self = this;\n                        displayBtnData.onclick = function(ev) {\n                            if (Galaxy.frame && Galaxy.frame.active) {\n                                // Add dataset to frames.\n                                Galaxy.frame.addDataset(self.model.get(\"id\"));\n                                ev.preventDefault();\n                            }\n                        };\n                    }\n                    displayBtnData.faIcon = \"fa-eye\";\n                    return faIconButton(displayBtnData);\n                },\n\n                // ......................................................................... rendering details\n                /** Render the enclosing div of the hda body and, if expanded, the html in the body\n     *  @returns {jQuery} rendered DOM\n     */\n                _renderDetails: function() {\n                    //TODO: generalize to be allow different details for each state\n\n                    // no access - render nothing but a message\n                    if (this.model.get(\"state\") === STATES.NOT_VIEWABLE) {\n                        return $(this.templates.noAccess(this.model.toJSON(), this));\n                    }\n\n                    var $details = _super.prototype._renderDetails.call(this);\n                    $details\n                        .find(\".actions .left\")\n                        .empty()\n                        .append(this._renderSecondaryActions());\n                    $details\n                        .find(\".summary\")\n                        .html(this._renderSummary())\n                        .prepend(this._renderDetailMessages());\n                    $details.find(\".display-applications\").html(this._renderDisplayApplications());\n\n                    this._setUpBehaviors($details);\n                    return $details;\n                },\n\n                /** Defer to the appropo summary rendering fn based on state */\n                _renderSummary: function() {\n                    var json = this.model.toJSON(),\n                        summaryRenderFn = this.templates.summaries[json.state];\n                    summaryRenderFn = summaryRenderFn || this.templates.summaries.unknown;\n                    return summaryRenderFn(json, this);\n                },\n\n                /** Render messages to be displayed only when the details are shown */\n                _renderDetailMessages: function() {\n                    var view = this,\n                        $warnings = $('<div class=\"detail-messages\"></div>'),\n                        json = view.model.toJSON();\n                    //TODO:! unordered (map)\n                    _.each(view.templates.detailMessages, function(templateFn) {\n                        $warnings.append($(templateFn(json, view)));\n                    });\n                    return $warnings;\n                },\n\n                /** Render the external display application links */\n                _renderDisplayApplications: function() {\n                    if (this.model.isDeletedOrPurged()) {\n                        return \"\";\n                    }\n                    // render both old and new display apps using the same template\n                    return [\n                        this.templates.displayApplications(this.model.get(\"display_apps\"), this),\n                        this.templates.displayApplications(this.model.get(\"display_types\"), this)\n                    ].join(\"\");\n                },\n\n                // ......................................................................... secondary/details actions\n                /** A series of links/buttons for less commonly used actions: re-run, info, etc. */\n                _renderSecondaryActions: function() {\n                    this.debug(\"_renderSecondaryActions\");\n                    switch (this.model.get(\"state\")) {\n                        case STATES.NOT_VIEWABLE:\n                            return [];\n                        case STATES.OK:\n                        case STATES.FAILED_METADATA:\n                        case STATES.ERROR:\n                            return [this._renderDownloadButton(), this._renderShowParamsButton()];\n                    }\n                    return [this._renderShowParamsButton()];\n                },\n\n                /** Render icon-button to show the input and output (stdout/err) for the job that created this.\n     *  @returns {jQuery} rendered DOM\n     */\n                _renderShowParamsButton: function() {\n                    // gen. safe to show in all cases\n                    return faIconButton({\n                        title: _l(\"View details\"),\n                        classes: \"params-btn\",\n                        href: this.model.urls.show_params,\n                        target: this.linkTarget,\n                        faIcon: \"fa-info-circle\",\n                        onclick: function(ev) {\n                            if (Galaxy.frame && Galaxy.frame.active) {\n                                Galaxy.frame.add({\n                                    title: \"Dataset details\",\n                                    url: this.href\n                                });\n                                ev.preventDefault();\n                                ev.stopPropagation();\n                            }\n                        }\n                    });\n                },\n\n                /** Render icon-button/popupmenu to download the data (and/or the associated meta files (bai, etc.)) for this.\n     *  @returns {jQuery} rendered DOM\n     */\n                _renderDownloadButton: function() {\n                    // don't show anything if the data's been purged\n                    if (this.model.get(\"purged\") || !this.model.hasData()) {\n                        return null;\n                    }\n\n                    // return either: a popupmenu with links to download assoc. meta files (if there are meta files)\n                    //  or a single download icon-button (if there are no meta files)\n                    if (!_.isEmpty(this.model.get(\"meta_files\"))) {\n                        return this._renderMetaFileDownloadButton();\n                    }\n\n                    return $(\n                        [\n                            '<a class=\"download-btn icon-btn\" ',\n                            'href=\"',\n                            this.model.urls.download,\n                            '\" title=\"' + _l(\"Download\") + '\" download>',\n                            '<span class=\"fa fa-floppy-o\"></span>',\n                            \"</a>\"\n                        ].join(\"\")\n                    );\n                },\n\n                /** Render the download button which opens a dropdown with links to download assoc. meta files (indeces, etc.) */\n                _renderMetaFileDownloadButton: function() {\n                    var urls = this.model.urls;\n                    return $(\n                        [\n                            '<div class=\"metafile-dropdown dropdown\">',\n                            '<a class=\"download-btn icon-btn\" href=\"javascript:void(0)\" data-toggle=\"dropdown\"',\n                            ' title=\"' + _l(\"Download\") + '\">',\n                            '<span class=\"fa fa-floppy-o\"></span>',\n                            \"</a>\",\n                            '<ul class=\"dropdown-menu\" role=\"menu\" aria-labelledby=\"dLabel\">',\n                            '<li><a href=\"' + urls.download + '\" download>',\n                            _l(\"Download dataset\"),\n                            \"</a></li>\",\n                            _.map(this.model.get(\"meta_files\"), function(meta_file) {\n                                return [\n                                    '<li><a href=\"',\n                                    urls.meta_download + meta_file.file_type,\n                                    '\">',\n                                    _l(\"Download\"),\n                                    \" \",\n                                    meta_file.file_type,\n                                    \"</a></li>\"\n                                ].join(\"\");\n                            }).join(\"\\n\"),\n                            \"</ul>\",\n                            \"</div>\"\n                        ].join(\"\\n\")\n                    );\n                },\n\n                _renderNametags: function() {\n                    var tpl = _.template(\n                        [\n                            \"<% _.each(_.sortBy(_.uniq(tags), function(x) { return x }), function(tag){ %>\",\n                            '<% if (tag.indexOf(\"name:\") == 0){ %>',\n                            '<span class=\"label label-info\"><%- tag.slice(5) %></span>',\n                            \"<% } %>\",\n                            \"<% }); %>\"\n                        ].join(\"\")\n                    );\n                    return tpl({ tags: this.model.get(\"tags\") });\n                },\n\n                // ......................................................................... misc\n                events: _.extend(_.clone(_super.prototype.events), {\n                    \"click .display-btn\": function(ev) {\n                        this.trigger(\"display\", this, ev);\n                    },\n                    \"click .params-btn\": function(ev) {\n                        this.trigger(\"params\", this, ev);\n                    },\n                    \"click .download-btn\": function(ev) {\n                        this.trigger(\"download\", this, ev);\n                    }\n                }),\n\n                // ......................................................................... misc\n                /** String representation */\n                toString: function() {\n                    var modelString = this.model ? this.model + \"\" : \"(no model)\";\n                    return \"DatasetListItemView(\" + modelString + \")\";\n                }\n            }\n        );\n\n        // ............................................................................ TEMPLATES\n        /** underscore templates */\n        DatasetListItemView.prototype.templates = (function() {\n            //TODO: move to require text! plugin\n\n            var warnings = _.extend({}, _super.prototype.templates.warnings, {\n                failed_metadata: BASE_MVC.wrapTemplate([\n                    // failed metadata is rendered as a warning on an otherwise ok dataset view\n                    '<% if( model.state === \"failed_metadata\" ){ %>',\n                    '<div class=\"warningmessagesmall\">',\n                    _l(\"An error occurred setting the metadata for this dataset\"),\n                    \"</div>\",\n                    \"<% } %>\"\n                ]),\n                error: BASE_MVC.wrapTemplate([\n                    // error during index fetch - show error on dataset\n                    \"<% if( model.error ){ %>\",\n                    '<div class=\"errormessagesmall\">',\n                    _l(\"There was an error getting the data for this dataset\"),\n                    \": <%- model.error %>\",\n                    \"</div>\",\n                    \"<% } %>\"\n                ]),\n                purged: BASE_MVC.wrapTemplate([\n                    \"<% if( model.purged ){ %>\",\n                    '<div class=\"purged-msg warningmessagesmall\">',\n                    _l(\"This dataset has been deleted and removed from disk\"),\n                    \"</div>\",\n                    \"<% } %>\"\n                ]),\n                deleted: BASE_MVC.wrapTemplate([\n                    // deleted not purged\n                    \"<% if( model.deleted && !model.purged ){ %>\",\n                    '<div class=\"deleted-msg warningmessagesmall\">',\n                    _l(\"This dataset has been deleted\"),\n                    \"</div>\",\n                    \"<% } %>\"\n                ])\n\n                //NOTE: hidden warning is only needed for HDAs\n            });\n\n            var detailsTemplate = BASE_MVC.wrapTemplate(\n                [\n                    '<div class=\"details\">',\n                    '<div class=\"summary\"></div>',\n\n                    '<div class=\"actions clear\">',\n                    '<div class=\"left\"></div>',\n                    '<div class=\"right\"></div>',\n                    \"</div>\",\n\n                    // do not display tags, annotation, display apps, or peek when deleted\n                    \"<% if( !dataset.deleted && !dataset.purged ){ %>\",\n                    '<div class=\"tags-display\"></div>',\n                    '<div class=\"annotation-display\"></div>',\n\n                    '<div class=\"display-applications\"></div>',\n\n                    \"<% if( dataset.peek ){ %>\",\n                    '<pre class=\"dataset-peek\"><%= dataset.peek %></pre>',\n                    \"<% } %>\",\n                    \"<% } %>\",\n                    \"</div>\"\n                ],\n                \"dataset\"\n            );\n\n            var noAccessTemplate = BASE_MVC.wrapTemplate(\n                [\n                    '<div class=\"details\">',\n                    '<div class=\"summary\">',\n                    _l(\"You do not have permission to view this dataset\"),\n                    \"</div>\",\n                    \"</div>\"\n                ],\n                \"dataset\"\n            );\n\n            //TODO: still toooooooooooooo complex - rework\n            var summaryTemplates = {};\n            summaryTemplates[STATES.OK] = summaryTemplates[STATES.FAILED_METADATA] = BASE_MVC.wrapTemplate(\n                [\n                    \"<% if( dataset.misc_blurb ){ %>\",\n                    '<div class=\"blurb\">',\n                    '<span class=\"value\"><%- dataset.misc_blurb %></span>',\n                    \"</div>\",\n                    \"<% } %>\",\n\n                    \"<% if( dataset.file_ext ){ %>\",\n                    '<div class=\"datatype\">',\n                    '<label class=\"prompt\">',\n                    _l(\"format\"),\n                    \"</label>\",\n                    '<span class=\"value\"><%- dataset.file_ext %></span>',\n                    \"</div>\",\n                    \"<% } %>\",\n\n                    \"<% if( dataset.metadata_dbkey ){ %>\",\n                    '<div class=\"dbkey\">',\n                    '<label class=\"prompt\">',\n                    _l(\"database\"),\n                    \"</label>\",\n                    '<span class=\"value\">',\n                    \"<%- dataset.metadata_dbkey %>\",\n                    \"</span>\",\n                    \"</div>\",\n                    \"<% } %>\",\n\n                    \"<% if( dataset.misc_info ){ %>\",\n                    '<div class=\"info\">',\n                    '<span class=\"value\"><%- dataset.misc_info %></span>',\n                    \"</div>\",\n                    \"<% } %>\"\n                ],\n                \"dataset\"\n            );\n            summaryTemplates[STATES.NEW] = BASE_MVC.wrapTemplate(\n                [\"<div>\", _l(\"This is a new dataset and not all of its data are available yet\"), \"</div>\"],\n                \"dataset\"\n            );\n            summaryTemplates[STATES.NOT_VIEWABLE] = BASE_MVC.wrapTemplate(\n                [\"<div>\", _l(\"You do not have permission to view this dataset\"), \"</div>\"],\n                \"dataset\"\n            );\n            summaryTemplates[STATES.DISCARDED] = BASE_MVC.wrapTemplate(\n                [\"<div>\", _l(\"The job creating this dataset was cancelled before completion\"), \"</div>\"],\n                \"dataset\"\n            );\n            summaryTemplates[STATES.QUEUED] = BASE_MVC.wrapTemplate(\n                [\"<div>\", _l(\"This job is waiting to run\"), \"</div>\"],\n                \"dataset\"\n            );\n            summaryTemplates[STATES.RUNNING] = BASE_MVC.wrapTemplate(\n                [\"<div>\", _l(\"This job is currently running\"), \"</div>\"],\n                \"dataset\"\n            );\n            summaryTemplates[STATES.UPLOAD] = BASE_MVC.wrapTemplate(\n                [\"<div>\", _l(\"This dataset is currently uploading\"), \"</div>\"],\n                \"dataset\"\n            );\n            summaryTemplates[STATES.SETTING_METADATA] = BASE_MVC.wrapTemplate(\n                [\"<div>\", _l(\"Metadata is being auto-detected\"), \"</div>\"],\n                \"dataset\"\n            );\n            summaryTemplates[STATES.PAUSED] = BASE_MVC.wrapTemplate(\n                [\n                    \"<div>\",\n                    _l('This job is paused. Use the \"Resume Paused Jobs\" in the history menu to resume'),\n                    \"</div>\"\n                ],\n                \"dataset\"\n            );\n            summaryTemplates[STATES.ERROR] = BASE_MVC.wrapTemplate(\n                [\n                    \"<% if( !dataset.purged ){ %>\",\n                    \"<div><%- dataset.misc_blurb %></div>\",\n                    \"<% } %>\",\n                    '<span class=\"help-text\">',\n                    _l(\"An error occurred with this dataset\"),\n                    \":</span>\",\n                    '<div class=\"job-error-text\"><%- dataset.misc_info %></div>'\n                ],\n                \"dataset\"\n            );\n            summaryTemplates[STATES.EMPTY] = BASE_MVC.wrapTemplate(\n                [\"<div>\", _l(\"No data\"), \": <i><%- dataset.misc_blurb %></i></div>\"],\n                \"dataset\"\n            );\n            summaryTemplates.unknown = BASE_MVC.wrapTemplate(\n                ['<div>Error: unknown dataset state: \"<%- dataset.state %>\"</div>'],\n                \"dataset\"\n            );\n\n            // messages to be displayed only within the details section ('below the fold')\n            var detailMessageTemplates = {\n                resubmitted: BASE_MVC.wrapTemplate([\n                    // deleted not purged\n                    \"<% if( model.resubmitted ){ %>\",\n                    '<div class=\"resubmitted-msg infomessagesmall\">',\n                    _l(\"The job creating this dataset has been resubmitted\"),\n                    \"</div>\",\n                    \"<% } %>\"\n                ])\n            };\n\n            // this is applied to both old and new style display apps\n            var displayApplicationsTemplate = BASE_MVC.wrapTemplate(\n                [\n                    \"<% _.each( apps, function( app ){ %>\",\n                    '<div class=\"display-application\">',\n                    '<span class=\"display-application-location\"><%- app.label %></span> ',\n                    '<span class=\"display-application-links\">',\n                    \"<% _.each( app.links, function( link ){ %>\",\n                    '<a target=\"<%- link.target %>\" href=\"<%- link.href %>\">',\n                    \"<% print( _l( link.text ) ); %>\",\n                    \"</a> \",\n                    \"<% }); %>\",\n                    \"</span>\",\n                    \"</div>\",\n                    \"<% }); %>\"\n                ],\n                \"apps\"\n            );\n\n            return _.extend({}, _super.prototype.templates, {\n                warnings: warnings,\n                details: detailsTemplate,\n                noAccess: noAccessTemplate,\n                summaries: summaryTemplates,\n                detailMessages: detailMessageTemplates,\n                displayApplications: displayApplicationsTemplate\n            });\n        })();\n\n        // ============================================================================\n        return {\n            DatasetListItemView: DatasetListItemView\n        };\n    }\n);\n"]}