{"version":3,"sources":["mvc/dataset/dataset-li-edit.js"],"names":["define","_super","STATES","DATASET_LI","TAGS","ANNOTATIONS","faIconButton","BASE_MVC","_l","prototype","initialize","DatasetListItemEdit","extend","attributes","call","this","tagsEditorShown","purgeAllowed","_renderPrimaryActions","model","NOT_VIEWABLE","actions","get","concat","_renderEditButton","_renderDeleteButton","editBtnData","title","classes","DISCARDED","onclick","ev","preventDefault","Galaxy","router","push","dataset_id","href","root","id","faIcon","self","_","disabled","contains","UPLOAD","NEW","deletedAlready","find","isDeletedOrPurged","$el","trigger","_renderDetails","_setUpBehaviors","$details","jobID","OK","FAILED_METADATA","state","_renderTags","_renderAnnotation","_makeDbkeyEditLink","datasetID","helpString","help","creating_job","parseToolBuild","$","parseToolID","name","data","append","parseHTML","user","ajax","url","tool_id","done","fail","console","length","toggle","_renderSecondaryActions","log","_renderErrButton","ERROR","unshift","_renderRerunButton","_renderToolHelpButton","_renderVisualizationsButton","target","linkTarget","job_id","visualizations","urls","rerun","templates","li","frame","active","hasData","isObject","warn","hasUser","$visualizations","attr","tagsEditor","TagsEditor","addBack","_addScratchBookFn","$links","onshow","click","add","stopPropagation","$where","el","onshowFirstTime","annotationEditor","render","onhide","view","$activator","annotationEditorShown","AnnotationEditor","editableDbkey","edit","replaceWith","events","clone","click .undelete-link","click .purge-link","confirm","purge","click .delete-btn","click .rerun-btn","modelString","click .visualization-btn","click .dbkey a","_clickUndeleteLink","deleted","wrapTemplate","_clickPurgeLink","visualizationsTemplate","toString","warnings","failed_metadata"],"mappings":"aAAAA,QAEQ,qBASA,yBACA,UAPA,iBAQIC,oBACJ,eANA,sBASI,SAAAC,EAAAC,EAAAC,EAAAC,EAA4CC,EAAAC,EAAAC,GAGpCP,IAAAA,EAAOQ,EAAUC,oBAGjBC,EAAAV,EAAAW,QAGAF,WAAA,SAAAG,GACAZ,EAAAQ,UAAAC,WAAAI,KAAAC,KAAAF,GACKG,KAAAA,QAAkBH,EAAWG,QAXED,KAAAE,aAAAJ,EAAAI,eAAA,EAkBxCC,KAAAA,gBAAuBL,EAAAG,kBAAW,EAE1BD,KAAKI,sBAAuBjB,EAAOkB,wBAAc,GApBjBF,sBAAA,WAmBpC,IAAIG,EAAUpB,EAAOQ,UAAUS,sBAAsBJ,KAAKC,MAU9D,OAAAA,KAAAI,MAAAG,IAAA,WAAApB,EAAAkB,aAReC,EAYXpB,EAAAQ,UAAAS,sBACAJ,KAAAC,MACAQ,QAAAR,KAAAS,oBAAAT,KAAAU,yBAMIC,kBAAc,WACVC,IAAOnB,EAAGO,KAGVa,GAAAA,KAAST,MAJCG,IAAA,WAAApB,EAAA2B,YAAAd,KAAAI,MAAAG,IAAA,cAKVQ,OAAS,KAEDC,IAAAA,EAAGC,KAAAA,MAAHV,IAAA,UACAW,EAAOC,KAAOC,MAAKb,IAAA,WACfc,GADJT,MAAAnB,EAAA,mBAGH6B,KAAAJ,OAAAK,KAAA,4BAAAvB,KAAAI,MAAAN,WAAA0B,GACJC,OAAA,YAdTZ,QAAA,WAgBAE,QAAA,SAAAC,GACuBE,OAAAC,SACnBH,EAAuBC,iBACXC,OAAAC,OAAAC,KAAA,iBACY3B,WAAGiC,EAAAtB,MAAAN,WAAA0B,QAU/B,OAJWG,GAAYxC,GACnBwB,EAAAiB,UAAA,EACYhB,EACfD,EAAAC,MAAAnB,EAAA,wDACmBkB,IArEgBA,EAAAC,MAAAnB,EAAA,yCA0EpCkC,EAAAE,UAAA1C,EAAA2C,OAAA3C,EAAA4C,KAAA/B,KAAAI,MAAAG,IAAA,YACUH,EAAUwB,UAAe,EACxBjB,EAAPC,MAAAnB,EAAA,qCAPGF,EAAaoB,IAahBC,oBAAQoB,WAERP,IAAQzB,KAAAI,MAHQG,IAAA,cAIhBM,OAAS,KAGLa,IAAAA,EAASO,KACTP,EAAA1B,KAAAI,MAAA8B,oBACH,OAAA3C,GATLqB,MAAAnB,EAAAuC,EAAA,6BAAA,UAjFoCJ,SAAAI,EAoFhCP,OAAQ,WAUhBZ,QAAA,aACAE,QAAA,WAEIW,EAAAS,IAAAF,KAAA,wBAAAG,QAAA,YACelD,EAAAA,MAAAA,aAOdmD,eAAA,WAEIC,IAAAA,EAAgBC,EAArB7C,UAAA2C,eAAAtC,KAAAC,MACOuC,EAAPvC,KAAAI,MAAAG,IAAA,SASIiC,OAhBCxC,KAAKI,MAAM8B,qBAAuBP,EAAEE,UAAU1C,EAAOsD,GAAItD,EAAOuD,iBAAkBC,KAU3F3C,KAAA4C,YAAAL,GARQvC,KAAK6C,kBAAkBN,GACvBvC,KAAK8C,mBAAmBP,IAYxBQ,KAAAA,gBAAuBjD,GACfyC,GAOJS,sBAAmBC,WAFvB,IAGOF,EAAA/C,KAAAI,MAAAN,WAAAuB,WACH2B,EAAAA,KAAc5C,MAAAN,WAAAoD,aACjBxB,EAAA1B,KAEDmD,EAAA,SAAiCC,GATrC,IAAAJ,EAAA,kBAAAD,EAAA,sBAWIM,EAAcC,MAAdD,EAAAA,MACOL,GAAA,yBAAAO,EAAAD,KAAA,iBACEpC,GAAcqC,EAAAN,MAGfE,GAAA,mEAGAA,GAAA,SAPRzB,EAAAS,IAAAF,KAAA,YAAAuB,OAAAJ,EAAAK,UAAAT,KAUOU,EAAY,SAAMH,GAClBH,EAAAO,MACVC,IAAA1C,OAAAK,KAAA,aAAAgC,EAAAM,QAAA,WAEaC,KAAA,SADMP,GAEPJ,EAFOI,KAIRQ,KAAA,WACCZ,SAGDzB,OAAc,OAAdA,OAAKS,KAAIF,GACN,KAEC2B,GADGhD,MAAPnB,EAGU,aACF4D,QAAAA,WACH/B,KACAyC,IACGC,OAAAA,cAKHjD,QAZL,WAcPW,EAAAS,IAAAF,KAAA,aAAAgC,OAAA,EAxBLvC,EAAAS,IAAAF,KAAA,aAAAiC,SA2BJd,EAAAO,MAhBoBC,IAAK1C,OAAOK,KAAO,YAAciB,IAmB5BsB,KAAA,SAAAP,GACA7D,EAAUyE,KAE3BJ,KAAA,WACAC,QAAAI,IACI,yEACJ5B,EACI,YAcZ2B,wBAAA,WACAE,IAAAA,EAAkBnF,EAAAQ,UAAAyE,wBAAWpE,KAAAC,MACrB0B,OAAJ1B,KAAAI,MAAAG,IAAA,UACOhB,KAAAA,EAAauC,OACTrC,KAAGN,EAAAkB,aACJa,OAAAZ,EACNO,KAAS1B,EAAAmF,MAGDpD,OADCZ,EAAAiE,QAAAvE,KAAaqE,oBACPlD,EAAQX,QAAAR,KAAAwE,qBAAAxE,KAAAyE,0BACfzD,KAAGC,EAAAA,GACHC,KAAAA,EAAOC,gBACHE,OAAAA,EAAYK,QADhB1B,KAAAwE,qBAGHxE,KAAA0E,8BACJ1E,KAAAyE,0BAlBL,OAAOnE,EAAQE,QAAQR,KAAKwE,qBAAsBxE,KAAKyE,2BAyBnDJ,iBAAe,WACf,IAAO9E,EAAAA,KACHqB,OAAOnB,GACP6B,MAAWlB,EAAAA,6BACXS,KAASK,OAAAK,KAHO,6BAAAvB,KAAAI,MAAAN,WAAA0B,GAIhBmD,QAAaC,mBACbnD,OAAQ,SACRV,QAAS,SAAAC,GACDE,OAAOC,SACJF,EAAAA,iBACHC,OAAOC,OAAPC,KAAA,kBACIyD,WAAQ3B,EAAAA,MAAAA,WAAAA,UAQhCsB,mBAAA,WACAE,IAAAA,EAA6B1E,KAAAI,MAAAG,IAAA,gBACzB,GAAAP,KAAAI,MAAAG,IAAA,cACIuE,OAAAA,GAEW5C,MAAAA,EAAAA,sBAKXZ,KAAAtB,KAAAI,MAAA2E,KAAAC,MACHnE,QAAA,YACeiE,OAAAA,KAAAA,WACFrD,OAAA,aACVV,QAAA,SAAAC,GACHE,OAAAC,SAzBeH,EAAGC,iBA2BKC,OAAK+D,OAAL7D,KAAe0D,KACvCD,OAAA3B,SASIgC,4BAAJ,WAEQhE,IAAAA,EAAgBA,KAAOiE,MAAMC,IAAjC,kBACIlE,GACIN,KAAAA,MAAOsB,sBACP0B,KAAKR,UAFTpD,KAAAI,MAAAiF,WAIGpE,EAAAA,QAAAA,GAEN,OAAA,KAjR+B,IAAAU,EAAA2D,SAAAR,EAAA,IAqRxC,OA3BQ9E,KAAKuF,KAAK,yCA2BlB,KAGS,IAAKC,EAASpC,EAAApD,KAAAiF,UAAAH,eAAAA,EAAA9E,OAKfI,OAHHqF,EAAAxD,KAAA,0BAAAyD,KAAA,SAAA1F,KAAA4E,YAEIe,KAAAA,kBAAsBC,EAAW3D,KAAA,uBAAA4D,QAAA,wBAC3BJ,GAINK,kBALiC,SAAAC,GAOlCC,EAAQC,MAAA,SAAWjF,GACVf,OAAAA,OAAkBiB,OAAvBiE,MAAAC,SAR8BlE,OAAAiE,MAAAe,KAU1BtF,MAAA,gBACCX,IAAAA,EAAAA,MAAkByF,KAAvB,UAEQnG,EAAAA,iBACDE,EAAG0G,sBAOjBvD,YAAA,SAAAwD,GAjTmC,GAAApG,KAAAwF,QAAA,CAqTxC3C,IAAAA,EAAmB7C,KACVA,KAAKwF,WAAS,IAAAnG,EAAAuG,YACfxF,MAAAJ,KAAAI,MACHiG,GAAAD,EAAAnE,KAAA,iBACUqE,gBAAX,WACKC,KAALC,UAGIF,OAAAA,WACSE,EAALvG,iBAAA,GAEJwG,OAAA,WACQC,EAAAzG,iBAAW,GAPkC0G,WAAApH,GAU7CqB,MAAAnB,EAAA,qBACCmH,QAAAA,UAX4CnF,OAAA,YAarDkF,SAAYpH,EAAa0C,KAAA,sBAErBpB,KAASZ,iBACTwB,KAAQkE,WAAAzB,QAAA,KAKfrB,kBAAA,SAAAuD,GA/UmC,GAAApG,KAAAwF,QAAA,CAmVxC1C,IAAAA,EAAoB9C,KAChBA,KAAAuG,iBAAA,IAAAjH,EAAAuH,kBACSzG,MAAUJ,KAAAI,MACX0G,GAAAA,EAAAA,KAAkB,uBAGtBvE,gBAAc,WACjBvC,KAAAwG,UAGLR,OAAA,WACAU,EAAAE,uBAAA,GAEIH,OAAA,WACAC,EAAqBE,uBAF0B,GAI/CD,WAAmBpH,GACfqB,MAAAnB,EAAqB,2BALsBoB,QAAA,eAO/CY,OAAqB,eACZW,SAAQgE,EAAbnE,KAAA,sBAEJjC,KAAA4G,uBACSxE,KAAQmE,iBAAbrC,QAAA,KAKJpB,mBAAA,SAA4BP,GAhBmB,GAAA,MAAAvC,KAAAI,MAAAG,IAAA,oBAAAP,KAAAI,MAAA8B,oBAAA,CAmB/C,IAAA4E,EAAkB1D,EAAA,0BACDsC,KAAA,OAAb1F,KAAAI,MAAA2E,KAAAgC,MACHrB,KAAA,SAAA,QApXmCnD,EAAAN,KAAA,iBAAA+E,YAAAF,KAAAG,OAAAtF,EAAA9B,OAAA8B,EAAAuF,MAAAhI,EAAAQ,UAAAuH,SAgWpCE,uBAAwB,qBA6B5BC,oBAAA,kBAEQC,kBAAW,SAAArG,GACNZ,KAAMkH,QAAX,OAAAtH,KAAAgB,IAEGuG,oBAAP,SAAAvG,GAlYoChB,KAAAoC,QAAA,SAAApC,KAAAgB,IAqYxCwG,mBAAA,SAAAxG,GACAhB,KAAAoC,QAAA,QAAApC,KAAAgB,IAEQyG,wBAA2B,SAAAzG,GACxBhB,KAAAoC,QAAiBqF,aAAczH,KAAtCgB,IA1YZ0G,2BAAA,SAAA1G,GAiXgBhB,KAAKoC,QAAQ,YAAapC,KAAMgB,IA+BhD2G,iBAAA,SAAA3G,GACoBtB,KAAAA,QAAUuF,OAA9BjF,KAA2CgB,MAxBnC4G,mBAAoB,SAAS5G,GA2CrB,OAFR6G,KAASrI,MAASsI,YAEV,GAlBZC,gBAAA,SAAA/G,GAqESnB,OAvFGwH,QAAQ5H,EAAG,0EAwDnBuI,KAAAA,MAAAA,SA+BG,GA/EHC,SAAU,WAsFX,MAAA,gBADPjI,KAAAI,MAAAJ,KAAAI,MAAA,GAAA,cACO,OAAP,OA7EAR,EAAoBF,UAAUuF,UAAa,WACvC,IAAIiD,EAAWvG,EAAE9B,UAAWX,EAAOQ,UAAUuF,UAAUiD,UACnDC,gBAAiB3I,EAASsI,cAGlB,mDACA,4DACArI,EAAG,2DACH,0DACAA,EAAG,2CACH,OACA,SACA,WAEJ,WAGJoI,QAASrI,EAASsI,cAGV,kDAEA,gDACArI,EAAG,iCACH,6DACAA,EAAG,eACH,OACA,iCACA,0DACAA,EAAG,mCACH,OACA,UACA,SACA,WAEJ,aAIJuI,EAAyBxI,EAASsI,cAE9B,2CACA,8EACA,oDACArI,EAAG,gBACH,mCACA,0CACA,OAEA,iBACA,0DACA,oCACAA,EAAG,aACH,KACA,0CACA,OACA,yCACA,2DACA,qEACA,yCACA,4BACA,YACA,YACA,QACA,SACA,WAEJ,kBAGJ,OAAOkC,EAAE9B,UAAWX,EAAOQ,UAAUuF,WACjCiD,SAAUA,EACVpD,eAAgBkD,IAxEmB,IA8EvCpI,oBAAqBA","file":"../../../scripts/mvc/dataset/dataset-li-edit.js","sourcesContent":["define(\n    [\n        \"mvc/dataset/states\",\n        \"mvc/dataset/dataset-li\",\n        \"mvc/tag\",\n        \"mvc/annotation\",\n        \"ui/fa-icon-button\",\n        \"mvc/base-mvc\",\n        \"utils/localization\"\n    ],\n    function(STATES, DATASET_LI, TAGS, ANNOTATIONS, faIconButton, BASE_MVC, _l) {\n        \"use strict\";\n        //==============================================================================\n        var _super = DATASET_LI.DatasetListItemView;\n        /** @class Editing view for DatasetAssociation.\n */\n        var DatasetListItemEdit = _super.extend(\n            /** @lends DatasetListItemEdit.prototype */ {\n                /** set up: options */\n                initialize: function(attributes) {\n                    _super.prototype.initialize.call(this, attributes);\n                    this.hasUser = attributes.hasUser;\n\n                    /** allow user purge of dataset files? */\n                    this.purgeAllowed = attributes.purgeAllowed || false;\n\n                    //TODO: move to HiddenUntilActivatedViewMixin\n                    /** should the tags editor be shown or hidden initially? */\n                    this.tagsEditorShown = attributes.tagsEditorShown || false;\n                    /** should the tags editor be shown or hidden initially? */\n                    this.annotationEditorShown = attributes.annotationEditorShown || false;\n                },\n\n                // ......................................................................... titlebar actions\n                /** In this override, add the other two primary actions: edit and delete */\n                _renderPrimaryActions: function() {\n                    var actions = _super.prototype._renderPrimaryActions.call(this);\n                    if (this.model.get(\"state\") === STATES.NOT_VIEWABLE) {\n                        return actions;\n                    }\n                    // render the display, edit attr and delete icon-buttons\n                    return _super.prototype._renderPrimaryActions\n                        .call(this)\n                        .concat([this._renderEditButton(), this._renderDeleteButton()]);\n                },\n\n                //TODO: move titleButtons into state renderers, remove state checks in the buttons\n\n                /** Render icon-button to edit the attributes (format, permissions, etc.) this dataset. */\n                _renderEditButton: function() {\n                    var self = this;\n                    // don't show edit while uploading, in-accessible\n                    // DO show if in error (ala previous history panel)\n                    if (this.model.get(\"state\") === STATES.DISCARDED || !this.model.get(\"accessible\")) {\n                        return null;\n                    }\n                    var purged = this.model.get(\"purged\"),\n                        deleted = this.model.get(\"deleted\"),\n                        editBtnData = {\n                            title: _l(\"Edit attributes\"),\n                            href: Galaxy.root + \"datasets/edit?dataset_id=\" + this.model.attributes.id,\n                            faIcon: \"fa-pencil\",\n                            classes: \"edit-btn\",\n                            onclick: function(ev) {\n                                if (Galaxy.router) {\n                                    ev.preventDefault();\n                                    Galaxy.router.push(\"datasets/edit\", {\n                                        dataset_id: self.model.attributes.id\n                                    });\n                                }\n                            }\n                        };\n                    // disable if purged or deleted and explain why in the tooltip\n                    if (deleted || purged) {\n                        editBtnData.disabled = true;\n                        if (purged) {\n                            editBtnData.title = _l(\"Cannot edit attributes of datasets removed from disk\");\n                        } else if (deleted) {\n                            editBtnData.title = _l(\"Undelete dataset to edit attributes\");\n                        }\n\n                        // disable if still uploading or new\n                    } else if (_.contains([STATES.UPLOAD, STATES.NEW], this.model.get(\"state\"))) {\n                        editBtnData.disabled = true;\n                        editBtnData.title = _l(\"This dataset is not yet editable\");\n                    }\n                    return faIconButton(editBtnData);\n                },\n\n                /** Render icon-button to delete this hda. */\n                _renderDeleteButton: function() {\n                    // don't show delete if...\n                    if (!this.model.get(\"accessible\")) {\n                        return null;\n                    }\n\n                    var self = this,\n                        deletedAlready = this.model.isDeletedOrPurged();\n                    return faIconButton({\n                        title: !deletedAlready ? _l(\"Delete\") : _l(\"Dataset is already deleted\"),\n                        disabled: deletedAlready,\n                        faIcon: \"fa-times\",\n                        classes: \"delete-btn\",\n                        onclick: function() {\n                            // ...bler... tooltips being left behind in DOM (hover out never called on deletion)\n                            self.$el.find(\".icon-btn.delete-btn\").trigger(\"mouseout\");\n                            self.model[\"delete\"]();\n                        }\n                    });\n                },\n\n                // ......................................................................... details\n                /** In this override, add tags and annotations controls, make the ? dbkey a link to editing page */\n                _renderDetails: function() {\n                    //TODO: generalize to be allow different details for each state\n                    var $details = _super.prototype._renderDetails.call(this),\n                        state = this.model.get(\"state\");\n\n                    if (!this.model.isDeletedOrPurged() && _.contains([STATES.OK, STATES.FAILED_METADATA], state)) {\n                        this._renderTags($details);\n                        this._renderAnnotation($details);\n                        this._makeDbkeyEditLink($details);\n                    }\n\n                    this._setUpBehaviors($details);\n                    return $details;\n                },\n\n                /**************************************************************************\n     * Render help button to show tool help text without rerunning the tool.\n     * Issue #2100\n     */\n                _renderToolHelpButton: function() {\n                    var datasetID = this.model.attributes.dataset_id;\n                    var jobID = this.model.attributes.creating_job;\n                    var self = this;\n\n                    var parseToolBuild = function(data) {\n                        var helpString = '<div id=\"thdiv-' + datasetID + '\" class=\"toolhelp\">';\n                        if (data.name && data.help) {\n                            helpString += \"<strong>Tool help for \" + data.name + \"</strong><hr/>\";\n                            helpString += data.help;\n                        } else {\n                            helpString += \"<strong>Tool help is unavailable for this dataset.</strong><hr/>\";\n                        }\n                        helpString += \"</div>\";\n                        self.$el.find(\".details\").append($.parseHTML(helpString));\n                    };\n                    var parseToolID = function(data) {\n                        $.ajax({\n                            url: Galaxy.root + \"api/tools/\" + data.tool_id + \"/build\"\n                        })\n                            .done(function(data) {\n                                parseToolBuild(data);\n                            })\n                            .fail(function() {\n                                parseToolBuild({});\n                            });\n                    };\n                    if (Galaxy.user.id === null) {\n                        return null;\n                    }\n                    return faIconButton({\n                        title: _l(\"Tool Help\"),\n                        classes: \"icon-btn\",\n                        href: \"#\",\n                        faIcon: \"fa-question\",\n                        onclick: function() {\n                            var divString = \"thdiv-\" + datasetID;\n                            if (self.$el.find(\".toolhelp\").length > 0) {\n                                self.$el.find(\".toolhelp\").toggle();\n                            } else {\n                                $.ajax({\n                                    url: Galaxy.root + \"api/jobs/\" + jobID\n                                })\n                                    .done(function(data) {\n                                        parseToolID(data);\n                                    })\n                                    .fail(function() {\n                                        console.log(\n                                            'Failed at recovering job information from the  Galaxy API for job id \"' +\n                                                jobID +\n                                                '\".'\n                                        );\n                                    });\n                            }\n                        }\n                    });\n                },\n                //*************************************************************************\n\n                /** Add less commonly used actions in the details section based on state */\n                _renderSecondaryActions: function() {\n                    var actions = _super.prototype._renderSecondaryActions.call(this);\n                    switch (this.model.get(\"state\")) {\n                        case STATES.UPLOAD:\n                        case STATES.NOT_VIEWABLE:\n                            return actions;\n                        case STATES.ERROR:\n                            // error button comes first\n                            actions.unshift(this._renderErrButton());\n                            return actions.concat([this._renderRerunButton(), this._renderToolHelpButton()]);\n                        case STATES.OK:\n                        case STATES.FAILED_METADATA:\n                            return actions.concat([\n                                this._renderRerunButton(),\n                                this._renderVisualizationsButton(),\n                                this._renderToolHelpButton()\n                            ]);\n                    }\n                    return actions.concat([this._renderRerunButton(), this._renderToolHelpButton()]);\n                },\n\n                /** Render icon-button to report an error on this dataset to the galaxy admin. */\n                _renderErrButton: function() {\n                    var self = this;\n                    return faIconButton({\n                        title: _l(\"View or report this error\"),\n                        href: Galaxy.root + \"datasets/error?dataset_id=\" + this.model.attributes.id,\n                        classes: \"report-error-btn\",\n                        faIcon: \"fa-bug\",\n                        onclick: function(ev) {\n                            if (Galaxy.router) {\n                                ev.preventDefault();\n                                Galaxy.router.push(\"datasets/error\", {\n                                    dataset_id: self.model.attributes.id\n                                });\n                            }\n                        }\n                    });\n                },\n\n                /** Render icon-button to re-run the job that created this dataset. */\n                _renderRerunButton: function() {\n                    var creating_job = this.model.get(\"creating_job\");\n                    if (this.model.get(\"rerunnable\")) {\n                        return faIconButton({\n                            title: _l(\"Run this job again\"),\n                            href: this.model.urls.rerun,\n                            classes: \"rerun-btn\",\n                            target: this.linkTarget,\n                            faIcon: \"fa-refresh\",\n                            onclick: function(ev) {\n                                if (Galaxy.router) {\n                                    ev.preventDefault();\n                                    Galaxy.router.push(\"/\", {\n                                        job_id: creating_job\n                                    });\n                                }\n                            }\n                        });\n                    }\n                },\n\n                /** Render an icon-button or popupmenu of links based on the applicable visualizations */\n                _renderVisualizationsButton: function() {\n                    //TODO: someday - lazyload visualizations\n                    var visualizations = this.model.get(\"visualizations\");\n                    if (\n                        this.model.isDeletedOrPurged() ||\n                        !this.hasUser ||\n                        !this.model.hasData() ||\n                        _.isEmpty(visualizations)\n                    ) {\n                        return null;\n                    }\n                    if (!_.isObject(visualizations[0])) {\n                        this.warn(\"Visualizations have been switched off\");\n                        return null;\n                    }\n\n                    var $visualizations = $(this.templates.visualizations(visualizations, this));\n                    //HACK: need to re-write those directed at galaxy_main with linkTarget\n                    $visualizations.find('[target=\"galaxy_main\"]').attr(\"target\", this.linkTarget);\n                    // use addBack here to include the root $visualizations elem (for the case of 1 visualization)\n                    this._addScratchBookFn($visualizations.find(\".visualization-link\").addBack(\".visualization-link\"));\n                    return $visualizations;\n                },\n\n                /** add scratchbook functionality to visualization links */\n                _addScratchBookFn: function($links) {\n                    var li = this;\n                    $links.click(function(ev) {\n                        if (Galaxy.frame && Galaxy.frame.active) {\n                            Galaxy.frame.add({\n                                title: \"Visualization\",\n                                url: $(this).attr(\"href\")\n                            });\n                            ev.preventDefault();\n                            ev.stopPropagation();\n                        }\n                    });\n                },\n\n                //TODO: if possible move these to readonly view - but display the owner's tags/annotation (no edit)\n                /** Render the tags list/control */\n                _renderTags: function($where) {\n                    if (!this.hasUser) {\n                        return;\n                    }\n                    var view = this;\n                    this.tagsEditor = new TAGS.TagsEditor({\n                        model: this.model,\n                        el: $where.find(\".tags-display\"),\n                        onshowFirstTime: function() {\n                            this.render();\n                        },\n                        // persist state on the hda view (and not the editor) since these are currently re-created each time\n                        onshow: function() {\n                            view.tagsEditorShown = true;\n                        },\n                        onhide: function() {\n                            view.tagsEditorShown = false;\n                        },\n                        $activator: faIconButton({\n                            title: _l(\"Edit dataset tags\"),\n                            classes: \"tag-btn\",\n                            faIcon: \"fa-tags\"\n                        }).appendTo($where.find(\".actions .right\"))\n                    });\n                    if (this.tagsEditorShown) {\n                        this.tagsEditor.toggle(true);\n                    }\n                },\n\n                /** Render the annotation display/control */\n                _renderAnnotation: function($where) {\n                    if (!this.hasUser) {\n                        return;\n                    }\n                    var view = this;\n                    this.annotationEditor = new ANNOTATIONS.AnnotationEditor({\n                        model: this.model,\n                        el: $where.find(\".annotation-display\"),\n                        onshowFirstTime: function() {\n                            this.render();\n                        },\n                        // persist state on the hda view (and not the editor) since these are currently re-created each time\n                        onshow: function() {\n                            view.annotationEditorShown = true;\n                        },\n                        onhide: function() {\n                            view.annotationEditorShown = false;\n                        },\n                        $activator: faIconButton({\n                            title: _l(\"Edit dataset annotation\"),\n                            classes: \"annotate-btn\",\n                            faIcon: \"fa-comment\"\n                        }).appendTo($where.find(\".actions .right\"))\n                    });\n                    if (this.annotationEditorShown) {\n                        this.annotationEditor.toggle(true);\n                    }\n                },\n\n                /** If the format/dbkey/genome_build isn't set, make the display a link to the edit page */\n                _makeDbkeyEditLink: function($details) {\n                    // make the dbkey a link to editing\n                    if (this.model.get(\"metadata_dbkey\") === \"?\" && !this.model.isDeletedOrPurged()) {\n                        var editableDbkey = $('<a class=\"value\">?</a>')\n                            .attr(\"href\", this.model.urls.edit)\n                            .attr(\"target\", \"_top\");\n                        $details.find(\".dbkey .value\").replaceWith(editableDbkey);\n                    }\n                },\n\n                // ......................................................................... events\n                /** event map */\n                events: _.extend(_.clone(_super.prototype.events), {\n                    \"click .undelete-link\": \"_clickUndeleteLink\",\n                    \"click .purge-link\": \"_clickPurgeLink\",\n\n                    \"click .edit-btn\": function(ev) {\n                        this.trigger(\"edit\", this, ev);\n                    },\n                    \"click .delete-btn\": function(ev) {\n                        this.trigger(\"delete\", this, ev);\n                    },\n                    \"click .rerun-btn\": function(ev) {\n                        this.trigger(\"rerun\", this, ev);\n                    },\n                    \"click .report-err-btn\": function(ev) {\n                        this.trigger(\"report-err\", this, ev);\n                    },\n                    \"click .visualization-btn\": function(ev) {\n                        this.trigger(\"visualize\", this, ev);\n                    },\n                    \"click .dbkey a\": function(ev) {\n                        this.trigger(\"edit\", this, ev);\n                    }\n                }),\n\n                /** listener for item undelete (in the messages section) */\n                _clickUndeleteLink: function(ev) {\n                    this.model.undelete();\n                    return false;\n                },\n\n                /** listener for item purge (in the messages section) */\n                _clickPurgeLink: function(ev) {\n                    if (confirm(_l(\"This will permanently remove the data in your dataset. Are you sure?\"))) {\n                        this.model.purge();\n                    }\n                    return false;\n                },\n\n                // ......................................................................... misc\n                /** string rep */\n                toString: function() {\n                    var modelString = this.model ? this.model + \"\" : \"(no model)\";\n                    return \"HDAEditView(\" + modelString + \")\";\n                }\n            }\n        );\n\n        // ............................................................................ TEMPLATES\n        /** underscore templates */\n        DatasetListItemEdit.prototype.templates = (function() {\n            var warnings = _.extend({}, _super.prototype.templates.warnings, {\n                failed_metadata: BASE_MVC.wrapTemplate(\n                    [\n                        // in this override, provide a link to the edit page\n                        '<% if( dataset.state === \"failed_metadata\" ){ %>',\n                        '<div class=\"failed_metadata-warning warningmessagesmall\">',\n                        _l(\"An error occurred setting the metadata for this dataset\"),\n                        '<br /><a href=\"<%- dataset.urls.edit %>\" target=\"_top\">',\n                        _l(\"Set it manually or retry auto-detection\"),\n                        \"</a>\",\n                        \"</div>\",\n                        \"<% } %>\"\n                    ],\n                    \"dataset\"\n                ),\n\n                deleted: BASE_MVC.wrapTemplate(\n                    [\n                        // in this override, provide links to undelete or purge the dataset\n                        \"<% if( dataset.deleted && !dataset.purged ){ %>\",\n                        // deleted not purged\n                        '<div class=\"deleted-msg warningmessagesmall\">',\n                        _l(\"This dataset has been deleted\"),\n                        '<br /><a class=\"undelete-link\" href=\"javascript:void(0);\">',\n                        _l(\"Undelete it\"),\n                        \"</a>\",\n                        \"<% if( view.purgeAllowed ){ %>\",\n                        '<br /><a class=\"purge-link\" href=\"javascript:void(0);\">',\n                        _l(\"Permanently remove it from disk\"),\n                        \"</a>\",\n                        \"<% } %>\",\n                        \"</div>\",\n                        \"<% } %>\"\n                    ],\n                    \"dataset\"\n                )\n            });\n\n            var visualizationsTemplate = BASE_MVC.wrapTemplate(\n                [\n                    \"<% if( visualizations.length === 1 ){ %>\",\n                    '<a class=\"visualization-link icon-btn\" href=\"<%- visualizations[0].href %>\"',\n                    ' target=\"<%- visualizations[0].target %>\" title=\"',\n                    _l(\"Visualize in\"),\n                    ' <%- visualizations[0].html %>\">',\n                    '<span class=\"fa fa-bar-chart-o\"></span>',\n                    \"</a>\",\n\n                    \"<% } else { %>\",\n                    '<div class=\"visualizations-dropdown dropdown icon-btn\">',\n                    '<a data-toggle=\"dropdown\" title=\"',\n                    _l(\"Visualize\"),\n                    '\">',\n                    '<span class=\"fa fa-bar-chart-o\"></span>',\n                    \"</a>\",\n                    '<ul class=\"dropdown-menu\" role=\"menu\">',\n                    \"<% _.each( visualizations, function( visualization ){ %>\",\n                    '<li><a class=\"visualization-link\" href=\"<%- visualization.href %>\"',\n                    ' target=\"<%- visualization.target %>\">',\n                    \"<%- visualization.html %>\",\n                    \"</a></li>\",\n                    \"<% }); %>\",\n                    \"</ul>\",\n                    \"</div>\",\n                    \"<% } %>\"\n                ],\n                \"visualizations\"\n            );\n\n            return _.extend({}, _super.prototype.templates, {\n                warnings: warnings,\n                visualizations: visualizationsTemplate\n            });\n        })();\n\n        //==============================================================================\n        return {\n            DatasetListItemEdit: DatasetListItemEdit\n        };\n    }\n);\n"]}