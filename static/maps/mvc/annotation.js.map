{"version":3,"sources":["mvc/annotation.js"],"names":["define","baseMVC","_l","AnnotationEditor","Backbone","View","extend","LoggableMixin","tagName","className","options","tooltipConfig","placement","this","render","model","hiddenUntilActivated","$activator","view","$el","html","_template","use_textarea","make_text_editable","on_finish","$annotation","text","annotation","silent","fail","previous","get","escape","join","stopListening","find","remove","toString","off","prototype","call"],"mappings":"aAAAA,QAAQ,eAAgB,qBAAsB,oBAAqB,SAASC,EAASC,GA4EjF,OACIC,iBA3EJC,SAAAC,KAGKC,OAAOL,EAAQM,eADhBJ,OAAAA,EAAAA,+BAIIK,QACAC,QAAW,MAAXA,UAAW,qBAIPC,WAAUA,SAAWA,GACrBA,EAAKC,MACDC,KAAAA,cAAWF,EAAAC,gBADfC,UAAA,UAMIC,KAAKC,SAALD,KAAAE,MAAA,oBAAA,WADJF,KAAAC,WAZAD,KAAAG,qBAAAN,EAAAO,WAAAP,IAoBAI,OAAII,WACJ,IAAAA,EAAcL,KArBd,OAqBAA,KAAKM,IAAIC,KAAKP,KAAKQ,aAIfC,KAAAA,cADkCC,oBAElCC,cAAW,EACPN,UAAKO,SAAcC,GACnBR,EAAKH,cAAaY,KAAAA,GACdT,EAAKO,MAAAA,MAALE,WAA6BZ,IAAea,QAA5C,IAAAC,KAAA,WADJX,EAAAO,cAAAC,KAAAR,EAAAH,MAAAe,SAAA,oBA5BRjB,MAsCAQ,UAAIM,WACJ,IAAOA,EAAAd,KAAAE,MAAAgB,IAAA,cACH,OAIA,yBACA7B,EAAA,cA7CJ,WAmDJ,2BACAuB,EAAaO,OAAAL,GACF,UArDPM,KAAA,KA0DAR,YAAKA,WACL,OAAKS,KAAAA,IAAcC,KAAKpB,gBAI5BqB,OAAA,WACAC,KAAUZ,YAAAa,MACNzB,KAAQqB,cAAArB,KAADE,OACVX,SAAAC,KAAAkC,UAAAH,OAAAI,KAAA3B,OAILV,SAAAA,WADJ,OAAA,oBAAAU,KAAAE,MAAA,GAAA,KAAAkB,KAAA","file":"../../scripts/mvc/annotation.js","sourcesContent":["define([\"mvc/base-mvc\", \"utils/localization\", \"ui/editable-text\"], function(baseMVC, _l) {\n    // =============================================================================\n    /** A view on any model that has a 'annotation' attribute\n */\n    var AnnotationEditor = Backbone.View\n        .extend(baseMVC.LoggableMixin)\n        .extend(baseMVC.HiddenUntilActivatedViewMixin)\n        .extend({\n            tagName: \"div\",\n            className: \"annotation-display\",\n\n            /** Set up listeners, parse options */\n            initialize: function(options) {\n                options = options || {};\n                this.tooltipConfig = options.tooltipConfig || {\n                    placement: \"bottom\"\n                };\n                //console.debug( this, options );\n                // only listen to the model only for changes to annotations\n                this.listenTo(this.model, \"change:annotation\", function() {\n                    this.render();\n                });\n                this.hiddenUntilActivated(options.$activator, options);\n            },\n\n            /** Build the DOM elements, call select to on the created input, and set up behaviors */\n            render: function() {\n                var view = this;\n                this.$el.html(this._template());\n\n                //TODO: handle empties better\n                this.$annotation().make_text_editable({\n                    use_textarea: true,\n                    on_finish: function(newAnnotation) {\n                        view.$annotation().text(newAnnotation);\n                        view.model.save({ annotation: newAnnotation }, { silent: true }).fail(function() {\n                            view.$annotation().text(view.model.previous(\"annotation\"));\n                        });\n                    }\n                });\n                return this;\n            },\n\n            /** @returns {String} the html text used to build the view's DOM */\n            _template: function() {\n                var annotation = this.model.get(\"annotation\");\n                return [\n                    //TODO: make prompt optional\n                    '<label class=\"prompt\">',\n                    _l(\"Annotation\"),\n                    \"</label>\",\n                    // set up initial tags by adding as CSV to input vals (necc. to init select2)\n                    '<div class=\"annotation\">',\n                    _.escape(annotation),\n                    \"</div>\"\n                ].join(\"\");\n            },\n\n            /** @returns {jQuery} the main element for this view */\n            $annotation: function() {\n                return this.$el.find(\".annotation\");\n            },\n\n            /** shut down event listeners and remove this view's DOM */\n            remove: function() {\n                this.$annotation.off();\n                this.stopListening(this.model);\n                Backbone.View.prototype.remove.call(this);\n            },\n\n            /** string rep */\n            toString: function() {\n                return [\"AnnotationEditor(\", this.model + \"\", \")\"].join(\"\");\n            }\n        });\n    // =============================================================================\n    return {\n        AnnotationEditor: AnnotationEditor\n    };\n});\n"]}