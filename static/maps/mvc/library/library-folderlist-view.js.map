{"version":3,"sources":["mvc/library/library-folderlist-view.js"],"names":["define","FolderListView","el","progress","folderContainer","mod_utils","sort","mod_library_model","events","mod_library_dataset_view","Backbone","View","extend","progressStep","include_deleted","show_page","click #select-all-checkboxes","click .dataset_row","click .folder_row","click .sort-folder-link","collection","defaults","page_count","initialize","options","this","fetchFolder","_","modal","rowViews","that","Folder","id","listenTo","removeOne","url","attributes","rePaint","success","folder_container","render","response","responseJSON","FolderContainer","mod_toastr","error","Galaxy","libraries","back","urlRoot","onclick","fetch","model","err_msg","library_router","full_path","html","template","path","parent_library_id","order","upper_folder_id","length","dataset_id","row","showDatasetDetails","metadata","css","findWhere","total_items_count","page_start","preferences","items_to_render","$","tooltip","get","folderToolbarView","reset","removeAllRows","models","renderAll","Math","ceil","checkEmptiness","slice","items_shown","folderListView","renderPaginator","postRender","addAll","each","add","fetched_metadata","contains_file_or_folder","type","rowView","mod_library_folderrow_view","FolderRowView","find","reverse","renderOne","set","$el","after","hide","sortFolder","filter","data","remove","sort_by","show","sortColumnClicked","event","preventDefault","selected","renderSortIcon","sortByNameAsc","sortByNameDesc","selectAll","target","checkbox","$row","checked","source","closest","makeDarkRow","makeWhiteRow","selectClickedRow","removeClass","localName","addClass","templateFolder","join"],"mappings":"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","file":"../../../scripts/mvc/library/library-folderlist-view.js","sourcesContent":["define(\n    [\n        \"layout/masthead\",\n        \"utils/utils\",\n        \"libs/toastr\",\n        \"mvc/library/library-model\",\n        \"mvc/library/library-folderrow-view\",\n        \"mvc/library/library-dataset-view\"\n    ],\n    function(\n        mod_masthead,\n        mod_utils,\n        mod_toastr,\n        mod_library_model,\n        mod_library_folderrow_view,\n        mod_library_dataset_view\n    ) {\n        var FolderListView = Backbone.View.extend({\n            el: \"#folder_items_element\",\n            // progress percentage\n            progress: 0,\n            // progress rate per one item\n            progressStep: 1,\n\n            folderContainer: null,\n\n            sort: \"asc\",\n\n            events: {\n                \"click #select-all-checkboxes\": \"selectAll\",\n                \"click .dataset_row\": \"selectClickedRow\",\n                \"click .folder_row\": \"selectClickedRow\",\n                \"click .sort-folder-link\": \"sortColumnClicked\"\n            },\n\n            collection: null,\n\n            defaults: {\n                include_deleted: false,\n                page_count: null,\n                show_page: null\n            },\n\n            /**\n     * Initialize and fetch the folder from the server.\n     * @param  {object} options an object with options\n     */\n            initialize: function(options) {\n                this.options = _.defaults(this.options || {}, this.defaults, options);\n                this.modal = null;\n                // map of folder item ids to item views = cache\n                this.rowViews = {};\n\n                // create a collection of folder items for this view\n                this.collection = new mod_library_model.Folder();\n\n                // start to listen if someone modifies the collection\n                this.listenTo(this.collection, \"add\", this.renderOne);\n                this.listenTo(this.collection, \"remove\", this.removeOne);\n                this.listenTo(this.collection, \"sort\", this.rePaint);\n                this.listenTo(this.collection, \"reset\", this.rePaint);\n\n                this.fetchFolder();\n            },\n\n            fetchFolder: function(options) {\n                var options = options || {};\n                this.options.include_deleted = options.include_deleted;\n                var that = this;\n\n                this.folderContainer = new mod_library_model.FolderContainer({\n                    id: this.options.id\n                });\n                this.folderContainer.url = this.folderContainer.attributes.urlRoot + this.options.id + \"/contents\";\n\n                if (this.options.include_deleted) {\n                    this.folderContainer.url = this.folderContainer.url + \"?include_deleted=true\";\n                }\n                this.folderContainer.fetch({\n                    success: function(folder_container) {\n                        that.folder_container = folder_container;\n                        that.render();\n                    },\n                    error: function(model, response) {\n                        if (typeof response.responseJSON !== \"undefined\") {\n                            mod_toastr.error(response.responseJSON.err_msg + \" Click this to go back.\", \"\", {\n                                onclick: function() {\n                                    Galaxy.libraries.library_router.back();\n                                }\n                            });\n                        } else {\n                            mod_toastr.error(\"An error occurred. Click this to go back.\", \"\", {\n                                onclick: function() {\n                                    Galaxy.libraries.library_router.back();\n                                }\n                            });\n                        }\n                    }\n                });\n            },\n\n            render: function(options) {\n                this.options = _.extend(this.options, options);\n                var template = this.templateFolder();\n                $(\".tooltip\").hide();\n\n                // find the upper id in the full path\n                var path = this.folderContainer.attributes.metadata.full_path;\n                var upper_folder_id;\n                if (path.length === 1) {\n                    // the library is above us\n                    upper_folder_id = 0;\n                } else {\n                    upper_folder_id = path[path.length - 2][0];\n                }\n\n                this.$el.html(\n                    template({\n                        path: this.folderContainer.attributes.metadata.full_path,\n                        parent_library_id: this.folderContainer.attributes.metadata.parent_library_id,\n                        id: this.options.id,\n                        upper_folder_id: upper_folder_id,\n                        order: this.sort\n                    })\n                );\n\n                // when dataset_id is present render its details too\n                if (this.options.dataset_id) {\n                    var row = _.findWhere(that.rowViews, {\n                        id: this.options.dataset_id\n                    });\n                    if (row) {\n                        row.showDatasetDetails();\n                    } else {\n                        mod_toastr.error(\"Requested dataset not found. Showing folder instead.\");\n                    }\n                } else {\n                    if (this.options.show_page === null || this.options.show_page < 1) {\n                        this.options.show_page = 1;\n                    }\n                    this.paginate();\n                }\n                $(\"#center [data-toggle]\").tooltip();\n                $(\"#center\").css(\"overflow\", \"auto\");\n            },\n\n            paginate: function(options) {\n                this.options = _.extend(this.options, options);\n\n                if (this.options.show_page === null || this.options.show_page < 1) {\n                    this.options.show_page = 1;\n                }\n                this.options.total_items_count = this.folder_container.get(\"folder\").models.length;\n                this.options.page_count = Math.ceil(\n                    this.options.total_items_count / Galaxy.libraries.preferences.get(\"folder_page_size\")\n                );\n                var page_start = Galaxy.libraries.preferences.get(\"folder_page_size\") * (this.options.show_page - 1);\n                var items_to_render = null;\n                items_to_render = this.folder_container\n                    .get(\"folder\")\n                    .models.slice(page_start, page_start + Galaxy.libraries.preferences.get(\"folder_page_size\"));\n                this.options.items_shown = items_to_render.length;\n                // User requests page with no items\n                if (\n                    Galaxy.libraries.preferences.get(\"folder_page_size\") * this.options.show_page >\n                    this.options.total_items_count + Galaxy.libraries.preferences.get(\"folder_page_size\")\n                ) {\n                    items_to_render = [];\n                }\n                Galaxy.libraries.folderToolbarView.renderPaginator(this.options);\n                this.collection.reset(items_to_render);\n            },\n\n            rePaint: function(options) {\n                this.options = _.extend(this.options, options);\n                this.removeAllRows();\n                this.renderAll();\n                this.checkEmptiness();\n            },\n\n            /**\n     * Adds all given models to the collection.\n     * @param {array of Item or FolderAsModel} array of models that should\n     *  be added to the view's collection.\n     */\n            addAll: function(models) {\n                _.each(models, function(model) {\n                    Galaxy.libraries.folderListView.collection.add(model, {\n                        sort: false\n                    });\n                });\n                $(\"#center [data-toggle]\").tooltip();\n                this.checkEmptiness();\n                this.postRender();\n            },\n\n            /**\n     * Call this after all models are added to the collection\n     * to ensure that the folder toolbar will show proper options\n     * and that event will be bound on all subviews.\n     */\n            postRender: function() {\n                var fetched_metadata = this.folderContainer.attributes.metadata;\n                fetched_metadata.contains_file_or_folder =\n                    typeof this.collection.findWhere({ type: \"file\" }) !== \"undefined\" ||\n                    typeof this.collection.findWhere({ type: \"folder\" }) !== \"undefined\";\n                Galaxy.libraries.folderToolbarView.configureElements(fetched_metadata);\n            },\n\n            /**\n     * Iterates this view's collection and calls the render\n     * function for each. Also binds the hover behavior.\n     */\n            renderAll: function() {\n                var that = this;\n                _.each(this.collection.models.reverse(), function(model) {\n                    that.renderOne(model);\n                });\n                this.postRender();\n            },\n\n            /**\n     * Creates a view for the given model and adds it to the folder view.\n     * @param {Item or FolderAsModel} model of the view that will be rendered\n     */\n            renderOne: function(model) {\n                this.options.contains_file_or_folder = true;\n                //if (model.get('type') !== 'folder'){\n                // model.set('readable_size', this.size_to_string(model.get('file_size')));\n                //}\n                model.set(\"folder_id\", this.id);\n                var rowView = new mod_library_folderrow_view.FolderRowView({\n                    model: model\n                });\n\n                // save new rowView to cache\n                this.rowViews[model.get(\"id\")] = rowView;\n\n                this.$el.find(\"#first_folder_item\").after(rowView.el);\n            },\n\n            /**\n     * Remove the view of the given model from the DOM.\n     * @param {Item or FolderAsModel} model of the view that will be removed\n     */\n            removeOne: function(model) {\n                this.$el\n                    .find(\"tr\")\n                    .filter(function() {\n                        return $(this).data(\"id\") && $(this).data(\"id\") === model.id;\n                    })\n                    .remove();\n            },\n\n            /**\n     * Remove all dataset and folder row elements from the DOM.\n     */\n            removeAllRows: function() {\n                $(\".library-row\").remove();\n            },\n\n            /** Checks whether the list is empty and adds/removes the message */\n            checkEmptiness: function() {\n                if (this.$el.find(\".dataset_row\").length === 0 && this.$el.find(\".folder_row\").length === 0) {\n                    this.$el.find(\".empty-folder-message\").show();\n                } else {\n                    this.$el.find(\".empty-folder-message\").hide();\n                }\n            },\n\n            /** User clicked the table heading = he wants to sort stuff */\n            sortColumnClicked: function(event) {\n                event.preventDefault();\n                if (this.sort === \"asc\") {\n                    this.sortFolder(\"name\", \"desc\");\n                    this.sort = \"desc\";\n                } else {\n                    this.sortFolder(\"name\", \"asc\");\n                    this.sort = \"asc\";\n                }\n                this.renderSortIcon();\n            },\n\n            /**\n     *  Sorts the underlying collection according to the parameters received.\n     *  Currently supports only sorting by name.\n     */\n            sortFolder: function(sort_by, order) {\n                // default to asc sort by name\n                if (sort_by === \"undefined\" && order === \"undefined\") {\n                    return this.collection.sortByNameAsc();\n                }\n                if (sort_by === \"name\") {\n                    if (order === \"asc\") {\n                        return this.collection.sortByNameAsc();\n                    } else if (order === \"desc\") {\n                        return this.collection.sortByNameDesc();\n                    }\n                }\n            },\n\n            /**\n     * User clicked the checkbox in the table heading\n     * @param  {context} event\n     */\n            selectAll: function(event) {\n                var selected = event.target.checked;\n                that = this;\n                // Iterate each checkbox\n                $(\":checkbox\", \"#folder_list_body\").each(function() {\n                    this.checked = selected;\n                    var $row = $(this).closest(\"tr\");\n                    // Change color of selected/unselected\n                    if (selected) {\n                        that.makeDarkRow($row);\n                    } else {\n                        that.makeWhiteRow($row);\n                    }\n                });\n            },\n\n            /**\n     * Check checkbox if user clicks on the whole row or\n     *  on the checkbox itself\n     */\n            selectClickedRow: function(event) {\n                var checkbox = \"\";\n                var $row;\n                var source;\n                $row = $(event.target).closest(\"tr\");\n                if (event.target.localName === \"input\") {\n                    checkbox = event.target;\n                    source = \"input\";\n                } else if (event.target.localName === \"td\") {\n                    checkbox = $row.find(\":checkbox\")[0];\n                    source = \"td\";\n                }\n                if (checkbox.checked) {\n                    if (source === \"td\") {\n                        checkbox.checked = \"\";\n                        this.makeWhiteRow($row);\n                    } else if (source === \"input\") {\n                        this.makeDarkRow($row);\n                    }\n                } else {\n                    if (source === \"td\") {\n                        checkbox.checked = \"selected\";\n                        this.makeDarkRow($row);\n                    } else if (source === \"input\") {\n                        this.makeWhiteRow($row);\n                    }\n                }\n            },\n\n            makeDarkRow: function($row) {\n                $row.removeClass(\"light\").addClass(\"dark\");\n                $row\n                    .find(\"a\")\n                    .removeClass(\"light\")\n                    .addClass(\"dark\");\n                $row\n                    .find(\".fa-file-o\")\n                    .removeClass(\"fa-file-o\")\n                    .addClass(\"fa-file\");\n                $row\n                    .find(\".fa-folder-o\")\n                    .removeClass(\"fa-folder-o\")\n                    .addClass(\"fa-folder\");\n            },\n\n            makeWhiteRow: function($row) {\n                $row.removeClass(\"dark\").addClass(\"light\");\n                $row\n                    .find(\"a\")\n                    .removeClass(\"dark\")\n                    .addClass(\"light\");\n                $row\n                    .find(\".fa-file\")\n                    .removeClass(\"fa-file\")\n                    .addClass(\"fa-file-o\");\n                $row\n                    .find(\".fa-folder\")\n                    .removeClass(\"fa-folder\")\n                    .addClass(\"fa-folder-o\");\n            },\n\n            renderSortIcon: function() {\n                if (this.sort === \"asc\") {\n                    $(\".sort-icon\")\n                        .removeClass(\"fa-sort-alpha-desc\")\n                        .addClass(\"fa-sort-alpha-asc\");\n                } else {\n                    $(\".sort-icon\")\n                        .removeClass(\"fa-sort-alpha-asc\")\n                        .addClass(\"fa-sort-alpha-desc\");\n                }\n            },\n\n            templateFolder: function() {\n                return _.template(\n                    [\n                        // BREADCRUMBS\n                        '<ol class=\"breadcrumb\">',\n                        '<li><a title=\"Return to the list of libraries\" href=\"#\">Libraries</a></li>',\n                        \"<% _.each(path, function(path_item) { %>\",\n                        \"<% if (path_item[0] != id) { %>\",\n                        '<li><a title=\"Return to this folder\" href=\"#/folders/<%- path_item[0] %>\"><%- path_item[1] %></a> </li> ',\n                        \"<% } else { %>\",\n                        '<li class=\"active\"><span title=\"You are in this folder\"><%- path_item[1] %></span></li>',\n                        \"<% } %>\",\n                        \"<% }); %>\",\n                        \"</ol>\",\n\n                        // FOLDER CONTENT\n                        '<table data-library-id=\"<%- parent_library_id  %>\" class=\"grid table table-condensed\">',\n                        \"<thead>\",\n                        '<th class=\"button_heading\"></th>',\n                        '<th style=\"text-align: center; width: 20px; \" title=\"Check to select all datasets\"><input id=\"select-all-checkboxes\" style=\"margin: 0;\" type=\"checkbox\"></th>',\n                        '<th><a class=\"sort-folder-link\" title=\"Click to reverse order\" href=\"#\">name</a> <span title=\"Sorted alphabetically\" class=\"sort-icon fa fa-sort-alpha-<%- order %>\"></span></th>',\n                        '<th style=\"width:20%;\">description</th>',\n                        '<th style=\"width:5%;\">data type</th>',\n                        '<th style=\"width:10%;\">size</th>',\n                        '<th style=\"width:160px;\">time updated (UTC)</th>',\n                        '<th style=\"width:5%;\">state</th> ',\n                        '<th style=\"width:150px;\"></th> ',\n                        \"</thead>\",\n                        '<tbody id=\"folder_list_body\">',\n                        '<tr id=\"first_folder_item\">',\n                        \"<td>\",\n                        '<a href=\"#<% if (upper_folder_id !== 0){ print(\"folders/\" + upper_folder_id)} %>\" title=\"Go to parent folder\" class=\"btn_open_folder btn btn-default btn-xs\">..<a>',\n                        \"</td>\",\n                        \"<td></td>\",\n                        \"<td></td>\",\n                        \"<td></td>\",\n                        \"<td></td>\",\n                        \"<td></td>\",\n                        \"<td></td>\",\n                        \"<td></td>\",\n                        \"<td></td>\",\n                        \"</tr>\",\n                        \"</tbody>\",\n                        \"</table>\",\n                        '<div class=\"empty-folder-message\" style=\"display:none;\">',\n                        \"This folder is either empty or you do not have proper access permissions to see the contents. If you expected something to show up\",\n                        ' please consult the <a href=\"https://galaxyproject.org/data-libraries/#permissions\" target=\"_blank\">library security wikipage</a>',\n                        ' or visit the <a href=\"https://biostar.usegalaxy.org/\" target=\"_blank\">Galaxy support site</a>.',\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            }\n        });\n\n        return {\n            FolderListView: FolderListView\n        };\n    }\n);\n"]}