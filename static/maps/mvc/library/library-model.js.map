{"version":3,"sources":["mvc/library/library-model.js"],"names":["define","Library","Backbone","Model","extend","urlRoot","Galaxy","root","isVisible","show_deleted","this","Libraries","Collection","model","sort_key","sort_order","options","search","search_term","lowercase_term","toLowerCase","data","indexOf","getVisible","filters","item","filteredLibraries","sortByNameAsc","comparator","libraryA","libraryB","get","sort","sortByNameDesc","LibraryItem","Ldda","FolderAsModel","Folder","itemA","itemB","FolderContainer","defaults","folder","id","parse","obj","reset","i","folder_contents","length","type","folder_item","add","file_item","emit","error","HistoryItem","HistoryContents","initialize","url","GalaxyHistory","GalaxyHistories","Jstree","Item"],"mappings":"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","file":"../../../scripts/mvc/library/library-model.js","sourcesContent":["define([], function() {\n    // ============================================================================\n    // LIBRARY RELATED MODELS\n\n    var Library = Backbone.Model.extend({\n        urlRoot: Galaxy.root + \"api/libraries/\",\n\n        /** based on show_deleted would this lib show in the list of lib's?\n       *  @param {Boolean} show_deleted are we including deleted libraries?\n       */\n        isVisible: function(show_deleted) {\n            var isVisible = true;\n            if (!show_deleted && this.get(\"deleted\")) {\n                isVisible = false;\n            }\n            return isVisible;\n        }\n    });\n\n    var Libraries = Backbone.Collection.extend({\n        urlRoot: Galaxy.root + \"api/libraries\",\n\n        model: Library,\n\n        sort_key: \"name\", // default\n\n        sort_order: null, // default\n\n        initialize: function(options) {\n            options = options || {};\n        },\n\n        search: function(search_term) {\n            /**\n         * Search the collection and return only the models that have\n         * the search term in their names.\n         * [the term to search]\n         * @type {string}\n         */\n            if (search_term == \"\") return this;\n            var lowercase_term = search_term.toLowerCase();\n            return this.filter(function(data) {\n                var lowercase_name = data.get(\"name\").toLowerCase();\n                return lowercase_name.indexOf(lowercase_term) !== -1;\n            });\n        },\n\n        /** Get every 'shown' library in this collection based on deleted filter\n       *  @param {Boolean} show_deleted are we including deleted libraries?\n       *  @returns array of library models\n       */\n        getVisible: function(show_deleted, filters) {\n            filters = filters || [];\n            var filteredLibraries = new Libraries(\n                this.filter(function(item) {\n                    return item.isVisible(show_deleted);\n                })\n            );\n\n            return filteredLibraries;\n        },\n\n        /** Sort collection by library name (ascending) and return the sorted\n       *  collection\n       */\n        sortByNameAsc: function() {\n            this.comparator = function(libraryA, libraryB) {\n                if (libraryA.get(\"name\").toLowerCase() > libraryB.get(\"name\").toLowerCase()) {\n                    return 1; // after\n                }\n                if (libraryB.get(\"name\").toLowerCase() > libraryA.get(\"name\").toLowerCase()) {\n                    return -1; // before\n                }\n                return 0; // equal\n            };\n            this.sort();\n            return this;\n        },\n\n        /** Sort collection by library name (descending) and return the sorted\n       *  collection\n       */\n        sortByNameDesc: function() {\n            this.comparator = function(libraryA, libraryB) {\n                if (libraryA.get(\"name\").toLowerCase() > libraryB.get(\"name\").toLowerCase()) {\n                    return -1; // before\n                }\n                if (libraryB.get(\"name\").toLowerCase() > libraryA.get(\"name\").toLowerCase()) {\n                    return 1; // after\n                }\n                return 0; // equal\n            };\n            this.sort();\n            return this;\n        }\n    });\n\n    // ============================================================================\n    // FOLDER RELATED MODELS\n\n    var LibraryItem = Backbone.Model.extend({});\n\n    var Ldda = LibraryItem.extend({\n        urlRoot: Galaxy.root + \"api/libraries/datasets/\"\n    });\n\n    var FolderAsModel = LibraryItem.extend({\n        urlRoot: Galaxy.root + \"api/folders/\"\n    });\n\n    var Folder = Backbone.Collection.extend({\n        model: LibraryItem,\n\n        /** Sort collection by item name (ascending) and return the sorted\n       *  collection. Folders go before datasets.\n       */\n        sortByNameAsc: function() {\n            this.comparator = function(itemA, itemB) {\n                if (itemA.get(\"type\") === itemB.get(\"type\")) {\n                    if (itemA.get(\"name\").toLowerCase() > itemB.get(\"name\").toLowerCase()) {\n                        return 1; // after\n                    }\n                    if (itemB.get(\"name\").toLowerCase() > itemA.get(\"name\").toLowerCase()) {\n                        return -1; // before\n                    }\n                    return 0; // equal\n                } else {\n                    if (itemA.get(\"type\") === \"folder\") {\n                        return -1; // folder is always before dataset\n                    } else {\n                        return 1;\n                    }\n                }\n            };\n            this.sort();\n            return this;\n        },\n\n        /** Sort collection by item name (descending) and return the sorted\n       *  collection. Folders go before datasets.\n       */\n        sortByNameDesc: function() {\n            this.comparator = function(itemA, itemB) {\n                if (itemA.get(\"type\") === itemB.get(\"type\")) {\n                    if (itemA.get(\"name\").toLowerCase() > itemB.get(\"name\").toLowerCase()) {\n                        return -1; // after\n                    }\n                    if (itemB.get(\"name\").toLowerCase() > itemA.get(\"name\").toLowerCase()) {\n                        return 1; // before\n                    }\n                    return 0; // equal\n                } else {\n                    if (itemA.get(\"type\") === \"folder\") {\n                        return -1; // folder is always before dataset\n                    } else {\n                        return 1;\n                    }\n                }\n            };\n            this.sort();\n            return this;\n        }\n    });\n\n    var FolderContainer = Backbone.Model.extend({\n        defaults: {\n            folder: new Folder(),\n            urlRoot: Galaxy.root + \"api/folders/\",\n            id: \"unknown\"\n        },\n        parse: function(obj) {\n            // empty the collection\n            this.get(\"folder\").reset();\n            // response is not a simple array, it contains metadata\n            // this will update the inner collection\n            for (var i = 0; i < obj.folder_contents.length; i++) {\n                if (obj.folder_contents[i].type === \"folder\") {\n                    var folder_item = new FolderAsModel(obj.folder_contents[i]);\n                    this.get(\"folder\").add(folder_item);\n                } else if (obj.folder_contents[i].type === \"file\") {\n                    var file_item = new Ldda(obj.folder_contents[i]);\n                    this.get(\"folder\").add(file_item);\n                } else {\n                    Galaxy.emit.error(\"Unknown folder item type encountered while parsing response.\");\n                }\n            }\n            return obj;\n        }\n    });\n\n    // ============================================================================\n    // HISTORY RELATED MODELS\n    // TODO UNITE\n\n    var HistoryItem = Backbone.Model.extend({\n        urlRoot: Galaxy.root + \"api/histories/\"\n    });\n\n    var HistoryContents = Backbone.Collection.extend({\n        urlRoot: Galaxy.root + \"api/histories/\",\n        initialize: function(options) {\n            this.id = options.id;\n        },\n        url: function() {\n            return this.urlRoot + this.id + \"/contents\";\n        },\n        model: HistoryItem\n    });\n\n    var GalaxyHistory = Backbone.Model.extend({\n        urlRoot: Galaxy.root + \"api/histories/\"\n    });\n\n    var GalaxyHistories = Backbone.Collection.extend({\n        url: Galaxy.root + \"api/histories\",\n        model: GalaxyHistory\n    });\n\n    // ============================================================================\n    // JSTREE MODEL\n    /** Represents folder structure parsable by the jstree component.\n     *\n     */\n\n    var Jstree = Backbone.Model.extend({\n        urlRoot: Galaxy.root + \"api/remote_files\"\n    });\n\n    return {\n        Library: Library,\n        Libraries: Libraries,\n        Item: Ldda,\n        Ldda: Ldda,\n        FolderAsModel: FolderAsModel,\n        Folder: Folder,\n        FolderContainer: FolderContainer,\n        HistoryItem: HistoryItem,\n        HistoryContents: HistoryContents,\n        GalaxyHistory: GalaxyHistory,\n        GalaxyHistories: GalaxyHistories,\n        Jstree: Jstree\n    };\n});\n"]}