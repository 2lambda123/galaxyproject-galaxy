{"version":3,"sources":["mvc/library/library-library-view.js"],"names":["define","mod_toastr","mod_select","LibraryView","Backbone","View","extend","model","options","events","click .toolbtn_save_permissions","initialize","id","this","fetchLibrary","mod_library_model","Library","that","success","fetch","show_permissions","showPermissions","error","onclick","responseJSON","Galaxy","libraries","library_router","err_msg","back","$","_","is_unrestricted","fetched_permissions","access_library_role_list","length","set","is_admin","user","template","templateLibraryPermissions","self","library","prepareSelectBoxes","done","fail","tooltip","selected_roles","_serializeRoles","role_list","i","push","selected_access_library_roles","selected_add_item_roles","selected_manage_library_roles","_createSelectOptions","add_library_item_role_list","manage_library_role_list","modify_library_role_list","accessSelectObject","is_library_access","select_options","css","multiple","container","find","ajax","selected_modify_library_roles","data","page","q","page_limit","placeholder","$el","results","url","root","formatResult","dataType","role","quietMillis","term","initSelection","element","total","roles","more","name","type","formatSelection","initialData","init_data","callback","makeDatasetPrivate","val","split","each","item","dropdownCssClass","post","ids_list","roles_list","removeDatasetRestrictions","savePermissions","access_ids","_extractIds","add_ids","manage_ids","event","select2","addSelectObject","manageSelectObject","modify_ids","modifySelectObject","add_ids[]","manage_ids[]","modify_ids[]","join"],"mappings":"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","file":"../../../scripts/mvc/library/library-library-view.js","sourcesContent":["define([\"libs/toastr\", \"mvc/library/library-model\", \"mvc/ui/ui-select\"], function(\n    mod_toastr,\n    mod_library_model,\n    mod_select\n) {\n    var LibraryView = Backbone.View.extend({\n        el: \"#center\",\n\n        model: null,\n\n        options: {},\n\n        events: {\n            \"click .toolbtn_save_permissions\": \"savePermissions\"\n        },\n\n        initialize: function(options) {\n            this.options = _.extend(this.options, options);\n            if (this.options.id) {\n                this.fetchLibrary();\n            }\n        },\n\n        fetchLibrary: function(options) {\n            this.options = _.extend(this.options, options);\n            this.model = new mod_library_model.Library({\n                id: this.options.id\n            });\n            var that = this;\n            this.model.fetch({\n                success: function() {\n                    if (that.options.show_permissions) {\n                        that.showPermissions();\n                    }\n                },\n                error: function(model, response) {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        mod_toastr.error(response.responseJSON.err_msg + \" Click this to go back.\", \"\", {\n                            onclick: function() {\n                                Galaxy.libraries.library_router.back();\n                            }\n                        });\n                    } else {\n                        mod_toastr.error(\"An error occurred. Click this to go back.\", \"\", {\n                            onclick: function() {\n                                Galaxy.libraries.library_router.back();\n                            }\n                        });\n                    }\n                }\n            });\n        },\n\n        showPermissions: function(options) {\n            this.options = _.extend(this.options, options);\n            $(\".tooltip\").remove();\n\n            if (this.options.fetched_permissions !== undefined) {\n                if (this.options.fetched_permissions.access_library_role_list.length === 0) {\n                    this.model.set({ is_unrestricted: true });\n                } else {\n                    this.model.set({ is_unrestricted: false });\n                }\n            }\n            var is_admin = false;\n            if (Galaxy.user) {\n                is_admin = Galaxy.user.isAdmin();\n            }\n            var template = this.templateLibraryPermissions();\n            this.$el.html(template({ library: this.model, is_admin: is_admin }));\n\n            var self = this;\n            $.get(Galaxy.root + \"api/libraries/\" + self.id + \"/permissions?scope=current\")\n                .done(function(fetched_permissions) {\n                    self.prepareSelectBoxes({\n                        fetched_permissions: fetched_permissions\n                    });\n                })\n                .fail(function() {\n                    mod_toastr.error(\"An error occurred while attempting to fetch library permissions.\");\n                });\n\n            $(\"#center [data-toggle]\").tooltip();\n            //hack to show scrollbars\n            $(\"#center\").css(\"overflow\", \"auto\");\n        },\n\n        _serializeRoles: function(role_list) {\n            var selected_roles = [];\n            for (var i = 0; i < role_list.length; i++) {\n                selected_roles.push(role_list[i][1] + \":\" + role_list[i][0]);\n            }\n            return selected_roles;\n        },\n\n        prepareSelectBoxes: function(options) {\n            this.options = _.extend(this.options, options);\n            var fetched_permissions = this.options.fetched_permissions;\n            var self = this;\n\n            var selected_access_library_roles = this._serializeRoles(fetched_permissions.access_library_role_list);\n            var selected_add_item_roles = this._serializeRoles(fetched_permissions.add_library_item_role_list);\n            var selected_manage_library_roles = this._serializeRoles(fetched_permissions.manage_library_role_list);\n            var selected_modify_library_roles = this._serializeRoles(fetched_permissions.modify_library_role_list);\n\n            self.accessSelectObject = new mod_select.View(\n                this._createSelectOptions(this, \"access_perm\", selected_access_library_roles, true)\n            );\n            self.addSelectObject = new mod_select.View(\n                this._createSelectOptions(this, \"add_perm\", selected_add_item_roles, false)\n            );\n            self.manageSelectObject = new mod_select.View(\n                this._createSelectOptions(this, \"manage_perm\", selected_manage_library_roles, false)\n            );\n            self.modifySelectObject = new mod_select.View(\n                this._createSelectOptions(this, \"modify_perm\", selected_modify_library_roles, false)\n            );\n        },\n\n        _createSelectOptions: function(self, id, init_data, is_library_access) {\n            is_library_access = is_library_access === true ? is_library_access : false;\n            var select_options = {\n                minimumInputLength: 0,\n                css: id,\n                multiple: true,\n                placeholder: \"Click to select a role\",\n                container: self.$el.find(\"#\" + id),\n                ajax: {\n                    url:\n                        Galaxy.root +\n                        \"api/libraries/\" +\n                        self.id +\n                        \"/permissions?scope=available&is_library_access=\" +\n                        is_library_access,\n                    dataType: \"json\",\n                    quietMillis: 100,\n                    data: function(term, page) {\n                        // page is the one-based page number tracked by Select2\n                        return {\n                            q: term, //search term\n                            page_limit: 10, // page size\n                            page: page // page number\n                        };\n                    },\n                    results: function(data, page) {\n                        var more = page * 10 < data.total; // whether or not there are more results available\n                        // notice we return the value of more so Select2 knows if more results can be loaded\n                        return { results: data.roles, more: more };\n                    }\n                },\n                formatResult: function roleFormatResult(role) {\n                    return role.name + \" type: \" + role.type;\n                },\n\n                formatSelection: function roleFormatSelection(role) {\n                    return role.name;\n                },\n                initSelection: function(element, callback) {\n                    // the input tag has a value attribute preloaded that points to a preselected role's id\n                    // this function resolves that id attribute to an object that select2 can render\n                    // using its formatResult renderer - that way the role name is shown preselected\n                    var data = [];\n                    $(element.val().split(\",\")).each(function() {\n                        var item = this.split(\":\");\n                        data.push({\n                            id: item[0],\n                            name: item[1]\n                        });\n                    });\n                    callback(data);\n                },\n                // initialData: init_data.join(','),\n                initialData: init_data,\n                dropdownCssClass: \"bigdrop\" // apply css that makes the dropdown taller\n            };\n\n            return select_options;\n        },\n\n        makeDatasetPrivate: function() {\n            var self = this;\n            $.post(Galaxy.root + \"api/libraries/datasets/\" + self.id + \"/permissions?action=make_private\")\n                .done(function(fetched_permissions) {\n                    self.model.set({ is_unrestricted: false });\n                    self.showPermissions({\n                        fetched_permissions: fetched_permissions\n                    });\n                    mod_toastr.success(\"The dataset is now private to you.\");\n                })\n                .fail(function() {\n                    mod_toastr.error(\"An error occurred while attempting to make dataset private.\");\n                });\n        },\n\n        removeDatasetRestrictions: function() {\n            var self = this;\n            $.post(Galaxy.root + \"api/libraries/datasets/\" + self.id + \"/permissions?action=remove_restrictions\")\n                .done(function(fetched_permissions) {\n                    self.model.set({ is_unrestricted: true });\n                    self.showPermissions({\n                        fetched_permissions: fetched_permissions\n                    });\n                    mod_toastr.success(\"Access to this dataset is now unrestricted.\");\n                })\n                .fail(function() {\n                    mod_toastr.error(\"An error occurred while attempting to make dataset unrestricted.\");\n                });\n        },\n\n        _extractIds: function(roles_list) {\n            var ids_list = [];\n            for (var i = roles_list.length - 1; i >= 0; i--) {\n                ids_list.push(roles_list[i].id);\n            }\n            return ids_list;\n        },\n        savePermissions: function(event) {\n            var self = this;\n\n            var access_ids = this._extractIds(this.accessSelectObject.$el.select2(\"data\"));\n            var add_ids = this._extractIds(this.addSelectObject.$el.select2(\"data\"));\n            var manage_ids = this._extractIds(this.manageSelectObject.$el.select2(\"data\"));\n            var modify_ids = this._extractIds(this.modifySelectObject.$el.select2(\"data\"));\n\n            $.post(Galaxy.root + \"api/libraries/\" + self.id + \"/permissions?action=set_permissions\", {\n                \"access_ids[]\": access_ids,\n                \"add_ids[]\": add_ids,\n                \"manage_ids[]\": manage_ids,\n                \"modify_ids[]\": modify_ids\n            })\n                .done(function(fetched_permissions) {\n                    //fetch dataset again\n                    self.showPermissions({\n                        fetched_permissions: fetched_permissions\n                    });\n                    mod_toastr.success(\"Permissions saved.\");\n                })\n                .fail(function() {\n                    mod_toastr.error(\"An error occurred while attempting to set library permissions.\");\n                });\n        },\n\n        templateLibraryPermissions: function() {\n            return _.template(\n                [\n                    '<div class=\"library_style_container\">',\n                    '<div id=\"library_toolbar\">',\n                    '<a href=\"#\">',\n                    '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Go back to the list of Libraries\" class=\"btn btn-default primary-button\" type=\"button\">',\n                    '<span class=\"fa fa-list\"/>',\n                    \"&nbsp;Libraries\",\n                    \"</button>\",\n                    \"</a>\",\n                    \"</div>\",\n                    \"<h1>\",\n                    'Library: <%= _.escape(library.get(\"name\")) %>',\n                    \"</h1>\",\n                    '<div class=\"alert alert-warning\">',\n                    \"<% if (is_admin) { %>\",\n                    \"You are logged in as an <strong>administrator</strong> therefore you can manage any library on this Galaxy instance. Please make sure you understand the consequences.\",\n                    \"<% } else { %>\",\n                    \"You can assign any number of roles to any of the following permission types. However please read carefully the implications of such actions.\",\n                    \"<% }%>\",\n                    \"</div>\",\n                    '<div class=\"dataset_table\">',\n                    \"<h2>Library permissions</h2>\",\n                    \"<h4>Roles that can access the library</h4>\",\n                    '<div id=\"access_perm\" class=\"access_perm roles-selection\"/>',\n                    '<div class=\"alert alert-info roles-selection\">',\n                    \"User with <strong>any</strong> of these roles can access this library. If there are no access roles set on the library it is considered <strong>unrestricted</strong>.\",\n                    \"</div>\",\n                    \"<h4>Roles that can manage permissions on this library</h4>\",\n                    '<div id=\"manage_perm\" class=\"manage_perm roles-selection\"/>',\n                    '<div class=\"alert alert-info roles-selection\">',\n                    \"User with <strong>any</strong> of these roles can manage permissions on this library (includes giving access).\",\n                    \"</div>\",\n                    \"<h4>Roles that can add items to this library</h4>\",\n                    '<div id=\"add_perm\" class=\"add_perm roles-selection\"/>',\n                    '<div class=\"alert alert-info roles-selection\">',\n                    \"User with <strong>any</strong> of these roles can add items to this library (folders and datasets).\",\n                    \"</div>\",\n                    \"<h4>Roles that can modify this library</h4>\",\n                    '<div id=\"modify_perm\" class=\"modify_perm roles-selection\"/>',\n                    '<div class=\"alert alert-info roles-selection\">',\n                    \"User with <strong>any</strong> of these roles can modify this library (name, synopsis, etc.).\",\n                    \"</div>\",\n                    '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Save modifications made on this page\" class=\"btn btn-default toolbtn_save_permissions primary-button\" type=\"button\">',\n                    '<span class=\"fa fa-floppy-o\"/>',\n                    \"&nbsp;Save\",\n                    \"</button>\",\n                    \"</div>\",\n                    \"</div>\"\n                ].join(\"\")\n            );\n        }\n    });\n\n    return {\n        LibraryView: LibraryView\n    };\n});\n"]}