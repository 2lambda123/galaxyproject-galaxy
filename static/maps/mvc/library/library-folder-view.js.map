{"version":3,"sources":["mvc/library/library-folder-view.js"],"names":["define","mod_toastr","mod_select","FolderView","Backbone","View","extend","model","options","events","click .toolbtn_save_permissions","initialize","id","this","fetchFolder","mod_library_model","FolderAsModel","that","success","fetch","show_permissions","showPermissions","error","onclick","responseJSON","Galaxy","libraries","library_router","err_msg","back","$","_","is_admin","user","template","templateFolderPermissions","self","folder","prepareSelectBoxes","fetched_permissions","done","fail","tooltip","selected_roles","_serializeRoles","role_list","i","length","push","selected_add_item_roles","selected_manage_folder_roles","selected_modify_folder_roles","_createSelectOptions","add_library_item_role_list","manage_folder_role_list","modify_folder_role_list","addSelectObject","minimumInputLength","css","placeholder","container","quietMillis","init_data","q","page_limit","page","ajax","url","root","results","more","data","term","formatResult","roleFormatResult","role","name","formatSelection","roleFormatSelection","total","initSelection","roles","element","type","item","callback","initialData","dropdownCssClass","split","each","select_options","_extractIds","join","roles_list","ids_list","savePermissions","add_ids","modify_ids","$el","select2","manageSelectObject","modifySelectObject","add_ids[]","manage_ids[]","manage_ids","modify_ids[]"],"mappings":"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","file":"../../../scripts/mvc/library/library-folder-view.js","sourcesContent":["define([\"libs/toastr\", \"mvc/library/library-model\", \"mvc/ui/ui-select\"], function(\n    mod_toastr,\n    mod_library_model,\n    mod_select\n) {\n    var FolderView = Backbone.View.extend({\n        el: \"#center\",\n\n        model: null,\n\n        options: {},\n\n        events: {\n            \"click .toolbtn_save_permissions\": \"savePermissions\"\n        },\n\n        initialize: function(options) {\n            this.options = _.extend(this.options, options);\n            if (this.options.id) {\n                this.fetchFolder();\n            }\n        },\n\n        fetchFolder: function(options) {\n            this.options = _.extend(this.options, options);\n            this.model = new mod_library_model.FolderAsModel({\n                id: this.options.id\n            });\n            var that = this;\n            this.model.fetch({\n                success: function() {\n                    if (that.options.show_permissions) {\n                        that.showPermissions();\n                    }\n                },\n                error: function(model, response) {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        mod_toastr.error(response.responseJSON.err_msg + \" Click this to go back.\", \"\", {\n                            onclick: function() {\n                                Galaxy.libraries.library_router.back();\n                            }\n                        });\n                    } else {\n                        mod_toastr.error(\"An error occurred. Click this to go back.\", \"\", {\n                            onclick: function() {\n                                Galaxy.libraries.library_router.back();\n                            }\n                        });\n                    }\n                }\n            });\n        },\n\n        showPermissions: function(options) {\n            this.options = _.extend(this.options, options);\n            $(\".tooltip\").remove();\n\n            var is_admin = false;\n            if (Galaxy.user) {\n                is_admin = Galaxy.user.isAdmin();\n            }\n            var template = this.templateFolderPermissions();\n            this.$el.html(template({ folder: this.model, is_admin: is_admin }));\n\n            var self = this;\n            $.get(Galaxy.root + \"api/folders/\" + self.id + \"/permissions?scope=current\")\n                .done(function(fetched_permissions) {\n                    self.prepareSelectBoxes({\n                        fetched_permissions: fetched_permissions\n                    });\n                })\n                .fail(function() {\n                    mod_toastr.error(\"An error occurred while attempting to fetch folder permissions.\");\n                });\n\n            $(\"#center [data-toggle]\").tooltip();\n            //hack to show scrollbars\n            $(\"#center\").css(\"overflow\", \"auto\");\n        },\n\n        _serializeRoles: function(role_list) {\n            var selected_roles = [];\n            for (var i = 0; i < role_list.length; i++) {\n                selected_roles.push(role_list[i][1] + \":\" + role_list[i][0]);\n            }\n            return selected_roles;\n        },\n\n        prepareSelectBoxes: function(options) {\n            this.options = _.extend(this.options, options);\n            var fetched_permissions = this.options.fetched_permissions;\n            var self = this;\n\n            var selected_add_item_roles = this._serializeRoles(fetched_permissions.add_library_item_role_list);\n            var selected_manage_folder_roles = this._serializeRoles(fetched_permissions.manage_folder_role_list);\n            var selected_modify_folder_roles = this._serializeRoles(fetched_permissions.modify_folder_role_list);\n\n            self.addSelectObject = new mod_select.View(\n                this._createSelectOptions(this, \"add_perm\", selected_add_item_roles, false)\n            );\n            self.manageSelectObject = new mod_select.View(\n                this._createSelectOptions(this, \"manage_perm\", selected_manage_folder_roles, false)\n            );\n            self.modifySelectObject = new mod_select.View(\n                this._createSelectOptions(this, \"modify_perm\", selected_modify_folder_roles, false)\n            );\n        },\n\n        _createSelectOptions: function(self, id, init_data) {\n            var select_options = {\n                minimumInputLength: 0,\n                css: id,\n                multiple: true,\n                placeholder: \"Click to select a role\",\n                container: self.$el.find(\"#\" + id),\n                ajax: {\n                    url: Galaxy.root + \"api/folders/\" + self.id + \"/permissions?scope=available\",\n                    dataType: \"json\",\n                    quietMillis: 100,\n                    data: function(term, page) {\n                        // page is the one-based page number tracked by Select2\n                        return {\n                            q: term, //search term\n                            page_limit: 10, // page size\n                            page: page // page number\n                        };\n                    },\n                    results: function(data, page) {\n                        var more = page * 10 < data.total; // whether or not there are more results available\n                        // notice we return the value of more so Select2 knows if more results can be loaded\n                        return { results: data.roles, more: more };\n                    }\n                },\n                formatResult: function roleFormatResult(role) {\n                    return role.name + \" type: \" + role.type;\n                },\n\n                formatSelection: function roleFormatSelection(role) {\n                    return role.name;\n                },\n                initSelection: function(element, callback) {\n                    // the input tag has a value attribute preloaded that points to a preselected role's id\n                    // this function resolves that id attribute to an object that select2 can render\n                    // using its formatResult renderer - that way the role name is shown preselected\n                    var data = [];\n                    $(element.val().split(\",\")).each(function() {\n                        var item = this.split(\":\");\n                        data.push({\n                            id: item[0],\n                            name: item[1]\n                        });\n                    });\n                    callback(data);\n                },\n                initialData: init_data.join(\",\"),\n                dropdownCssClass: \"bigdrop\" // apply css that makes the dropdown taller\n            };\n\n            return select_options;\n        },\n\n        /**\n   * Extract the role ids from Select2 elements's 'data'\n   */\n        _extractIds: function(roles_list) {\n            var ids_list = [];\n            for (var i = roles_list.length - 1; i >= 0; i--) {\n                ids_list.push(roles_list[i].id);\n            }\n            return ids_list;\n        },\n\n        /**\n   * Save the permissions for roles entered in the select boxes.\n   */\n        savePermissions: function(event) {\n            var self = this;\n            var add_ids = this._extractIds(this.addSelectObject.$el.select2(\"data\"));\n            var manage_ids = this._extractIds(this.manageSelectObject.$el.select2(\"data\"));\n            var modify_ids = this._extractIds(this.modifySelectObject.$el.select2(\"data\"));\n            $.post(Galaxy.root + \"api/folders/\" + self.id + \"/permissions?action=set_permissions\", {\n                \"add_ids[]\": add_ids,\n                \"manage_ids[]\": manage_ids,\n                \"modify_ids[]\": modify_ids\n            })\n                .done(function(fetched_permissions) {\n                    self.showPermissions({\n                        fetched_permissions: fetched_permissions\n                    });\n                    mod_toastr.success(\"Permissions saved.\");\n                })\n                .fail(function() {\n                    mod_toastr.error(\"An error occurred while attempting to set folder permissions.\");\n                });\n        },\n\n        templateFolderPermissions: function() {\n            return _.template(\n                [\n                    '<div class=\"library_style_container\">',\n                    '<div id=\"library_toolbar\">',\n                    '<a href=\"#/folders/<%= folder.get(\"parent_id\") %>\">',\n                    '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Go back to the parent folder\" class=\"btn btn-default primary-button\" type=\"button\">',\n                    '<span class=\"fa fa-caret-left fa-lg\"/>',\n                    \"&nbsp;Parent folder\",\n                    \"</button>\",\n                    \"</a>\",\n                    \"</div>\",\n                    \"<h1>\",\n                    'Folder: <%= _.escape(folder.get(\"name\")) %>',\n                    \"</h1>\",\n                    '<div class=\"alert alert-warning\">',\n                    \"<% if (is_admin) { %>\",\n                    \"You are logged in as an <strong>administrator</strong> therefore you can manage any folder on this Galaxy instance. Please make sure you understand the consequences.\",\n                    \"<% } else { %>\",\n                    \"You can assign any number of roles to any of the following permission types. However please read carefully the implications of such actions.\",\n                    \"<% }%>\",\n                    \"</div>\",\n                    '<div class=\"dataset_table\">',\n                    \"<h2>Folder permissions</h2>\",\n                    \"<h4>\",\n                    \"Roles that can manage permissions on this folder\",\n                    \"</h4>\",\n                    '<div id=\"manage_perm\" class=\"manage_perm roles-selection\"/>',\n                    '<div class=\"alert alert-info roles-selection\">',\n                    \"User with <strong>any</strong> of these roles can manage permissions on this folder.\",\n                    \"</div>\",\n                    \"<h4>\",\n                    \"Roles that can add items to this folder\",\n                    \"</h4>\",\n                    '<div id=\"add_perm\" class=\"add_perm roles-selection\"/>',\n                    '<div class=\"alert alert-info roles-selection\">',\n                    \"User with <strong>any</strong> of these roles can add items to this folder (folders and datasets).\",\n                    \"</div>\",\n                    \"<h4>\",\n                    \"Roles that can modify this folder\",\n                    \"</h4>\",\n                    '<div id=\"modify_perm\" class=\"modify_perm roles-selection\"/>',\n                    '<div class=\"alert alert-info roles-selection\">',\n                    \"User with <strong>any</strong> of these roles can modify this folder (name, etc.).\",\n                    \"</div>\",\n                    '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Save modifications\" class=\"btn btn-default toolbtn_save_permissions primary-button\" type=\"button\">',\n                    '<span class=\"fa fa-floppy-o\"/>',\n                    \"&nbsp;Save\",\n                    \"</button>\",\n                    \"</div>\",\n                    \"</div>\"\n                ].join(\"\")\n            );\n        }\n    });\n\n    return {\n        FolderView: FolderView\n    };\n});\n"]}