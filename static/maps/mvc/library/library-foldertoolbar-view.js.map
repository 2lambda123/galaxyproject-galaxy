{"version":3,"sources":["mvc/library/library-foldertoolbar-view.js"],"names":["define","mod_masthead","mod_toastr","el","mod_select","FolderToolbarView","Backbone","View","extend","events","click #toolbtn_create_folder","click #toolbtn_bulk_import","click #include_deleted_datasets_chk","click #toolbtn_bulk_delete","defaults","can_add_library_item","total_number","failed_number","contains_file_or_folder","disabled_jstree_element","modal","jstree","histories","select_genome","select_extension","id","auto","text","list_genomes","options","is_admin","_","this","is_anonym","mutiple_add_dataset_options","template_defaults","Galaxy","toolbar_template","user_library_import_dir","user","isAdmin","isAnonymous","renderPaginator","config","templatePaginator","paginator_template","total_items_count","$","find","parseInt","show_page","page_count","items_shown","folder_page_size","libraries","preferences","get","hide","show","createFolderFromModal","preventDefault","body","buttons","self","create_new_folder_event","event","stopPropagation","folderDetails","validate_new_folder","closing_events","title","url_items","current_folder_id","Close","url","folder","urlRoot","serialize_new_folder","error","FolderAsModel","response","responseJSON","split","indexOf","length","save","success","set","type","folderListView","collection","add","name","model","description","err_msg","$checkedValues","val","template","templateBulkImportInModal","that","findCheckedRows","mod_library_model","GalaxyHistories","fail","fetch","models","Import","importAllIntoHistory","new_history_name","last_used_history_id","processImportToHistory","status","disableButton","dataset_ids","folder_ids","root","row_id","substring","new_history","xhr","datasets_to_import","i","historyItem","content","library_dataset_id","history_name","enableButton","source","push","jQuery","getJSON","chainCallImportingIntoHistory","history_id","txt_representation","round","progress","library_folder_id","HistoryItem","download","updateProgress","progressStep","width","Math","data","folder_id","format","each","pair","inputs","ld_ids","addFilesFromHistoryModal","Add","param","library_router","navigate","trigger","appendTo","submit","fetchAndDisplayHistoryContents","info","done","template_modal","templateAddFilesFromHistory","importFilesFromPathModal","addAllDatasetsFromHistory","closing_callback","change","target","value","renderSelectBoxes","datatypes","description_url","importFromPathsClicked","fetchExtAndGenomes","cache","mod_utils","key","list_extensions","extension","container","$el","a","b","genomes","templateBrowserModal","css","bind","importFilesFromGalaxyFolderModal","renderJstree","require","core","plugins","types","icon","warning","Jstree","preserve_dirs","file","checkbox","three_state","trimmed","paths","valid_paths","err_code","initChainCallControl","is","link_data","space_to_tab","to_posix_lines","tag_using_filenames","file_type","dbkey","templateAddingDatasetsProgressBar","folder_name","trim","chainCallImportingFolders","action","importFromJstreePath","all_nodes","html","selected_nodes","state","disabled","templateDeletingItemsProgressBar","selection_type","emit","get_selected","full_source","node","chainCallImportingUserdirFiles","history_contents","HistoryContents","li_attr","full_path","history_contents_template","checked_hdas","item_type","history_item_ids","history_item_types","templateHistoryContents","contents","history_item_id","reverse","folder_item","prop","items_to_add","chainCallAddingHdas","history_item_set","popped_item","chain_call_control","onclick","window","location","hid","closest","promise","Item","from_hdca_id","from_hda_id","when","pop","added_hdas","post","deleted_items","item_to_delete","updated_item","checkIncludeDeleted","include_deleted","hdas_set","items_total","items_to_delete","dataset","library","showLocInfoModal","Folder","Library","parent_library_id","item","remove","model_class","chainCallDeletingItems","checked","fetchFolder","deleteSelectedItems","undefined","templateNewFolderInModal","templateImportIntoHistoryProgressBar","showLocInfo","templateImportPathModal","libraryListView","templateLocInfoInModal","showImportModal","back","showPageSizePrompt","e","prompt","render","templateToolBar","join"],"mappings":"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,OACA,uBACA,6CACA,QACA,UACA,6CACA,OACA,oBACA,0CACA,QACA,UACA,uDACA,OACA,mBACA,2GACA,QACA,UACA,OACA,cACA,oCACA,QACA,WACA,WACA,6CACA,UACA,sCACA,YACA,WACA,UACA,OACA,gBACA,sCACA,QACA,gDACA,OACA,uBACA,6CACA,QACA,UACA,OACA,cACA,6BACA,QACA,WACA,WACA,UACFyM,KAAK,MAIfb,yBAA0B,WACtB,OAAO/P,EAAEmE,UAED,8BACA,SACA,wEACA,4EACA,UACA,UACFyM,KAAK,MAIfxM,0BAA2B,WACvB,OAAOpE,EAAEmE,UAED,QACA,mCACA,mBACA,iHACA,8CACA,mGACA,YACA,YACA,SACA,mCACA,kBACA,4GACA,WACA,SACA,UACFyM,KAAK,MAIfZ,qCAAsC,WAClC,OAAOhQ,EAAEmE,UAED,4BACA,2EACA,SACA,yBACA,gJACA,mDACA,SACA,UACFyM,KAAK,MAIftF,kCAAmC,WAC/B,OAAOtL,EAAEmE,UAED,4BACA,iFACA,SACA,yBACA,gJACA,mDACA,SACA,UACFyM,KAAK,MAIf3E,iCAAkC,WAC9B,OAAOjM,EAAEmE,UAED,4BACA,SACA,yBACA,gJACA,mDACA,SACA,UACFyM,KAAK,MAIflH,qBAAsB,WAClB,OAAO1J,EAAEmE,UAED,gCACA,0JACA,wLACA,mCACA,oFACA,yGACA,WACA,sFACA,uFACA,WACA,SACA,mCACA,kFACA,yFACA,+BACA,WACA,kCACA,mEACA,gCACA,WACA,kCACA,0FACA,gCACA,WACA,kCACA,yEACA,yBACA,WACA,SACA,qGACA,aACA,YACA,qGACA,eACA,YACA,SAEA,4BACA,SACA,SACA,kFACA,QACA,gFACA,4EACA,SACA,OACA,QACA,4CACA,oCACA,0FACA,WACA,SACA,UACFyM,KAAK,MAIfV,wBAAyB,WACrB,OAAOlQ,EAAEmE,UAED,gCACA,+JACA,sCACA,kCACA,yFACA,+BACA,WACA,kCACA,mEACA,gCACA,WACA,OACA,kCACA,0FACA,gCACA,WACA,kCACA,yEACA,yBACA,WACA,SACA,uKACA,SACA,kFACA,QACA,gFACA,4EACA,SACA,QACA,4CACA,oCACA,0FACA,WACA,SACA,UACFyM,KAAK,MAIfxI,4BAA6B,WACzB,OAAOpI,EAAEmE,UAED,6BACA,QACA,gCACA,8EACA,8CACA,mGACA,YACA,YACA,SACA,QACA,sCACA,SACA,UACFyM,KAAK,MAIf3D,wBAAyB,WACrB,OAAOjN,EAAEmE,UAED,gDACA,QACA,6GACA,aACA,YACA,+GACA,eACA,YACA,SACA,OACA,OACA,0DACA,oDACA,iDACA,yDACA,kEACA,0CACA,+GACA,UACA,6CACA,wFACA,0HACA,WACA,QACA,iBACA,6FACA,2GACA,6CACA,kLACA,UACA,QACA,UACA,iGACA,+GACA,6CACA,wFACA,qGACA,WACA,QACA,UACA,UACA,YACA,SACFyM,KAAK,MAIf/P,kBAAmB,WACf,OAAOb,EAAEmE,UAED,wCACA,uCACA,gDACA,iGACA,wHACA,iBACA,iGACA,2GACA,UACA,iBACA,kHACA,wHACA,UACA,sBACA,0FACA,QACA,4CACA,2GACA,0HACA,iBACA,yHACA,2IACA,UACA,QACA,SACA,iLACA,UACA,SACA,kCACA,WACFyM,KAAK","file":"../../../scripts/mvc/library/library-foldertoolbar-view.js","sourcesContent":["define([\"layout/masthead\", \"utils/utils\", \"libs/toastr\", \"mvc/library/library-model\", \"mvc/ui/ui-select\"], function(\n    mod_masthead,\n    mod_utils,\n    mod_toastr,\n    mod_library_model,\n    mod_select\n) {\n    var FolderToolbarView = Backbone.View.extend({\n        el: \"#center\",\n\n        events: {\n            \"click #toolbtn_create_folder\": \"createFolderFromModal\",\n            \"click #toolbtn_bulk_import\": \"modalBulkImport\",\n            \"click #include_deleted_datasets_chk\": \"checkIncludeDeleted\",\n            \"click #toolbtn_bulk_delete\": \"deleteSelectedItems\",\n            \"click .toolbtn-show-locinfo\": \"showLocInfo\",\n            \"click .page_size_prompt\": \"showPageSizePrompt\"\n        },\n\n        defaults: {\n            can_add_library_item: false,\n            contains_file_or_folder: false,\n            chain_call_control: {\n                total_number: 0,\n                failed_number: 0\n            },\n            disabled_jstree_element: \"folders\"\n        },\n\n        modal: null,\n\n        // directory browsing object\n        jstree: null,\n\n        // user's histories\n        histories: null,\n\n        // genome select\n        select_genome: null,\n\n        // extension select\n        select_extension: null,\n\n        // extension types\n        list_extensions: [],\n\n        // datatype placeholder for extension auto-detection\n        auto: {\n            id: \"auto\",\n            text: \"Auto-detect\",\n            description:\n                \"This system will try to detect the file type automatically.\" +\n                \" If your file is not detected properly as one of the known formats,\" +\n                \" it most likely means that it has some format problems (e.g., different\" +\n                \" number of columns on different rows). You can still coerce the system\" +\n                \" to set your data to the format you think it should be.\" +\n                \" You can also upload compressed files, which will automatically be decompressed.\"\n        },\n\n        // genomes\n        list_genomes: [],\n\n        initialize: function(options) {\n            this.options = _.defaults(options || {}, this.defaults);\n            this.fetchExtAndGenomes();\n            this.render();\n        },\n\n        render: function(options) {\n            this.options = _.extend(this.options, options);\n            var toolbar_template = this.templateToolBar();\n            var template_defaults = {\n                id: this.options.id,\n                is_admin: false,\n                is_anonym: true,\n                mutiple_add_dataset_options: false\n            };\n            if (Galaxy.user) {\n                template_defaults.is_admin = Galaxy.user.isAdmin();\n                template_defaults.is_anonym = Galaxy.user.isAnonymous();\n                if (\n                    Galaxy.config.user_library_import_dir !== null ||\n                    Galaxy.config.allow_library_path_paste !== false ||\n                    Galaxy.config.library_import_dir !== null\n                ) {\n                    template_defaults.mutiple_add_dataset_options = true;\n                }\n            }\n            this.$el.html(toolbar_template(template_defaults));\n        },\n\n        /**\n   * Called from FolderListView when needed.\n   * @param  {object} options common options\n   */\n        renderPaginator: function(options) {\n            this.options = _.extend(this.options, options);\n            var paginator_template = this.templatePaginator();\n            $(\"body\")\n                .find(\".folder-paginator\")\n                .html(\n                    paginator_template({\n                        id: this.options.id,\n                        show_page: parseInt(this.options.show_page),\n                        page_count: parseInt(this.options.page_count),\n                        total_items_count: this.options.total_items_count,\n                        items_shown: this.options.items_shown,\n                        folder_page_size: Galaxy.libraries.preferences.get(\"folder_page_size\")\n                    })\n                );\n        },\n\n        configureElements: function(options) {\n            this.options = _.extend(this.options, options);\n\n            if (this.options.can_add_library_item === true) {\n                $(\".add-library-items\").show();\n            } else {\n                $(\".add-library-items\").hide();\n            }\n            if (this.options.contains_file_or_folder === true) {\n                if (Galaxy.user) {\n                    if (!Galaxy.user.isAnonymous()) {\n                        $(\".logged-dataset-manipulation\").show();\n                        $(\".dataset-manipulation\").show();\n                    } else {\n                        $(\".dataset-manipulation\").show();\n                        $(\".logged-dataset-manipulation\").hide();\n                    }\n                } else {\n                    $(\".logged-dataset-manipulation\").hide();\n                    $(\".dataset-manipulation\").hide();\n                }\n            } else {\n                $(\".logged-dataset-manipulation\").hide();\n                $(\".dataset-manipulation\").hide();\n            }\n            this.$el.find(\"[data-toggle]\").tooltip();\n        },\n\n        // shows modal for creating folder\n        createFolderFromModal: function(event) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            // create modal\n            var self = this;\n            var template = this.templateNewFolderInModal();\n            this.modal = Galaxy.modal;\n            this.modal.show({\n                closing_events: true,\n                title: \"Create New Folder\",\n                body: template(),\n                buttons: {\n                    Create: function() {\n                        self.create_new_folder_event();\n                    },\n                    Close: function() {\n                        Galaxy.modal.hide();\n                    }\n                }\n            });\n        },\n\n        // create the new folder from modal\n        create_new_folder_event: function() {\n            var folderDetails = this.serialize_new_folder();\n            if (this.validate_new_folder(folderDetails)) {\n                var folder = new mod_library_model.FolderAsModel();\n                var url_items = Backbone.history.fragment.split(\"/\"),\n                    current_folder_id;\n                if (url_items.indexOf(\"page\") > -1) {\n                    current_folder_id = url_items[url_items.length - 3];\n                } else {\n                    current_folder_id = url_items[url_items.length - 1];\n                }\n                folder.url = folder.urlRoot + current_folder_id;\n\n                folder.save(folderDetails, {\n                    success: function(folder) {\n                        Galaxy.modal.hide();\n                        mod_toastr.success(\"Folder created.\");\n                        folder.set({ type: \"folder\" });\n                        Galaxy.libraries.folderListView.collection.add(folder);\n                    },\n                    error: function(model, response) {\n                        Galaxy.modal.hide();\n                        if (typeof response.responseJSON !== \"undefined\") {\n                            mod_toastr.error(response.responseJSON.err_msg);\n                        } else {\n                            mod_toastr.error(\"An error occurred.\");\n                        }\n                    }\n                });\n            } else {\n                mod_toastr.error(\"Folder's name is missing.\");\n            }\n            return false;\n        },\n\n        // serialize data from the modal\n        serialize_new_folder: function() {\n            return {\n                name: $(\"input[name='Name']\").val(),\n                description: $(\"input[name='Description']\").val()\n            };\n        },\n\n        // validate new folder info\n        validate_new_folder: function(folderDetails) {\n            return folderDetails.name !== \"\";\n        },\n\n        // show bulk import modal\n        modalBulkImport: function() {\n            var $checkedValues = this.findCheckedRows();\n            if ($checkedValues.length === 0) {\n                mod_toastr.info(\"You must select some datasets first.\");\n            } else {\n                var that = this;\n                this.histories = new mod_library_model.GalaxyHistories();\n                this.histories\n                    .fetch()\n                    .done(function() {\n                        var template = that.templateBulkImportInModal();\n                        that.modal = Galaxy.modal;\n                        that.modal.show({\n                            closing_events: true,\n                            title: \"Import into History\",\n                            body: template({\n                                histories: that.histories.models\n                            }),\n                            buttons: {\n                                Import: function() {\n                                    that.importAllIntoHistory();\n                                },\n                                Close: function() {\n                                    Galaxy.modal.hide();\n                                }\n                            }\n                        });\n                    })\n                    .fail(function(model, response) {\n                        if (typeof response.responseJSON !== \"undefined\") {\n                            mod_toastr.error(response.responseJSON.err_msg);\n                        } else {\n                            mod_toastr.error(\"An error occurred.\");\n                        }\n                    });\n            }\n        },\n\n        /**\n   * Import all selected datasets into history.\n   */\n        importAllIntoHistory: function() {\n            this.modal.disableButton(\"Import\");\n            var new_history_name = this.modal.$(\"input[name=history_name]\").val();\n            var that = this;\n            if (new_history_name !== \"\") {\n                $.post(Galaxy.root + \"api/histories\", {\n                    name: new_history_name\n                })\n                    .done(function(new_history) {\n                        that.options.last_used_history_id = new_history.id;\n                        that.processImportToHistory(new_history.id, new_history.name);\n                    })\n                    .fail(function(xhr, status, error) {\n                        mod_toastr.error(\"An error occurred.\");\n                    })\n                    .always(function() {\n                        that.modal.enableButton(\"Import\");\n                    });\n            } else {\n                var history_id = $(\"select[name=dataset_import_bulk] option:selected\").val();\n                this.options.last_used_history_id = history_id;\n                var history_name = $(\"select[name=dataset_import_bulk] option:selected\").text();\n                this.processImportToHistory(history_id, history_name);\n                this.modal.enableButton(\"Import\");\n            }\n        },\n\n        processImportToHistory: function(history_id, history_name) {\n            var dataset_ids = [];\n            var folder_ids = [];\n            this.findCheckedRows().each(function() {\n                var row_id = $(this)\n                    .closest(\"tr\")\n                    .data(\"id\");\n                if (row_id.substring(0, 1) == \"F\") {\n                    folder_ids.push(row_id);\n                } else {\n                    dataset_ids.push(row_id);\n                }\n            });\n            // prepare the dataset objects to be imported\n            var datasets_to_import = [];\n            for (var i = dataset_ids.length - 1; i >= 0; i--) {\n                var library_dataset_id = dataset_ids[i];\n                var historyItem = new mod_library_model.HistoryItem();\n                historyItem.url = historyItem.urlRoot + history_id + \"/contents\";\n                historyItem.content = library_dataset_id;\n                historyItem.source = \"library\";\n                datasets_to_import.push(historyItem);\n            }\n\n            // prepare the folder objects to be imported\n            var folders_to_import = [];\n            for (var i = folder_ids.length - 1; i >= 0; i--) {\n                var library_folder_id = folder_ids[i];\n                var historyItem = new mod_library_model.HistoryItem();\n                historyItem.url = historyItem.urlRoot + history_id + \"/contents\";\n                historyItem.content = library_folder_id;\n                historyItem.source = \"library_folder\";\n                datasets_to_import.push(historyItem);\n            }\n\n            this.initChainCallControl({\n                length: datasets_to_import.length,\n                action: \"to_history\",\n                history_name: history_name\n            });\n            // set the used history as current so user will see the last one\n            // that he imported into in the history panel on the 'analysis' page\n            jQuery.getJSON(Galaxy.root + \"history/set_as_current?id=\" + history_id);\n            this.chainCallImportingIntoHistory(datasets_to_import, history_name);\n        },\n\n        /**\n   * Update the progress bar in modal window.\n   */\n        updateProgress: function() {\n            this.progress += this.progressStep;\n            $(\".progress-bar-import\").width(Math.round(this.progress) + \"%\");\n            var txt_representation = Math.round(this.progress) + \"% Complete\";\n            $(\".completion_span\").text(txt_representation);\n        },\n\n        /**\n   * download selected datasets\n   * @param  {str} folder_id id of the current folder\n   * @param  {str} format    requested archive format\n   */\n        download: function(folder_id, format) {\n            var dataset_ids = [];\n            var folder_ids = [];\n            this.findCheckedRows().each(function() {\n                var row_id = $(this)\n                    .closest(\"tr\")\n                    .data(\"id\");\n                if (row_id.substring(0, 1) == \"F\") {\n                    folder_ids.push(row_id);\n                } else {\n                    dataset_ids.push(row_id);\n                }\n            });\n            var url = Galaxy.root + \"api/libraries/datasets/download/\" + format;\n            var data = { ld_ids: dataset_ids, folder_ids: folder_ids };\n            this.processDownload(url, data, \"get\");\n        },\n\n        /**\n   * Create hidden form and submit it through POST\n   * to initialize the download.\n   * @param  {str} url    url to call\n   * @param  {obj} data   data to include in the request\n   * @param  {str} method method of the request\n   */\n        processDownload: function(url, data, method) {\n            if (url && data) {\n                // data can be string of parameters or array/object\n                data = typeof data === \"string\" ? data : $.param(data);\n                // split params into form inputs\n                var inputs = \"\";\n                $.each(data.split(\"&\"), function() {\n                    var pair = this.split(\"=\");\n                    inputs += '<input type=\"hidden\" name=\"' + pair[0] + '\" value=\"' + pair[1] + '\" />';\n                });\n                // send request\n                $('<form action=\"' + url + '\" method=\"' + (method || \"post\") + '\">' + inputs + \"</form>\")\n                    .appendTo(\"body\")\n                    .submit()\n                    .remove();\n                mod_toastr.info(\"Your download will begin soon.\");\n            } else {\n                mod_toastr.error(\"An error occurred.\");\n            }\n        },\n\n        addFilesFromHistoryModal: function() {\n            this.histories = new mod_library_model.GalaxyHistories();\n            var self = this;\n            this.histories\n                .fetch()\n                .done(function() {\n                    self.modal = Galaxy.modal;\n                    var template_modal = self.templateAddFilesFromHistory();\n                    self.modal.show({\n                        closing_events: true,\n                        title: \"Adding datasets from your history\",\n                        body: template_modal({\n                            histories: self.histories.models\n                        }),\n                        buttons: {\n                            Add: function() {\n                                self.addAllDatasetsFromHistory();\n                            },\n                            Close: function() {\n                                Galaxy.modal.hide();\n                            }\n                        },\n                        closing_callback: function() {\n                            Galaxy.libraries.library_router.navigate(\"folders/\" + self.id, { trigger: true });\n                        }\n                    });\n                    self.fetchAndDisplayHistoryContents(self.histories.models[0].id);\n                    $(\"#dataset_add_bulk\").change(function(event) {\n                        self.fetchAndDisplayHistoryContents(event.target.value);\n                    });\n                })\n                .fail(function(model, response) {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(\"An error occurred.\");\n                    }\n                });\n        },\n\n        /**\n   * Create modal for importing from Galaxy path.\n   * This feature is admin-only.\n   */\n        importFilesFromPathModal: function() {\n            var that = this;\n            this.modal = Galaxy.modal;\n            var template_modal = this.templateImportPathModal();\n            this.modal.show({\n                closing_events: true,\n                title: \"Please enter paths to import\",\n                body: template_modal({}),\n                buttons: {\n                    Import: function() {\n                        that.importFromPathsClicked(that);\n                    },\n                    Close: function() {\n                        Galaxy.modal.hide();\n                    }\n                },\n                closing_callback: function() {\n                    //  TODO: should not trigger routes outside of the router\n                    Galaxy.libraries.library_router.navigate(\"folders/\" + that.id, { trigger: true });\n                }\n            });\n            this.renderSelectBoxes();\n        },\n\n        /**\n   * Request all extensions and genomes from Galaxy\n   * and save them sorted in arrays.\n   */\n        fetchExtAndGenomes: function() {\n            var that = this;\n            mod_utils.get({\n                url: Galaxy.root + \"api/datatypes?extension_only=False\",\n                success: function(datatypes) {\n                    that.list_extensions = [];\n                    for (var key in datatypes) {\n                        that.list_extensions.push({\n                            id: datatypes[key].extension,\n                            text: datatypes[key].extension,\n                            description: datatypes[key].description,\n                            description_url: datatypes[key].description_url\n                        });\n                    }\n                    that.list_extensions.sort(function(a, b) {\n                        return a.id > b.id ? 1 : a.id < b.id ? -1 : 0;\n                    });\n                    that.list_extensions.unshift(that.auto);\n                },\n                cache: true\n            });\n            mod_utils.get({\n                url: Galaxy.root + \"api/genomes\",\n                success: function(genomes) {\n                    that.list_genomes = [];\n                    for (var key in genomes) {\n                        that.list_genomes.push({\n                            id: genomes[key][1],\n                            text: genomes[key][0]\n                        });\n                    }\n                    that.list_genomes.sort(function(a, b) {\n                        return a.id > b.id ? 1 : a.id < b.id ? -1 : 0;\n                    });\n                },\n                cache: true\n            });\n        },\n\n        renderSelectBoxes: function() {\n            // This won't work properly unlesss we already have the data fetched.\n            // See this.fetchExtAndGenomes()\n            // TODO switch to common resources:\n            // https://trello.com/c/dIUE9YPl/1933-ui-common-resources-and-data-into-galaxy-object\n            var that = this;\n            this.select_genome = new mod_select.View({\n                css: \"library-genome-select\",\n                data: that.list_genomes,\n                container: Galaxy.modal.$el.find(\"#library_genome_select\"),\n                value: \"?\"\n            });\n            this.select_extension = new mod_select.View({\n                css: \"library-extension-select\",\n                data: that.list_extensions,\n                container: Galaxy.modal.$el.find(\"#library_extension_select\"),\n                value: \"auto\"\n            });\n        },\n\n        /**\n   * Create modal for importing from given directory\n   * on Galaxy. Bind jQuery events.\n   */\n        importFilesFromGalaxyFolderModal: function(options) {\n            var that = this;\n            var template_modal = this.templateBrowserModal();\n            this.modal = Galaxy.modal;\n            this.modal.show({\n                closing_events: true,\n                title: \"Please select folders or files\",\n                body: template_modal({}),\n                buttons: {\n                    Import: function() {\n                        that.importFromJstreePath(that, options);\n                    },\n                    Close: function() {\n                        Galaxy.modal.hide();\n                    }\n                },\n                closing_callback: function() {\n                    //  TODO: should not trigger routes outside of the router\n                    Galaxy.libraries.library_router.navigate(\"folders/\" + that.id, { trigger: true });\n                }\n            });\n\n            $(\".libimport-select-all\").bind(\"click\", function() {\n                $(\"#jstree_browser\").jstree(\"check_all\");\n            });\n            $(\".libimport-select-none\").bind(\"click\", function() {\n                $(\"#jstree_browser\").jstree(\"uncheck_all\");\n            });\n\n            this.renderSelectBoxes();\n            options.disabled_jstree_element = \"folders\";\n            this.renderJstree(options);\n\n            $(\"input[type=radio]\").change(function(event) {\n                if (event.target.value === \"jstree-disable-folders\") {\n                    options.disabled_jstree_element = \"folders\";\n                    that.renderJstree(options);\n                    $(\".jstree-folders-message\").hide();\n                    $(\".jstree-preserve-structure\").hide();\n                    $(\".jstree-files-message\").show();\n                } else if (event.target.value === \"jstree-disable-files\") {\n                    $(\".jstree-files-message\").hide();\n                    $(\".jstree-folders-message\").show();\n                    $(\".jstree-preserve-structure\").show();\n                    options.disabled_jstree_element = \"files\";\n                    that.renderJstree(options);\n                }\n            });\n        },\n\n        /**\n   * Fetch the contents of user directory on Galaxy\n   * and render jstree component based on received\n   * data.\n   * @param  {[type]} options [description]\n   */\n        renderJstree: function(options) {\n            var that = this;\n            this.options = _.extend(this.options, options);\n            var target = options.source || \"userdir\";\n            var disabled_jstree_element = this.options.disabled_jstree_element;\n            this.jstree = new mod_library_model.Jstree();\n            this.jstree.url =\n                this.jstree.urlRoot + \"?target=\" + target + \"&format=jstree\" + \"&disable=\" + disabled_jstree_element;\n            this.jstree.fetch({\n                success: function(model, response) {\n                    // This is to prevent double jquery load. I think. Carl is magician.\n                    define(\"jquery\", function() {\n                        return jQuery;\n                    });\n                    // Now we need jstree, time to lazy load it.\n                    require([\"libs/jquery/jstree\"], function(jstree) {\n                        $(\"#jstree_browser\").jstree(\"destroy\");\n                        $(\"#jstree_browser\").jstree({\n                            core: {\n                                data: model\n                            },\n                            plugins: [\"types\", \"checkbox\"],\n                            types: {\n                                folder: {\n                                    icon: \"jstree-folder\"\n                                },\n                                file: {\n                                    icon: \"jstree-file\"\n                                }\n                            },\n                            checkbox: {\n                                three_state: false\n                            }\n                        });\n                    });\n                },\n                error: function(model, response) {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        if (response.responseJSON.err_code === 404001) {\n                            mod_toastr.warning(response.responseJSON.err_msg);\n                        } else {\n                            mod_toastr.error(response.responseJSON.err_msg);\n                        }\n                    } else {\n                        mod_toastr.error(\"An error occurred.\");\n                    }\n                }\n            });\n        },\n\n        /**\n   * Take the paths from the textarea, split it, create\n   * a request queue and call a function that starts sending\n   * one by one to be imported on the server.\n   */\n        importFromPathsClicked: function() {\n            var preserve_dirs = this.modal.$el.find(\".preserve-checkbox\").is(\":checked\");\n            var link_data = this.modal.$el.find(\".link-checkbox\").is(\":checked\");\n            var space_to_tab = this.modal.$el.find(\".spacetab-checkbox\").is(\":checked\");\n            var to_posix_lines = this.modal.$el.find(\".posix-checkbox\").is(\":checked\");\n            var tag_using_filenames = this.modal.$el.find(\".tag-files\").is(\":checked\");\n            var file_type = this.select_extension.value();\n            var dbkey = this.select_genome.value();\n            var paths = $(\"textarea#import_paths\").val();\n            var valid_paths = [];\n            if (!paths) {\n                mod_toastr.info(\"Please enter a path relative to Galaxy root.\");\n            } else {\n                this.modal.disableButton(\"Import\");\n                paths = paths.split(\"\\n\");\n                for (var i = paths.length - 1; i >= 0; i--) {\n                    var trimmed = paths[i].trim();\n                    if (trimmed.length !== 0) {\n                        valid_paths.push(trimmed);\n                    }\n                }\n                this.initChainCallControl({\n                    length: valid_paths.length,\n                    action: \"adding_datasets\"\n                });\n                this.chainCallImportingFolders({\n                    paths: valid_paths,\n                    preserve_dirs: preserve_dirs,\n                    link_data: link_data,\n                    space_to_tab: space_to_tab,\n                    to_posix_lines: to_posix_lines,\n                    source: \"admin_path\",\n                    file_type: file_type,\n                    tag_using_filenames: tag_using_filenames,\n                    dbkey: dbkey\n                });\n            }\n        },\n\n        /**\n   * Initialize the control of chaining requests\n   * in the current modal.\n   * @param {int} length The number of items in the chain call.\n   */\n        initChainCallControl: function(options) {\n            var template;\n            switch (options.action) {\n                case \"adding_datasets\":\n                    template = this.templateAddingDatasetsProgressBar();\n                    this.modal.$el.find(\".modal-body\").html(\n                        template({\n                            folder_name: this.options.folder_name\n                        })\n                    );\n                    break;\n                case \"deleting_datasets\":\n                    template = this.templateDeletingItemsProgressBar();\n                    this.modal.$el.find(\".modal-body\").html(template());\n                    break;\n                case \"to_history\":\n                    template = this.templateImportIntoHistoryProgressBar();\n                    this.modal.$el.find(\".modal-body\").html(template({ history_name: options.history_name }));\n                    break;\n                default:\n                    Galaxy.emit.error(\"Wrong action specified.\", \"datalibs\");\n                    break;\n            }\n\n            // var progress_bar_tmpl = this.templateAddingDatasetsProgressBar();\n            // this.modal.$el.find( '.modal-body' ).html( progress_bar_tmpl( { folder_name : this.options.folder_name } ) );\n            this.progress = 0;\n            this.progressStep = 100 / options.length;\n            this.options.chain_call_control.total_number = options.length;\n            this.options.chain_call_control.failed_number = 0;\n        },\n\n        /**\n   * Take the selected items from the jstree, create a request queue\n   * and send them one by one to the server for importing into\n   * the current folder.\n   *\n   * jstree.js has to be loaded before\n   * @see renderJstree\n   */\n        importFromJstreePath: function(that, options) {\n            var all_nodes = $(\"#jstree_browser\")\n                .jstree()\n                .get_selected(true);\n            // remove the disabled elements that could have been trigerred with the 'select all'\n            var selected_nodes = _.filter(all_nodes, function(node) {\n                return node.state.disabled == false;\n            });\n            var preserve_dirs = this.modal.$el.find(\".preserve-checkbox\").is(\":checked\");\n            var link_data = this.modal.$el.find(\".link-checkbox\").is(\":checked\");\n            var space_to_tab = this.modal.$el.find(\".spacetab-checkbox\").is(\":checked\");\n            var to_posix_lines = this.modal.$el.find(\".posix-checkbox\").is(\":checked\");\n            var file_type = this.select_extension.value();\n            var dbkey = this.select_genome.value();\n            var tag_using_filenames = this.modal.$el.find(\".tag-files\").is(\":checked\");\n            var selection_type = selected_nodes[0].type;\n            var paths = [];\n            if (selected_nodes.length < 1) {\n                mod_toastr.info(\"Please select some items first.\");\n            } else {\n                this.modal.disableButton(\"Import\");\n                for (var i = selected_nodes.length - 1; i >= 0; i--) {\n                    if (selected_nodes[i].li_attr.full_path !== undefined) {\n                        paths.push(selected_nodes[i].li_attr.full_path);\n                    }\n                }\n                this.initChainCallControl({\n                    length: paths.length,\n                    action: \"adding_datasets\"\n                });\n                if (selection_type === \"folder\") {\n                    var full_source = options.source + \"_folder\";\n                    this.chainCallImportingFolders({\n                        paths: paths,\n                        preserve_dirs: preserve_dirs,\n                        link_data: link_data,\n                        space_to_tab: space_to_tab,\n                        to_posix_lines: to_posix_lines,\n                        source: full_source,\n                        file_type: file_type,\n                        dbkey: dbkey,\n                        tag_using_filenames: tag_using_filenames\n                    });\n                } else if (selection_type === \"file\") {\n                    var full_source = options.source + \"_file\";\n                    this.chainCallImportingUserdirFiles({\n                        paths: paths,\n                        file_type: file_type,\n                        dbkey: dbkey,\n                        link_data: link_data,\n                        space_to_tab: space_to_tab,\n                        to_posix_lines: to_posix_lines,\n                        source: full_source,\n                        tag_using_filenames: tag_using_filenames\n                    });\n                }\n            }\n        },\n\n        fetchAndDisplayHistoryContents: function(history_id) {\n            var history_contents = new mod_library_model.HistoryContents({\n                id: history_id\n            });\n            var self = this;\n            history_contents.fetch({\n                success: function(history_contents) {\n                    var history_contents_template = self.templateHistoryContents();\n                    self.histories.get(history_id).set({ contents: history_contents });\n                    self.modal.$el.find(\"#selected_history_content\").html(\n                        history_contents_template({\n                            history_contents: history_contents.models.reverse()\n                        })\n                    );\n                    self.modal.$el.find(\".history-import-select-all\").bind(\"click\", function() {\n                        $(\"#selected_history_content [type=checkbox]\").prop(\"checked\", true);\n                    });\n                    self.modal.$el.find(\".history-import-unselect-all\").bind(\"click\", function() {\n                        $(\"#selected_history_content [type=checkbox]\").prop(\"checked\", false);\n                    });\n                },\n                error: function(model, response) {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(\"An error occurred.\");\n                    }\n                }\n            });\n        },\n\n        /**\n   * Import all selected datasets from history into the current folder.\n   */\n        addAllDatasetsFromHistory: function() {\n            var checked_hdas = this.modal.$el.find(\"#selected_history_content\").find(\":checked\");\n            var history_item_ids = []; // can be hda or hdca\n            var history_item_types = [];\n            var items_to_add = [];\n            if (checked_hdas.length < 1) {\n                mod_toastr.info(\"You must select some datasets first.\");\n            } else {\n                this.modal.disableButton(\"Add\");\n                checked_hdas.each(function() {\n                    var hid = $(this)\n                        .closest(\"li\")\n                        .data(\"id\");\n                    if (hid) {\n                        var item_type = $(this)\n                            .closest(\"li\")\n                            .data(\"name\");\n                        history_item_ids.push(hid);\n                        history_item_types.push(item_type);\n                    }\n                });\n                for (var i = history_item_ids.length - 1; i >= 0; i--) {\n                    var history_item_id = history_item_ids[i];\n                    var folder_item = new mod_library_model.Item();\n                    folder_item.url = Galaxy.root + \"api/folders/\" + this.options.id + \"/contents\";\n                    if (history_item_types[i] === \"collection\") {\n                        folder_item.set({ from_hdca_id: history_item_id });\n                    } else {\n                        folder_item.set({ from_hda_id: history_item_id });\n                    }\n                    items_to_add.push(folder_item);\n                }\n                this.initChainCallControl({\n                    length: items_to_add.length,\n                    action: \"adding_datasets\"\n                });\n                this.chainCallAddingHdas(items_to_add);\n            }\n        },\n\n        /**\n   * Take array of empty history items and make request for each of them\n   * to create it on server. Update progress in between calls.\n   * @param  {array} history_item_set array of empty history items\n   * @param  {str} history_name     name of the history to import to\n   */\n        chainCallImportingIntoHistory: function(history_item_set, history_name) {\n            var self = this;\n            var popped_item = history_item_set.pop();\n            if (typeof popped_item == \"undefined\") {\n                if (this.options.chain_call_control.failed_number === 0) {\n                    mod_toastr.success(\n                        \"Selected datasets imported into history. Click this to start analyzing it.\",\n                        \"\",\n                        {\n                            onclick: function() {\n                                window.location = Galaxy.root;\n                            }\n                        }\n                    );\n                } else if (\n                    this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number\n                ) {\n                    mod_toastr.error(\"There was an error and no datasets were imported into history.\");\n                } else if (\n                    this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number\n                ) {\n                    mod_toastr.warning(\n                        \"Some of the datasets could not be imported into history. Click this to see what was imported.\",\n                        \"\",\n                        {\n                            onclick: function() {\n                                window.location = Galaxy.root;\n                            }\n                        }\n                    );\n                }\n                Galaxy.modal.hide();\n                return true;\n            }\n            var promise = $.when(\n                popped_item.save({\n                    content: popped_item.content,\n                    source: popped_item.source\n                })\n            );\n\n            promise\n                .done(function() {\n                    self.updateProgress();\n                    self.chainCallImportingIntoHistory(history_item_set, history_name);\n                })\n                .fail(function() {\n                    self.options.chain_call_control.failed_number += 1;\n                    self.updateProgress();\n                    self.chainCallImportingIntoHistory(history_item_set, history_name);\n                });\n        },\n\n        /**\n   * Take the array of paths and create a request for each of them\n   * calling them in chain. Update the progress bar in between each.\n   * @param  {array} paths                    paths relative to user folder on Galaxy\n   * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n   */\n        chainCallImportingUserdirFiles: function(options) {\n            var that = this;\n            var popped_item = options.paths.pop();\n            if (typeof popped_item === \"undefined\") {\n                if (this.options.chain_call_control.failed_number === 0) {\n                    mod_toastr.success(\"Selected files imported into the current folder\");\n                    Galaxy.modal.hide();\n                } else {\n                    mod_toastr.error(\"An error occured.\");\n                }\n                return true;\n            }\n            var promise = $.when(\n                $.post(\n                    Galaxy.root +\n                        \"api/libraries/datasets?encoded_folder_id=\" +\n                        that.id +\n                        \"&source=\" +\n                        options.source +\n                        \"&path=\" +\n                        popped_item +\n                        \"&file_type=\" +\n                        options.file_type +\n                        \"&link_data=\" +\n                        options.link_data +\n                        \"&space_to_tab=\" +\n                        options.space_to_tab +\n                        \"&to_posix_lines=\" +\n                        options.to_posix_lines +\n                        \"&dbkey=\" +\n                        options.dbkey +\n                        \"&tag_using_filenames=\" +\n                        options.tag_using_filenames\n                )\n            );\n            promise\n                .done(function(response) {\n                    that.updateProgress();\n                    that.chainCallImportingUserdirFiles(options);\n                })\n                .fail(function() {\n                    that.options.chain_call_control.failed_number += 1;\n                    that.updateProgress();\n                    that.chainCallImportingUserdirFiles(options);\n                });\n        },\n\n        /**\n   * Take the array of paths and create a request for each of them\n   * calling them in series. Update the progress bar in between each.\n   * @param  {array} paths                    paths relative to Galaxy root folder\n   * @param  {boolean} preserve_dirs          indicates whether to preserve folder structure\n   * @param  {boolean} link_data              copy files to Galaxy or link instead\n   * @param  {boolean} to_posix_lines         convert line endings to POSIX standard\n   * @param  {boolean} space_to_tab           convert spaces to tabs\n   * @param  {str} source                     string representing what type of folder\n   *                                          is the source of import\n   * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n   */\n        chainCallImportingFolders: function(options) {\n            // TODO need to check which paths to call\n            var that = this;\n            var popped_item = options.paths.pop();\n            if (typeof popped_item == \"undefined\") {\n                if (this.options.chain_call_control.failed_number === 0) {\n                    mod_toastr.success(\"Selected folders and their contents imported into the current folder.\");\n                    Galaxy.modal.hide();\n                } else {\n                    // TODO better error report\n                    mod_toastr.error(\"An error occured.\");\n                }\n                return true;\n            }\n            var promise = $.when(\n                $.post(\n                    Galaxy.root +\n                        \"api/libraries/datasets?encoded_folder_id=\" +\n                        that.id +\n                        \"&source=\" +\n                        options.source +\n                        \"&path=\" +\n                        popped_item +\n                        \"&preserve_dirs=\" +\n                        options.preserve_dirs +\n                        \"&link_data=\" +\n                        options.link_data +\n                        \"&to_posix_lines=\" +\n                        options.to_posix_lines +\n                        \"&space_to_tab=\" +\n                        options.space_to_tab +\n                        \"&file_type=\" +\n                        options.file_type +\n                        \"&dbkey=\" +\n                        options.dbkey +\n                        \"&tag_using_filenames=\" +\n                        options.tag_using_filenames\n                )\n            );\n            promise\n                .done(function(response) {\n                    that.updateProgress();\n                    that.chainCallImportingFolders(options);\n                })\n                .fail(function() {\n                    that.options.chain_call_control.failed_number += 1;\n                    that.updateProgress();\n                    that.chainCallImportingFolders(options);\n                });\n        },\n\n        /**\n   * Take the array of hdas and create a request for each.\n   * Call them in chain and update progress bar in between each.\n   * @param  {array} hdas_set array of empty hda objects\n   */\n        chainCallAddingHdas: function(hdas_set) {\n            var self = this;\n            this.added_hdas = new mod_library_model.Folder();\n            var popped_item = hdas_set.pop();\n            if (typeof popped_item == \"undefined\") {\n                if (this.options.chain_call_control.failed_number === 0) {\n                    mod_toastr.success(\"Selected datasets from history added to the folder\");\n                } else if (\n                    this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number\n                ) {\n                    mod_toastr.error(\"There was an error and no datasets were added to the folder.\");\n                } else if (\n                    this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number\n                ) {\n                    mod_toastr.warning(\"Some of the datasets could not be added to the folder\");\n                }\n                Galaxy.modal.hide();\n                return this.added_hdas;\n            }\n            var promise = $.when(\n                popped_item.save({\n                    from_hda_id: popped_item.get(\"from_hda_id\")\n                })\n            );\n\n            promise\n                .done(function(model) {\n                    Galaxy.libraries.folderListView.collection.add(model);\n                    self.updateProgress();\n                    self.chainCallAddingHdas(hdas_set);\n                })\n                .fail(function() {\n                    self.options.chain_call_control.failed_number += 1;\n                    self.updateProgress();\n                    self.chainCallAddingHdas(hdas_set);\n                });\n        },\n\n        /**\n   * Take the array of lddas, create request for each and\n   * call them in chain. Update progress bar in between each.\n   * @param  {array} lddas_set array of lddas to delete\n   */\n        chainCallDeletingItems: function(items_to_delete) {\n            var self = this;\n            this.deleted_items = new mod_library_model.Folder();\n            var item_to_delete = items_to_delete.pop();\n            if (typeof item_to_delete === \"undefined\") {\n                if (this.options.chain_call_control.failed_number === 0) {\n                    mod_toastr.success(\"Selected items were deleted.\");\n                } else if (\n                    this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number\n                ) {\n                    mod_toastr.error(\n                        \"There was an error and no items were deleted. Please make sure you have sufficient permissions.\"\n                    );\n                } else if (\n                    this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number\n                ) {\n                    mod_toastr.warning(\n                        \"Some of the items could not be deleted. Please make sure you have sufficient permissions.\"\n                    );\n                }\n                Galaxy.modal.hide();\n                return this.deleted_items;\n            }\n            item_to_delete\n                .destroy()\n                .done(function(item) {\n                    Galaxy.libraries.folderListView.collection.remove(item_to_delete.id);\n                    self.updateProgress();\n                    // add the deleted item to collection, triggers rendering\n                    if (Galaxy.libraries.folderListView.options.include_deleted) {\n                        var updated_item = null;\n                        if (item.type === \"folder\" || item.model_class === \"LibraryFolder\") {\n                            updated_item = new mod_library_model.FolderAsModel(item);\n                        } else if (item.type === \"file\" || item.model_class === \"LibraryDataset\") {\n                            updated_item = new mod_library_model.Item(item);\n                        } else {\n                            Galaxy.emit.error(\"Unknown library item type found.\", \"datalibs\");\n                            Galaxy.emit.error(item.type || item.model_class, \"datalibs\");\n                        }\n                        Galaxy.libraries.folderListView.collection.add(updated_item);\n                    }\n                    self.chainCallDeletingItems(items_to_delete);\n                })\n                .fail(function() {\n                    self.options.chain_call_control.failed_number += 1;\n                    self.updateProgress();\n                    self.chainCallDeletingItems(items_to_delete);\n                });\n        },\n\n        /**\n   * Handles the click on 'show deleted' checkbox\n   */\n        checkIncludeDeleted: function(event) {\n            if (event.target.checked) {\n                Galaxy.libraries.folderListView.fetchFolder({\n                    include_deleted: true\n                });\n            } else {\n                Galaxy.libraries.folderListView.fetchFolder({\n                    include_deleted: false\n                });\n            }\n        },\n\n        /**\n   * Delete the selected items. Atomic. One by one.\n   */\n        deleteSelectedItems: function() {\n            var dataset_ids = [];\n            var folder_ids = [];\n            var $checkedValues = this.findCheckedRows();\n            if ($checkedValues.length === 0) {\n                mod_toastr.info(\"You must select at least one item for deletion.\");\n            } else {\n                var template = this.templateDeletingItemsProgressBar();\n                this.modal = Galaxy.modal;\n                this.modal.show({\n                    closing_events: true,\n                    title: \"Deleting selected items\",\n                    body: template({}),\n                    buttons: {\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    }\n                });\n                // init the control counters\n                this.options.chain_call_control.total_number = 0;\n                this.options.chain_call_control.failed_number = 0;\n                $checkedValues.each(function() {\n                    var row_id = $(this)\n                        .closest(\"tr\")\n                        .data(\"id\");\n                    if (row_id !== undefined) {\n                        if (row_id.substring(0, 1) == \"F\") {\n                            folder_ids.push(row_id);\n                        } else {\n                            dataset_ids.push(row_id);\n                        }\n                    }\n                });\n                // init the progress bar\n                var items_total = dataset_ids.length + folder_ids.length;\n                this.progressStep = 100 / items_total;\n                this.progress = 0;\n\n                // prepare the dataset items to be added\n                var items_to_delete = [];\n                for (var i = dataset_ids.length - 1; i >= 0; i--) {\n                    var dataset = new mod_library_model.Item({\n                        id: dataset_ids[i]\n                    });\n                    items_to_delete.push(dataset);\n                }\n                for (var i = folder_ids.length - 1; i >= 0; i--) {\n                    var folder = new mod_library_model.FolderAsModel({\n                        id: folder_ids[i]\n                    });\n                    items_to_delete.push(folder);\n                }\n\n                this.options.chain_call_control.total_number = items_total;\n                // call the recursive function to call ajax one after each other (request FIFO queue)\n                this.chainCallDeletingItems(items_to_delete);\n            }\n        },\n\n        showLocInfo: function() {\n            var library = null;\n            var that = this;\n            if (Galaxy.libraries.libraryListView !== null) {\n                library = Galaxy.libraries.libraryListView.collection.get(this.options.parent_library_id);\n                this.showLocInfoModal(library);\n            } else {\n                library = new mod_library_model.Library({\n                    id: this.options.parent_library_id\n                });\n                library.fetch({\n                    success: function() {\n                        that.showLocInfoModal(library);\n                    },\n                    error: function(model, response) {\n                        if (typeof response.responseJSON !== \"undefined\") {\n                            mod_toastr.error(response.responseJSON.err_msg);\n                        } else {\n                            mod_toastr.error(\"An error occurred.\");\n                        }\n                    }\n                });\n            }\n        },\n\n        showLocInfoModal: function(library) {\n            var that = this;\n            var template = this.templateLocInfoInModal();\n            this.modal = Galaxy.modal;\n            this.modal.show({\n                closing_events: true,\n                title: \"Location Details\",\n                body: template({ library: library, options: that.options }),\n                buttons: {\n                    Close: function() {\n                        Galaxy.modal.hide();\n                    }\n                }\n            });\n        },\n\n        showImportModal: function(options) {\n            switch (options.source) {\n                case \"history\":\n                    this.addFilesFromHistoryModal();\n                    break;\n                case \"importdir\":\n                    this.importFilesFromGalaxyFolderModal({\n                        source: \"importdir\"\n                    });\n                    break;\n                case \"path\":\n                    this.importFilesFromPathModal();\n                    break;\n                case \"userdir\":\n                    this.importFilesFromGalaxyFolderModal({\n                        source: \"userdir\"\n                    });\n                    break;\n                default:\n                    Galaxy.libraries.library_router.back();\n                    mod_toastr.error(\"Invalid import source.\");\n                    break;\n            }\n        },\n\n        /**\n   * Show user the prompt to change the number of items shown on page.\n   */\n        showPageSizePrompt: function(e) {\n            e.preventDefault();\n            var folder_page_size = prompt(\n                \"How many items per page do you want to see?\",\n                Galaxy.libraries.preferences.get(\"folder_page_size\")\n            );\n            if (folder_page_size != null && folder_page_size == parseInt(folder_page_size)) {\n                Galaxy.libraries.preferences.set({\n                    folder_page_size: parseInt(folder_page_size)\n                });\n                Galaxy.libraries.folderListView.render({\n                    id: this.options.id,\n                    show_page: 1\n                });\n            }\n        },\n\n        findCheckedRows: function() {\n            return $(\"#folder_list_body\").find(\":checked\");\n        },\n\n        templateToolBar: function() {\n            return _.template(\n                [\n                    // container start\n                    '<div class=\"library_style_container\">',\n                    // toolbar start\n                    '<div id=\"library_toolbar\">',\n                    '<form class=\"form-inline\" role=\"form\">',\n                    \"<span><strong>DATA LIBRARIES</strong></span>\",\n                    // paginator will append here\n                    '<span class=\"library-paginator folder-paginator\"></span>',\n                    '<div class=\"checkbox toolbar-item logged-dataset-manipulation\" style=\"height: 20px; display:none;\">',\n                    \"<label>\",\n                    '<input id=\"include_deleted_datasets_chk\" type=\"checkbox\">include deleted</input>',\n                    \"</label>\",\n                    \"</div>\",\n                    '<button style=\"display:none;\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Create New Folder\" id=\"toolbtn_create_folder\" class=\"btn btn-default primary-button add-library-items toolbar-item\" type=\"button\">',\n                    '<span class=\"fa fa-plus\"></span><span class=\"fa fa-folder\"></span>',\n                    \"</button>\",\n                    \"<% if(mutiple_add_dataset_options) { %>\",\n                    '<div class=\"btn-group add-library-items\" style=\"display:none;\">',\n                    '<button title=\"Add Datasets to Current Folder\" id=\"\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n                    '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span><span class=\"caret\"></span>',\n                    \"</button>\",\n                    '<ul class=\"dropdown-menu\" role=\"menu\">',\n                    '<li><a href=\"#folders/<%= id %>/import/history\"> from History</a></li>',\n                    \"<% if(Galaxy.config.user_library_import_dir !== null) { %>\",\n                    '<li><a href=\"#folders/<%= id %>/import/userdir\"> from User Directory</a></li>',\n                    \"<% } %>\",\n                    \"<% if(Galaxy.config.allow_library_path_paste) { %>\",\n                    '<li class=\"divider\"></li>',\n                    '<li class=\"dropdown-header\">Admins only</li>',\n                    \"<% if(Galaxy.config.library_import_dir !== null) { %>\",\n                    '<li><a href=\"#folders/<%= id %>/import/importdir\">from Import Directory</a></li>',\n                    \"<% } %>\",\n                    \"<% if(Galaxy.config.allow_library_path_paste) { %>\",\n                    '<li><a href=\"#folders/<%= id %>/import/path\">from Path</a></li>',\n                    \"<% } %>\",\n                    \"<% } %>\",\n                    \"</ul>\",\n                    \"</div>\",\n                    \"<% } else { %>\",\n                    '<a  data-placement=\"top\" title=\"Add Datasets to Current Folder\" style=\"display:none;\" class=\"btn btn-default add-library-items\" href=\"#folders/<%= id %>/import/history\" role=\"button\">',\n                    '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span>',\n                    \"</a>\",\n                    \"<% } %>\",\n                    '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Import selected datasets into history\" id=\"toolbtn_bulk_import\" class=\"primary-button dataset-manipulation\" style=\"margin-left: 0.5em; display:none;\" type=\"button\">',\n                    '<span class=\"fa fa-book\"></span>',\n                    \"&nbsp;to History\",\n                    \"</button>\",\n                    '<div class=\"btn-group dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \">',\n                    '<button title=\"Download selected items as archive\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n                    '<span class=\"fa fa-download\"></span> Download <span class=\"caret\"></span>',\n                    \"</button>\",\n                    '<ul class=\"dropdown-menu\" role=\"menu\">',\n                    '<li><a href=\"#/folders/<%= id %>/download/tgz\">.tar.gz</a></li>',\n                    '<li><a href=\"#/folders/<%= id %>/download/tbz\">.tar.bz</a></li>',\n                    '<li><a href=\"#/folders/<%= id %>/download/zip\">.zip</a></li>',\n                    \"</ul>\",\n                    \"</div>\",\n                    '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Mark selected items deleted\" id=\"toolbtn_bulk_delete\" class=\"primary-button logged-dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \" type=\"button\">',\n                    '<span class=\"fa fa-times\"></span> Delete</button>',\n                    '<button data-id=\"<%- id %>\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Show location details\" class=\"primary-button toolbtn-show-locinfo\" style=\"margin-left: 0.5em;\" type=\"button\">',\n                    '<span class=\"fa fa-info-circle\"></span>',\n                    \"&nbsp;Details\",\n                    \"</button>\",\n                    '<span class=\"help-button\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"See this screen annotated\">',\n                    '<a href=\"https://galaxyproject.org/data-libraries/screen/folder-contents/\" target=\"_blank\">',\n                    '<button class=\"primary-button\" type=\"button\">',\n                    '<span class=\"fa fa-question-circle\"></span>',\n                    \"&nbsp;Help\",\n                    \"</button>\",\n                    \"</a>\",\n                    \"</span>\",\n                    \"</div>\",\n                    \"</form>\",\n                    // toolbar end\n                    '<div id=\"folder_items_element\">',\n                    \"</div>\",\n                    // paginator will append here\n                    '<div class=\"folder-paginator paginator-bottom\"></div>',\n                    // container end\n                    \"</div>\"\n                ].join(\"\")\n            );\n        },\n\n        templateLocInfoInModal: function() {\n            return _.template(\n                [\n                    \"<div>\",\n                    '<table class=\"grid table table-condensed\">',\n                    \"<thead>\",\n                    '<th style=\"width: 25%;\">library</th>',\n                    \"<th></th>\",\n                    \"</thead>\",\n                    \"<tbody>\",\n                    \"<tr>\",\n                    \"<td>name</td>\",\n                    '<td><%- library.get(\"name\") %></td>',\n                    \"</tr>\",\n                    '<% if(library.get(\"description\") !== \"\") { %>',\n                    \"<tr>\",\n                    \"<td>description</td>\",\n                    '<td><%- library.get(\"description\") %></td>',\n                    \"</tr>\",\n                    \"<% } %>\",\n                    '<% if(library.get(\"synopsis\") !== \"\") { %>',\n                    \"<tr>\",\n                    \"<td>synopsis</td>\",\n                    '<td><%- library.get(\"synopsis\") %></td>',\n                    \"</tr>\",\n                    \"<% } %>\",\n                    '<% if(library.get(\"create_time_pretty\") !== \"\") { %>',\n                    \"<tr>\",\n                    \"<td>created</td>\",\n                    '<td><span title=\"<%- library.get(\"create_time\") %>\"><%- library.get(\"create_time_pretty\") %></span></td>',\n                    \"</tr>\",\n                    \"<% } %>\",\n                    \"<tr>\",\n                    \"<td>id</td>\",\n                    '<td><%- library.get(\"id\") %></td>',\n                    \"</tr>\",\n                    \"</tbody>\",\n                    \"</table>\",\n                    '<table class=\"grid table table-condensed\">',\n                    \"<thead>\",\n                    '<th style=\"width: 25%;\">folder</th>',\n                    \"<th></th>\",\n                    \"</thead>\",\n                    \"<tbody>\",\n                    \"<tr>\",\n                    \"<td>name</td>\",\n                    \"<td><%- options.folder_name %></td>\",\n                    \"</tr>\",\n                    '<% if(options.folder_description !== \"\") { %>',\n                    \"<tr>\",\n                    \"<td>description</td>\",\n                    \"<td><%- options.folder_description %></td>\",\n                    \"</tr>\",\n                    \"<% } %>\",\n                    \"<tr>\",\n                    \"<td>id</td>\",\n                    \"<td><%- options.id %></td>\",\n                    \"</tr>\",\n                    \"</tbody>\",\n                    \"</table>\",\n                    \"</div>\"\n                ].join(\"\")\n            );\n        },\n\n        templateNewFolderInModal: function() {\n            return _.template(\n                [\n                    '<div id=\"new_folder_modal\">',\n                    \"<form>\",\n                    '<input type=\"text\" name=\"Name\" value=\"\" placeholder=\"Name\" autofocus>',\n                    '<input type=\"text\" name=\"Description\" value=\"\" placeholder=\"Description\">',\n                    \"</form>\",\n                    \"</div>\"\n                ].join(\"\")\n            );\n        },\n\n        templateBulkImportInModal: function() {\n            return _.template(\n                [\n                    \"<div>\",\n                    '<div class=\"library-modal-item\">',\n                    \"Select history: \",\n                    '<select id=\"dataset_import_bulk\" name=\"dataset_import_bulk\" style=\"width:50%; margin-bottom: 1em; \" autofocus>',\n                    \"<% _.each(histories, function(history) { %>\",\n                    '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n                    \"<% }); %>\",\n                    \"</select>\",\n                    \"</div>\",\n                    '<div class=\"library-modal-item\">',\n                    \"or create new: \",\n                    '<input type=\"text\" name=\"history_name\" value=\"\" placeholder=\"name of the new history\" style=\"width:50%;\">',\n                    \"</input>\",\n                    \"</div>\",\n                    \"</div>\"\n                ].join(\"\")\n            );\n        },\n\n        templateImportIntoHistoryProgressBar: function() {\n            return _.template(\n                [\n                    '<div class=\"import_text\">',\n                    \"Importing selected items to history <b><%= _.escape(history_name) %></b>\",\n                    \"</div>\",\n                    '<div class=\"progress\">',\n                    '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                    '<span class=\"completion_span\">0% Complete</span>',\n                    \"</div>\",\n                    \"</div>\"\n                ].join(\"\")\n            );\n        },\n\n        templateAddingDatasetsProgressBar: function() {\n            return _.template(\n                [\n                    '<div class=\"import_text\">',\n                    \"Adding selected datasets to library folder <b><%= _.escape(folder_name) %></b>\",\n                    \"</div>\",\n                    '<div class=\"progress\">',\n                    '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                    '<span class=\"completion_span\">0% Complete</span>',\n                    \"</div>\",\n                    \"</div>\"\n                ].join(\"\")\n            );\n        },\n\n        templateDeletingItemsProgressBar: function() {\n            return _.template(\n                [\n                    '<div class=\"import_text\">',\n                    \"</div>\",\n                    '<div class=\"progress\">',\n                    '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                    '<span class=\"completion_span\">0% Complete</span>',\n                    \"</div>\",\n                    \"</div>\"\n                ].join(\"\")\n            );\n        },\n\n        templateBrowserModal: function() {\n            return _.template(\n                [\n                    '<div id=\"file_browser_modal\">',\n                    '<div class=\"alert alert-info jstree-files-message\">All files you select will be imported into the current folder ignoring their folder structure.</div>',\n                    '<div class=\"alert alert-info jstree-folders-message\" style=\"display:none;\">All files within the selected folders and their subfolders will be imported into the current folder.</div>',\n                    '<div style=\"margin-bottom:1em;\">',\n                    '<label title=\"Switch to selecting files\" class=\"radio-inline import-type-switch\">',\n                    '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-folders\" checked=\"checked\"> Choose Files',\n                    \"</label>\",\n                    '<label title=\"Switch to selecting folders\" class=\"radio-inline import-type-switch\">',\n                    '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-files\"> Choose Folders',\n                    \"</label>\",\n                    \"</div>\",\n                    '<div style=\"margin-bottom:1em;\">',\n                    '<label class=\"checkbox-inline jstree-preserve-structure\" style=\"display:none;\">',\n                    '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n                    \"Preserve directory structure\",\n                    \"</label>\",\n                    '<label class=\"checkbox-inline\">',\n                    '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n                    \"Link files instead of copying\",\n                    \"</label>\",\n                    '<label class=\"checkbox-inline\">',\n                    '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">',\n                    \"Convert line endings to POSIX\",\n                    \"</label>\",\n                    '<label class=\"checkbox-inline\">',\n                    '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">',\n                    \"Convert spaces to tabs\",\n                    \"</label>\",\n                    \"</div>\",\n                    '<button title=\"Select all files\" type=\"button\" class=\"button primary-button libimport-select-all\">',\n                    \"Select all\",\n                    \"</button>\",\n                    '<button title=\"Select no files\" type=\"button\" class=\"button primary-button libimport-select-none\">',\n                    \"Unselect all\",\n                    \"</button>\",\n                    \"<hr />\",\n                    // append jstree object here\n                    '<div id=\"jstree_browser\">',\n                    \"</div>\",\n                    \"<hr />\",\n                    \"<p>You can set extension type and genome for all imported datasets at once:</p>\",\n                    \"<div>\",\n                    'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n                    'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n                    \"</div>\",\n                    \"<br>\",\n                    \"<div>\",\n                    '<label class=\"checkbox-inline tag-files\">',\n                    \"Tag datasets based on file names.\",\n                    '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\" checked=\"checked\">',\n                    \"</label>\",\n                    \"</div>\",\n                    \"</div>\"\n                ].join(\"\")\n            );\n        },\n\n        templateImportPathModal: function() {\n            return _.template(\n                [\n                    '<div id=\"file_browser_modal\">',\n                    '<div class=\"alert alert-info jstree-folders-message\">All files within the given folders and their subfolders will be imported into the current folder.</div>',\n                    '<div style=\"margin-bottom: 0.5em;\">',\n                    '<label class=\"checkbox-inline\">',\n                    '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n                    \"Preserve directory structure\",\n                    \"</label>\",\n                    '<label class=\"checkbox-inline\">',\n                    '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n                    \"Link files instead of copying\",\n                    \"</label>\",\n                    \"<br>\",\n                    '<label class=\"checkbox-inline\">',\n                    '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">',\n                    \"Convert line endings to POSIX\",\n                    \"</label>\",\n                    '<label class=\"checkbox-inline\">',\n                    '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">',\n                    \"Convert spaces to tabs\",\n                    \"</label>\",\n                    \"</div>\",\n                    '<textarea id=\"import_paths\" class=\"form-control\" rows=\"5\" placeholder=\"Absolute paths (or paths relative to Galaxy root) separated by newline\" autofocus></textarea>',\n                    \"<hr />\",\n                    \"<p>You can set extension type and genome for all imported datasets at once:</p>\",\n                    \"<div>\",\n                    'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n                    'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n                    \"</div>\",\n                    \"<div>\",\n                    '<label class=\"checkbox-inline tag-files\">',\n                    \"Tag datasets based on file names.\",\n                    '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\" checked=\"checked\">',\n                    \"</label>\",\n                    \"</div>\",\n                    \"</div>\"\n                ].join(\"\")\n            );\n        },\n\n        templateAddFilesFromHistory: function() {\n            return _.template(\n                [\n                    '<div id=\"add_files_modal\">',\n                    \"<div>\",\n                    \"1.&nbsp;Select history:&nbsp;\",\n                    '<select id=\"dataset_add_bulk\" name=\"dataset_add_bulk\" style=\"width:66%; \"> ',\n                    \"<% _.each(histories, function(history) { %>\", //history select box\n                    '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n                    \"<% }); %>\",\n                    \"</select>\",\n                    \"</div>\",\n                    \"<br/>\",\n                    '<div id=\"selected_history_content\">',\n                    \"</div>\",\n                    \"</div>\"\n                ].join(\"\")\n            );\n        },\n\n        templateHistoryContents: function() {\n            return _.template(\n                [\n                    \"<p>2.&nbsp;Choose the datasets to import:</p>\",\n                    \"<div>\",\n                    '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-select-all\">',\n                    \"Select all\",\n                    \"</button>\",\n                    '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-unselect-all\">',\n                    \"Unselect all\",\n                    \"</button>\",\n                    \"</div>\",\n                    \"<br>\",\n                    \"<ul>\",\n                    \"<% _.each(history_contents, function(history_item) { %>\",\n                    '<% if (history_item.get(\"deleted\") != true ) { %>',\n                    '<% var item_name = history_item.get(\"name\") %>',\n                    '<% if (history_item.get(\"type\") === \"collection\") { %>',\n                    '<% var collection_type = history_item.get(\"collection_type\") %>',\n                    '<% if (collection_type === \"list\") { %>',\n                    '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                    \"<label>\",\n                    '<label title=\"<%= _.escape(item_name) %>\">',\n                    '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ',\n                    '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection)',\n                    \"</label>\",\n                    \"</li>\",\n                    \"<% } else { %>\",\n                    '<li><input style=\"margin: 0;\" type=\"checkbox\" onclick=\"return false;\" disabled=\"disabled\">',\n                    '<span title=\"You can convert this collection into a collection of type list using the Collection Tools\">',\n                    '<%= _.escape(history_item.get(\"hid\")) %>: ',\n                    '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection of type <%= _.escape(collection_type) %> not supported.)',\n                    \"</span>\",\n                    \"</li>\",\n                    \"<% } %>\",\n                    '<% } else if (history_item.get(\"visible\") === true && history_item.get(\"state\") === \"ok\") { %>',\n                    '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                    '<label title=\"<%= _.escape(item_name) %>\">',\n                    '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ',\n                    '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %>',\n                    \"</label>\",\n                    \"</li>\",\n                    \"<% } %>\",\n                    \"<% } %>\",\n                    \"<% }); %>\",\n                    \"</ul>\"\n                ].join(\"\")\n            );\n        },\n\n        templatePaginator: function() {\n            return _.template(\n                [\n                    '<ul class=\"pagination pagination-sm\">',\n                    \"<% if ( ( show_page - 1 ) > 0 ) { %>\",\n                    \"<% if ( ( show_page - 1 ) > page_count ) { %>\", // we are on higher page than total page count\n                    '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                    '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n                    \"<% } else { %>\",\n                    '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                    '<li><a href=\"#folders/<%= id %>/page/<% print( show_page - 1 ) %>\"><% print( show_page - 1 ) %></a></li>',\n                    \"<% } %>\",\n                    \"<% } else { %>\", // we are on the first page\n                    '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                    '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n                    \"<% } %>\",\n                    '<li class=\"active\">',\n                    '<a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page ) %></a>',\n                    \"</li>\",\n                    \"<% if ( ( show_page ) < page_count ) { %>\",\n                    '<li><a href=\"#folders/<%= id %>/page/<% print( show_page + 1 ) %>\"><% print( show_page + 1 ) %></a></li>',\n                    '<li><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n                    \"<% } else { %>\",\n                    '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page  ) %>\"><% print( show_page + 1 ) %></a></li>',\n                    '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n                    \"<% } %>\",\n                    \"</ul>\",\n                    \"<span>\",\n                    ' <%- items_shown %> items shown <a href=\"\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"currently <%- folder_page_size %> per page\" class=\"page_size_prompt\">(change)</a>',\n                    \"</span>\",\n                    \"<span>\",\n                    \" <%- total_items_count %> total\",\n                    \"</span>\"\n                ].join(\"\")\n            );\n        }\n    });\n\n    return {\n        FolderToolbarView: FolderToolbarView\n    };\n});\n"]}