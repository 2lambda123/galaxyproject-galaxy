{"version":3,"sources":["mvc/library/library-foldertoolbar-view.js"],"names":["FolderToolbarView","Backbone","View","extend","el","events","click #toolbtn_create_folder","click #toolbtn_bulk_import","click #include_deleted_datasets_chk","click #toolbtn_bulk_delete","click .toolbtn-show-locinfo","click .page_size_prompt","defaults","can_add_library_item","contains_file_or_folder","chain_call_control","failed_number","modal","jstree","select_extension","list_extensions","auto","text","description","histories","initialize","options","_","this","id","render","list_genomes","templateToolBar","template_defaults","is_admin","is_anonym","fetchExtAndGenomes","mutiple_add_dataset_options","Galaxy","user","isAdmin","config","library_import_dir","renderPaginator","paginator_template","templatePaginator","$","find","html","page_count","parseInt","total_items_count","show_page","get","configureElements","show","hide","isAnonymous","tooltip","createFolderFromModal","event","preventDefault","self","template","templateNewFolderInModal","closing_events","title","body","buttons","create_new_folder_event","folderDetails","serialize_new_folder","current_folder_id","url_items","validate_new_folder","split","history","length","folder","url","success","libraries","folderListView","collection","add","response","responseJSON","err_msg","_toastr2","default","error","val","name","modalBulkImport","findCheckedRows","$checkedValues","that","_libraryModel2","GalaxyHistories","fetch","done","templateBulkImportInModal","models","Import","importAllIntoHistory","Close","fail","model","disableButton","new_history_name","root","last_used_history_id","new_history","processImportToHistory","enableButton","always","history_id","history_name","row_id","closest","dataset_ids","folder_ids","each","data","substring","datasets_to_import","library_dataset_id","historyItem","i","HistoryItem","urlRoot","folders_to_import","library_folder_id","initChainCallControl","action","source","jQuery","getJSON","chainCallImportingIntoHistory","updateProgress","progress","progressStep","width","Math","round","txt_representation","push","processDownload","format","ld_ids","inputs","param","pair","method","template_modal","addFilesFromHistoryModal","Add","templateAddFilesFromHistory","closing_callback","fetchAndDisplayHistoryContents","addAllDatasetsFromHistory","library_router","navigate","trigger","change","target","value","templateImportPathModal","importFilesFromPathModal","renderSelectBoxes","importFromPathsClicked","_utils2","datatypes","cache","key","extension","genomes","description_url","b","a","unshift","sort","select_genome","container","_uiSelect2","css","$el","importFilesFromGalaxyFolderModal","importFromJstreePath","templateBrowserModal","bind","disabled_jstree_element","renderJstree","plugins","types","Jstree","icon","file","core","three_state","checkbox","err_code","warning","preserve_dirs","info","is","link_data","space_to_tab","paths","tag_using_filenames","file_type","trimmed","trim","dbkey","valid_paths","chainCallImportingFolders","to_posix_lines","templateAddingDatasetsProgressBar","folder_name","templateDeletingItemsProgressBar","emit","total_number","all_nodes","selection_type","get_selected","selected_nodes","filter","node","state","disabled","li_attr","undefined","full_path","type","full_source","chainCallImportingUserdirFiles","history_contents","HistoryContents","templateHistoryContents","contents","history_contents_template","reverse","prop","checked_hdas","history_item_ids","history_item_types","items_to_add","folder_item","set","hid","chainCallAddingHdas","history_item_id","Item","from_hdca_id","popped_item","history_item_set","onclick","pop","promise","when","save","content","window","location","post","added_hdas","hdas_set","chainCallDeletingItems","item_to_delete","Folder","updated_item","item","FolderAsModel","checkIncludeDeleted","checked","include_deleted","items_to_delete","deleted_items","deleteSelectedItems","destroy","remove","model_class","items_total","fetchFolder","library","showLocInfoModal","dataset","showLocInfo","libraryListView","parent_library_id","e","Library","folder_page_size","templateLocInfoInModal","showImportModal","templateImportIntoHistoryProgressBar","back","showPageSizePrompt","prompt","preferences","join"],"mappings":"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AAK,MAIfP,uBAAwB,WACpB,OAAO1Q,EAAEoC,UAED,QACA,6CACA,UACA,uCACA,YACA,WACA,UACA,OACA,gBACA,sCACA,QACA,gDACA,OACA,uBACA,6CACA,QACA,UACA,6CACA,OACA,oBACA,0CACA,QACA,UACA,uDACA,OACA,mBACA,2GACA,QACA,UACA,OACA,cACA,oCACA,QACA,WACA,WACA,6CACA,UACA,sCACA,YACA,WACA,UACA,OACA,gBACA,sCACA,QACA,gDACA,OACA,uBACA,6CACA,QACA,UACA,OACA,cACA,6BACA,QACA,WACA,WACA,UACF6O,KAAK,MAIf5O,yBAA0B,WACtB,OAAOrC,EAAEoC,UAED,8BACA,SACA,wEACA,4EACA,UACA,UACF6O,KAAK,MAIfvM,0BAA2B,WACvB,OAAO1E,EAAEoC,UAED,QACA,mCACA,mBACA,iHACA,8CACA,mGACA,YACA,YACA,SACA,mCACA,kBACA,4GACA,WACA,SACA,UACF6O,KAAK,MAIfL,qCAAsC,WAClC,OAAO5Q,EAAEoC,UAED,4BACA,2EACA,SACA,yBACA,gJACA,mDACA,SACA,UACF6O,KAAK,MAIfnF,kCAAmC,WAC/B,OAAO9L,EAAEoC,UAED,4BACA,iFACA,SACA,yBACA,gJACA,mDACA,SACA,UACF6O,KAAK,MAIfjF,iCAAkC,WAC9B,OAAOhM,EAAEoC,UAED,4BACA,SACA,yBACA,gJACA,mDACA,SACA,UACF6O,KAAK,MAIf/G,qBAAsB,WAClB,OAAOlK,EAAEoC,UAED,gCACA,0JACA,wLACA,mCACA,oFACA,yGACA,WACA,sFACA,uFACA,WACA,SACA,mCACA,kFACA,yFACA,+BACA,WACA,kCACA,mEACA,gCACA,WACA,kCACA,0FACA,gCACA,WACA,kCACA,yEACA,yBACA,WACA,SACA,qGACA,aACA,YACA,qGACA,eACA,YACA,SAEA,4BACA,SACA,SACA,kFACA,QACA,gFACA,4EACA,SACA,OACA,QACA,4CACA,oCACA,0FACA,WACA,SACA,UACF6O,KAAK,MAIfrI,wBAAyB,WACrB,OAAO5I,EAAEoC,UAED,gCACA,+JACA,sCACA,kCACA,yFACA,+BACA,WACA,kCACA,mEACA,gCACA,WACA,OACA,kCACA,0FACA,gCACA,WACA,kCACA,yEACA,yBACA,WACA,SACA,uKACA,SACA,kFACA,QACA,gFACA,4EACA,SACA,QACA,4CACA,oCACA,0FACA,WACA,SACA,UACF6O,KAAK,MAIf/I,4BAA6B,WACzB,OAAOlI,EAAEoC,UAED,6BACA,QACA,gCACA,8EACA,8CACA,mGACA,YACA,YACA,SACA,QACA,sCACA,SACA,UACF6O,KAAK,MAIf9D,wBAAyB,WACrB,OAAOnN,EAAEoC,UAED,gDACA,QACA,6GACA,aACA,YACA,+GACA,eACA,YACA,SACA,OACA,OACA,0DACA,oDACA,iDACA,yDACA,kEACA,0CACA,+GACA,UACA,6CACA,wFACA,0HACA,WACA,QACA,iBACA,6FACA,2GACA,6CACA,kLACA,UACA,QACA,UACA,iGACA,+GACA,6CACA,wFACA,qGACA,WACA,QACA,UACA,UACA,YACA,SACF6O,KAAK,MAIf/P,kBAAmB,WACf,OAAOlB,EAAEoC,UAED,wCACA,uCACA,gDACA,iGACA,wHACA,iBACA,iGACA,2GACA,UACA,iBACA,kHACA,wHACA,UACA,sBACA,0FACA,QACA,4CACA,2GACA,0HACA,iBACA,yHACA,2IACA,UACA,QACA,SACA,iLACA,UACA,SACA,kCACA,WACF6O,KAAK,mBAMf5S,kBAAmBA","file":"../../../scripts/mvc/library/library-foldertoolbar-view.js","sourcesContent":["import mod_utils from \"utils/utils\";\nimport mod_toastr from \"libs/toastr\";\nimport mod_library_model from \"mvc/library/library-model\";\nimport mod_select from \"mvc/ui/ui-select\";\nimport \"libs/jquery/jstree\";\nvar FolderToolbarView = Backbone.View.extend({\n    el: \"#center\",\n\n    events: {\n        \"click #toolbtn_create_folder\": \"createFolderFromModal\",\n        \"click #toolbtn_bulk_import\": \"modalBulkImport\",\n        \"click #include_deleted_datasets_chk\": \"checkIncludeDeleted\",\n        \"click #toolbtn_bulk_delete\": \"deleteSelectedItems\",\n        \"click .toolbtn-show-locinfo\": \"showLocInfo\",\n        \"click .page_size_prompt\": \"showPageSizePrompt\"\n    },\n\n    defaults: {\n        can_add_library_item: false,\n        contains_file_or_folder: false,\n        chain_call_control: {\n            total_number: 0,\n            failed_number: 0\n        },\n        disabled_jstree_element: \"folders\"\n    },\n\n    modal: null,\n\n    // directory browsing object\n    jstree: null,\n\n    // user's histories\n    histories: null,\n\n    // genome select\n    select_genome: null,\n\n    // extension select\n    select_extension: null,\n\n    // extension types\n    list_extensions: [],\n\n    // datatype placeholder for extension auto-detection\n    auto: {\n        id: \"auto\",\n        text: \"Auto-detect\",\n        description:\n            \"This system will try to detect the file type automatically.\" +\n            \" If your file is not detected properly as one of the known formats,\" +\n            \" it most likely means that it has some format problems (e.g., different\" +\n            \" number of columns on different rows). You can still coerce the system\" +\n            \" to set your data to the format you think it should be.\" +\n            \" You can also upload compressed files, which will automatically be decompressed.\"\n    },\n\n    // genomes\n    list_genomes: [],\n\n    initialize: function(options) {\n        this.options = _.defaults(options || {}, this.defaults);\n        this.fetchExtAndGenomes();\n        this.render();\n    },\n\n    render: function(options) {\n        this.options = _.extend(this.options, options);\n        var toolbar_template = this.templateToolBar();\n        var template_defaults = {\n            id: this.options.id,\n            is_admin: false,\n            is_anonym: true,\n            mutiple_add_dataset_options: false\n        };\n        if (Galaxy.user) {\n            template_defaults.is_admin = Galaxy.user.isAdmin();\n            template_defaults.is_anonym = Galaxy.user.isAnonymous();\n            if (\n                Galaxy.config.user_library_import_dir !== null ||\n                Galaxy.config.allow_library_path_paste !== false ||\n                Galaxy.config.library_import_dir !== null\n            ) {\n                template_defaults.mutiple_add_dataset_options = true;\n            }\n        }\n        this.$el.html(toolbar_template(template_defaults));\n    },\n\n    /**\n     * Called from FolderListView when needed.\n     * @param  {object} options common options\n     */\n    renderPaginator: function(options) {\n        this.options = _.extend(this.options, options);\n        var paginator_template = this.templatePaginator();\n        $(\"body\")\n            .find(\".folder-paginator\")\n            .html(\n                paginator_template({\n                    id: this.options.id,\n                    show_page: parseInt(this.options.show_page),\n                    page_count: parseInt(this.options.page_count),\n                    total_items_count: this.options.total_items_count,\n                    items_shown: this.options.items_shown,\n                    folder_page_size: Galaxy.libraries.preferences.get(\"folder_page_size\")\n                })\n            );\n    },\n\n    configureElements: function(options) {\n        this.options = _.extend(this.options, options);\n\n        if (this.options.can_add_library_item === true) {\n            $(\".add-library-items\").show();\n        } else {\n            $(\".add-library-items\").hide();\n        }\n        if (this.options.contains_file_or_folder === true) {\n            if (Galaxy.user) {\n                if (!Galaxy.user.isAnonymous()) {\n                    $(\".logged-dataset-manipulation\").show();\n                    $(\".dataset-manipulation\").show();\n                } else {\n                    $(\".dataset-manipulation\").show();\n                    $(\".logged-dataset-manipulation\").hide();\n                }\n            } else {\n                $(\".logged-dataset-manipulation\").hide();\n                $(\".dataset-manipulation\").hide();\n            }\n        } else {\n            $(\".logged-dataset-manipulation\").hide();\n            $(\".dataset-manipulation\").hide();\n        }\n        this.$el.find(\"[data-toggle]\").tooltip();\n    },\n\n    // shows modal for creating folder\n    createFolderFromModal: function(event) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        // create modal\n        var self = this;\n        var template = this.templateNewFolderInModal();\n        this.modal = Galaxy.modal;\n        this.modal.show({\n            closing_events: true,\n            title: \"Create New Folder\",\n            body: template(),\n            buttons: {\n                Create: function() {\n                    self.create_new_folder_event();\n                },\n                Close: function() {\n                    Galaxy.modal.hide();\n                }\n            }\n        });\n    },\n\n    // create the new folder from modal\n    create_new_folder_event: function() {\n        var folderDetails = this.serialize_new_folder();\n        if (this.validate_new_folder(folderDetails)) {\n            var folder = new mod_library_model.FolderAsModel();\n            var url_items = Backbone.history.fragment.split(\"/\");\n            var current_folder_id;\n            if (url_items.indexOf(\"page\") > -1) {\n                current_folder_id = url_items[url_items.length - 3];\n            } else {\n                current_folder_id = url_items[url_items.length - 1];\n            }\n            folder.url = folder.urlRoot + current_folder_id;\n\n            folder.save(folderDetails, {\n                success: function(folder) {\n                    Galaxy.modal.hide();\n                    mod_toastr.success(\"Folder created.\");\n                    folder.set({ type: \"folder\" });\n                    Galaxy.libraries.folderListView.collection.add(folder);\n                },\n                error: function(model, response) {\n                    Galaxy.modal.hide();\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(\"An error occurred.\");\n                    }\n                }\n            });\n        } else {\n            mod_toastr.error(\"Folder's name is missing.\");\n        }\n        return false;\n    },\n\n    // serialize data from the modal\n    serialize_new_folder: function() {\n        return {\n            name: $(\"input[name='Name']\").val(),\n            description: $(\"input[name='Description']\").val()\n        };\n    },\n\n    // validate new folder info\n    validate_new_folder: function(folderDetails) {\n        return folderDetails.name !== \"\";\n    },\n\n    // show bulk import modal\n    modalBulkImport: function() {\n        var $checkedValues = this.findCheckedRows();\n        if ($checkedValues.length === 0) {\n            mod_toastr.info(\"You must select some datasets first.\");\n        } else {\n            var that = this;\n            this.histories = new mod_library_model.GalaxyHistories();\n            this.histories\n                .fetch()\n                .done(() => {\n                    var template = that.templateBulkImportInModal();\n                    that.modal = Galaxy.modal;\n                    that.modal.show({\n                        closing_events: true,\n                        title: \"Import into History\",\n                        body: template({\n                            histories: that.histories.models\n                        }),\n                        buttons: {\n                            Import: function() {\n                                that.importAllIntoHistory();\n                            },\n                            Close: function() {\n                                Galaxy.modal.hide();\n                            }\n                        }\n                    });\n                })\n                .fail((model, response) => {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(\"An error occurred.\");\n                    }\n                });\n        }\n    },\n\n    /**\n     * Import all selected datasets into history.\n     */\n    importAllIntoHistory: function() {\n        this.modal.disableButton(\"Import\");\n        var new_history_name = this.modal.$(\"input[name=history_name]\").val();\n        var that = this;\n        if (new_history_name !== \"\") {\n            $.post(`${Galaxy.root}api/histories`, {\n                name: new_history_name\n            })\n                .done(new_history => {\n                    that.options.last_used_history_id = new_history.id;\n                    that.processImportToHistory(new_history.id, new_history.name);\n                })\n                .fail((xhr, status, error) => {\n                    mod_toastr.error(\"An error occurred.\");\n                })\n                .always(() => {\n                    that.modal.enableButton(\"Import\");\n                });\n        } else {\n            var history_id = $(\"select[name=dataset_import_bulk] option:selected\").val();\n            this.options.last_used_history_id = history_id;\n            var history_name = $(\"select[name=dataset_import_bulk] option:selected\").text();\n            this.processImportToHistory(history_id, history_name);\n            this.modal.enableButton(\"Import\");\n        }\n    },\n\n    processImportToHistory: function(history_id, history_name) {\n        var dataset_ids = [];\n        var folder_ids = [];\n        this.findCheckedRows().each(function() {\n            var row_id = $(this)\n                .closest(\"tr\")\n                .data(\"id\");\n            if (row_id.substring(0, 1) == \"F\") {\n                folder_ids.push(row_id);\n            } else {\n                dataset_ids.push(row_id);\n            }\n        });\n        // prepare the dataset objects to be imported\n        var datasets_to_import = [];\n        for (var i = dataset_ids.length - 1; i >= 0; i--) {\n            var library_dataset_id = dataset_ids[i];\n            var historyItem = new mod_library_model.HistoryItem();\n            historyItem.url = `${historyItem.urlRoot + history_id}/contents`;\n            historyItem.content = library_dataset_id;\n            historyItem.source = \"library\";\n            datasets_to_import.push(historyItem);\n        }\n\n        // prepare the folder objects to be imported\n        var folders_to_import = [];\n        for (var i = folder_ids.length - 1; i >= 0; i--) {\n            var library_folder_id = folder_ids[i];\n            var historyItem = new mod_library_model.HistoryItem();\n            historyItem.url = `${historyItem.urlRoot + history_id}/contents`;\n            historyItem.content = library_folder_id;\n            historyItem.source = \"library_folder\";\n            datasets_to_import.push(historyItem);\n        }\n\n        this.initChainCallControl({\n            length: datasets_to_import.length,\n            action: \"to_history\",\n            history_name: history_name\n        });\n        // set the used history as current so user will see the last one\n        // that he imported into in the history panel on the 'analysis' page\n        jQuery.getJSON(`${Galaxy.root}history/set_as_current?id=${history_id}`);\n        this.chainCallImportingIntoHistory(datasets_to_import, history_name);\n    },\n\n    /**\n     * Update the progress bar in modal window.\n     */\n    updateProgress: function() {\n        this.progress += this.progressStep;\n        $(\".progress-bar-import\").width(`${Math.round(this.progress)}%`);\n        var txt_representation = `${Math.round(this.progress)}% Complete`;\n        $(\".completion_span\").text(txt_representation);\n    },\n\n    /**\n     * download selected datasets\n     * @param  {str} folder_id id of the current folder\n     * @param  {str} format    requested archive format\n     */\n    download: function(folder_id, format) {\n        var dataset_ids = [];\n        var folder_ids = [];\n        this.findCheckedRows().each(function() {\n            var row_id = $(this)\n                .closest(\"tr\")\n                .data(\"id\");\n            if (row_id.substring(0, 1) == \"F\") {\n                folder_ids.push(row_id);\n            } else {\n                dataset_ids.push(row_id);\n            }\n        });\n        var url = `${Galaxy.root}api/libraries/datasets/download/${format}`;\n        var data = { ld_ids: dataset_ids, folder_ids: folder_ids };\n        this.processDownload(url, data, \"get\");\n    },\n\n    /**\n     * Create hidden form and submit it through POST\n     * to initialize the download.\n     * @param  {str} url    url to call\n     * @param  {obj} data   data to include in the request\n     * @param  {str} method method of the request\n     */\n    processDownload: function(url, data, method) {\n        if (url && data) {\n            // data can be string of parameters or array/object\n            data = typeof data === \"string\" ? data : $.param(data);\n            // split params into form inputs\n            var inputs = \"\";\n            $.each(data.split(\"&\"), function() {\n                var pair = this.split(\"=\");\n                inputs += `<input type=\"hidden\" name=\"${pair[0]}\" value=\"${pair[1]}\" />`;\n            });\n            // send request\n            $(`<form action=\"${url}\" method=\"${method || \"post\"}\">${inputs}</form>`)\n                .appendTo(\"body\")\n                .submit()\n                .remove();\n            mod_toastr.info(\"Your download will begin soon.\");\n        } else {\n            mod_toastr.error(\"An error occurred.\");\n        }\n    },\n\n    addFilesFromHistoryModal: function() {\n        this.histories = new mod_library_model.GalaxyHistories();\n        var self = this;\n        this.histories\n            .fetch()\n            .done(() => {\n                self.modal = Galaxy.modal;\n                var template_modal = self.templateAddFilesFromHistory();\n                self.modal.show({\n                    closing_events: true,\n                    title: \"Adding datasets from your history\",\n                    body: template_modal({\n                        histories: self.histories.models\n                    }),\n                    buttons: {\n                        Add: function() {\n                            self.addAllDatasetsFromHistory();\n                        },\n                        Close: function() {\n                            Galaxy.modal.hide();\n                        }\n                    },\n                    closing_callback: function() {\n                        Galaxy.libraries.library_router.navigate(`folders/${self.id}`, { trigger: true });\n                    }\n                });\n                self.fetchAndDisplayHistoryContents(self.histories.models[0].id);\n                $(\"#dataset_add_bulk\").change(event => {\n                    self.fetchAndDisplayHistoryContents(event.target.value);\n                });\n            })\n            .fail((model, response) => {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    mod_toastr.error(response.responseJSON.err_msg);\n                } else {\n                    mod_toastr.error(\"An error occurred.\");\n                }\n            });\n    },\n\n    /**\n     * Create modal for importing from Galaxy path.\n     * This feature is admin-only.\n     */\n    importFilesFromPathModal: function() {\n        var that = this;\n        this.modal = Galaxy.modal;\n        var template_modal = this.templateImportPathModal();\n        this.modal.show({\n            closing_events: true,\n            title: \"Please enter paths to import\",\n            body: template_modal({}),\n            buttons: {\n                Import: function() {\n                    that.importFromPathsClicked(that);\n                },\n                Close: function() {\n                    Galaxy.modal.hide();\n                }\n            },\n            closing_callback: function() {\n                //  TODO: should not trigger routes outside of the router\n                Galaxy.libraries.library_router.navigate(`folders/${that.id}`, {\n                    trigger: true\n                });\n            }\n        });\n        this.renderSelectBoxes();\n    },\n\n    /**\n     * Request all extensions and genomes from Galaxy\n     * and save them sorted in arrays.\n     */\n    fetchExtAndGenomes: function() {\n        var that = this;\n        mod_utils.get({\n            url: `${Galaxy.root}api/datatypes?extension_only=False`,\n            success: function(datatypes) {\n                that.list_extensions = [];\n                for (var key in datatypes) {\n                    that.list_extensions.push({\n                        id: datatypes[key].extension,\n                        text: datatypes[key].extension,\n                        description: datatypes[key].description,\n                        description_url: datatypes[key].description_url\n                    });\n                }\n                that.list_extensions.sort((a, b) => (a.id > b.id ? 1 : a.id < b.id ? -1 : 0));\n                that.list_extensions.unshift(that.auto);\n            },\n            cache: true\n        });\n        mod_utils.get({\n            url: `${Galaxy.root}api/genomes`,\n            success: function(genomes) {\n                that.list_genomes = [];\n                for (var key in genomes) {\n                    that.list_genomes.push({\n                        id: genomes[key][1],\n                        text: genomes[key][0]\n                    });\n                }\n                that.list_genomes.sort((a, b) => (a.id > b.id ? 1 : a.id < b.id ? -1 : 0));\n            },\n            cache: true\n        });\n    },\n\n    renderSelectBoxes: function() {\n        // This won't work properly unlesss we already have the data fetched.\n        // See this.fetchExtAndGenomes()\n        // TODO switch to common resources:\n        // https://trello.com/c/dIUE9YPl/1933-ui-common-resources-and-data-into-galaxy-object\n        var that = this;\n        this.select_genome = new mod_select.View({\n            css: \"library-genome-select\",\n            data: that.list_genomes,\n            container: Galaxy.modal.$el.find(\"#library_genome_select\"),\n            value: \"?\"\n        });\n        this.select_extension = new mod_select.View({\n            css: \"library-extension-select\",\n            data: that.list_extensions,\n            container: Galaxy.modal.$el.find(\"#library_extension_select\"),\n            value: \"auto\"\n        });\n    },\n\n    /**\n     * Create modal for importing from given directory\n     * on Galaxy. Bind jQuery events.\n     */\n    importFilesFromGalaxyFolderModal: function(options) {\n        var that = this;\n        var template_modal = this.templateBrowserModal();\n        this.modal = Galaxy.modal;\n        this.modal.show({\n            closing_events: true,\n            title: \"Please select folders or files\",\n            body: template_modal({}),\n            buttons: {\n                Import: function() {\n                    that.importFromJstreePath(that, options);\n                },\n                Close: function() {\n                    Galaxy.modal.hide();\n                }\n            },\n            closing_callback: function() {\n                //  TODO: should not trigger routes outside of the router\n                Galaxy.libraries.library_router.navigate(`folders/${that.id}`, {\n                    trigger: true\n                });\n            }\n        });\n\n        $(\".libimport-select-all\").bind(\"click\", () => {\n            $(\"#jstree_browser\").jstree(\"check_all\");\n        });\n        $(\".libimport-select-none\").bind(\"click\", () => {\n            $(\"#jstree_browser\").jstree(\"uncheck_all\");\n        });\n\n        this.renderSelectBoxes();\n        options.disabled_jstree_element = \"folders\";\n        this.renderJstree(options);\n\n        $(\"input[type=radio]\").change(event => {\n            if (event.target.value === \"jstree-disable-folders\") {\n                options.disabled_jstree_element = \"folders\";\n                that.renderJstree(options);\n                $(\".jstree-folders-message\").hide();\n                $(\".jstree-preserve-structure\").hide();\n                $(\".jstree-files-message\").show();\n            } else if (event.target.value === \"jstree-disable-files\") {\n                $(\".jstree-files-message\").hide();\n                $(\".jstree-folders-message\").show();\n                $(\".jstree-preserve-structure\").show();\n                options.disabled_jstree_element = \"files\";\n                that.renderJstree(options);\n            }\n        });\n    },\n\n    /**\n     * Fetch the contents of user directory on Galaxy\n     * and render jstree component based on received\n     * data.\n     * @param  {[type]} options [description]\n     */\n    renderJstree: function(options) {\n        var that = this;\n        this.options = _.extend(this.options, options);\n        var target = options.source || \"userdir\";\n        var disabled_jstree_element = this.options.disabled_jstree_element;\n        this.jstree = new mod_library_model.Jstree();\n        this.jstree.url = `${this.jstree.urlRoot}?target=${target}&format=jstree&disable=${disabled_jstree_element}`;\n        this.jstree.fetch({\n            success: function(model, response) {\n                $(\"#jstree_browser\").jstree(\"destroy\");\n                $(\"#jstree_browser\").jstree({\n                    core: {\n                        data: model\n                    },\n                    plugins: [\"types\", \"checkbox\"],\n                    types: {\n                        folder: {\n                            icon: \"jstree-folder\"\n                        },\n                        file: {\n                            icon: \"jstree-file\"\n                        }\n                    },\n                    checkbox: {\n                        three_state: false\n                    }\n                });\n            },\n            error: function(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    if (response.responseJSON.err_code === 404001) {\n                        mod_toastr.warning(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    }\n                } else {\n                    mod_toastr.error(\"An error occurred.\");\n                }\n            }\n        });\n    },\n\n    /**\n     * Take the paths from the textarea, split it, create\n     * a request queue and call a function that starts sending\n     * one by one to be imported on the server.\n     */\n    importFromPathsClicked: function() {\n        var preserve_dirs = this.modal.$el.find(\".preserve-checkbox\").is(\":checked\");\n        var link_data = this.modal.$el.find(\".link-checkbox\").is(\":checked\");\n        var space_to_tab = this.modal.$el.find(\".spacetab-checkbox\").is(\":checked\");\n        var to_posix_lines = this.modal.$el.find(\".posix-checkbox\").is(\":checked\");\n        var tag_using_filenames = this.modal.$el.find(\".tag-files\").is(\":checked\");\n        var file_type = this.select_extension.value();\n        var dbkey = this.select_genome.value();\n        var paths = $(\"textarea#import_paths\").val();\n        var valid_paths = [];\n        if (!paths) {\n            mod_toastr.info(\"Please enter a path relative to Galaxy root.\");\n        } else {\n            this.modal.disableButton(\"Import\");\n            paths = paths.split(\"\\n\");\n            for (var i = paths.length - 1; i >= 0; i--) {\n                var trimmed = paths[i].trim();\n                if (trimmed.length !== 0) {\n                    valid_paths.push(trimmed);\n                }\n            }\n            this.initChainCallControl({\n                length: valid_paths.length,\n                action: \"adding_datasets\"\n            });\n            this.chainCallImportingFolders({\n                paths: valid_paths,\n                preserve_dirs: preserve_dirs,\n                link_data: link_data,\n                space_to_tab: space_to_tab,\n                to_posix_lines: to_posix_lines,\n                source: \"admin_path\",\n                file_type: file_type,\n                tag_using_filenames: tag_using_filenames,\n                dbkey: dbkey\n            });\n        }\n    },\n\n    /**\n     * Initialize the control of chaining requests\n     * in the current modal.\n     * @param {int} length The number of items in the chain call.\n     */\n    initChainCallControl: function(options) {\n        var template;\n        switch (options.action) {\n            case \"adding_datasets\":\n                template = this.templateAddingDatasetsProgressBar();\n                this.modal.$el.find(\".modal-body\").html(\n                    template({\n                        folder_name: this.options.folder_name\n                    })\n                );\n                break;\n            case \"deleting_datasets\":\n                template = this.templateDeletingItemsProgressBar();\n                this.modal.$el.find(\".modal-body\").html(template());\n                break;\n            case \"to_history\":\n                template = this.templateImportIntoHistoryProgressBar();\n                this.modal.$el.find(\".modal-body\").html(template({ history_name: options.history_name }));\n                break;\n            default:\n                Galaxy.emit.error(\"Wrong action specified.\", \"datalibs\");\n                break;\n        }\n\n        // var progress_bar_tmpl = this.templateAddingDatasetsProgressBar();\n        // this.modal.$el.find( '.modal-body' ).html( progress_bar_tmpl( { folder_name : this.options.folder_name } ) );\n        this.progress = 0;\n        this.progressStep = 100 / options.length;\n        this.options.chain_call_control.total_number = options.length;\n        this.options.chain_call_control.failed_number = 0;\n    },\n\n    /**\n     * Take the selected items from the jstree, create a request queue\n     * and send them one by one to the server for importing into\n     * the current folder.\n     *\n     * jstree.js has to be loaded before\n     * @see renderJstree\n     */\n    importFromJstreePath: function(that, options) {\n        var all_nodes = $(\"#jstree_browser\")\n            .jstree()\n            .get_selected(true);\n        // remove the disabled elements that could have been trigerred with the 'select all'\n        var selected_nodes = _.filter(all_nodes, node => node.state.disabled == false);\n        var preserve_dirs = this.modal.$el.find(\".preserve-checkbox\").is(\":checked\");\n        var link_data = this.modal.$el.find(\".link-checkbox\").is(\":checked\");\n        var space_to_tab = this.modal.$el.find(\".spacetab-checkbox\").is(\":checked\");\n        var to_posix_lines = this.modal.$el.find(\".posix-checkbox\").is(\":checked\");\n        var file_type = this.select_extension.value();\n        var dbkey = this.select_genome.value();\n        var tag_using_filenames = this.modal.$el.find(\".tag-files\").is(\":checked\");\n        var selection_type = selected_nodes[0].type;\n        var paths = [];\n        if (selected_nodes.length < 1) {\n            mod_toastr.info(\"Please select some items first.\");\n        } else {\n            this.modal.disableButton(\"Import\");\n            for (var i = selected_nodes.length - 1; i >= 0; i--) {\n                if (selected_nodes[i].li_attr.full_path !== undefined) {\n                    paths.push(selected_nodes[i].li_attr.full_path);\n                }\n            }\n            this.initChainCallControl({\n                length: paths.length,\n                action: \"adding_datasets\"\n            });\n            if (selection_type === \"folder\") {\n                var full_source = `${options.source}_folder`;\n                this.chainCallImportingFolders({\n                    paths: paths,\n                    preserve_dirs: preserve_dirs,\n                    link_data: link_data,\n                    space_to_tab: space_to_tab,\n                    to_posix_lines: to_posix_lines,\n                    source: full_source,\n                    file_type: file_type,\n                    dbkey: dbkey,\n                    tag_using_filenames: tag_using_filenames\n                });\n            } else if (selection_type === \"file\") {\n                var full_source = `${options.source}_file`;\n                this.chainCallImportingUserdirFiles({\n                    paths: paths,\n                    file_type: file_type,\n                    dbkey: dbkey,\n                    link_data: link_data,\n                    space_to_tab: space_to_tab,\n                    to_posix_lines: to_posix_lines,\n                    source: full_source,\n                    tag_using_filenames: tag_using_filenames\n                });\n            }\n        }\n    },\n\n    fetchAndDisplayHistoryContents: function(history_id) {\n        var history_contents = new mod_library_model.HistoryContents({\n            id: history_id\n        });\n        var self = this;\n        history_contents.fetch({\n            success: function(history_contents) {\n                var history_contents_template = self.templateHistoryContents();\n                self.histories.get(history_id).set({ contents: history_contents });\n                self.modal.$el.find(\"#selected_history_content\").html(\n                    history_contents_template({\n                        history_contents: history_contents.models.reverse()\n                    })\n                );\n                self.modal.$el.find(\".history-import-select-all\").bind(\"click\", () => {\n                    $(\"#selected_history_content [type=checkbox]\").prop(\"checked\", true);\n                });\n                self.modal.$el.find(\".history-import-unselect-all\").bind(\"click\", () => {\n                    $(\"#selected_history_content [type=checkbox]\").prop(\"checked\", false);\n                });\n            },\n            error: function(model, response) {\n                if (typeof response.responseJSON !== \"undefined\") {\n                    mod_toastr.error(response.responseJSON.err_msg);\n                } else {\n                    mod_toastr.error(\"An error occurred.\");\n                }\n            }\n        });\n    },\n\n    /**\n     * Import all selected datasets from history into the current folder.\n     */\n    addAllDatasetsFromHistory: function() {\n        var checked_hdas = this.modal.$el.find(\"#selected_history_content\").find(\":checked\");\n        var history_item_ids = []; // can be hda or hdca\n        var history_item_types = [];\n        var items_to_add = [];\n        if (checked_hdas.length < 1) {\n            mod_toastr.info(\"You must select some datasets first.\");\n        } else {\n            this.modal.disableButton(\"Add\");\n            checked_hdas.each(function() {\n                var hid = $(this)\n                    .closest(\"li\")\n                    .data(\"id\");\n                if (hid) {\n                    var item_type = $(this)\n                        .closest(\"li\")\n                        .data(\"name\");\n                    history_item_ids.push(hid);\n                    history_item_types.push(item_type);\n                }\n            });\n            for (var i = history_item_ids.length - 1; i >= 0; i--) {\n                var history_item_id = history_item_ids[i];\n                var folder_item = new mod_library_model.Item();\n                folder_item.url = `${Galaxy.root}api/folders/${this.options.id}/contents`;\n                if (history_item_types[i] === \"collection\") {\n                    folder_item.set({ from_hdca_id: history_item_id });\n                } else {\n                    folder_item.set({ from_hda_id: history_item_id });\n                }\n                items_to_add.push(folder_item);\n            }\n            this.initChainCallControl({\n                length: items_to_add.length,\n                action: \"adding_datasets\"\n            });\n            this.chainCallAddingHdas(items_to_add);\n        }\n    },\n\n    /**\n     * Take array of empty history items and make request for each of them\n     * to create it on server. Update progress in between calls.\n     * @param  {array} history_item_set array of empty history items\n     * @param  {str} history_name     name of the history to import to\n     */\n    chainCallImportingIntoHistory: function(history_item_set, history_name) {\n        var self = this;\n        var popped_item = history_item_set.pop();\n        if (typeof popped_item == \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\"Selected datasets imported into history. Click this to start analyzing it.\", \"\", {\n                    onclick: function() {\n                        window.location = Galaxy.root;\n                    }\n                });\n            } else if (this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number) {\n                mod_toastr.error(\"There was an error and no datasets were imported into history.\");\n            } else if (this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number) {\n                mod_toastr.warning(\n                    \"Some of the datasets could not be imported into history. Click this to see what was imported.\",\n                    \"\",\n                    {\n                        onclick: function() {\n                            window.location = Galaxy.root;\n                        }\n                    }\n                );\n            }\n            Galaxy.modal.hide();\n            return true;\n        }\n        var promise = $.when(\n            popped_item.save({\n                content: popped_item.content,\n                source: popped_item.source\n            })\n        );\n\n        promise\n            .done(() => {\n                self.updateProgress();\n                self.chainCallImportingIntoHistory(history_item_set, history_name);\n            })\n            .fail(() => {\n                self.options.chain_call_control.failed_number += 1;\n                self.updateProgress();\n                self.chainCallImportingIntoHistory(history_item_set, history_name);\n            });\n    },\n\n    /**\n     * Take the array of paths and create a request for each of them\n     * calling them in chain. Update the progress bar in between each.\n     * @param  {array} paths                    paths relative to user folder on Galaxy\n     * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n     */\n    chainCallImportingUserdirFiles: function(options) {\n        var that = this;\n        var popped_item = options.paths.pop();\n        if (typeof popped_item === \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\"Selected files imported into the current folder\");\n                Galaxy.modal.hide();\n            } else {\n                mod_toastr.error(\"An error occured.\");\n            }\n            return true;\n        }\n        var promise = $.when(\n            $.post(\n                `${Galaxy.root}api/libraries/datasets?encoded_folder_id=${that.id}&source=${options.source}&path=${\n                    popped_item\n                }&file_type=${options.file_type}&link_data=${options.link_data}&space_to_tab=${\n                    options.space_to_tab\n                }&to_posix_lines=${options.to_posix_lines}&dbkey=${options.dbkey}&tag_using_filenames=${\n                    options.tag_using_filenames\n                }`\n            )\n        );\n        promise\n            .done(response => {\n                that.updateProgress();\n                that.chainCallImportingUserdirFiles(options);\n            })\n            .fail(() => {\n                that.options.chain_call_control.failed_number += 1;\n                that.updateProgress();\n                that.chainCallImportingUserdirFiles(options);\n            });\n    },\n\n    /**\n     * Take the array of paths and create a request for each of them\n     * calling them in series. Update the progress bar in between each.\n     * @param  {array} paths                    paths relative to Galaxy root folder\n     * @param  {boolean} preserve_dirs          indicates whether to preserve folder structure\n     * @param  {boolean} link_data              copy files to Galaxy or link instead\n     * @param  {boolean} to_posix_lines         convert line endings to POSIX standard\n     * @param  {boolean} space_to_tab           convert spaces to tabs\n     * @param  {str} source                     string representing what type of folder\n     *                                          is the source of import\n     * @param  {boolean} tag_using_filenames    add tags to datasets using names of files\n     */\n    chainCallImportingFolders: function(options) {\n        // TODO need to check which paths to call\n        var that = this;\n        var popped_item = options.paths.pop();\n        if (typeof popped_item == \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\"Selected folders and their contents imported into the current folder.\");\n                Galaxy.modal.hide();\n            } else {\n                // TODO better error report\n                mod_toastr.error(\"An error occured.\");\n            }\n            return true;\n        }\n        var promise = $.when(\n            $.post(\n                `${Galaxy.root}api/libraries/datasets?encoded_folder_id=${that.id}&source=${options.source}&path=${\n                    popped_item\n                }&preserve_dirs=${options.preserve_dirs}&link_data=${options.link_data}&to_posix_lines=${\n                    options.to_posix_lines\n                }&space_to_tab=${options.space_to_tab}&file_type=${options.file_type}&dbkey=${\n                    options.dbkey\n                }&tag_using_filenames=${options.tag_using_filenames}`\n            )\n        );\n        promise\n            .done(response => {\n                that.updateProgress();\n                that.chainCallImportingFolders(options);\n            })\n            .fail(() => {\n                that.options.chain_call_control.failed_number += 1;\n                that.updateProgress();\n                that.chainCallImportingFolders(options);\n            });\n    },\n\n    /**\n     * Take the array of hdas and create a request for each.\n     * Call them in chain and update progress bar in between each.\n     * @param  {array} hdas_set array of empty hda objects\n     */\n    chainCallAddingHdas: function(hdas_set) {\n        var self = this;\n        this.added_hdas = new mod_library_model.Folder();\n        var popped_item = hdas_set.pop();\n        if (typeof popped_item == \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\"Selected datasets from history added to the folder\");\n            } else if (this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number) {\n                mod_toastr.error(\"There was an error and no datasets were added to the folder.\");\n            } else if (this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number) {\n                mod_toastr.warning(\"Some of the datasets could not be added to the folder\");\n            }\n            Galaxy.modal.hide();\n            return this.added_hdas;\n        }\n        var promise = $.when(\n            popped_item.save({\n                from_hda_id: popped_item.get(\"from_hda_id\")\n            })\n        );\n\n        promise\n            .done(model => {\n                Galaxy.libraries.folderListView.collection.add(model);\n                self.updateProgress();\n                self.chainCallAddingHdas(hdas_set);\n            })\n            .fail(() => {\n                self.options.chain_call_control.failed_number += 1;\n                self.updateProgress();\n                self.chainCallAddingHdas(hdas_set);\n            });\n    },\n\n    /**\n     * Take the array of lddas, create request for each and\n     * call them in chain. Update progress bar in between each.\n     * @param  {array} lddas_set array of lddas to delete\n     */\n    chainCallDeletingItems: function(items_to_delete) {\n        var self = this;\n        this.deleted_items = new mod_library_model.Folder();\n        var item_to_delete = items_to_delete.pop();\n        if (typeof item_to_delete === \"undefined\") {\n            if (this.options.chain_call_control.failed_number === 0) {\n                mod_toastr.success(\"Selected items were deleted.\");\n            } else if (this.options.chain_call_control.failed_number === this.options.chain_call_control.total_number) {\n                mod_toastr.error(\n                    \"There was an error and no items were deleted. Please make sure you have sufficient permissions.\"\n                );\n            } else if (this.options.chain_call_control.failed_number < this.options.chain_call_control.total_number) {\n                mod_toastr.warning(\n                    \"Some of the items could not be deleted. Please make sure you have sufficient permissions.\"\n                );\n            }\n            Galaxy.modal.hide();\n            return this.deleted_items;\n        }\n        item_to_delete\n            .destroy()\n            .done(item => {\n                Galaxy.libraries.folderListView.collection.remove(item_to_delete.id);\n                self.updateProgress();\n                // add the deleted item to collection, triggers rendering\n                if (Galaxy.libraries.folderListView.options.include_deleted) {\n                    var updated_item = null;\n                    if (item.type === \"folder\" || item.model_class === \"LibraryFolder\") {\n                        updated_item = new mod_library_model.FolderAsModel(item);\n                    } else if (item.type === \"file\" || item.model_class === \"LibraryDataset\") {\n                        updated_item = new mod_library_model.Item(item);\n                    } else {\n                        Galaxy.emit.error(\"Unknown library item type found.\", \"datalibs\");\n                        Galaxy.emit.error(item.type || item.model_class, \"datalibs\");\n                    }\n                    Galaxy.libraries.folderListView.collection.add(updated_item);\n                }\n                self.chainCallDeletingItems(items_to_delete);\n            })\n            .fail(() => {\n                self.options.chain_call_control.failed_number += 1;\n                self.updateProgress();\n                self.chainCallDeletingItems(items_to_delete);\n            });\n    },\n\n    /**\n     * Handles the click on 'show deleted' checkbox\n     */\n    checkIncludeDeleted: function(event) {\n        if (event.target.checked) {\n            Galaxy.libraries.folderListView.fetchFolder({\n                include_deleted: true\n            });\n        } else {\n            Galaxy.libraries.folderListView.fetchFolder({\n                include_deleted: false\n            });\n        }\n    },\n\n    /**\n     * Delete the selected items. Atomic. One by one.\n     */\n    deleteSelectedItems: function() {\n        var dataset_ids = [];\n        var folder_ids = [];\n        var $checkedValues = this.findCheckedRows();\n        if ($checkedValues.length === 0) {\n            mod_toastr.info(\"You must select at least one item for deletion.\");\n        } else {\n            var template = this.templateDeletingItemsProgressBar();\n            this.modal = Galaxy.modal;\n            this.modal.show({\n                closing_events: true,\n                title: \"Deleting selected items\",\n                body: template({}),\n                buttons: {\n                    Close: function() {\n                        Galaxy.modal.hide();\n                    }\n                }\n            });\n            // init the control counters\n            this.options.chain_call_control.total_number = 0;\n            this.options.chain_call_control.failed_number = 0;\n            $checkedValues.each(function() {\n                var row_id = $(this)\n                    .closest(\"tr\")\n                    .data(\"id\");\n                if (row_id !== undefined) {\n                    if (row_id.substring(0, 1) == \"F\") {\n                        folder_ids.push(row_id);\n                    } else {\n                        dataset_ids.push(row_id);\n                    }\n                }\n            });\n            // init the progress bar\n            var items_total = dataset_ids.length + folder_ids.length;\n            this.progressStep = 100 / items_total;\n            this.progress = 0;\n\n            // prepare the dataset items to be added\n            var items_to_delete = [];\n            for (var i = dataset_ids.length - 1; i >= 0; i--) {\n                var dataset = new mod_library_model.Item({\n                    id: dataset_ids[i]\n                });\n                items_to_delete.push(dataset);\n            }\n            for (var i = folder_ids.length - 1; i >= 0; i--) {\n                var folder = new mod_library_model.FolderAsModel({\n                    id: folder_ids[i]\n                });\n                items_to_delete.push(folder);\n            }\n\n            this.options.chain_call_control.total_number = items_total;\n            // call the recursive function to call ajax one after each other (request FIFO queue)\n            this.chainCallDeletingItems(items_to_delete);\n        }\n    },\n\n    showLocInfo: function() {\n        var library = null;\n        var that = this;\n        if (Galaxy.libraries.libraryListView !== null) {\n            library = Galaxy.libraries.libraryListView.collection.get(this.options.parent_library_id);\n            this.showLocInfoModal(library);\n        } else {\n            library = new mod_library_model.Library({\n                id: this.options.parent_library_id\n            });\n            library.fetch({\n                success: function() {\n                    that.showLocInfoModal(library);\n                },\n                error: function(model, response) {\n                    if (typeof response.responseJSON !== \"undefined\") {\n                        mod_toastr.error(response.responseJSON.err_msg);\n                    } else {\n                        mod_toastr.error(\"An error occurred.\");\n                    }\n                }\n            });\n        }\n    },\n\n    showLocInfoModal: function(library) {\n        var that = this;\n        var template = this.templateLocInfoInModal();\n        this.modal = Galaxy.modal;\n        this.modal.show({\n            closing_events: true,\n            title: \"Location Details\",\n            body: template({ library: library, options: that.options }),\n            buttons: {\n                Close: function() {\n                    Galaxy.modal.hide();\n                }\n            }\n        });\n    },\n\n    showImportModal: function(options) {\n        switch (options.source) {\n            case \"history\":\n                this.addFilesFromHistoryModal();\n                break;\n            case \"importdir\":\n                this.importFilesFromGalaxyFolderModal({\n                    source: \"importdir\"\n                });\n                break;\n            case \"path\":\n                this.importFilesFromPathModal();\n                break;\n            case \"userdir\":\n                this.importFilesFromGalaxyFolderModal({\n                    source: \"userdir\"\n                });\n                break;\n            default:\n                Galaxy.libraries.library_router.back();\n                mod_toastr.error(\"Invalid import source.\");\n                break;\n        }\n    },\n\n    /**\n     * Show user the prompt to change the number of items shown on page.\n     */\n    showPageSizePrompt: function(e) {\n        e.preventDefault();\n        var folder_page_size = prompt(\n            \"How many items per page do you want to see?\",\n            Galaxy.libraries.preferences.get(\"folder_page_size\")\n        );\n        if (folder_page_size != null && folder_page_size == parseInt(folder_page_size)) {\n            Galaxy.libraries.preferences.set({\n                folder_page_size: parseInt(folder_page_size)\n            });\n            Galaxy.libraries.folderListView.render({\n                id: this.options.id,\n                show_page: 1\n            });\n        }\n    },\n\n    findCheckedRows: function() {\n        return $(\"#folder_list_body\").find(\":checked\");\n    },\n\n    templateToolBar: function() {\n        return _.template(\n            [\n                // container start\n                '<div class=\"library_style_container\">',\n                // toolbar start\n                '<div id=\"library_toolbar\">',\n                '<form class=\"form-inline\" role=\"form\">',\n                \"<span><strong>DATA LIBRARIES</strong></span>\",\n                // paginator will append here\n                '<span class=\"library-paginator folder-paginator\"></span>',\n                '<div class=\"checkbox toolbar-item logged-dataset-manipulation\" style=\"height: 20px; display:none;\">',\n                \"<label>\",\n                '<input id=\"include_deleted_datasets_chk\" type=\"checkbox\">include deleted</input>',\n                \"</label>\",\n                \"</div>\",\n                '<button style=\"display:none;\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Create New Folder\" id=\"toolbtn_create_folder\" class=\"btn btn-default primary-button add-library-items toolbar-item\" type=\"button\">',\n                '<span class=\"fa fa-plus\"></span><span class=\"fa fa-folder\"></span>',\n                \"</button>\",\n                \"<% if(mutiple_add_dataset_options) { %>\",\n                '<div class=\"btn-group add-library-items\" style=\"display:none;\">',\n                '<button title=\"Add Datasets to Current Folder\" id=\"\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n                '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span><span class=\"caret\"></span>',\n                \"</button>\",\n                '<ul class=\"dropdown-menu\" role=\"menu\">',\n                '<li><a href=\"#folders/<%= id %>/import/history\"> from History</a></li>',\n                \"<% if(Galaxy.config.user_library_import_dir !== null) { %>\",\n                '<li><a href=\"#folders/<%= id %>/import/userdir\"> from User Directory</a></li>',\n                \"<% } %>\",\n                \"<% if(Galaxy.config.allow_library_path_paste) { %>\",\n                '<li class=\"divider\"></li>',\n                '<li class=\"dropdown-header\">Admins only</li>',\n                \"<% if(Galaxy.config.library_import_dir !== null) { %>\",\n                '<li><a href=\"#folders/<%= id %>/import/importdir\">from Import Directory</a></li>',\n                \"<% } %>\",\n                \"<% if(Galaxy.config.allow_library_path_paste) { %>\",\n                '<li><a href=\"#folders/<%= id %>/import/path\">from Path</a></li>',\n                \"<% } %>\",\n                \"<% } %>\",\n                \"</ul>\",\n                \"</div>\",\n                \"<% } else { %>\",\n                '<a  data-placement=\"top\" title=\"Add Datasets to Current Folder\" style=\"display:none;\" class=\"btn btn-default add-library-items\" href=\"#folders/<%= id %>/import/history\" role=\"button\">',\n                '<span class=\"fa fa-plus\"></span><span class=\"fa fa-file\"></span>',\n                \"</a>\",\n                \"<% } %>\",\n                '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Import selected datasets into history\" id=\"toolbtn_bulk_import\" class=\"primary-button dataset-manipulation\" style=\"margin-left: 0.5em; display:none;\" type=\"button\">',\n                '<span class=\"fa fa-book\"></span>',\n                \"&nbsp;to History\",\n                \"</button>\",\n                '<div class=\"btn-group dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \">',\n                '<button title=\"Download selected items as archive\" type=\"button\" class=\"primary-button dropdown-toggle\" data-toggle=\"dropdown\">',\n                '<span class=\"fa fa-download\"></span> Download <span class=\"caret\"></span>',\n                \"</button>\",\n                '<ul class=\"dropdown-menu\" role=\"menu\">',\n                '<li><a href=\"#/folders/<%= id %>/download/tgz\">.tar.gz</a></li>',\n                '<li><a href=\"#/folders/<%= id %>/download/tbz\">.tar.bz</a></li>',\n                '<li><a href=\"#/folders/<%= id %>/download/zip\">.zip</a></li>',\n                \"</ul>\",\n                \"</div>\",\n                '<button data-toggle=\"tooltip\" data-placement=\"top\" title=\"Mark selected items deleted\" id=\"toolbtn_bulk_delete\" class=\"primary-button logged-dataset-manipulation\" style=\"margin-left: 0.5em; display:none; \" type=\"button\">',\n                '<span class=\"fa fa-times\"></span> Delete</button>',\n                '<button data-id=\"<%- id %>\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"Show location details\" class=\"primary-button toolbtn-show-locinfo\" style=\"margin-left: 0.5em;\" type=\"button\">',\n                '<span class=\"fa fa-info-circle\"></span>',\n                \"&nbsp;Details\",\n                \"</button>\",\n                '<span class=\"help-button\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"See this screen annotated\">',\n                '<a href=\"https://galaxyproject.org/data-libraries/screen/folder-contents/\" target=\"_blank\">',\n                '<button class=\"primary-button\" type=\"button\">',\n                '<span class=\"fa fa-question-circle\"></span>',\n                \"&nbsp;Help\",\n                \"</button>\",\n                \"</a>\",\n                \"</span>\",\n                \"</div>\",\n                \"</form>\",\n                // toolbar end\n                '<div id=\"folder_items_element\">',\n                \"</div>\",\n                // paginator will append here\n                '<div class=\"folder-paginator paginator-bottom\"></div>',\n                // container end\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateLocInfoInModal: function() {\n        return _.template(\n            [\n                \"<div>\",\n                '<table class=\"grid table table-condensed\">',\n                \"<thead>\",\n                '<th style=\"width: 25%;\">library</th>',\n                \"<th></th>\",\n                \"</thead>\",\n                \"<tbody>\",\n                \"<tr>\",\n                \"<td>name</td>\",\n                '<td><%- library.get(\"name\") %></td>',\n                \"</tr>\",\n                '<% if(library.get(\"description\") !== \"\") { %>',\n                \"<tr>\",\n                \"<td>description</td>\",\n                '<td><%- library.get(\"description\") %></td>',\n                \"</tr>\",\n                \"<% } %>\",\n                '<% if(library.get(\"synopsis\") !== \"\") { %>',\n                \"<tr>\",\n                \"<td>synopsis</td>\",\n                '<td><%- library.get(\"synopsis\") %></td>',\n                \"</tr>\",\n                \"<% } %>\",\n                '<% if(library.get(\"create_time_pretty\") !== \"\") { %>',\n                \"<tr>\",\n                \"<td>created</td>\",\n                '<td><span title=\"<%- library.get(\"create_time\") %>\"><%- library.get(\"create_time_pretty\") %></span></td>',\n                \"</tr>\",\n                \"<% } %>\",\n                \"<tr>\",\n                \"<td>id</td>\",\n                '<td><%- library.get(\"id\") %></td>',\n                \"</tr>\",\n                \"</tbody>\",\n                \"</table>\",\n                '<table class=\"grid table table-condensed\">',\n                \"<thead>\",\n                '<th style=\"width: 25%;\">folder</th>',\n                \"<th></th>\",\n                \"</thead>\",\n                \"<tbody>\",\n                \"<tr>\",\n                \"<td>name</td>\",\n                \"<td><%- options.folder_name %></td>\",\n                \"</tr>\",\n                '<% if(options.folder_description !== \"\") { %>',\n                \"<tr>\",\n                \"<td>description</td>\",\n                \"<td><%- options.folder_description %></td>\",\n                \"</tr>\",\n                \"<% } %>\",\n                \"<tr>\",\n                \"<td>id</td>\",\n                \"<td><%- options.id %></td>\",\n                \"</tr>\",\n                \"</tbody>\",\n                \"</table>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateNewFolderInModal: function() {\n        return _.template(\n            [\n                '<div id=\"new_folder_modal\">',\n                \"<form>\",\n                '<input type=\"text\" name=\"Name\" value=\"\" placeholder=\"Name\" autofocus>',\n                '<input type=\"text\" name=\"Description\" value=\"\" placeholder=\"Description\">',\n                \"</form>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateBulkImportInModal: function() {\n        return _.template(\n            [\n                \"<div>\",\n                '<div class=\"library-modal-item\">',\n                \"Select history: \",\n                '<select id=\"dataset_import_bulk\" name=\"dataset_import_bulk\" style=\"width:50%; margin-bottom: 1em; \" autofocus>',\n                \"<% _.each(histories, function(history) { %>\",\n                '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n                \"<% }); %>\",\n                \"</select>\",\n                \"</div>\",\n                '<div class=\"library-modal-item\">',\n                \"or create new: \",\n                '<input type=\"text\" name=\"history_name\" value=\"\" placeholder=\"name of the new history\" style=\"width:50%;\">',\n                \"</input>\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateImportIntoHistoryProgressBar: function() {\n        return _.template(\n            [\n                '<div class=\"import_text\">',\n                \"Importing selected items to history <b><%= _.escape(history_name) %></b>\",\n                \"</div>\",\n                '<div class=\"progress\">',\n                '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                '<span class=\"completion_span\">0% Complete</span>',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateAddingDatasetsProgressBar: function() {\n        return _.template(\n            [\n                '<div class=\"import_text\">',\n                \"Adding selected datasets to library folder <b><%= _.escape(folder_name) %></b>\",\n                \"</div>\",\n                '<div class=\"progress\">',\n                '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                '<span class=\"completion_span\">0% Complete</span>',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateDeletingItemsProgressBar: function() {\n        return _.template(\n            [\n                '<div class=\"import_text\">',\n                \"</div>\",\n                '<div class=\"progress\">',\n                '<div class=\"progress-bar progress-bar-import\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 00%;\">',\n                '<span class=\"completion_span\">0% Complete</span>',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateBrowserModal: function() {\n        return _.template(\n            [\n                '<div id=\"file_browser_modal\">',\n                '<div class=\"alert alert-info jstree-files-message\">All files you select will be imported into the current folder ignoring their folder structure.</div>',\n                '<div class=\"alert alert-info jstree-folders-message\" style=\"display:none;\">All files within the selected folders and their subfolders will be imported into the current folder.</div>',\n                '<div style=\"margin-bottom:1em;\">',\n                '<label title=\"Switch to selecting files\" class=\"radio-inline import-type-switch\">',\n                '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-folders\" checked=\"checked\"> Choose Files',\n                \"</label>\",\n                '<label title=\"Switch to selecting folders\" class=\"radio-inline import-type-switch\">',\n                '<input type=\"radio\" name=\"jstree-radio\" value=\"jstree-disable-files\"> Choose Folders',\n                \"</label>\",\n                \"</div>\",\n                '<div style=\"margin-bottom:1em;\">',\n                '<label class=\"checkbox-inline jstree-preserve-structure\" style=\"display:none;\">',\n                '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n                \"Preserve directory structure\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n                \"Link files instead of copying\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">',\n                \"Convert line endings to POSIX\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">',\n                \"Convert spaces to tabs\",\n                \"</label>\",\n                \"</div>\",\n                '<button title=\"Select all files\" type=\"button\" class=\"button primary-button libimport-select-all\">',\n                \"Select all\",\n                \"</button>\",\n                '<button title=\"Select no files\" type=\"button\" class=\"button primary-button libimport-select-none\">',\n                \"Unselect all\",\n                \"</button>\",\n                \"<hr />\",\n                // append jstree object here\n                '<div id=\"jstree_browser\">',\n                \"</div>\",\n                \"<hr />\",\n                \"<p>You can set extension type and genome for all imported datasets at once:</p>\",\n                \"<div>\",\n                'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n                'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n                \"</div>\",\n                \"<br>\",\n                \"<div>\",\n                '<label class=\"checkbox-inline tag-files\">',\n                \"Tag datasets based on file names.\",\n                '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\" checked=\"checked\">',\n                \"</label>\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateImportPathModal: function() {\n        return _.template(\n            [\n                '<div id=\"file_browser_modal\">',\n                '<div class=\"alert alert-info jstree-folders-message\">All files within the given folders and their subfolders will be imported into the current folder.</div>',\n                '<div style=\"margin-bottom: 0.5em;\">',\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"preserve-checkbox\" type=\"checkbox\" value=\"preserve_directory_structure\">',\n                \"Preserve directory structure\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"link-checkbox\" type=\"checkbox\" value=\"link_files\">',\n                \"Link files instead of copying\",\n                \"</label>\",\n                \"<br>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"posix-checkbox\" type=\"checkbox\" value=\"to_posix_lines\" checked=\"checked\">',\n                \"Convert line endings to POSIX\",\n                \"</label>\",\n                '<label class=\"checkbox-inline\">',\n                '<input class=\"spacetab-checkbox\" type=\"checkbox\" value=\"space_to_tab\">',\n                \"Convert spaces to tabs\",\n                \"</label>\",\n                \"</div>\",\n                '<textarea id=\"import_paths\" class=\"form-control\" rows=\"5\" placeholder=\"Absolute paths (or paths relative to Galaxy root) separated by newline\" autofocus></textarea>',\n                \"<hr />\",\n                \"<p>You can set extension type and genome for all imported datasets at once:</p>\",\n                \"<div>\",\n                'Type: <span id=\"library_extension_select\" class=\"library-extension-select\" />',\n                'Genome: <span id=\"library_genome_select\" class=\"library-genome-select\" />',\n                \"</div>\",\n                \"<div>\",\n                '<label class=\"checkbox-inline tag-files\">',\n                \"Tag datasets based on file names.\",\n                '<input class=\"tag-files\" type=\"checkbox\" value=\"tag_using_filenames\" checked=\"checked\">',\n                \"</label>\",\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateAddFilesFromHistory: function() {\n        return _.template(\n            [\n                '<div id=\"add_files_modal\">',\n                \"<div>\",\n                \"1.&nbsp;Select history:&nbsp;\",\n                '<select id=\"dataset_add_bulk\" name=\"dataset_add_bulk\" style=\"width:66%; \"> ',\n                \"<% _.each(histories, function(history) { %>\", //history select box\n                '<option value=\"<%= _.escape(history.get(\"id\")) %>\"><%= _.escape(history.get(\"name\")) %></option>',\n                \"<% }); %>\",\n                \"</select>\",\n                \"</div>\",\n                \"<br/>\",\n                '<div id=\"selected_history_content\">',\n                \"</div>\",\n                \"</div>\"\n            ].join(\"\")\n        );\n    },\n\n    templateHistoryContents: function() {\n        return _.template(\n            [\n                \"<p>2.&nbsp;Choose the datasets to import:</p>\",\n                \"<div>\",\n                '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-select-all\">',\n                \"Select all\",\n                \"</button>\",\n                '<button title=\"Select all datasets\" type=\"button\" class=\"button primary-button history-import-unselect-all\">',\n                \"Unselect all\",\n                \"</button>\",\n                \"</div>\",\n                \"<br>\",\n                \"<ul>\",\n                \"<% _.each(history_contents, function(history_item) { %>\",\n                '<% if (history_item.get(\"deleted\") != true ) { %>',\n                '<% var item_name = history_item.get(\"name\") %>',\n                '<% if (history_item.get(\"type\") === \"collection\") { %>',\n                '<% var collection_type = history_item.get(\"collection_type\") %>',\n                '<% if (collection_type === \"list\") { %>',\n                '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                \"<label>\",\n                '<label title=\"<%= _.escape(item_name) %>\">',\n                '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ',\n                '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection)',\n                \"</label>\",\n                \"</li>\",\n                \"<% } else { %>\",\n                '<li><input style=\"margin: 0;\" type=\"checkbox\" onclick=\"return false;\" disabled=\"disabled\">',\n                '<span title=\"You can convert this collection into a collection of type list using the Collection Tools\">',\n                '<%= _.escape(history_item.get(\"hid\")) %>: ',\n                '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %> (Dataset Collection of type <%= _.escape(collection_type) %> not supported.)',\n                \"</span>\",\n                \"</li>\",\n                \"<% } %>\",\n                '<% } else if (history_item.get(\"visible\") === true && history_item.get(\"state\") === \"ok\") { %>',\n                '<li data-id=\"<%= _.escape(history_item.get(\"id\")) %>\" data-name=\"<%= _.escape(history_item.get(\"type\")) %>\">',\n                '<label title=\"<%= _.escape(item_name) %>\">',\n                '<input style=\"margin: 0;\" type=\"checkbox\"> <%= _.escape(history_item.get(\"hid\")) %>: ',\n                '<%= item_name.length > 75 ? _.escape(\"...\".concat(item_name.substr(-75))) : _.escape(item_name) %>',\n                \"</label>\",\n                \"</li>\",\n                \"<% } %>\",\n                \"<% } %>\",\n                \"<% }); %>\",\n                \"</ul>\"\n            ].join(\"\")\n        );\n    },\n\n    templatePaginator: function() {\n        return _.template(\n            [\n                '<ul class=\"pagination pagination-sm\">',\n                \"<% if ( ( show_page - 1 ) > 0 ) { %>\",\n                \"<% if ( ( show_page - 1 ) > page_count ) { %>\", // we are on higher page than total page count\n                '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n                \"<% } else { %>\",\n                '<li><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                '<li><a href=\"#folders/<%= id %>/page/<% print( show_page - 1 ) %>\"><% print( show_page - 1 ) %></a></li>',\n                \"<% } %>\",\n                \"<% } else { %>\", // we are on the first page\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/1\"><span class=\"fa fa-angle-double-left\"></span></a></li>',\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page - 1 ) %></a></li>',\n                \"<% } %>\",\n                '<li class=\"active\">',\n                '<a href=\"#folders/<%= id %>/page/<% print( show_page ) %>\"><% print( show_page ) %></a>',\n                \"</li>\",\n                \"<% if ( ( show_page ) < page_count ) { %>\",\n                '<li><a href=\"#folders/<%= id %>/page/<% print( show_page + 1 ) %>\"><% print( show_page + 1 ) %></a></li>',\n                '<li><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n                \"<% } else { %>\",\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( show_page  ) %>\"><% print( show_page + 1 ) %></a></li>',\n                '<li class=\"disabled\"><a href=\"#folders/<%= id %>/page/<% print( page_count ) %>\"><span class=\"fa fa-angle-double-right\"></span></a></li>',\n                \"<% } %>\",\n                \"</ul>\",\n                \"<span>\",\n                ' <%- items_shown %> items shown <a href=\"\" data-toggle=\"tooltip\" data-placement=\"top\" title=\"currently <%- folder_page_size %> per page\" class=\"page_size_prompt\">(change)</a>',\n                \"</span>\",\n                \"<span>\",\n                \" <%- total_items_count %> total\",\n                \"</span>\"\n            ].join(\"\")\n        );\n    }\n});\n\nexport default {\n    FolderToolbarView: FolderToolbarView\n};\n"]}