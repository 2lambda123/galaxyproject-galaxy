{"version":3,"sources":["mvc/form/form-view.js"],"names":["define","Utils","Ui","initialize","FormData","cls","extend","icon","options","always_refresh","Model","status","hide_operations","onchange","set","setElement","this","update","render","input","self","node","input_id","field","field_list","_","isEqual","new_options","opt","indexOf","type","length","label","value","i","push","trigger","Galaxy","emit","debug","wait","active","input_list","is_dynamic","unwait","highlight","message","silent","input_element","element_list","$panel","parents","portlet","expand","animate","scrollTop","filter","$","css","first","$el","offset","top","error_messages","errors","data","matchResponse","_renderForm","on","new_check","current_check","model","get","attributes","checksum","each","reset","remove","UnescapedMessage","operations","buttons","collapsible","collapsed","onchange_title","append","Portlet","title","empty","inputs","persistent","section"],"mappings":"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","file":"../../../scripts/mvc/form/form-view.js","sourcesContent":["/**\n    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n*/\ndefine([\"utils/utils\", \"mvc/ui/ui-portlet\", \"mvc/ui/ui-misc\", \"mvc/form/form-section\", \"mvc/form/form-data\"], function(\n    Utils,\n    Portlet,\n    Ui,\n    FormSection,\n    FormData\n) {\n    return Backbone.View.extend({\n        initialize: function(options) {\n            this.model = new Backbone.Model({\n                initial_errors: false,\n                cls: \"ui-portlet-limited\",\n                icon: null,\n                always_refresh: true,\n                status: \"warning\",\n                hide_operations: false,\n                onchange: function() {}\n            }).set(options);\n            this.setElement(\"<div/>\");\n            this.render();\n        },\n\n        /** Update available options */\n        update: function(new_model) {\n            var self = this;\n            this.data.matchModel(new_model, function(node, input_id) {\n                var input = self.input_list[input_id];\n                if (input && input.options) {\n                    if (!_.isEqual(input.options, node.options)) {\n                        input.options = node.options;\n                        var field = self.field_list[input_id];\n                        if (field.update) {\n                            var new_options = [];\n                            if ([\"data\", \"data_collection\", \"drill_down\"].indexOf(input.type) != -1) {\n                                new_options = input.options;\n                            } else {\n                                for (var i in node.options) {\n                                    var opt = node.options[i];\n                                    if (opt.length > 2) {\n                                        new_options.push({\n                                            label: opt[0],\n                                            value: opt[1]\n                                        });\n                                    }\n                                }\n                            }\n                            field.update(new_options);\n                            field.trigger(\"change\");\n                            Galaxy.emit.debug(\"form-view::update()\", \"Updating options for \" + input_id);\n                        }\n                    }\n                }\n            });\n        },\n\n        /** Set form into wait mode */\n        wait: function(active) {\n            for (var i in this.input_list) {\n                var field = this.field_list[i];\n                var input = this.input_list[i];\n                if (input.is_dynamic && field.wait && field.unwait) {\n                    field[active ? \"wait\" : \"unwait\"]();\n                }\n            }\n        },\n\n        /** Highlight and scroll to input element (currently only used for error notifications) */\n        highlight: function(input_id, message, silent) {\n            var input_element = this.element_list[input_id];\n            if (input_element) {\n                input_element.error(message || \"Please verify this parameter.\");\n                this.portlet.expand();\n                this.trigger(\"expand\", input_id);\n                if (!silent) {\n                    var $panel = this.$el\n                        .parents()\n                        .filter(function() {\n                            return [\"auto\", \"scroll\"].indexOf($(this).css(\"overflow\")) != -1;\n                        })\n                        .first();\n                    $panel.animate(\n                        {\n                            scrollTop: $panel.scrollTop() + input_element.$el.offset().top - 120\n                        },\n                        500\n                    );\n                }\n            }\n        },\n\n        /** Highlights errors */\n        errors: function(options) {\n            this.trigger(\"reset\");\n            if (options && options.errors) {\n                var error_messages = this.data.matchResponse(options.errors);\n                for (var input_id in this.element_list) {\n                    var input = this.element_list[input_id];\n                    if (error_messages[input_id]) {\n                        this.highlight(input_id, error_messages[input_id], true);\n                    }\n                }\n            }\n        },\n\n        /** Render tool form */\n        render: function() {\n            var self = this;\n            this.off(\"change\");\n            this.off(\"reset\");\n            // contains the dom field elements as created by the parameter factory i.e. form-parameters\n            this.field_list = {};\n            // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n            this.input_list = {};\n            // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n            this.element_list = {};\n            // converts the form into a json data structure\n            this.data = new FormData.Manager(this);\n            this._renderForm();\n            this.data.create();\n            this.model.get(\"initial_errors\") && this.errors(this.model.attributes);\n            // add listener which triggers on checksum change, and reset the form input wrappers\n            var current_check = this.data.checksum();\n            this.on(\"change\", function(input_id) {\n                var input = self.input_list[input_id];\n                if (!input || input.refresh_on_change || self.model.get(\"always_refresh\")) {\n                    var new_check = self.data.checksum();\n                    if (new_check != current_check) {\n                        current_check = new_check;\n                        self.model.get(\"onchange\")();\n                    }\n                }\n            });\n            this.on(\"reset\", function() {\n                _.each(self.element_list, function(input_element) {\n                    input_element.reset();\n                });\n            });\n            return this;\n        },\n\n        /** Renders/appends dom elements of the form */\n        _renderForm: function() {\n            $(\".tooltip\").remove();\n            var options = this.model.attributes;\n            this.message = new Ui.UnescapedMessage();\n            this.section = new FormSection.View(this, {\n                inputs: options.inputs\n            });\n            this.portlet = new Portlet.View({\n                icon: options.icon,\n                title: options.title,\n                cls: options.cls,\n                operations: !options.hide_operations && options.operations,\n                buttons: options.buttons,\n                collapsible: options.collapsible,\n                collapsed: options.collapsed,\n                onchange_title: options.onchange_title\n            });\n            this.portlet.append(this.message.$el);\n            this.portlet.append(this.section.$el);\n            this.$el.empty();\n            options.inputs && this.$el.append(this.portlet.$el);\n            options.message &&\n                this.message.update({\n                    persistent: true,\n                    status: options.status,\n                    message: options.message\n                });\n            Galaxy.emit.debug(\"form-view::initialize()\", \"Completed\");\n        }\n    });\n});\n"]}