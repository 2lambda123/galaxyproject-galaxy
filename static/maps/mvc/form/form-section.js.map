{"version":3,"sources":["mvc/form/form-section.js"],"names":["define","View","initialize","Utils","render","Portlet","Repeat","InputElement","Parameters","Backbone","extend","app","options","this","inputs","self","empty","$","each","$el","input_def","jQuery","input","add","_addRepeat","uid","input_list","id","type","_addSection","_addConditional","_addRow","test_param","field","selectedCase","cases","case_def","disabled","section_row","model","nonhidden","value","data","matchCase","i","j","hide","hidden","fadeIn","sub_section","_append","trigger","addClass","max","sub_section_id","block_index","repeat","ondel","del","size","cache","input_element","onnew","create","title","min","n_cache","_","default","label","hideOptions","name","portlet","collapsible","append","input_id","collapsed","expanded","onchange","on","parameters","length","expand","text_value","collapsible_value","collapsible_preview","help","argument","color","backdrop","fixed","hide_label","element_list","style","attr"],"mappings":"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","file":"../../../scripts/mvc/form/form-section.js","sourcesContent":["/**\n    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n*/\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/ui/ui-misc\",\n        \"mvc/ui/ui-portlet\",\n        \"mvc/form/form-repeat\",\n        \"mvc/form/form-input\",\n        \"mvc/form/form-parameters\"\n    ],\n    function(Utils, Ui, Portlet, Repeat, InputElement, Parameters) {\n        var View = Backbone.View.extend({\n            initialize: function(app, options) {\n                this.app = app;\n                this.inputs = options.inputs;\n                this.parameters = new Parameters();\n                this.setElement($(\"<div/>\"));\n                this.render();\n            },\n\n            /** Render section view */\n            render: function() {\n                var self = this;\n                this.$el.empty();\n                _.each(this.inputs, function(input) {\n                    self.add(input);\n                });\n            },\n\n            /** Add a new input element */\n            add: function(input) {\n                var input_def = jQuery.extend(true, {}, input);\n                input_def.id = input.id = Utils.uid();\n                this.app.input_list[input_def.id] = input_def;\n                switch (input_def.type) {\n                    case \"conditional\":\n                        this._addConditional(input_def);\n                        break;\n                    case \"repeat\":\n                        this._addRepeat(input_def);\n                        break;\n                    case \"section\":\n                        this._addSection(input_def);\n                        break;\n                    default:\n                        this._addRow(input_def);\n                }\n            },\n\n            /** Add a conditional block */\n            _addConditional: function(input_def) {\n                var self = this;\n                input_def.test_param.id = input_def.id;\n                this.app.model.get(\"sustain_conditionals\") && (input_def.test_param.disabled = true);\n                var field = this._addRow(input_def.test_param);\n\n                // set onchange event for test parameter\n                field.model &&\n                    field.model.set(\"onchange\", function(value) {\n                        var selectedCase = self.app.data.matchCase(input_def, value);\n                        for (var i in input_def.cases) {\n                            var case_def = input_def.cases[i];\n                            var section_row = self.$(\"#\" + input_def.id + \"-section-\" + i);\n                            var nonhidden = false;\n                            for (var j in case_def.inputs) {\n                                if (!case_def.inputs[j].hidden) {\n                                    nonhidden = true;\n                                    break;\n                                }\n                            }\n                            if (i == selectedCase && nonhidden) {\n                                section_row.fadeIn(\"fast\");\n                            } else {\n                                section_row.hide();\n                            }\n                        }\n                        self.app.trigger(\"change\");\n                    });\n\n                // add conditional sub sections\n                for (var i in input_def.cases) {\n                    var sub_section = new View(this.app, {\n                        inputs: input_def.cases[i].inputs\n                    });\n                    this._append(sub_section.$el.addClass(\"ui-form-section\"), input_def.id + \"-section-\" + i);\n                }\n\n                // trigger refresh on conditional input field after all input elements have been created\n                field.trigger(\"change\");\n            },\n\n            /** Add a repeat block */\n            _addRepeat: function(input_def) {\n                var self = this;\n                var block_index = 0;\n\n                // create repeat block element\n                var repeat = new Repeat.View({\n                    title: input_def.title || \"Repeat\",\n                    min: input_def.min,\n                    max: input_def.max,\n                    onnew: function() {\n                        create(input_def.inputs);\n                        self.app.trigger(\"change\");\n                    }\n                });\n\n                // helper function to create new repeat blocks\n                function create(inputs) {\n                    var sub_section_id = input_def.id + \"-section-\" + block_index++;\n                    var sub_section = new View(self.app, { inputs: inputs });\n                    repeat.add({\n                        id: sub_section_id,\n                        $el: sub_section.$el,\n                        ondel: function() {\n                            repeat.del(sub_section_id);\n                            self.app.trigger(\"change\");\n                        }\n                    });\n                }\n\n                //\n                // add parsed/minimum number of repeat blocks\n                //\n                var n_cache = _.size(input_def.cache);\n                for (var i = 0; i < Math.max(Math.max(n_cache, input_def.min || 0), input_def.default || 0); i++) {\n                    create(i < n_cache ? input_def.cache[i] : input_def.inputs);\n                }\n\n                // hide options\n                this.app.model.get(\"sustain_repeats\") && repeat.hideOptions();\n\n                // create input field wrapper\n                var input_element = new InputElement(this.app, {\n                    label: input_def.title || input_def.name,\n                    help: input_def.help,\n                    field: repeat\n                });\n                this._append(input_element.$el, input_def.id);\n            },\n\n            /** Add a customized section */\n            _addSection: function(input_def) {\n                var portlet = new Portlet.View({\n                    title: input_def.title || input_def.name,\n                    cls: \"ui-portlet-section\",\n                    collapsible: true,\n                    collapsible_button: true,\n                    collapsed: !input_def.expanded\n                });\n                portlet.append(new View(this.app, { inputs: input_def.inputs }).$el);\n                portlet.append(\n                    $(\"<div/>\")\n                        .addClass(\"ui-form-info\")\n                        .html(input_def.help)\n                );\n                this.app.on(\"expand\", function(input_id) {\n                    portlet.$(\"#\" + input_id).length > 0 && portlet.expand();\n                });\n                this._append(portlet.$el, input_def.id);\n            },\n\n            /** Add a single input field element */\n            _addRow: function(input_def) {\n                var self = this;\n                var id = input_def.id;\n                input_def.onchange =\n                    input_def.onchange ||\n                    function() {\n                        self.app.trigger(\"change\", id);\n                    };\n                var field = this.parameters.create(input_def);\n                this.app.field_list[id] = field;\n                var input_element = new InputElement(this.app, {\n                    name: input_def.name,\n                    label: input_def.hide_label ? \"\" : input_def.label || input_def.name,\n                    value: input_def.value,\n                    text_value: input_def.text_value,\n                    collapsible_value: input_def.collapsible_value,\n                    collapsible_preview: input_def.collapsible_preview,\n                    help: input_def.help,\n                    argument: input_def.argument,\n                    disabled: input_def.disabled,\n                    color: input_def.color,\n                    style: input_def.style,\n                    backdrop: input_def.backdrop,\n                    hidden: input_def.hidden,\n                    fixed: input_def.fixed,\n                    field: field\n                });\n                this.app.element_list[id] = input_element;\n                this._append(input_element.$el, input_def.id);\n                return field;\n            },\n\n            /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n            _append: function($el, id) {\n                this.$el.append($el.addClass(\"section-row\").attr(\"id\", id));\n            }\n        });\n\n        return {\n            View: View\n        };\n    }\n);\n"]}