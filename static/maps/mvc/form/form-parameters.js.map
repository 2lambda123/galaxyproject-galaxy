{"version":3,"sources":["mvc/form/form-parameters.js"],"names":["define","types","text","password","data_column","SelectLibrary","SelectFtp","SelectGenomeSpace","ColorPicker","data","Model","extend","integer","float","boolean","drill_down","color","hidden","hidden_data","baseurl","library_data","ftpfile","upload","genomespacefile","fieldClass","field","input_def","value","this","type","call","flavor","options","_fieldSelect","_fieldText","Galaxy","emit","debug","SelectContent","multiple","_fieldData","View","id","extensions","optional","is_workflow","onchange","error_text","SelectClass","_","each","option","Ui","Select","display","Checkbox","readonly","_fieldDrilldown","individual","searchable","Drilldown","area","Utils","isEmpty","str_value","$","isArray","i","String","datalist","Input","_fieldSlider","Slider","precise","min","max","_fieldHidden","info","label","_fieldLibrary","_fieldGenomeSpace","self","trigger","_fieldUpload","Upload","app"],"mappings":"aAGAA,QAEQ,cASA,iBACA,2BACI,2BACAC,uBACIC,+BACAC,0BAEAC,SAAAA,EAAAA,EAAAA,EAJGC,EAAAC,EAAAC,EAAAC,GAMHC,OAAAA,SAAMC,MANHC,QAQHC,OACAC,KAAO,aACPC,SAAS,aACTC,OAAY,eACZC,YAAO,eACPC,YAAQ,eACRC,KAAAA,aACAC,gBAAS,aACTC,QAAAA,eACAC,MAAS,eACTC,QAAQ,gBACRC,WAAAA,kBArBqBP,MAAA,cAerBC,OAAQ,eASZC,YAAA,eACQC,QAAA,eACAK,aAAa,gBACbC,QAAQ,YACRH,OAAQ,eACRG,gBAAQC,qBAOZD,OAAME,SAAMD,GACZ,IAAOD,EAAPG,KAAA3B,MAAAyB,EAAAG,MArCqBJ,EAAA,mBAAAG,KAAAJ,GAAAI,KAAAJ,GAAAM,KAAAF,KAAAF,GAAA,KAgDjBK,OApBCN,IAYTA,EAAAC,EAAAM,QAAAJ,KAAAK,aAAAP,GAAAE,KAAAM,WAAAR,GACYS,OAAAC,KAAAC,MACGC,6BACH,4BADsBZ,EAAAG,KAAA,YAINU,IAApBA,EAAUb,QAJgBA,EAAAC,MAAA,MAK1BE,EAAMH,MAAAA,EALoBC,OAM1BI,GAhDiBS,WAAA,SAAAd,GA0CrB,OAAO,IAAIY,EAAcG,MAY7BC,GAAA,SAAAhB,EAAAgB,GACAT,WAAcP,EAAAiB,WACVC,SAAAlB,EAAAkB,SACIlB,SAAUmB,EAAaN,SACvBV,KAAOH,EAAKQ,KACfH,OAAAL,EAAAK,OAVGtB,KAAMiB,EAAUM,QAYpBc,SAAApB,EAAAoB,YAKAb,aAAA,SAAAP,GAEI,GAACjB,EAAMoC,YACPpC,OAAAmB,KAAAM,WAAAR,GAIH,eAAAA,EAAAG,OAVGH,EAAUqB,WAAa,0CAevB,IAAAtC,EAAKiB,EAALjB,KACIuC,IACAvC,KACJwC,EAAKC,KAAAxB,EAALM,QAAA,SAAAmB,GACIH,EAAAA,MAAcI,MAAdD,EAAA,GAAAxB,MAAAwB,EAAA,QALR,IAAAH,EAAAI,EAAAC,OAAA,OAAQ3B,EAAU4B,SAYlB,IAAA,aACWN,EAAYP,EAAKc,SACpB,MACJ9C,IAAMA,QACNsC,EAAsBA,EAAAA,MACtBS,MACAjB,IAAAA,cACAK,EAAoBA,EAAAA,YAhGH,OAAA,IAAAI,EAAAP,MA2FjBC,GAAI,SAAWhB,EAAUgB,GAYjCjC,KAAAA,EACAgD,WAAiB/B,EAAAqB,YAASrB,uBACtB8B,SAAA9B,EAAA8B,SACI9B,SAAUmB,EAAaN,SACvBK,SAAYV,EAAWR,SAC1BoB,SAAApB,EAAAoB,SAVGY,WAAYhC,EAAUgC,WAY1BC,WAAA,aAAAjC,EAAAK,UAKIa,gBAAUlB,SAAUkB,GAJxB,OAAAlB,EAAAmB,YA/GqBjB,KAAAM,WAAAR,GA0HrB,IAAA0B,EAAAQ,UAAAnB,MACIf,GAAAA,SAAAA,EAAqBA,GACrBA,KAAUmC,EAAOnC,QACboC,QAAMC,EAAQrC,QACdA,SAAUC,EAAQiB,SADtBE,SAEOpB,EAAAoB,YAKKZ,WAAA,SAAKR,GAEJ,GAAAA,EAAAM,SAAAN,EAAAjB,KAEJ,GADGuD,EAAAA,KAAAA,EAAAzB,SACHuB,EAAAC,QAAArC,EAAAC,OACDD,EAAUC,MAAQqC,UAEzB,GAAAC,EAAAC,QAAAxC,EAAAC,OAAA,CACJ,IAAAqC,EAAA,GACD,IAAA,IAAAG,KAAAzC,EAAAC,MAAA,CAEmBD,GADCsC,GAAAI,OAAA1C,EAAAC,MAAAwC,KACDzC,EADCa,SAAA,MAINb,GAJM,KAMNA,EAAU2C,MANJL,EAWxB,OAAA,IAAAZ,EAAAkB,OACAC,GAAc,SAAA7C,EAASA,GACZG,KAAO2C,EAAO/B,KACboB,KAAAnC,EAAWA,KACf+C,SAAS/C,EAAA8B,SACTX,YAAanB,EAAUmB,YACvB6B,SAAKhD,EAJiB2C,SAKtBM,SAAKjD,EALiBoB,YAU9ByB,aAAA,SAAA7C,GACAkD,OAAc,IAAAxB,EAAAoB,OAAA/B,MACHC,GAAIU,SAAU1B,EAAAgB,GACb+B,QADa,SACb/C,EAAWA,KACfmD,YAAgBA,EAAAA,YAFpBH,IAAAhD,EAAAgD,IAvKqBC,IAAAjD,EAAAiD,IAiKjB7B,SAAUpB,EAAUoB,YAgBpBrC,aAASqE,SAAOpD,GAChBoB,OAAAA,IAAUpB,EAAAA,QAHdgB,GAAA,SAAAhB,EAAAgB,GA/KqBmC,KAAAnD,EAAAmD,QAyLjBnC,cAAI,SAAWhB,GACfoB,OAAAA,IAAUpB,EAAAA,YAAUoB,MAFxBJ,GAAA,SAAAhB,EAAAgB,GAxLqBjC,OAAAqE,MAAA,MAAAnD,MAAA,SAAAmD,MAAA,KAAAnD,MAAA,UAkLjBmB,SAAUpB,EAAUoB,YAgBpBF,YAAAA,SAAUlB,GACVa,OAAAA,IAAUb,GACVoB,GAAAA,SAAUpB,EAAUoB,GAJxBA,SAAApB,EAAAoB,YAUAiC,cAAWzE,SAAUmC,GACjBC,OAAI,IAAArC,EAAqBqC,MACzBE,GAAAA,SAAUlB,EAFYgB,GAGtBH,SAAUb,EAAUa,SACpBO,SAAUpB,EAAUoB,SAJxBA,SAAApB,EAAAoB,YAUJkC,UAAAA,SAAmBtD,GACXuD,OAAO,IAAX3E,EAAAmC,MACOC,GAAInC,SAAAA,EAAJmC,GACCE,SAAAlB,EAAWA,SACfoB,SAAUpB,EAAAa,SACN0C,SAASC,EAAQpC,YAM7BqC,kBAAc,SAAAzD,GACV,IAAOuD,EAAOG,KACV1C,OAAI,IAAAnC,EADakC,MAEjBK,GAAAA,SAAUpB,EAAUoB,GAFxBA,SAAA,WAIHmC,EAAAI,IAAAH,QAAA,cALDC,aAAc,SAASzD,GACnB,OAAO,IAAI0B,EAAGgC,QACV1C,GAAI,SAAWhB,EAAUgB,GACzBI,SAAUpB,EAAUoB","file":"../../../scripts/mvc/form/form-parameters.js","sourcesContent":["/**\n    This class creates input elements. New input parameter types should be added to the types dictionary.\n*/\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/ui/ui-misc\",\n        \"mvc/ui/ui-select-content\",\n        \"mvc/ui/ui-select-library\",\n        \"mvc/ui/ui-select-ftp\",\n        \"mvc/ui/ui-select-genomespace\",\n        \"mvc/ui/ui-color-picker\"\n    ],\n    function(Utils, Ui, SelectContent, SelectLibrary, SelectFtp, SelectGenomeSpace, ColorPicker) {\n        // create form view\n        return Backbone.Model.extend({\n            /** Available parameter types */\n            types: {\n                text: \"_fieldText\",\n                password: \"_fieldText\",\n                select: \"_fieldSelect\",\n                data_column: \"_fieldSelect\",\n                genomebuild: \"_fieldSelect\",\n                data: \"_fieldData\",\n                data_collection: \"_fieldData\",\n                integer: \"_fieldSlider\",\n                float: \"_fieldSlider\",\n                boolean: \"_fieldBoolean\",\n                drill_down: \"_fieldDrilldown\",\n                color: \"_fieldColor\",\n                hidden: \"_fieldHidden\",\n                hidden_data: \"_fieldHidden\",\n                baseurl: \"_fieldHidden\",\n                library_data: \"_fieldLibrary\",\n                ftpfile: \"_fieldFtp\",\n                upload: \"_fieldUpload\",\n                genomespacefile: \"_fieldGenomeSpace\"\n            },\n\n            /** Returns an input field for a given field type */\n            create: function(input_def) {\n                var fieldClass = this.types[input_def.type];\n                var field = typeof this[fieldClass] === \"function\" ? this[fieldClass].call(this, input_def) : null;\n                if (!field) {\n                    field = input_def.options ? this._fieldSelect(input_def) : this._fieldText(input_def);\n                    Galaxy.emit.debug(\n                        \"form-parameters::_addRow()\",\n                        \"Auto matched field type (\" + input_def.type + \").\"\n                    );\n                }\n                input_def.value === undefined && (input_def.value = null);\n                field.value(input_def.value);\n                return field;\n            },\n\n            /** Data input field */\n            _fieldData: function(input_def) {\n                return new SelectContent.View({\n                    id: \"field-\" + input_def.id,\n                    extensions: input_def.extensions,\n                    optional: input_def.optional,\n                    multiple: input_def.multiple,\n                    type: input_def.type,\n                    flavor: input_def.flavor,\n                    data: input_def.options,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Select/Checkbox/Radio options field */\n            _fieldSelect: function(input_def) {\n                // show text field e.g. in workflow editor\n                if (input_def.is_workflow) {\n                    return this._fieldText(input_def);\n                }\n\n                // customize properties\n                if (input_def.type == \"data_column\") {\n                    input_def.error_text = \"Missing columns in referenced dataset.\";\n                }\n\n                // identify available options\n                var data = input_def.data;\n                if (!data) {\n                    data = [];\n                    _.each(input_def.options, function(option) {\n                        data.push({ label: option[0], value: option[1] });\n                    });\n                }\n\n                // identify display type\n                var SelectClass = Ui.Select;\n                switch (input_def.display) {\n                    case \"checkboxes\":\n                        SelectClass = Ui.Checkbox;\n                        break;\n                    case \"radio\":\n                        SelectClass = Ui.Radio;\n                        break;\n                    case \"radiobutton\":\n                        SelectClass = Ui.RadioButton;\n                        break;\n                }\n\n                // create select field\n                return new SelectClass.View({\n                    id: \"field-\" + input_def.id,\n                    data: data,\n                    error_text: input_def.error_text || \"No options available\",\n                    readonly: input_def.readonly,\n                    multiple: input_def.multiple,\n                    optional: input_def.optional,\n                    onchange: input_def.onchange,\n                    individual: input_def.individual,\n                    searchable: input_def.flavor !== \"workflow\"\n                });\n            },\n\n            /** Drill down options field */\n            _fieldDrilldown: function(input_def) {\n                // show text field e.g. in workflow editor\n                if (input_def.is_workflow) {\n                    return this._fieldText(input_def);\n                }\n\n                // create drill down field\n                return new Ui.Drilldown.View({\n                    id: \"field-\" + input_def.id,\n                    data: input_def.options,\n                    display: input_def.display,\n                    optional: input_def.optional,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Text input field */\n            _fieldText: function(input_def) {\n                // field replaces e.g. a select field\n                if (input_def.options && input_def.data) {\n                    input_def.area = input_def.multiple;\n                    if (Utils.isEmpty(input_def.value)) {\n                        input_def.value = null;\n                    } else {\n                        if ($.isArray(input_def.value)) {\n                            var str_value = \"\";\n                            for (var i in input_def.value) {\n                                str_value += String(input_def.value[i]);\n                                if (!input_def.multiple) {\n                                    break;\n                                }\n                                str_value += \"\\n\";\n                            }\n                            input_def.value = str_value;\n                        }\n                    }\n                }\n                // create input element\n                return new Ui.Input({\n                    id: \"field-\" + input_def.id,\n                    type: input_def.type,\n                    area: input_def.area,\n                    readonly: input_def.readonly,\n                    placeholder: input_def.placeholder,\n                    datalist: input_def.datalist,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Slider field */\n            _fieldSlider: function(input_def) {\n                return new Ui.Slider.View({\n                    id: \"field-\" + input_def.id,\n                    precise: input_def.type == \"float\",\n                    is_workflow: input_def.is_workflow,\n                    min: input_def.min,\n                    max: input_def.max,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Hidden field */\n            _fieldHidden: function(input_def) {\n                return new Ui.Hidden({\n                    id: \"field-\" + input_def.id,\n                    info: input_def.info\n                });\n            },\n\n            /** Boolean field */\n            _fieldBoolean: function(input_def) {\n                return new Ui.RadioButton.View({\n                    id: \"field-\" + input_def.id,\n                    data: [{ label: \"Yes\", value: \"true\" }, { label: \"No\", value: \"false\" }],\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Color picker field */\n            _fieldColor: function(input_def) {\n                return new ColorPicker({\n                    id: \"field-\" + input_def.id,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Library dataset field */\n            _fieldLibrary: function(input_def) {\n                return new SelectLibrary.View({\n                    id: \"field-\" + input_def.id,\n                    optional: input_def.optional,\n                    multiple: input_def.multiple,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** FTP file field */\n            _fieldFtp: function(input_def) {\n                return new SelectFtp.View({\n                    id: \"field-\" + input_def.id,\n                    optional: input_def.optional,\n                    multiple: input_def.multiple,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** GenomeSpace file select field\n         */\n            _fieldGenomeSpace: function(input_def) {\n                var self = this;\n                return new SelectGenomeSpace.View({\n                    id: \"field-\" + input_def.id,\n                    onchange: function() {\n                        self.app.trigger(\"change\");\n                    }\n                });\n            },\n\n            /** Upload file field */\n            _fieldUpload: function(input_def) {\n                return new Ui.Upload({\n                    id: \"field-\" + input_def.id,\n                    onchange: input_def.onchange\n                });\n            }\n        });\n    }\n);\n"]}