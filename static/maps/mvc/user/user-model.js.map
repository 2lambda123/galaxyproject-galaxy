{"version":3,"sources":["mvc/user/user-model.js"],"names":["define","_","Backbone","baseMVC","_l","User","Model","extend","LoggableMixin","urlRoot","Galaxy","root","defaults","id","email","username","total_disk_usage","nice_total_disk_usage","initialize","data","this","log","on","resp","model","changes","isAnonymous","get","isAdmin","loadFromApi","idOrCurrent","options","CURRENT_ID_STR","success","newModel","response","trigger","url","fetch","clearSessionStorage","key","sessionStorage","indexOf","removeItem","toString","userInfo","unshift","push","join","getCurrentUserFromApi","currentUser","Collection","UserCollection"],"mappings":"aAAAA,QAAQ,kBAAmB,gBAAiB,eAAgB,sBAAuB,SAASC,EAAGC,EAAUC,EAASC,GAC9G,IAOIC,EAAOH,EAASI,MAAMC,OAAOJ,EAAQK,eAAeD,QAApDF,cAPJ,OAYQI,QAAS,WADT,OAAAC,OAAAC,KAAA,aASAC,UACIC,GAAI,KADRD,SAAU,IAAAR,EAAA,kBAA6B,IAC/BU,MAD+B,GAEnCC,iBAAmB,EACnBD,sBAHmC,GAInCE,cAJmC,KAKnCC,UAAAA,GAQJC,WAAY,SAASC,GACjBC,KAAKC,IAAI,mBAAoBF,GAA7BC,KAASE,GAAA,SAAA,SAAoBH,EAA7BI,GAGIH,KAAKC,IAAID,KAAO,eAAgBI,EAAOD,KAAvCH,KAAKC,GAAL,SAAgB,SAAAG,EAAgBA,GADpCJ,KAAAC,IAAAD,KAAA,gBAAAI,EAAAL,EAAAM,YA5BqBC,YAAA,WAqCrB,OAAQN,KAAKO,IAAI,UArCIC,QAAA,WAyCrB,OAAOR,KAAKO,IAAI,aAUpBE,YAAa,SAASC,EAAaC,GAC/BD,EAAcA,GAAezB,EAAK2B,eAGlC,IAAIR,EAAQJ,KADZW,GAFAD,EAAcA,OAEdG,QAcIF,OATJA,EAAQE,QAAU,SAASC,EAAUC,GADrCX,EAAAY,QAAA,SAAAF,EAAAC,GACQF,GACEG,EAAQF,EAAUA,IAOxBJ,IAAgBzB,EAAK2B,iBADzBD,EAAAM,IAAAjB,KAAAX,QAAA,IAAAJ,EAAA2B,gBAEID,EAAczB,MAAKG,UAAL6B,MAAqBjC,KAAK2B,KAAAA,IAKhDO,oBAAA,WAGI,IAAK,IAAIC,KAAOC,eACZ,IAAAD,EAAAE,QAAA,YACAD,eAAAE,WAAAH,GACgB,kBAAZA,GACAC,eAAeE,WAAfH,IAQZI,SAAU,WADV,IAAAC,GAAAzB,KAAAO,IAAA,aAKQkB,OAJEzB,KAAAO,IAAA,QACFkB,EAAYC,QAAS1B,KAAAO,IAAA,OACrBkB,EAAAE,KAAgB3B,KAAAO,IAAA,WAEhBkB,QAAcA,EAASG,KAAvB,KAAA,OAOhB3C,EAAA2B,eAAA,UAGA3B,EAAA4C,sBAAA,SAAAlB,GACA1B,IAAK4C,EAAAA,IAAL5C,EAEI6C,OADAA,EAAIA,YAAkB7C,EAAtB2B,eAAAD,GACAmB,GAIJhD,EAAAiD,WAAA5C,OAAAJ,EAAAK,eAAAD,QACI6C,MAAAA,EACA5B,QAAOnB,WACPI,OAASC,OAAAC,KAAA,eAMb,OACAN,KAAOA","file":"../../../scripts/mvc/user/user-model.js","sourcesContent":["define([\"libs/underscore\", \"libs/backbone\", \"mvc/base-mvc\", \"utils/localization\"], function(_, Backbone, baseMVC, _l) {\n    \"use strict\";\n\n    var logNamespace = \"user\";\n    //==============================================================================\n    /** @class Model for a Galaxy user (including anonymous users).\n *  @name User\n */\n    var User = Backbone.Model.extend(baseMVC.LoggableMixin).extend(\n        /** @lends User.prototype */ {\n            _logNamespace: logNamespace,\n\n            /** API location for this resource */\n            urlRoot: function() {\n                return Galaxy.root + \"api/users\";\n            },\n\n            /** Model defaults\n     *  Note: don't check for anon-users with the username as the default is '(anonymous user)'\n     *      a safer method is if( !user.get( 'email' ) ) -> anon user\n     */\n            defaults: /** @lends User.prototype */ {\n                id: null,\n                username: \"(\" + _l(\"anonymous user\") + \")\",\n                email: \"\",\n                total_disk_usage: 0,\n                nice_total_disk_usage: \"\",\n                quota_percent: null,\n                is_admin: false\n            },\n\n            /** Set up and bind events\n     *  @param {Object} data Initial model data.\n     */\n            initialize: function(data) {\n                this.log(\"User.initialize:\", data);\n\n                this.on(\"loaded\", function(model, resp) {\n                    this.log(this + \" has loaded:\", model, resp);\n                });\n                this.on(\"change\", function(model, data) {\n                    this.log(this + \" has changed:\", model, data.changes);\n                });\n            },\n\n            isAnonymous: function() {\n                return !this.get(\"email\");\n            },\n\n            isAdmin: function() {\n                return this.get(\"is_admin\");\n            },\n\n            /** Load a user with the API using an id.\n     *      If getting an anonymous user or no access to a user id, pass the User.CURRENT_ID_STR\n     *      (e.g. 'current') and the API will return the current transaction's user data.\n     *  @param {String} idOrCurrent encoded user id or the User.CURRENT_ID_STR\n     *  @param {Object} options hash to pass to Backbone.Model.fetch. Can contain success, error fns.\n     *  @fires loaded when the model has been loaded from the API, passing the newModel and AJAX response.\n     */\n            loadFromApi: function(idOrCurrent, options) {\n                idOrCurrent = idOrCurrent || User.CURRENT_ID_STR;\n\n                options = options || {};\n                var model = this,\n                    userFn = options.success;\n\n                /** @ignore */\n                options.success = function(newModel, response) {\n                    model.trigger(\"loaded\", newModel, response);\n                    if (userFn) {\n                        userFn(newModel, response);\n                    }\n                };\n\n                // requests for the current user must have a sep. constructed url (fetch don't work, ma)\n                if (idOrCurrent === User.CURRENT_ID_STR) {\n                    options.url = this.urlRoot + \"/\" + User.CURRENT_ID_STR;\n                }\n                return Backbone.Model.prototype.fetch.call(this, options);\n            },\n\n            /** Clears all data from the sessionStorage.\n     */\n            clearSessionStorage: function() {\n                for (var key in sessionStorage) {\n                    //TODO: store these under the user key so we don't have to do this\n                    // currently only history\n                    if (key.indexOf(\"history:\") === 0) {\n                        sessionStorage.removeItem(key);\n                    } else if (key === \"history-panel\") {\n                        sessionStorage.removeItem(key);\n                    }\n                }\n            },\n\n            /** string representation */\n            toString: function() {\n                var userInfo = [this.get(\"username\")];\n                if (this.get(\"id\")) {\n                    userInfo.unshift(this.get(\"id\"));\n                    userInfo.push(this.get(\"email\"));\n                }\n                return \"User(\" + userInfo.join(\":\") + \")\";\n            }\n        }\n    );\n\n    // string to send to tell server to return this transaction's user (see api/users.py)\n    User.CURRENT_ID_STR = \"current\";\n\n    // class method to load the current user via the api and return that model\n    User.getCurrentUserFromApi = function(options) {\n        var currentUser = new User();\n        currentUser.loadFromApi(User.CURRENT_ID_STR, options);\n        return currentUser;\n    };\n\n    // (stub) collection for users (shouldn't be common unless admin UI)\n    var UserCollection = Backbone.Collection.extend(baseMVC.LoggableMixin).extend({\n        model: User,\n        urlRoot: function() {\n            return Galaxy.root + \"api/users\";\n        }\n        //logger  : console,\n    });\n\n    //==============================================================================\n    return {\n        User: User\n    };\n});\n"]}