{"version":3,"sources":["mvc/history/copy-dialog.js"],"names":["define","MODAL","ERROR_MODAL","_l","CopyDialog","defaultName","_","template","submitLabel","title","errorMessage","progressive","activeLabel","allLabel","_template","_showAjaxIndicator","indicator","options","deferred","defaultCopyNameFn","name","defaultCopyWhat","autoClose","modal","join","dialog","this","history","empty","append","checkNameAndCopy","buttons","object","$","val","copyAllDatasets","reject","cancelled","originalClosingCallback","done","response","resolve","fail","xhr","status","message","preventDefault","hide","jQuery","Deferred","nameFn","show","extend","defaultCopyName","allDatasets","isAnon","Galaxy","isAnonymous","allowAll","closing_callback","get","ImportDialog","user","copyWhat","anonWarning","height","closing_events","historyCopyDialog","focus","select","on","ev","keyCode","window","parent","View","useImport"],"mappings":"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","file":"../../../scripts/mvc/history/copy-dialog.js","sourcesContent":["define([\"mvc/ui/ui-modal\", \"mvc/ui/error-modal\", \"utils/localization\"], function(MODAL, ERROR_MODAL, _l) {\n    \"use strict\";\n\n    //==============================================================================\n    /**\n * A dialog/modal that allows copying a user history or 'importing' from user\n * another. Generally called via historyCopyDialog below.\n * @type {Object}\n */\n    var CopyDialog = {\n        // language related strings/fns\n        defaultName: _.template(\"Copy of '<%- name %>'\"),\n        title: _.template(_l(\"Copying history\") + ' \"<%- name %>\"'),\n        submitLabel: _l(\"Copy\"),\n        errorMessage: _l(\"History could not be copied.\"),\n        progressive: _l(\"Copying history\"),\n        activeLabel: _l(\"Copy only the active, non-deleted datasets\"),\n        allLabel: _l(\"Copy all datasets including deleted ones\"),\n        anonWarning:\n            _l(\"As an anonymous user, unless you login or register, you will lose your current history \") +\n            _l(\"after copying this history. \"),\n\n        // template for modal body\n        _template: _.template(\n            [\n                //TODO: remove inline styles\n                // show a warning message for losing current to anon users\n                \"<% if( isAnon ){ %>\",\n                '<div class=\"warningmessage\">',\n                \"<%- anonWarning %>\",\n                _l(\"You can\"),\n                ' <a href=\"/user/login\">',\n                _l(\"login here\"),\n                \"</a> \",\n                _l(\"or\"),\n                \" \",\n                ' <a href=\"/user/create\">',\n                _l(\"register here\"),\n                \"</a>.\",\n                \"</div>\",\n                \"<% } %>\",\n                \"<form>\",\n                '<label for=\"copy-modal-title\">',\n                _l(\"Enter a title for the new history\"),\n                \":\",\n                \"</label><br />\",\n                // TODO: could use required here and the form validators\n                // NOTE: use unescaped here if escaped in the modal function below\n                '<input id=\"copy-modal-title\" class=\"form-control\" style=\"width: 100%\" value=\"<%= name %>\" />',\n                '<p class=\"invalid-title bg-danger\" style=\"color: red; margin: 8px 0px 8px 0px; display: none\">',\n                _l(\"Please enter a valid history title\"),\n                \"</p>\",\n                // if allowAll, add the option to copy deleted datasets, too\n                \"<% if( allowAll ){ %>\",\n                \"<br />\",\n                \"<p>\",\n                _l(\"Choose which datasets from the original history to include:\"),\n                \"</p>\",\n                // copy non-deleted is the default\n                '<input name=\"copy-what\" type=\"radio\" id=\"copy-non-deleted\" value=\"copy-non-deleted\" ',\n                '<% if( copyWhat === \"copy-non-deleted\" ){ print( \"checked\" ); } %>/>',\n                '<label for=\"copy-non-deleted\"> <%- activeLabel %></label>',\n                \"<br />\",\n                '<input name=\"copy-what\" type=\"radio\" id=\"copy-all\" value=\"copy-all\" ',\n                '<% if( copyWhat === \"copy-all\" ){ print( \"checked\" ); } %>/>',\n                '<label for=\"copy-all\"> <%- allLabel %></label>',\n                \"<% } %>\",\n                \"</form>\"\n            ].join(\"\")\n        ),\n\n        // empty modal body and let the user know the copy is happening\n        _showAjaxIndicator: function _showAjaxIndicator() {\n            var indicator = '<p><span class=\"fa fa-spinner fa-spin\"></span> ' + this.progressive + \"...</p>\";\n            this.modal\n                .$(\".modal-body\")\n                .empty()\n                .append(indicator)\n                .css({ \"margin-top\": \"8px\" });\n        },\n\n        // (sorta) public interface - display the modal, render the form, and potentially copy the history\n        // returns a jQuery.Deferred done->history copied, fail->user cancelled\n        dialog: function _dialog(modal, history, options) {\n            options = options || {};\n\n            var dialog = this,\n                deferred = jQuery.Deferred(),\n                // TODO: getting a little byzantine here\n                defaultCopyNameFn = options.nameFn || this.defaultName,\n                defaultCopyName = defaultCopyNameFn({\n                    name: history.get(\"name\")\n                }),\n                // TODO: these two might be simpler as one 3 state option (all,active,no-choice)\n                defaultCopyWhat = options.allDatasets ? \"copy-all\" : \"copy-non-deleted\",\n                allowAll = !_.isUndefined(options.allowAll) ? options.allowAll : true,\n                autoClose = !_.isUndefined(options.autoClose) ? options.autoClose : true;\n\n            this.modal = modal;\n\n            // validate the name and copy if good\n            function checkNameAndCopy() {\n                var name = modal.$(\"#copy-modal-title\").val();\n                if (!name) {\n                    modal.$(\".invalid-title\").show();\n                    return;\n                }\n                // get further settings, shut down and indicate the ajax call, then hide and resolve/reject\n                var copyAllDatasets = modal.$('input[name=\"copy-what\"]:checked').val() === \"copy-all\";\n                modal.$(\"button\").prop(\"disabled\", true);\n                dialog._showAjaxIndicator();\n                history\n                    .copy(true, name, copyAllDatasets)\n                    .done(function(response) {\n                        deferred.resolve(response);\n                    })\n                    .fail(function(xhr, status, message) {\n                        var options = {\n                            name: name,\n                            copyAllDatasets: copyAllDatasets\n                        };\n                        ERROR_MODAL.ajaxErrorModal(history, xhr, options, dialog.errorMessage);\n                        deferred.rejectWith(deferred, arguments);\n                    })\n                    .done(function() {\n                        if (autoClose) {\n                            modal.hide();\n                        }\n                    });\n            }\n\n            var originalClosingCallback = options.closing_callback;\n            modal.show(\n                _.extend(options, {\n                    title: this.title({ name: history.get(\"name\") }),\n                    body: $(\n                        dialog._template({\n                            name: defaultCopyName,\n                            isAnon: Galaxy.user.isAnonymous(),\n                            allowAll: allowAll,\n                            copyWhat: defaultCopyWhat,\n                            activeLabel: this.activeLabel,\n                            allLabel: this.allLabel,\n                            anonWarning: this.anonWarning\n                        })\n                    ),\n                    buttons: _.object([\n                        [\n                            _l(\"Cancel\"),\n                            function() {\n                                modal.hide();\n                            }\n                        ],\n                        [this.submitLabel, checkNameAndCopy]\n                    ]),\n                    height: \"auto\",\n                    closing_events: true,\n                    closing_callback: function _historyCopyClose(cancelled) {\n                        if (cancelled) {\n                            deferred.reject({ cancelled: true });\n                        }\n                        if (originalClosingCallback) {\n                            originalClosingCallback(cancelled);\n                        }\n                    }\n                })\n            );\n\n            // set the default dataset copy, autofocus the title, and set up for a simple return\n            modal\n                .$(\"#copy-modal-title\")\n                .focus()\n                .select();\n            modal.$(\"#copy-modal-title\").on(\"keydown\", function(ev) {\n                if (ev.keyCode === 13) {\n                    ev.preventDefault();\n                    checkNameAndCopy();\n                }\n            });\n\n            return deferred;\n        }\n    };\n\n    //==============================================================================\n    // maintain the (slight) distinction between copy and import\n    /**\n * Subclass CopyDialog to use the import language.\n */\n    var ImportDialog = _.extend({}, CopyDialog, {\n        defaultName: _.template(\"imported: <%- name %>\"),\n        title: _.template(_l(\"Importing history\") + ' \"<%- name %>\"'),\n        submitLabel: _l(\"Import\"),\n        errorMessage: _l(\"History could not be imported.\"),\n        progressive: _l(\"Importing history\"),\n        activeLabel: _l(\"Import only the active, non-deleted datasets\"),\n        allLabel: _l(\"Import all datasets including deleted ones\"),\n        anonWarning:\n            _l(\"As an anonymous user, unless you login or register, you will lose your current history \") +\n            _l(\"after importing this history. \")\n    });\n\n    //==============================================================================\n    /**\n * Main interface for both history import and history copy dialogs.\n * @param  {Backbone.Model} history     the history to copy\n * @param  {Object}         options     a hash\n * @return {jQuery.Deferred}            promise that fails on close and succeeds on copy\n *\n * options:\n *     (this object is also passed to the modal used to display the dialog and accepts modal options)\n *     {Function} nameFn    if defined, use this to build the default name shown to the user\n *                          (the fn is passed: {name: <original history's name>})\n *     {bool} useImport     if true, use the 'import' language (instead of Copy)\n *     {bool} allowAll      if true, allow the user to choose between copying all datasets and\n *                          only non-deleted datasets\n *     {String} allDatasets default initial checked radio button: 'copy-all' or 'copy-non-deleted',\n */\n    var historyCopyDialog = function(history, options) {\n        options = options || {};\n        // create our own modal if Galaxy doesn't have one (mako tab without use_panels)\n        var modal = window.parent.Galaxy.modal || new MODAL.View({});\n        return options.useImport\n            ? ImportDialog.dialog(modal, history, options)\n            : CopyDialog.dialog(modal, history, options);\n    };\n\n    //==============================================================================\n    return historyCopyDialog;\n});\n"]}