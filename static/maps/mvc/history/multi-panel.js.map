{"version":3,"sources":["mvc/history/multi-panel.js"],"names":["define","logNamespace","HistoryViewColumn","_l","HISTORY_MODEL","HISTORY_VIEW_EDIT","historyCopyDialog","ERROR_MODAL","baseMVC","ajaxQueue","id","Backbone","View","extend","LoggableMixin","_logNamespace","initialize","options","panel","this","model","get","purgeAllowed","dragItems","createPanel","setUpListeners","panelOptions","HistoryViewEdit","column","trigger","$scrollContainer","setUpPanelListeners","$el","rendered","view","listenTo","columnRight","columnLeft","viewLeft","view:expanded view:rendered","$","off","inView","viewRight","offset","left","speed","width","undefined","modelData","$panel","setUpBehaviors","render","toJSON","html","template","renderPanel","history","data","setElement","isCurrentHistory","currentHistory","controlsLeftTemplate","controlsRightTemplate","setAsCurrent","join","confirm","purge","done","events","click .switch-to.btn","click .delete-history","_delete","click .undelete-history","undelete","click .purge-history","click .copy-history","className","_","columnWidth","borderWidth","columnGap","headerHeight","footerHeight","controlsHeight","variable","hdaQueue","collection","columnMap","columnOptions","setCollection","multipanel","toString","setUpCollectionListeners","MultiPanelColumns","models","isArray","forEach","addClass","error","errorHandler","perPage","setCurrentHistory","sort","historySearch","datasetSearch","histories","fetchMore","handleDeletedHistory","newCurrentColumn","_recalcFirstColumnHeight","HistoryCollection","createColumns","clear","addModels","addColumn","add","all-fetched","_postFetchAll","new-current","addAsCurrentColumn","set-as-current","change:deleted change:purged","renderColumns","fetchData","title","remove","xhr","badGatewayErrorModal","scrollLeft","_ajaxErrorHandler","apply","toArray","oldCurrentColumn","create","height","current","currentHistoryId","log","includeDeleted","createColumn","searchItems","newColumn","status","readyState","once","isString","queueHdaFetch","errorModal","message","removeColumn","ajaxErrorModal","widthToRemove","fadeOut","arguments","stopListening","each","i","setUpColumnListeners","Galaxy","config","allow_user_dataset_purge","currentColumnDropTargetOn","currentColumnDropTargetOff","queueHdaFetchDetails","queue","name","fn","contents","sortedFilteredColumns","filters","checkColumnsInView","sortedColumns","filtered","filter","in-view","view:draggable:dragstart","ev","JSON","parse","dataTransfer","getData","view:draggable:dragend","droptarget:drop","_dropData","json","isCopyable","NamedAjaxQueue","currentPage","fetchPage","toCopy","reverse","content","sortedAndFiltered","allFetched","self","loadingIndicatorTemplate","copy","responses","fetch","_addColumns","isNumber","keys","length","columns","delegateEvents","preventStackWidthAdj","index","map","call","fetchOptions","details","fxSpeed","mainTemplate","fetchCurrentPage","running","needsContentsLoaded","$middle","empty","renderInfo","numExisting","children","_calcMiddleWidth","appendTo","close","numColumns","window","_clickToggleDeletedHistories","toggleDeletedDatasets","currentTarget","contentsShown","show","values","storage","allExpanded","ids","_clickToggleHiddenDatasets","toggleHiddenDatasets","haveDetails","orderKey","toggleOptionsPopover","progressivelyFetchDetails","_renderEmptyMessage","silent","start","msg","text","_scrollLeft","click .done.btn","click .create-new.btn","click #include-deleted","_moreOptionsPopover","click #toggle-hidden","placeholder","onfirstsearch","root","fetchAll","searchInput","onsearch","searchFor","is","toggleShowDeleted","progress","toggleShowHidden","orderDescriptions","onclear","clearSearch","slice","fetchFirst","unshift","currentHistoryModel","checkForEndOfScroll","val","scroll","debouncedInView","container","optionsPopoverTemplate","popover","$firstColumn","middleHeight","controlHeight","matchesAll","$outerMiddle","columnsInView","viewport","curr","total","deferred","_viewport","scrollRight","parent","END_PADDING","currentColumn","resize","debounce","placement","first","find","right","vp","dataDropped","dropTargetOn","prototype","dataDrop","dropTarget","update_time","update_time-asc","name-dsc","size","size-asc"],"mappings":"aAAAA,QAEQ,qBAWA,4BATA,gCAWIC,0BACJ,qBATA,eACA,mBAYA,iBACIC,mBATR,SAASC,EAAIC,EAAeC,EAAmBC,EAAmBC,EAAaC,EAASC,GAchFC,IALAR,EAAoBS,SAASC,KAAKC,OAAOL,EAAQM,eAAeD,QAYhEE,cAPkB,UASlBC,QAAY,MACRC,UAAUA,gDACVP,GAAA,WACA,OAAKQ,KAAQD,MAjBsD,kBAAAE,KAAAC,MAAAC,IAAA,MAOxD,IAmBHD,WAAO,SADcH,GAErBA,EAAAA,MACAK,KAAAA,cAAmBA,EAAAA,YAHEL,EAAAK,eAAAL,EAAAK,aAIrBC,KAAAA,MAAWN,EAJUC,OAAAC,KAAAK,YAAAP,GAMjBE,KAAAM,kBARhBD,YAAa,SAAqBE,GAclC,OAAA,IAAArB,EAAAsB,gBACAF,EAAAA,SAAgBC,GACRE,MAAJT,KAAAC,MAEUE,aAAYH,KAAAG,aACXO,WAAQ,EADnBC,iBAAA,WAGKC,OAAAA,KAALC,SASQP,eAAA,WAdR,IAAIG,EAAST,KAiBLc,KAAAA,KAAU,WAAA,WACNL,EAAOC,QAAQ,mBAAfD,KAEJT,KAAAY,uBAIIG,oBAAO,WACV,IAAAN,EAAAT,KAELA,KAhBJgB,SAlDmEhB,KAAAD,OAyE/DkB,SAAcC,WACdD,EAAcE,QAAU,WAAAV,IAK3BW,8BAAA,SAAAL,GACDA,EAAAM,EAAA,cAAAC,QAGJtB,OAKAuB,OAAA,SAAAJ,EAAAK,GACA,IAAAN,EAAAlB,KAAAa,IAAAY,SAAAC,KAEIC,QADoBA,EAAO3B,KAAAa,IAAAe,QACTC,MAGdC,EAAiB7B,IAOrB8B,OAAA,WACA,OAAKC,KAAAA,EAAAA,mBAKTC,OAAA,SAAAN,GACAK,OAAyBA,IAATL,EAASK,EAAiB,OAGtC,IAAAF,EAAA9B,KAAAC,MAAAD,KAAAC,MAAAiC,YAaYnB,OA5HuDf,KAAAa,IAAAsB,KAAAnC,KAAAoC,SAAAN,IAgGnE9B,KAAKqC,YAAYV,GAmBrBS,KAAUrC,MAASqC,IAAAA,IAAT,UAAwB,QAI9BpC,KACIgC,iBAIchC,MAINsC,eAASC,aAerBZ,SAAQA,SAAAY,GAIP,OAHDA,EAAWC,EAAAA,OAAAA,OACPC,iBAAqBzC,KAAA0C,iBAExBrB,GAnJkE,8CA0H3DrB,KAAK2C,sBA6BjBL,QAAAC,EACAxB,KAAAf,OAGIA,KAAA4C,uBACeC,QAAAA,EAHX9B,KAAAf,OAMJ,SACQS,qDACCR,oBACDQ,EAAOwB,GADX,4DARA,UAYJa,KAAA,MAKCT,YAjBG,SAAAV,GAuBK,OALTA,OAAAE,IAAAF,EAAwBA,EAAA,OACpB3B,KAAI+C,MAAAA,WAAW/C,KAAA+B,UAAAE,OAAAN,GACX3B,KAAIS,gBACJT,KAAKC,MAAM+C,QAAQC,OAAKjD,KAAAD,MAASwC,yBAAjCvC,MA9K2DkD,QAuLvEC,uBAAA,WACAnD,KAAAC,MAAA4C,gBAxLuEO,wBAAA,WAgK/D,IAAI3C,EAAST,KA6BrBA,KAAAC,MAAAoD,UAAAJ,KAAA,SAAAV,GACA9B,EAAAwB,YAkBAqB,0BAAA,WACAV,IAAAA,EAAyBR,KAajBpC,KAAAC,MAAAsD,WAAAN,KAAA,SAAAV,GACA9B,EAAAwB,YApDJuB,uBAAwB,WA2E5B,GAAAT,QAAA/D,EAAA,yDAAA,CACA,IAAAyB,EAAAT,KACUA,KAAAC,MAAA+C,QAAWC,KAAA,SAAAV,GACV9B,EAAAwB,aAKfwB,sBAAA,QAKIC,KAAAA,WAzEIvE,EAAkBa,KAAKC,QA+EvB0C,qBAAgBgB,EAAhBvB,UAEA,0BACA,6CAzEI,iCA2EJpD,EAAA,mBACA,YACKc,iBACD8D,6CACAC,EAAAA,aACAC,YACAC,UACAC,UACAC,KAAAA,KANJC,SAAA,SA/DJtB,sBAAuBe,EAAEvB,UA4EhB+B,2BAzED,oCA2EJ,qCACA,wFACKC,8BACL,YACKC,oDACL,qCACKC,0DAzEDtF,EAAG,QA2EP,YAtEI,4DA2ECuF,EAAAA,UACAjE,YA7C8D,qCA3B/D,8DA2ERtB,EAAA,YACAsB,YACQkE,UACJ,sCACQ,2DACJA,EAAAA,SADJ,YApDmE,UAlB/D,QA2ER,SACA,UAzEQ,UACF1B,KAAK,KA2EXyB,SAAe,SAKXE,SAAKC,WAzEL,MAAO,sBAAwB1E,KAAKD,MAAQC,KAAKD,MAAQ,IAAM,OAu3BvE,OACI4E,kBAj3BoBnF,SAASC,KAAKC,OAAOL,EAAQM,eAAeD,QA2EhEE,cAtUkB,UA8PlB8D,UAAW,sBA8EP7D,WAAI2E,SAAJ1E,GACA8E,EAAWC,MACXD,KAAOE,IAAAA,KAAQ,QAAS7E,GAAxBD,KAAAa,IAAAkE,SAAA/E,KAAA0D,WAOJ1D,KAAAF,SACA4E,YAAAA,IACQF,YAAJ,EACAA,UAAA,EACIT,aAAA,GACAiB,aAAkBC,EAClBhB,eAAA,IAIAjE,KAAAkF,QAAApF,EAAAoF,SAAA,GAGAlF,KAAAmE,SAAA,IAAkBK,EAAWW,mBAVU,GAcvCC,KAAAA,WAAM,KAELpF,KAAAqE,aA7G8DrE,KAAAsE,cAAAxE,EAAAwE,kBAkHnEtE,KAAAqF,cAAA,KAEArF,KAAAsF,cAAA,KAEAtF,KAAAuE,cAAAzE,EAAAyF,WACIvF,KAACM,kBAvH8DA,eAAA,WAkDnE,IAAIkE,EAAaxE,KA4ErBmF,KAAAA,GAAAA,gBAA4BA,WACxBX,EAASJ,WAAToB,eAlEJjB,cAAe,SAAuBH,GAqFtCqB,OATIC,KAAAA,cAAiBhD,KAAAA,YAEjB1C,KAAK2F,WAAAA,GAAL,IAAA1G,EAAA2G,kBACA5F,KAAO0F,2BAxEP1F,KAAK6F,gBA2ET7F,KAAAmE,SAAA2B,QAxEI9F,KAAKU,QAAQ,iBAAkBV,MA2EnCyF,MAMYM,UAAA,SAAAnB,EAAAR,EAAAtE,GAxERA,EAAUA,MA2EN,IAAA0E,EAAAxE,KAMI,OALJ4E,EAAInE,EAAOR,QAAP2E,GAAyBR,GAALQ,IACpBE,QAAA,SAAA7E,GACAuE,EAAAwB,UAAA/F,GAAA,KAGAD,MAIP0E,yBAAA,WArKkE,IAAAF,EAAAxE,KA6FnEwE,EAAWxD,SAASwD,EAAWJ,YA4EnCY,MAAAR,EAAAS,aAxEQgB,IAAKzB,EAAWuB,UAEhBG,cAAe1B,EAAW2B,cAE1BC,cAAe5B,EAAW6B,mBA4E9BC,iBAAA9B,EAAAW,kBAEIoB,+BAAA/B,EAAAiB,qBAEAL,KAAA,WACHZ,EAAAgC,cAAA,OAKDL,cAAelG,SAAXwG,GAMJ,GAJIzG,KAAI0G,EAAAA,gCAAJC,UAIJ3G,KAAAqF,cAAA,CACIuB,IAAOA,EAAoB5G,KAAAqB,EAAA,iBAC3BV,EAAmBkG,WAAAA,EAAnBC,aAAA,MAKR3B,kBAAA,SAAA7C,GACAyE,KAAAA,IAAAA,qBAAmBzE,GACflD,IAAAA,EAA2B4H,EAAAA,UAAYrD,KAAEsD,WA1M0BvE,gBAAA,IA6MvEwE,IACQA,EAAaxE,gBAAA,EACVwE,EAAgBC,IAAhBC,OAAyBC,KAGpC,IAAA3B,EAAA1F,KAAAqE,UAAArE,KAAAoE,WAAAkD,kBAIQ9C,OAHRkB,EAAAhD,gBAAA,EACAmD,KAAAA,WAAwBA,OACpBvB,KAAAA,2BACIE,GAMAA,qBAAWH,SAAX/B,GAFJ,GAAAA,EAAApC,IAAA,YAAAoC,EAAApC,IAAA,UAAA,CA1NmEF,KAAAuH,IAAA,uBAAAvH,KAAAoE,WAAAoD,eAAAlF,GAqJ/D,IAAIkC,EAAaxE,KA2EzBS,EAAA+D,EAAAH,UAAA/B,EAAA/C,IACAkI,IAAchH,EACV,OACAA,EAAAR,MAAAV,KAAAS,KAAAoE,WAAAkD,kBASShC,EAAelB,WAAAoD,gBACbzH,EAAM2H,aAAiBpC,KAa9BL,aAAKuB,SAALvG,EAAA2G,EAAA9G,GAEJ,IAAO6H,GAAP,IAAOA,EAAPC,QAAA,IAAAhB,EAAAiB,WAAA,CASAF,GAHInD,KAAAA,MAAAA,EAAJoC,EAAA9G,GAGA6H,EAAUG,SAAK7H,IAAY0D,EAAAoE,SAAWnB,GAAA,CAClCpC,IAAAA,EAAWwD,EADftB,EAAAE,EAGOe,OAAAA,EAAPM,WAAAC,EAAAxB,EAAA5G,GAIJqI,OAAAA,GAA8B1H,MAAhBmG,EAASD,OACV1E,EAAWJ,uBAEpBzC,EAAagJ,eAAAnI,EAAA2G,EAAA9G,KAGbiH,kBACIsB,WACJ5H,EAAW6H,eAAgBtB,MAAA,KAAWrD,EAAAsD,QAAAsB,aAI9B/D,OAAAA,SAAAA,GACAA,OAAAA,KAAAA,WAAWmB,QAAAA,SAAX,KAKJnB,cAAWgE,SAAX5D,EAAAN,GACAA,EAAOE,GAAqB/D,KAAOR,QAAnCqE,cACA7D,IAAAA,EAAAT,KAvEJwE,EAAWH,aA2EfG,EAAAJ,WAAAqE,KAAA,SAAAxI,EAAAyI,GACAC,IAAAA,EAAsBnE,EAASmE,aAAAA,EAAqBlI,GAC5C+D,EAAaH,UAAjBpE,EAAAV,IAAAkB,KArEJgH,aAAc,SAAsBnF,EAASxC,GA4ErCA,EAAA6D,EAAAjE,UAAAI,GAzEAG,MAAOqC,EA2EPnC,aAAAyI,OAAAC,OAA4BC,2BAExBtE,IAAAA,EAAAA,IAAWuE,EAAAA,GASP,OAdsBzG,EAAA/C,KAAAS,KAAAoE,WAAAkD,mBAO9B7G,EAAAiC,gBAA0B,GAEtB8B,KAAAA,qBAAWwE,GATehJ,KAAAsF,gBAW9B7E,EAAAV,MAAA2H,YAAmB1H,KAAAsF,eACftF,KAAAiJ,qBAAAxI,IAEIA,GAIJuF,UAAA,SAAgB1G,EAAAA,GAEZ4J,OAAUrH,IAAVqH,GAAUjH,EACNkH,IAAAA,EAAAA,KAAM1B,aAAAnF,GAKb,OAJO8G,KAAAA,UAAAA,EAAI7J,IAAAoI,EACA1F,GACHjC,KAAAwG,gBAERmB,GAIGuB,mBAAMjD,SAAI3D,EAAA8B,EAAAtE,GAENsJ,IAAAA,EAAIpJ,KACA2H,EAAA3H,KAAAgG,UAAa/F,GAAMoJ,GAK/BH,OAJSlJ,KAAAmF,kBAAA7C,GAJKqF,EAAVG,KAAA,WAAA,WAMHtD,EAPDwD,cAAAL,KASAuB,GAtC0Bf,aAAlC,SAAA1H,EAAAwB,GA6CJ,GAzVuEA,OAAAJ,IAAAI,GAAAA,EA8QnEjC,KAAKuH,IAAI,eAAgB9G,GA2E7BA,EAAA,CAzVuE,IAAA+D,EAAAxE,KAmR/DqI,EAAgBrI,KAAKF,QAAQ8D,YAAc5D,KAAKF,QAAQgE,UA2EhErD,EAAAI,IAAAyH,QAAA,OAAA,WAzEYrG,IACAZ,EAAErB,MAAM2G,SA2EpB2C,EAAuBjI,EAAA,WAAAO,MAAA4C,EAAS+E,EAAAA,WAAS3H,QAAAyG,GAC3BkB,EAAWC,qBACjBhF,EAAa+E,4BAIV/E,EAAWiF,cAAXhJ,EAAAV,OACC2J,EACAjJ,cAAOiC,UAGQiH,EAAAtF,UAAP5D,EAAAR,MAAAV,IAJZkB,EAAAkG,aAWRgC,qBAAA,SAAAlI,GACAgJ,IAAAA,EAAezJ,KACPwE,EAAAA,SAAJ/D,GAEImJ,UAAOpF,EAAWH,gBAvX6CG,EAAAxD,SAAAP,EAAAV,OA6XvE8J,2BAAA,SAAAC,EAAA/I,EAAAhB,EAAAU,GACQ+D,EAAgB7C,UAAOoI,KAAAC,MAAAF,EAAAG,aAAAC,QAAA,SACnBvI,EAAUE,6BA5EdsI,yBAA0B,SAASL,EAAI/I,EAAMhB,EAAOU,GA+E7C8G,EAAI/C,UAAa,KACjB3D,EAAS2D,8BA5EhB4F,kBAAmB,SAASN,EAAIvH,EAAMxC,GAgF/BiC,IAAAA,EAAXwC,EAAA6F,UAAAV,OAAA,SAAAW,GACA,OAAAvK,EAAAE,MAAAoJ,SAAAkB,WAAAD,KAEW5J,EAAQ2J,UAAY7F,KA1YoC,IAAA0E,EAAA,IAAA5J,EAAAkL,eA+TlB,IAArCzK,EAAME,MAAMoJ,SAASoB,aA+ErCvB,EAAAjD,KACwBO,KAAAA,mBACD7E,GAAX,WACR,OAAA5B,EAAAE,MAAAoJ,SAAAqB,UAAA,MAxEQC,EAAOC,UAAU9F,QAAQ,SAAS+F,GA+E1C3B,EAAiB4B,KACZ3B,KAAgB4B,QAAYF,EAAAtL,GACdyL,GAAKC,WACvB,OAAAlL,EAAAE,MAAAoJ,SAAA6B,KAAAL,QAIQvF,EAAAA,QAEL4D,EAAAjG,KAAA,SAAAkI,GACK3B,EAAAA,MAAL4B,cAORC,gBAAa,WACT1J,OAAU2J,OAAFC,KAAW5J,KAASA,WAAQ6J,QAMpCC,sBAAgB,SAAAlC,GAAhB,OACI9I,EACKiL,GADL1L,KAEKiC,UAHTsH,EAAAiC,OAQcxL,KACV2L,gBAAJhC,OAAA,SAAAlJ,EAAAmL,GAUJ,OAPQnL,EAAAiC,gBACAiB,EAAaG,MACbyF,EAAAsC,IAAA,SAAAlC,GAJJ,OAAAA,EAAAmC,KAAArL,QA1bmET,KAAAyJ,iBAoXvEA,cAAe,WAqFfzB,IAAAA,EAAwBA,KAIpB,OAHAhI,KAAAoE,WAAAyH,IAAA,SAAAvJ,EAAAsJ,GACIvC,OAAW5I,EAAOR,UAAtBqC,EAAA/C,OAOQwM,OAAAA,SAAaC,GAChBrK,OAAAE,IAAAF,EAAAA,EAAA3B,KAAAiM,QACD,IAAAzH,EAAAxE,KAWI,OATAmJ,EAAM1I,IAAAA,EADQ,WAEd2I,EAAIvI,IAAAsB,KAAAqC,EAAW0H,aAAA1H,IACXA,EAAAgC,cAAgB2F,GAGnB3H,EAAAxC,iBAGLwC,EAAUL,QAASiI,WAAS5H,GACxBA,GAhFZgC,cAAe,SAAuB7E,GAqFtCA,EAAAgC,EAAA2H,SAAA3J,GAAAA,EAAA3B,KAAAiM,QAGQI,IAAAA,EAAAA,KACAA,EAAwBhD,EAAAA,wBAExBiD,EAAcrG,EAAI5E,EAAA,WAAAkL,QAgB1BC,OAdYpD,EAAAA,YAAI0B,EAAWnJ,GACXqJ,EAAA5G,WAAOiF,YACH5I,EAAAA,OAAOV,EAAPkL,yBAAAD,IAJMA,EAAlBtK,QAAA,mBAAAoK,EAAAE,GASIA,EAAC1F,eAALwF,EAA4BU,QAAA,IAG/BR,EAAAxB,qBAlFGwB,EAAKrF,4BAsFDmF,GAjFZO,YAAa,SAASI,EAAS9J,GAqF/BA,EAAAgC,EAAA2H,SAAA3J,GAAAA,EAAA3B,KAAAiM,QACQ,IAAAK,EAAAtM,KAAAqB,EAAA,WAEJoL,EAAmBH,EAFfI,SAAA,mBAAAlB,OAGJc,EAAA1K,MAAA5B,KAAA2M,iBAAAlB,EAAAD,OAAAiB,IAEAhB,EAAA3G,QAAA,SAA0BrE,EAAAiI,GAC1BjI,EACAiL,iBACAzJ,OAAAN,GACAd,IAAA+L,SAAwBN,MAI5BO,iBAAgB/C,SAAIgD,GAEhBC,OA9gBmED,GAAA9M,KAAAF,QAAA8D,YAAA5D,KAAAF,QAAAgE,WAihBvEkJ,KAAAA,QAAAA,UAJI,IApEJhF,cAAe,SAAuBvH,GAsFlC,IAAKwM,EAAAA,EAALhN,MAAgCiN,SAGpCD,GAAuB,IAAvBA,EAAAA,QAAuBxM,EAAAR,MAAAkN,gBAAe,CAC3BC,IAAAA,GAAqBA,QAAO,GAC/B5I,EAAab,EAAA0J,OAAjBhE,EAAAiE,QAAAC,eAAAzK,OACWwG,IACCyC,EAAWC,QAAAwB,GADvBxN,KAAAmE,SAAA8B,KAriBmEkD,KAAA1I,EAAAR,MAAAV,GAud3D6J,GAAI,WAqFhBqE,OAAAA,EAA4BtB,iBAAAJ,GAAA9I,KAAa,WAChCyK,EAAqBrM,MAAK6L,mBAK3B1I,KAAaL,SAAjBiI,SACW9C,KAAAA,SAAAA,UA9EfL,qBAAsB,SAASxI,GAqF/B,IAAA4I,EAAA5I,EAAAR,MAAAoJ,WAC2B,IAAbA,EAAamC,QAAA/K,EAAAR,MAAAkN,kBACvB9D,EAAAsE,gBAEIC,KAAAA,SAAgBV,KACpB/D,KAAA1I,EAAAR,MAAAV,GACA6J,GAAa,WACFyE,OAAAA,EAAXC,4BAAA7K,KAAA,WACAxC,EAAAV,MAAAgO,2BAKQC,KAAQ7J,SAAAiI,SADZpM,KAAAmE,SAAA8J,UAQJzJ,WAAWsD,SAAKoG,GAChB,OAAAlO,KAAAqB,EAAA,wBAAA8M,KAAAD,IAIJE,QAEIC,kBAAA,QAlFAC,wBAAyB,SAqF7BC,yBAAA,+BAEQ/J,0BAAJ,eACAA,wBAAWgK,8BAnFXC,uBAAwB,8BAwFpBC,MAAAA,SAAAA,GAEAC,OAAAA,SAAe/F,OAAAgG,MAGXpK,6BAAsBqK,SAAtB/E,GACItF,KAAAA,uBAAanD,EAAAyI,EAAAoD,eAAqB4B,GAAAA,aAClCtK,KAAAA,wBAGRuK,uBAAU,SAASC,GAEfxK,OAAAA,SADAA,EACAoE,OACIgG,KAAA,uDADJhG,OAAAgG,KAAA,yBAQApK,4BAAWa,SAAgByE,GAC3B9J,KAAAiN,sBAAA5L,EAAAyI,EAAAoD,eAAA+B,GAAA,aACAzK,KAAAA,wBAEHyI,sBAAA,SAAAG,GA1BLA,OAAAvL,IAAAuL,GAAAA,EA1DiBpN,KAuFjBsJ,wBAAAxE,QAAA,SAAArE,EAAAiI,GACAlE,EAAAA,MAAa,WACH/D,EAAAV,MAAAmP,kBADmC9B,GAAA,IAEzCsB,IAAAA,MAIIlK,2BAAa,SAAAsF,GACbtF,KAAAA,qBAAWc,EAAXwE,EAA2BkF,eAA3BC,GAAA,aACAzK,KAAAA,wBAEIkJ,qBAAA,SAAAN,GACA5I,OAAAA,IAAAA,GAAWyE,EAHfjJ,KAKAwE,wBAA6BM,QAASqK,SAAT1O,EAAmBiI,GAC5ClE,EAAAA,MAAAA,WADJ/D,EAAAV,MAAAqP,iBAAAhC,GAAA,IAKA5I,IAAAA,MAKJuK,aAAU,SAAAjF,GACNtF,IAAAA,EAAWc,KACXd,EAAW8E,EAAAA,WACP7I,EAAOV,EAAAA,EAAPmN,eAAyB8B,KAAAA,SAEhCxK,EA5BwCnD,EAAA,kBAAA8M,KAAA3J,EAAA6K,kBAAAzB,IA6BzC0B,EAASzB,uBAELrJ,EAAAA,SAAW8E,GACP7I,IAAAA,EAAa8O,EAAbC,MAAA,EAAA,GACHpL,EAFDqL,aAAAxM,KAAA,WAGHmB,EAAAsL,QAAAC,GAlCL3B,QAAA,IAqCAxJ,EAAAqB,gBAEIrB,EAAWmB,SAAAA,QADfnB,EAAAvC,WAIAuC,EAAAsD,KAAA,mBAAAtD,EAAA4J,cAKI5J,YAAAA,SAAWoL,GACZC,EAJHlM,EAAA2H,SAAAuE,GAAAA,EAAA,EAKA7P,KAAOqB,EAAA,iBAEFyO,WAAOC,IAIhBvB,eAAAA,WACI,IAAOhK,EAAOxE,KACVgQ,EAAWxB,sBAGX3D,EAAWxJ,EAAA,qBAAK4O,aAJpB9G,KAAA,mBAprBmEuF,YAAA1P,EAAA,oBA4rBvE2P,cAAA,SAAAK,GACAnB,EAAsBxM,EAAA,qBAAAyN,YAAa,kBAC/BtK,EAAAgI,WAAAxN,EAAA,qCACOwF,EAAAJ,WAA0B8L,WAAQjN,KAAzC,WA/rBmEuB,EAAAnD,EAAA,qBAAAyN,YAAA,kBAumBvDtK,EAAWgI,WAAW,OA6F9B2D,SAAAA,SAAsBnB,GACtBoB,EAAe/K,cAAkB+B,EACjCiJ,EAAgBF,SAEf/I,WAxsB8D,OAAApH,KAAAC,MAAAqQ,WAAA9L,EAAAa,iBA8sB5Db,EAAAgC,cAAW,IAEdrF,QAAWoP,SAAAA,GACHA,EAAAA,cAFZ,KAIUpP,EADHoI,WAEIpI,EAAWS,cAAAA,MAK1B4O,EAAenP,EAAA,oBAASoP,aACpBtH,KAAA,kBACAuF,YAAA1P,EAAA,uBAEO2P,cAAKrF,SAAAA,GACD7I,EAAOiC,SAAPoD,QADXtB,EAAAnD,EAAA,oBAAAyN,YAAA,kBA7tBmEtK,EAAAc,cAAA0J,EAooB3DxK,EAAW8E,wBAAwBxE,QAAQ,SAASrE,GA8FhEA,EAAAV,MAAA2H,YAAAsH,GAEoBxK,EAAAyE,qBAAWxI,KAEtB+P,EAAgB1L,SAAQqK,SAAS1O,SAAQ0O,GACnCzO,EAAQ8L,YADnBxN,EAAA,aAAAmQ,EAAAuB,KAAA,EAAA1R,EAAA,MAAAmQ,EAAAwB,OAAA7N,KAAA,QAKJ0B,EAAAL,SAAAyM,SAAA3N,KAAA,WACA2M,EAAqBpD,WAAA,IACNiE,EAAYpP,EAAKwP,oBAA5B/B,YAAA,qBAGIgC,SAAcxE,SAAQyE,GACtBD,EAAexE,cAAkB0E,EAC5BtQ,EAAQ4I,wBAAbxE,QAAA,SAAArE,GACHA,EAAAV,MAAA2H,YAAAsH,MAGLM,QAAA,SAAAN,GACAjG,EAA2BzD,cAAA,KACnB2L,EAAgB3H,wBAAoBlF,QAAWkD,SAAAA,GAC9C2J,EAAelR,MAAAwP,mBAzvB+ClO,EAAA0L,QAAAmE,OAAA,WAmqB/D1M,EAAWmB,6BAkGX,IAAAoK,EAAApM,EAAAwN,SAAA,WACH,IAAAV,EAAAjM,EAAAqM,YACDI,EAAAzH,mBAAkCtK,GAClCsF,EAAAoL,oBAAAa,IACAQ,KACAA,KAAAA,EAAAA,WA1wBmEF,SA+qB9DjB,OAAOC,IAiGZvB,oBAAO,WAhxB4D,OAAAxO,KAAAqB,EAAA,0BAAA6O,SAqrB/DF,UAAW,UA8FnBoB,UAAA,SACAlF,MAAgB9J,EAaRyI,QAAAxJ,EAAArB,KAAAiQ,uBAAAjQ,UAgBA6N,qBAAA,SAAA/D,GAKRmB,KAAAA,EAAAA,0BAEQiF,QAAA,WAWJvK,yBAAsB,WACtBwD,IAAMnK,EAAAgB,KAHSqB,EAAA,mBAAAgQ,QAIfjB,EAAepQ,KAAAqB,EAJA,WAAA+F,SAKTpI,EAAGmR,EALMmB,KAAA,mBAAAlK,SAMf+I,EAv0BmE/I,OAAAgJ,GAysB9DkB,KAAK,UAiIdrB,OAAAA,EACII,IAqCDQ,UAAA,WACHlM,IAAAA,EAAmBA,KAAAA,EAAAA,WAAAA,SADvBxD,EAAAoP,EAAA9O,SAAAC,KA9JQ,OACIA,KAAMP,EACNoQ,MAAOpQ,EAz+B3BoP,EAAA3O,UA8+BY4O,cAAe,SAASC,GAGpB,IAAIe,EAAKf,GAAYzQ,KAAK6Q,YAC1B,OAAO7Q,KAAKsJ,wBAAwBK,OAAO,SAASlJ,GAChD,OAAOA,EAAOiC,gBAAkBjC,EAAOc,OAAOiQ,EAAG9P,KAAM8P,EAAGD,UAMlE/H,mBAAoB,WAEhBxJ,KAAKwQ,gBAAgB1L,QAAQ,SAASrE,GAClCA,EAAOC,QAAQ,UAAWD,MAKlCmP,oBAAqB,SAASa,GAC1BA,EAAWA,GAAYzQ,KAAK6Q,YAC5B,IACIvE,EAAUtM,KAAKqB,EAAE,WACHiL,EAAQyE,SAASjK,aAAe2J,EAASc,OACxCjF,EAAQ1K,QAHT,IAId5B,KAAKU,QAAQ,kBAKrBqI,0BAA2B,WACvB,IAAIkI,EAAgBjR,KAAKqE,UAAUrE,KAAKoE,WAAWkD,kBAC9C2J,IAILA,EAAclR,MAAM0R,YAAc,SAASlP,KAC3C0O,EAAclR,MAAM2R,iBAIxB1I,2BAA4B,WACxB,IAAIiI,EAAgBjR,KAAKqE,UAAUrE,KAAKoE,WAAWkD,kBAC9C2J,IAGLA,EAAclR,MAAM0R,YAAcvS,EAAkBsB,gBAAgBmR,UAAUC,SAE9EX,EAAclR,MAAM8R,YAAa,EACjCZ,EAAclR,MAAMsB,EAAE,wBAAwBsF,WAKlDlC,SAAU,WACN,MAAO,sBAAwBzE,KAAKyL,QAAUzL,KAAKyL,QAAQD,OAAS,GAAK,KAI7EU,aAAcvI,EAAEvB,UAER,6CACA,+DACA,qDACApD,EAAG,QACH,YACA,2DACA,0DACA,6DACA,yCACA,OACA,SAEA,iEACA,4BACA,SACA,SACA,gEACA,2DACAA,EAAG,cACH,aACA,SACA,SAEA,yDACA,4DACA,SAEA,oDACF8D,KAAK,KACLoB,SAAU,SAGhB+G,yBAA0BtH,EAAEvB,UAEpB,4CACA,8CACApD,EAAG,qBACH,MACA,UACF8D,KAAK,KACLoB,SAAU,SAGhBmL,mBACIyC,YAAa9S,EAAG,qBAChB+S,kBAAmB/S,EAAG,sBACtBmK,KAAMnK,EAAG,gBACTgT,WAAYhT,EAAG,gBACfiT,KAAMjT,EAAG,wBACTkT,WAAYlT,EAAG,yBAGnBiR,uBAAwBtM,EAAEvB,UAElB,6BACA,gCACA,wFACApD,EAAG,sBAAwB,IAC3B,6FACA,8BACA,YACA,yCACA,iEACA,iFACA,cACA,YACA,YACA,QACA,SAEA,2EACA,0DACAA,EAAG,6BACH,iBAEA,SAEA,2EACAA,EAAG,4BACH,iBACA,0EACAA,EAAG,2BACH,iBACA,UACF8D,KAAK,KACLoB,SAAU","file":"../../../scripts/mvc/history/multi-panel.js","sourcesContent":["define(\n    [\n        \"utils/localization\",\n        \"mvc/history/history-model\",\n        \"mvc/history/history-view-edit\",\n        \"mvc/history/copy-dialog\",\n        \"mvc/ui/error-modal\",\n        \"mvc/base-mvc\",\n        \"utils/ajax-queue\",\n        \"ui/mode-button\",\n        \"ui/search-input\"\n    ],\n    function(_l, HISTORY_MODEL, HISTORY_VIEW_EDIT, historyCopyDialog, ERROR_MODAL, baseMVC, ajaxQueue) {\n        \"use strict\";\n\n        var logNamespace = \"history\";\n        /* ==============================================================================\nTODO:\n\n============================================================================== */\n        /** @class A container for a history panel that renders controls for that history (delete, copy, etc.) */\n        var HistoryViewColumn = Backbone.View.extend(baseMVC.LoggableMixin).extend({\n            _logNamespace: logNamespace,\n\n            tagName: \"div\",\n            className: \"history-column flex-column flex-row-container\",\n            id: function id() {\n                if (!this.model) {\n                    return \"\";\n                }\n                return \"history-column-\" + this.model.get(\"id\");\n            },\n\n            // ------------------------------------------------------------------------ set up\n            /** set up passed-in panel (if any) and listeners */\n            initialize: function initialize(options) {\n                options = options || {};\n                this.purgeAllowed = !_.isUndefined(options.purgeAllowed) ? options.purgeAllowed : false;\n                this.panel = options.panel || this.createPanel(options);\n\n                this.setUpListeners();\n            },\n\n            /** create a history panel for this column */\n            createPanel: function createPanel(panelOptions) {\n                return new HISTORY_VIEW_EDIT.HistoryViewEdit(\n                    _.defaults(panelOptions, {\n                        model: this.model,\n                        // non-current panels should set their hdas to draggable\n                        purgeAllowed: this.purgeAllowed,\n                        dragItems: true,\n                        $scrollContainer: function() {\n                            return this.$el;\n                        }\n                    })\n                );\n            },\n\n            /** set up reflexive listeners */\n            setUpListeners: function setUpListeners() {\n                var column = this;\n                //this.log( 'setUpListeners', this );\n                this.once(\"rendered\", function() {\n                    column.trigger(\"rendered:initial\", column);\n                });\n                this.setUpPanelListeners();\n            },\n\n            /** set listeners needed for panel */\n            setUpPanelListeners: function setUpPanelListeners() {\n                var column = this;\n                this.listenTo(\n                    this.panel,\n                    {\n                        //'all': function(){ console.info( 'panel of ' + this, arguments ); },\n\n                        // assumes panel will take the longest to render\n                        rendered: function() {\n                            column.trigger(\"rendered\", column);\n                        },\n                        // when a panel's view expands turn off the click handler on the rerun button so that it uses it's href\n                        // this allows the button to open the tool rerun form in a new tab (instead of erroring)\n                        // TODO: hack\n                        \"view:expanded view:rendered\": function(view) {\n                            view.$(\".rerun-btn\").off();\n                        }\n                    },\n                    this\n                );\n            },\n\n            /** do the dimensions of this column overlap the given (horizontal) browser coords? */\n            inView: function(viewLeft, viewRight) {\n                var columnLeft = this.$el.offset().left,\n                    columnRight = columnLeft + this.$el.width();\n                if (columnRight < viewLeft) {\n                    return false;\n                }\n                if (columnLeft > viewRight) {\n                    return false;\n                }\n                return true;\n            },\n\n            /** shortcut to the panel */\n            $panel: function $panel() {\n                return this.$(\".history-panel\");\n            },\n\n            // ------------------------------------------------------------------------ render\n            /** render ths column, its panel, and set up plugins */\n            render: function render(speed) {\n                speed = speed !== undefined ? speed : \"fast\";\n                //this.log( this + '.render', this.$el, this.el );\n                //TODO: not needed\n                var modelData = this.model ? this.model.toJSON() : {};\n                this.$el.html(this.template(modelData));\n                this.renderPanel(speed);\n                // jq 1.12 doesn't fade/show properly when display: flex, re-set here\n                this.panel.$el.css(\"display\", \"flex\");\n                // if model and not children\n                // template\n                // render controls\n                this.setUpBehaviors();\n                // add panel\n                return this;\n            },\n\n            /** set up plugins */\n            setUpBehaviors: function setUpBehaviors() {\n                //this.log( 'setUpBehaviors:', this );\n                //var column = this;\n                // on panel size change, ...\n            },\n\n            /** column body template with inner div for panel based on data (model json) */\n            template: function template(data) {\n                data = _.extend(data || {}, {\n                    isCurrentHistory: this.currentHistory\n                });\n                return $(\n                    [\n                        '<div class=\"panel-controls clear flex-row\">',\n                        this.controlsLeftTemplate({\n                            history: data,\n                            view: this\n                        }),\n                        //'<button class=\"btn btn-default\">Herp</button>',\n                        this.controlsRightTemplate({\n                            history: data,\n                            view: this\n                        }),\n                        \"</div>\",\n                        '<div class=\"inner flex-row flex-column-container\">',\n                        '<div id=\"history-',\n                        data.id,\n                        '\" class=\"history-column history-panel flex-column\"></div>',\n                        \"</div>\"\n                    ].join(\"\")\n                );\n            },\n\n            /** render the panel contained in the column using speed for fx speed */\n            renderPanel: function renderPanel(speed) {\n                speed = speed !== undefined ? speed : \"fast\";\n                this.panel.setElement(this.$panel()).render(speed);\n                if (this.currentHistory) {\n                    this.panel.$list().before(this.panel._renderDropTargetHelp());\n                }\n                return this;\n            },\n\n            // ------------------------------------------------------------------------ behaviors and events\n            /** event map */\n            events: {\n                // will make this the current history\n                \"click .switch-to.btn\": function() {\n                    this.model.setAsCurrent();\n                },\n                //TODO: remove boiler plate from next 3\n                \"click .delete-history\": function() {\n                    var column = this;\n                    this.model._delete().done(function(data) {\n                        column.render();\n                    });\n                },\n                \"click .undelete-history\": function() {\n                    var column = this;\n                    this.model.undelete().done(function(data) {\n                        column.render();\n                    });\n                },\n                \"click .purge-history\": function() {\n                    if (confirm(_l(\"This will permanently remove the data. Are you sure?\"))) {\n                        var column = this;\n                        this.model.purge().done(function(data) {\n                            column.render();\n                        });\n                    }\n                },\n                // will copy this history and make the copy the current history\n                \"click .copy-history\": \"copy\"\n            },\n\n            // ------------------------------------------------------------------------ non-current controls\n            /** Open a modal to get a new history name, copy it (if not canceled), and makes the copy current */\n            copy: function copy() {\n                historyCopyDialog(this.model);\n            },\n\n            // ------------------------------------------------------------------------ templates\n            /** controls template displaying controls above the panel based on this.currentHistory */\n            controlsLeftTemplate: _.template(\n                [\n                    '<div class=\"pull-left\">',\n                    \"<% if( data.history.isCurrentHistory ){ %>\",\n                    '<strong class=\"current-label\">',\n                    _l(\"Current History\"),\n                    \"</strong>\",\n                    \"<% } else { %>\",\n                    '<button class=\"switch-to btn btn-default\">',\n                    _l(\"Switch to\"),\n                    \"</button>\",\n                    \"<% } %>\",\n                    \"</div>\"\n                ].join(\"\"),\n                { variable: \"data\" }\n            ),\n\n            /** controls template displaying controls above the panel based on this.currentHistory */\n            controlsRightTemplate: _.template(\n                [\n                    '<div class=\"pull-right\">',\n                    \"<% if( !data.history.purged ){ %>\",\n                    '<div class=\"panel-menu btn-group\">',\n                    '<button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">',\n                    '<span class=\"caret\"></span>',\n                    \"</button>\",\n                    '<ul class=\"dropdown-menu pull-right\" role=\"menu\">',\n                    \"<% if( !data.history.deleted ){ %>\",\n                    '<li><a href=\"javascript:void(0);\" class=\"copy-history\">',\n                    _l(\"Copy\"),\n                    \"</a></li>\",\n                    //'<li><a href=\"javascript:void(0);\" class=\"publish-history\">',\n                    //    _l( 'Publish' ),\n                    //'</a></li>',\n                    '<li><a href=\"javascript:void(0);\" class=\"delete-history\">',\n                    _l(\"Delete\"),\n                    \"</a></li>\",\n                    \"<% } else /* if is deleted */ { %>\",\n                    '<li><a href=\"javascript:void(0);\" class=\"undelete-history\">',\n                    _l(\"Undelete\"),\n                    \"</a></li>\",\n                    \"<% } %>\",\n                    \"<% if( data.view.purgeAllowed ){ %>\",\n                    '<li><a href=\"javascript:void(0);\" class=\"purge-history\">',\n                    _l(\"Purge\"),\n                    \"</a></li>\",\n                    \"<% } %>\",\n                    \"</ul>\",\n                    \"</div>\",\n                    \"<% } %>\",\n                    \"</div>\"\n                ].join(\"\"),\n                { variable: \"data\" }\n            ),\n\n            // ------------------------------------------------------------------------ misc\n            /** String rep */\n            toString: function() {\n                return \"HistoryViewColumn(\" + (this.panel ? this.panel : \"\") + \")\";\n            }\n        });\n\n        //==============================================================================\n        /** @class A view of a HistoryCollection and displays histories similarly to the current history panel.\n */\n        var MultiPanelColumns = Backbone.View.extend(baseMVC.LoggableMixin).extend({\n            _logNamespace: logNamespace,\n\n            className: \"multi-panel-history\",\n\n            // ------------------------------------------------------------------------ set up\n            /** Set up internals, history collection, and columns to display the history */\n            initialize: function initialize(options) {\n                options = options || {};\n                this.log(this + \".init\", options);\n\n                // add the className here (since we gen. pass the el in options)\n                this.$el.addClass(this.className);\n\n                // --- instance vars\n                //TODO: move these to some defaults\n                this.options = {\n                    columnWidth: 312,\n                    borderWidth: 1,\n                    columnGap: 8,\n                    headerHeight: 29,\n                    footerHeight: 0,\n                    controlsHeight: 20\n                };\n\n                /** how many histories to get when fetching a new batch/page */\n                this.perPage = options.perPage || 10;\n\n                /** named ajax queue for loading hdas */\n                this.hdaQueue = new ajaxQueue.NamedAjaxQueue([], false);\n\n                // --- set up models, sub-views, and listeners\n                /** the original unfiltered and unordered collection of histories */\n                this.collection = null;\n                /** model id to column map */\n                this.columnMap = {};\n                /** model id to column map */\n                this.columnOptions = options.columnOptions || {};\n\n                /** what to search for within all histories */\n                this.historySearch = null;\n                /** what to search for within all datasets */\n                this.datasetSearch = null;\n\n                this.setCollection(options.histories);\n                this.setUpListeners();\n            },\n\n            /** Set up reflexive listeners */\n            setUpListeners: function setUpListeners() {\n                var multipanel = this;\n                //multipanel.log( 'setUpListeners', multipanel );\n                this.on(\"end-of-scroll\", function() {\n                    multipanel.collection.fetchMore();\n                });\n            },\n\n            // ------------------------------------------------------------------------ collection\n            /** Set up a (new) history collection, sorting and adding listeners\n     *  @fires 'new-collection' when set with this view as the arg\n     */\n            setCollection: function setCollection(collection) {\n                // console.log( 'setCollection:', collection );\n                this.stopListening(this.collection);\n\n                this.collection = collection || new HISTORY_MODEL.HistoryCollection();\n                this.setUpCollectionListeners();\n\n                this.createColumns();\n                this.hdaQueue.clear();\n\n                this.trigger(\"new-collection\", this);\n                return this;\n            },\n\n            /** Set up a (new) history collection, sorting and adding listeners\n     *  @fires 'new-collection' when set with this view as the arg\n     */\n            addModels: function addModels(models, collection, options) {\n                // console.log( 'addModels:', models, collection, options );\n                options = options || {};\n                var multipanel = this;\n                models = _.isArray(models) ? models : [models];\n                models.forEach(function(model) {\n                    multipanel.addColumn(model, false);\n                    // if this is from a fetch, sort will be called and it will call render\n                });\n                return this;\n            },\n\n            /** Set up listeners for the collection - handling: added histories, change of current, deletion, and sorting */\n            setUpCollectionListeners: function() {\n                var multipanel = this;\n                multipanel.listenTo(multipanel.collection, {\n                    // handle ajax errors from the collection\n                    error: multipanel.errorHandler,\n                    // add multiple models\n                    add: multipanel.addModels,\n                    // when all the histories a user has have been fetched\n                    \"all-fetched\": multipanel._postFetchAll,\n                    // handle addition of histories, triggered by column copy and create new\n                    \"new-current\": multipanel.addAsCurrentColumn,\n                    // handle setting a history as current, triggered by history.setAsCurrent\n                    \"set-as-current\": multipanel.setCurrentHistory,\n                    // handle deleting a history (depends on whether panels is including deleted or not)\n                    \"change:deleted change:purged\": multipanel.handleDeletedHistory,\n                    // re-render columns after a sort\n                    sort: function() {\n                        multipanel.renderColumns(0);\n                    }\n                });\n            },\n\n            _postFetchAll: function(fetchData) {\n                // console.log( '_postFetchAll' );\n                this.$(\".histories-loading-indicator\").remove();\n                // when new histories is fetched and the indicator is not required,\n                // the panel will jump slightly left - totally aesthetic but jarring\n                // TODO: this probably would be best handled elsewhere during a refinement cycle (if any)\n                if (!this.historySearch) {\n                    var $scrollContainer = this.$(\".outer-middle\");\n                    $scrollContainer.scrollLeft($scrollContainer.scrollLeft() + 24);\n                }\n            },\n\n            /** Re-render and set currentHistoryId to reflect a new current history */\n            setCurrentHistory: function setCurrentHistory(history) {\n                this.log(\"setCurrentHistory:\", history);\n                var oldCurrentColumn = _.findWhere(this.columnMap, {\n                    currentHistory: true\n                });\n                if (oldCurrentColumn) {\n                    oldCurrentColumn.currentHistory = false;\n                    oldCurrentColumn.$el.height(\"\");\n                }\n\n                var newCurrentColumn = this.columnMap[this.collection.currentHistoryId];\n                newCurrentColumn.currentHistory = true;\n                this.collection.sort();\n                this._recalcFirstColumnHeight();\n                return newCurrentColumn;\n            },\n\n            /** Either remove a deleted history or re-render it to show the deleted message\n     *      based on collection.includeDeleted\n     */\n            handleDeletedHistory: function handleDeletedHistory(history) {\n                if (history.get(\"deleted\") || history.get(\"purged\")) {\n                    this.log(\"handleDeletedHistory\", this.collection.includeDeleted, history);\n                    var multipanel = this,\n                        column = multipanel.columnMap[history.id];\n                    if (!column) {\n                        return;\n                    }\n\n                    // if it's the current column, create a new, empty history as the new current\n                    if (column.model.id === this.collection.currentHistoryId) {\n                        //TODO: figuring out the order of async here is tricky\n                        //  - for now let the user handle the two step process\n                        //multipanel.collection.create().done( function(){\n                        //    if( !multipanel.collection.includeDeleted ){ multipanel.removeColumn( column, false ); }\n                        //});\n                    } else if (!multipanel.collection.includeDeleted) {\n                        multipanel.removeColumn(column);\n                    }\n                }\n            },\n\n            // ........................................................................ error handling\n            /** Event handler for errors (from the history collection mainly)\n     *  Alternately use two strings for model and xhr to use custom message and title (respectively)\n     *  (e.g. this.trigger( 'error', 'Heres a message', 'Heres a title' ))\n     *  @param {Model or View} model    the (Backbone) source of the error\n     *  @param {XMLHTTPRequest} xhr     any ajax obj. assoc. with the error\n     *  @param {Object} options         the options map commonly used with bbone ajax\n     */\n            errorHandler: function(model, xhr, options) {\n                // interrupted ajax or no connection\n                if (xhr && xhr.status === 0 && xhr.readyState === 0) {\n                    // return ERROR_MODAL.offlineErrorModal();\n                    // fail silently\n                    return;\n                }\n                // otherwise, leave something to report in the console\n                this.error(model, xhr, options);\n                // and feedback to a modal\n                // if sent two strings (and possibly details as 'options'), use those as message and title\n                if (_.isString(model) && _.isString(xhr)) {\n                    var message = model;\n                    var title = xhr;\n                    return ERROR_MODAL.errorModal(message, title, options);\n                }\n                // bad gateway\n                // TODO: possibly to global handler\n                if (xhr && xhr.status === 502) {\n                    return ERROR_MODAL.badGatewayErrorModal();\n                }\n                return ERROR_MODAL.ajaxErrorModal(model, xhr, options);\n            },\n\n            /** If Galaxy object is available handle error there, otherwise, locally (and crudely) */\n            _ajaxErrorHandler: function() {\n                ERROR_MODAL.ajaxErrorModal.apply(null, _.toArray(arguments));\n            },\n\n            /** create a new history and set it to current */\n            create: function(ev) {\n                return this.collection.create({ current: true });\n            },\n\n            // ------------------------------------------------------------------------ columns\n            /** create columns from collection */\n            createColumns: function createColumns(models, columnOptions) {\n                columnOptions = columnOptions || this.options.columnOptions;\n                var multipanel = this;\n                // clear column map\n                // TODO: make cummulative\n                multipanel.columnMap = {};\n                multipanel.collection.each(function(model, i) {\n                    var column = multipanel.createColumn(model, columnOptions);\n                    multipanel.columnMap[model.id] = column;\n                });\n            },\n\n            /** create a column and its panel and set up any listeners to them */\n            createColumn: function createColumn(history, options) {\n                // options passed can be re-used, so extend them before adding the model to prevent pollution for the next\n                options = _.extend({}, options, {\n                    model: history,\n                    purgeAllowed: Galaxy.config.allow_user_dataset_purge\n                });\n                var column = new HistoryViewColumn(options);\n                if (history.id === this.collection.currentHistoryId) {\n                    column.currentHistory = true;\n                }\n                this.setUpColumnListeners(column);\n                if (this.datasetSearch) {\n                    column.panel.searchItems(this.datasetSearch);\n                    this.queueHdaFetchDetails(column);\n                }\n                return column;\n            },\n\n            /** add a new column for history and render all columns if render is true */\n            addColumn: function add(history, render) {\n                // console.debug( 'adding column for:', history, render );\n                render = render !== undefined ? render : true;\n                var newColumn = this.createColumn(history);\n                this.columnMap[history.id] = newColumn;\n                if (render) {\n                    this.renderColumns();\n                }\n                return newColumn;\n            },\n\n            /** add a new column for history and make it the current history/column */\n            addAsCurrentColumn: function add(history, collection, options) {\n                //this.log( 'adding current column for:', history );\n                var multipanel = this,\n                    newColumn = this.addColumn(history, false);\n                this.setCurrentHistory(history);\n                newColumn.once(\"rendered\", function() {\n                    multipanel.queueHdaFetch(newColumn);\n                });\n                return newColumn;\n            },\n\n            /** remove the given column, it's listeners, and optionally render */\n            removeColumn: function remove(column, render) {\n                render = render !== undefined ? render : true;\n                this.log(\"removeColumn\", column);\n                if (!column) {\n                    return;\n                }\n                var multipanel = this,\n                    widthToRemove = this.options.columnWidth + this.options.columnGap;\n                column.$el.fadeOut(\"fast\", function() {\n                    if (render) {\n                        $(this).remove();\n                        multipanel.$(\".middle\").width(multipanel.$(\".middle\").width() - widthToRemove);\n                        multipanel.checkColumnsInView();\n                        multipanel._recalcFirstColumnHeight();\n                    }\n\n                    //TODO: to freeColumn (where Columns have freePanel)\n                    multipanel.stopListening(column.panel);\n                    multipanel.stopListening(column);\n                    delete multipanel.columnMap[column.model.id];\n                    column.remove();\n                });\n            },\n\n            /** set up listeners for a column and it's panel - handling: hda lazy-loading, drag and drop */\n            setUpColumnListeners: function setUpColumnListeners(column) {\n                var multipanel = this;\n                multipanel.listenTo(column, {\n                    //'all': function(){ console.info( 'column ' + column + ':', arguments ) },\n                    \"in-view\": multipanel.queueHdaFetch\n                });\n\n                multipanel.listenTo(column.panel, {\n                    //'all': function(){ console.info( 'panel ' + column.panel + ':', arguments ) },\n\n                    \"view:draggable:dragstart\": function(ev, view, panel, column) {\n                        multipanel._dropData = JSON.parse(ev.dataTransfer.getData(\"text\"));\n                        multipanel.currentColumnDropTargetOn();\n                    },\n                    \"view:draggable:dragend\": function(ev, view, panel, column) {\n                        multipanel._dropData = null;\n                        multipanel.currentColumnDropTargetOff();\n                    },\n                    \"droptarget:drop\": function(ev, data, panel) {\n                        //note: bad copy sources fail silently\n                        var toCopy = multipanel._dropData.filter(function(json) {\n                            return panel.model.contents.isCopyable(json);\n                        });\n                        multipanel._dropData = null;\n\n                        var queue = new ajaxQueue.NamedAjaxQueue();\n                        if (panel.model.contents.currentPage !== 0) {\n                            queue.add({\n                                name: \"fetch-front-page\",\n                                fn: function() {\n                                    return panel.model.contents.fetchPage(0);\n                                }\n                            });\n                        }\n                        // need to reverse to better match expected order\n                        // TODO: reconsider order in list-view._setUpItemViewListeners, dragstart (instead of here)\n                        toCopy.reverse().forEach(function(content) {\n                            queue.add({\n                                name: \"copy-\" + content.id,\n                                fn: function() {\n                                    return panel.model.contents.copy(content);\n                                }\n                            });\n                        });\n                        queue.start();\n                        queue.done(function(responses) {\n                            panel.model.fetch();\n                        });\n                    }\n                });\n            },\n\n            /** conv. fn to count the columns in columnMap */\n            columnMapLength: function() {\n                return Object.keys(this.columnMap).length;\n            },\n\n            /** return array of Columns filtered by filters and sorted to match the collection\n     *  @param: filters Function[] array of filter fns\n     */\n            sortedFilteredColumns: function(filters) {\n                filters = filters || this.filters;\n                if (!filters || !filters.length) {\n                    return this.sortedColumns();\n                }\n                var multipanel = this;\n                return multipanel.sortedColumns().filter(function(column, index) {\n                    var filtered =\n                        column.currentHistory ||\n                        _.every(\n                            filters.map(function(filter) {\n                                return filter.call(column);\n                            })\n                        );\n                    return filtered;\n                });\n            },\n\n            /** return array of Columns sorted to match the collection */\n            sortedColumns: function() {\n                var multipanel = this;\n                var sorted = this.collection.map(function(history, index) {\n                    return multipanel.columnMap[history.id];\n                });\n                return sorted;\n            },\n\n            // ------------------------------------------------------------------------ render\n            /** Render this view, columns, and set up view plugins */\n            render: function render(speed) {\n                speed = speed !== undefined ? speed : this.fxSpeed;\n                var multipanel = this;\n\n                multipanel.log(multipanel + \".render\");\n                multipanel.$el.html(multipanel.mainTemplate(multipanel));\n                multipanel.renderColumns(speed);\n\n                // set the columns to full height allowed and set up behaviors for thie multipanel\n                multipanel.setUpBehaviors();\n                //TODO: wrong - has to wait for columns to render\n                //  - create a column listener that fires this when all columns are rendered\n                multipanel.trigger(\"rendered\", multipanel);\n                return multipanel;\n            },\n\n            /** Render the columns and panels */\n            renderColumns: function renderColumns(speed) {\n                speed = _.isNumber(speed) ? speed : this.fxSpeed;\n                // console.log( 'renderColumns:', speed );\n                // render columns and track the total number rendered, firing an event when all are rendered\n                var self = this;\n                var sortedAndFiltered = self.sortedFilteredColumns();\n                // console.log( '\\t sortedAndFiltered:', sortedAndFiltered );\n                var $middle = self.$(\".middle\").empty();\n\n                self._addColumns(sortedAndFiltered, speed);\n                if (!self.collection.allFetched) {\n                    $middle.append(self.loadingIndicatorTemplate(self));\n                }\n                //TODO: sorta - at least their fx queue has started the re-rendering\n                self.trigger(\"columns-rendered\", sortedAndFiltered, self);\n\n                if (self.datasetSearch && sortedAndFiltered.length <= 1) {\n                } else {\n                    // check for in-view, hda lazy-loading if so\n                    self.checkColumnsInView();\n                    // the first, current column has position: fixed and flex css will not apply - adjust height manually\n                    self._recalcFirstColumnHeight();\n                }\n                return sortedAndFiltered;\n            },\n\n            _addColumns: function(columns, speed) {\n                speed = _.isNumber(speed) ? speed : this.fxSpeed;\n                var $middle = this.$(\".middle\");\n\n                var numExisting = $middle.children(\".history-column\").length;\n                $middle.width(this._calcMiddleWidth(columns.length + numExisting));\n\n                columns.forEach(function(column, i) {\n                    column\n                        .delegateEvents()\n                        .render(speed)\n                        .$el.appendTo($middle);\n                });\n            },\n\n            _calcMiddleWidth: function(numColumns) {\n                var preventStackWidthAdj = 16;\n                return (\n                    numColumns * (this.options.columnWidth + this.options.columnGap) +\n                    // last column gap\n                    this.options.columnGap +\n                    // the amount that safely prevents stacking of columns when adding a new one\n                    preventStackWidthAdj\n                );\n            },\n\n            //TODO: combine the following two more sensibly\n            //TODO: could have HistoryContents.haveDetails return false\n            //      if column.model.contents.length === 0 && !column.model.get( 'empty' ) then just check that\n            /** Get the *summary* contents of a column's history (and details on any expanded contents),\n     *      queueing the ajax call and using a named queue to prevent the call being sent twice\n     */\n            queueHdaFetch: function queueHdaFetch(column) {\n                // console.log( column.model + '.contentsShown:', column.model.contentsShown() );\n                var contents = column.model.contents;\n                // console.log( 'queueHdaFetch:', column, column.model.get( 'contents_active' ) );\n                // if the history model says it has hdas but none are present, queue an ajax req for them\n                if (contents.length === 0 && column.model.contentsShown()) {\n                    var fetchOptions = { silent: true };\n                    var ids = _.values(contents.storage.allExpanded()).join();\n                    if (ids) {\n                        fetchOptions.details = ids;\n                    }\n                    // this uses a 'named' queue so that duplicate requests are ignored\n                    this.hdaQueue.add({\n                        name: column.model.id,\n                        fn: function() {\n                            return contents.fetchCurrentPage(fetchOptions).done(function() {\n                                column.panel.renderItems();\n                            });\n                        }\n                    });\n                    // the queue is re-used, so if it's not processing requests - start it again\n                    if (!this.hdaQueue.running) {\n                        this.hdaQueue.start();\n                    }\n                }\n            },\n\n            /** Get the *detailed* json for *all* of a column's history's contents - req'd for searching */\n            queueHdaFetchDetails: function(column) {\n                var contents = column.model.contents;\n                var needsContentsLoaded = contents.length === 0 && column.model.contentsShown();\n                if (needsContentsLoaded || !contents.haveDetails()) {\n                    // this uses a 'named' queue so that duplicate requests are ignored\n                    this.hdaQueue.add({\n                        name: column.model.id,\n                        fn: function() {\n                            return contents.progressivelyFetchDetails().done(function() {\n                                column.panel._renderEmptyMessage();\n                            });\n                        }\n                    });\n                    // the queue is re-used, so if it's not processing requests - start it again\n                    if (!this.hdaQueue.running) {\n                        this.hdaQueue.start();\n                    }\n                }\n            },\n\n            /** put a text msg in the header */\n            renderInfo: function(msg) {\n                return this.$(\".header .header-info\").text(msg);\n            },\n\n            // ------------------------------------------------------------------------ events/behaviors\n            events: {\n                // will move to the server root (gen. Analyze data)\n                \"click .done.btn\": \"close\",\n                // creates a new empty history and makes it current\n                \"click .create-new.btn\": \"create\",\n                \"click #include-deleted\": \"_clickToggleDeletedHistories\",\n                // these change the collection and column sort order\n                \"click .order .set-order\": \"_chooseOrder\",\n                \"click #toggle-deleted\": \"_clickToggleDeletedDatasets\",\n                \"click #toggle-hidden\": \"_clickToggleHiddenDatasets\"\n                //'dragstart .list-item .title-bar'                       : function( e ){ console.debug( 'ok' ); }\n            },\n\n            close: function(ev) {\n                //TODO: switch to pushState/router\n                window.location = Galaxy.root;\n            },\n\n            _clickToggleDeletedHistories: function(ev) {\n                this.toggleDeletedHistories($(ev.currentTarget).is(\":checked\"));\n                this.toggleOptionsPopover();\n            },\n            /** Include deleted histories in the collection */\n            toggleDeletedHistories: function(show) {\n                if (show) {\n                    window.location = Galaxy.root + \"history/view_multiple?include_deleted_histories=True\";\n                } else {\n                    window.location = Galaxy.root + \"history/view_multiple\";\n                }\n            },\n\n            _clickToggleDeletedDatasets: function(ev) {\n                this.toggleDeletedDatasets($(ev.currentTarget).is(\":checked\"));\n                this.toggleOptionsPopover();\n            },\n            toggleDeletedDatasets: function(show) {\n                show = show !== undefined ? show : false;\n                var multipanel = this;\n                multipanel.sortedFilteredColumns().forEach(function(column, i) {\n                    _.delay(function() {\n                        column.panel.toggleShowDeleted(show, false);\n                    }, i * 200);\n                });\n            },\n\n            _clickToggleHiddenDatasets: function(ev) {\n                this.toggleHiddenDatasets($(ev.currentTarget).is(\":checked\"));\n                this.toggleOptionsPopover();\n            },\n            toggleHiddenDatasets: function(show) {\n                show = show !== undefined ? show : false;\n                var multipanel = this;\n                multipanel.sortedFilteredColumns().forEach(function(column, i) {\n                    _.delay(function() {\n                        column.panel.toggleShowHidden(show, false);\n                    }, i * 200);\n                });\n            },\n\n            /** change the collection order and re-fetch when the drop down in the options menu is changed */\n            _chooseOrder: function(ev) {\n                var multipanel = this,\n                    collection = multipanel.collection,\n                    orderKey = $(ev.currentTarget).data(\"order\");\n                // set the sort order text also\n                multipanel.$(\".current-order\").text(multipanel.orderDescriptions[orderKey]);\n                multipanel.toggleOptionsPopover();\n                // set the order and re-fetch using the new order, saving the current history as the first\n                collection.setOrder(orderKey);\n                var currentHistoryModel = collection.slice(0, 1);\n                collection.fetchFirst().done(function() {\n                    collection.unshift(currentHistoryModel, {\n                        silent: true\n                    });\n                    multipanel.createColumns();\n                    // need to clear this or previously fetched contents won't refetch now (bc of named queue)\n                    multipanel.hdaQueue.clear();\n                    multipanel.render();\n                });\n                multipanel.once(\"columns-rendered\", multipanel._scrollLeft);\n                //TODO: check allFetched and do not reset if so - just sort instead\n            },\n\n            /** scroll the column container right or left */\n            _scrollLeft: function(val) {\n                val = _.isNumber(val) ? val : 0;\n                this.$(\".outer-middle\").scrollLeft(val);\n            },\n\n            /** Set up any view plugins */\n            setUpBehaviors: function() {\n                var multipanel = this;\n                multipanel._moreOptionsPopover();\n\n                // input to search histories\n                multipanel.$(\"#search-histories\").searchInput({\n                    name: \"search-histories\",\n                    placeholder: _l(\"search histories\"),\n\n                    onfirstsearch: function(searchFor) {\n                        multipanel.$(\"#search-histories\").searchInput(\"toggle-loading\");\n                        multipanel.renderInfo(_l(\"loading all histories for search\"));\n                        multipanel.collection.fetchAll().done(function() {\n                            multipanel.$(\"#search-histories\").searchInput(\"toggle-loading\");\n                            multipanel.renderInfo(\"\");\n                        });\n                    },\n                    onsearch: function(searchFor) {\n                        multipanel.historySearch = searchFor;\n                        multipanel.filters = [\n                            function() {\n                                return this.model.matchesAll(multipanel.historySearch);\n                            }\n                        ];\n                        multipanel.renderColumns(0);\n                    },\n                    onclear: function(searchFor) {\n                        multipanel.historySearch = null;\n                        //TODO: remove specifically not just reset\n                        multipanel.filters = [];\n                        multipanel.renderColumns(0);\n                    }\n                });\n\n                // input to search datasets\n                multipanel.$(\"#search-datasets\").searchInput({\n                    name: \"search-datasets\",\n                    placeholder: _l(\"search all datasets\"),\n\n                    onfirstsearch: function(searchFor) {\n                        multipanel.hdaQueue.clear();\n                        multipanel.$(\"#search-datasets\").searchInput(\"toggle-loading\");\n                        multipanel.datasetSearch = searchFor;\n                        multipanel.sortedFilteredColumns().forEach(function(column) {\n                            column.panel.searchItems(searchFor);\n                            // load details for them that need\n                            multipanel.queueHdaFetchDetails(column);\n                        });\n                        multipanel.hdaQueue.progress(function(progress) {\n                            multipanel.renderInfo(\n                                [_l(\"searching\"), progress.curr + 1, _l(\"of\"), progress.total].join(\" \")\n                            );\n                        });\n                        multipanel.hdaQueue.deferred.done(function() {\n                            multipanel.renderInfo(\"\");\n                            multipanel.$(\"#search-datasets\").searchInput(\"toggle-loading\");\n                        });\n                    },\n                    onsearch: function(searchFor) {\n                        multipanel.datasetSearch = searchFor;\n                        multipanel.sortedFilteredColumns().forEach(function(column) {\n                            column.panel.searchItems(searchFor);\n                        });\n                    },\n                    onclear: function(searchFor) {\n                        multipanel.datasetSearch = null;\n                        multipanel.sortedFilteredColumns().forEach(function(column) {\n                            column.panel.clearSearch();\n                        });\n                    }\n                });\n\n                // resize first (fixed position) column on page resize\n                $(window).resize(function() {\n                    multipanel._recalcFirstColumnHeight();\n                });\n\n                // when scrolling - check for histories now in view: they will fire 'in-view' and queueHdaLoading if necc.\n                //TODO:?? might be able to simplify and not use pub-sub\n                var debouncedInView = _.debounce(function _debouncedInner() {\n                    var viewport = multipanel._viewport();\n                    multipanel.checkColumnsInView(viewport);\n                    multipanel.checkForEndOfScroll(viewport);\n                }, 100);\n                this.$(\".middle\")\n                    .parent()\n                    .scroll(debouncedInView);\n            },\n\n            /** create the options popover */\n            _moreOptionsPopover: function() {\n                return this.$(\".open-more-options.btn\").popover({\n                    container: \".header\",\n                    placement: \"bottom\",\n                    html: true,\n                    content: $(this.optionsPopoverTemplate(this))\n                });\n            },\n\n            /** change the collection order and re-fetch when the drop down in the options menu is changed */\n            toggleOptionsPopover: function(ev) {\n                // hide seems broken in our version\n                this.$(\".open-more-options.btn\").popover(\"toggle\");\n            },\n\n            /** Adjust the height of the first, current column since flex-boxes won't work with fixed postiion elements */\n            _recalcFirstColumnHeight: function() {\n                var $firstColumn = this.$(\".history-column\").first(),\n                    middleHeight = this.$(\".middle\").height(),\n                    controlHeight = $firstColumn.find(\".panel-controls\").height();\n                $firstColumn\n                    .height(middleHeight)\n                    .find(\".inner\")\n                    .height(middleHeight - controlHeight);\n            },\n\n            /** Get the left and right pixel coords of the middle element */\n            _viewport: function() {\n                var $outerMiddle = this.$(\".middle\").parent(),\n                    viewLeft = $outerMiddle.offset().left,\n                    width = $outerMiddle.width();\n                return {\n                    left: viewLeft,\n                    right: viewLeft + width\n                };\n            },\n\n            /** returns the columns currently in the viewport */\n            columnsInView: function(viewport) {\n                //TODO: uses offset which is render intensive\n                //TODO: 2N - could use arg filter (sortedFilteredColumns( filter )) instead\n                var vp = viewport || this._viewport();\n                return this.sortedFilteredColumns().filter(function(column) {\n                    return column.currentHistory || column.inView(vp.left, vp.right);\n                });\n            },\n\n            //TODO: sortByInView - return cols in view, then others\n            /** trigger in-view from columns in-view */\n            checkColumnsInView: function() {\n                //TODO: assbackward - don't fire from the column, fire from here and listen from here\n                this.columnsInView().forEach(function(column) {\n                    column.trigger(\"in-view\", column);\n                });\n            },\n\n            /** is the middle, horizontally scrolling section scrolled fully to the right? */\n            checkForEndOfScroll: function(viewport) {\n                viewport = viewport || this._viewport();\n                var END_PADDING = 16,\n                    $middle = this.$(\".middle\"),\n                    scrollRight = $middle.parent().scrollLeft() + viewport.right;\n                if (scrollRight >= $middle.width() - END_PADDING) {\n                    this.trigger(\"end-of-scroll\");\n                }\n            },\n\n            /** Show and enable the current columns drop target */\n            currentColumnDropTargetOn: function() {\n                var currentColumn = this.columnMap[this.collection.currentHistoryId];\n                if (!currentColumn) {\n                    return;\n                }\n                //TODO: fix this - shouldn't need monkeypatch\n                currentColumn.panel.dataDropped = function(data) {};\n                currentColumn.panel.dropTargetOn();\n            },\n\n            /** Hide and disable the current columns drop target */\n            currentColumnDropTargetOff: function() {\n                var currentColumn = this.columnMap[this.collection.currentHistoryId];\n                if (!currentColumn) {\n                    return;\n                }\n                currentColumn.panel.dataDropped = HISTORY_VIEW_EDIT.HistoryViewEdit.prototype.dataDrop;\n                // slight override of dropTargetOff to not erase drop-target-help\n                currentColumn.panel.dropTarget = false;\n                currentColumn.panel.$(\".history-drop-target\").remove();\n            },\n\n            // ------------------------------------------------------------------------ misc\n            /** String rep */\n            toString: function() {\n                return \"MultiPanelColumns(\" + (this.columns ? this.columns.length : 0) + \")\";\n            },\n\n            // ------------------------------------------------------------------------ templates\n            mainTemplate: _.template(\n                [\n                    '<div class=\"header flex-column-container\">',\n                    '<div class=\"control-column control-column-left flex-column\">',\n                    '<button class=\"done btn btn-default\" tabindex=\"1\">',\n                    _l(\"Done\"),\n                    \"</button>\",\n                    '<div id=\"search-histories\" class=\"search-control\"></div>',\n                    '<div id=\"search-datasets\" class=\"search-control\"></div>',\n                    '<a class=\"open-more-options btn btn-default\" tabindex=\"3\">',\n                    '<span class=\"fa fa-ellipsis-h\"></span>',\n                    \"</a>\",\n                    \"</div>\",\n                    // feedback\n                    '<div class=\"control-column control-column-center flex-column\">',\n                    '<div class=\"header-info\">',\n                    \"</div>\",\n                    \"</div>\",\n                    '<div class=\"control-column control-column-right flex-column\">',\n                    '<button class=\"create-new btn btn-default\" tabindex=\"4\">',\n                    _l(\"Create new\"),\n                    \"</button> \",\n                    \"</div>\",\n                    \"</div>\",\n                    // middle - where the columns go\n                    '<div class=\"outer-middle flex-row flex-row-container\">',\n                    '<div class=\"middle flex-column-container flex-row\"></div>',\n                    \"</div>\",\n                    // footer\n                    '<div class=\"footer flex-column-container\"></div>'\n                ].join(\"\"),\n                { variable: \"view\" }\n            ),\n\n            loadingIndicatorTemplate: _.template(\n                [\n                    '<div class=\"histories-loading-indicator\">',\n                    '<span class=\"fa fa-spin fa-spinner\"></span>',\n                    _l(\"Loading histories\"),\n                    \"...\",\n                    \"</div>\"\n                ].join(\"\"),\n                { variable: \"view\" }\n            ),\n\n            orderDescriptions: {\n                update_time: _l(\"most recent first\"),\n                \"update_time-asc\": _l(\"least recent first\"),\n                name: _l(\"name, a to z\"),\n                \"name-dsc\": _l(\"name, z to a\"),\n                size: _l(\"size, large to small\"),\n                \"size-asc\": _l(\"size, small to large\")\n            },\n\n            optionsPopoverTemplate: _.template(\n                [\n                    '<div class=\"more-options\">',\n                    '<div class=\"order btn-group\">',\n                    '<button type=\"button\" class=\"btn btn-default dropdown-toggle\" data-toggle=\"dropdown\">',\n                    _l(\"Order histories by\") + \" \",\n                    '<span class=\"current-order\"><%- view.orderDescriptions[ view.collection.order ] %></span> ',\n                    '<span class=\"caret\"></span>',\n                    \"</button>\",\n                    '<ul class=\"dropdown-menu\" role=\"menu\">',\n                    \"<% _.each( view.orderDescriptions, function( text, order ){ %>\",\n                    '<li><a href=\"javascript:void(0);\" class=\"set-order\" data-order=\"<%- order %>\">',\n                    \"<%- text %>\",\n                    \"</a></li>\",\n                    \"<% }); %>\",\n                    \"</ul>\",\n                    \"</div>\",\n\n                    '<div class=\"checkbox\"><label><input id=\"include-deleted\" type=\"checkbox\"',\n                    '<%= view.collection.includeDeleted? \" checked\" : \"\" %>>',\n                    _l(\"Include deleted histories\"),\n                    \"</label></div>\",\n\n                    \"<hr />\",\n\n                    '<div class=\"checkbox\"><label><input id=\"toggle-deleted\" type=\"checkbox\">',\n                    _l(\"Include deleted datasets\"),\n                    \"</label></div>\",\n                    '<div class=\"checkbox\"><label><input id=\"toggle-hidden\" type=\"checkbox\">',\n                    _l(\"Include hidden datasets\"),\n                    \"</label></div>\",\n                    \"</div>\"\n                ].join(\"\"),\n                { variable: \"view\" }\n            )\n        });\n\n        //==============================================================================\n        return {\n            MultiPanelColumns: MultiPanelColumns\n        };\n    }\n);\n"]}