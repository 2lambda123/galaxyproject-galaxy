{"version":3,"sources":["mvc/history/options-menu.js"],"names":["define","PopupMenu","BASE_MVC","_l","Webhooks","buildMenu","isAnon","purgeAllowed","urlRoot","create","clone","menu","filter","menuOption","anon","purge","href","target","confirm","func","galaxy_main","location","html","Galaxy","header","historyCopyDialog","currHistoryPanel","createNewHistory","model","done","loadCurrentHistory","_delete","router","push","$","post","id","collapseAll","root","user_action","async","callback","webhooks_menu","add","url","each","webhooks","models","index","toJSON","length","options","$button","undefined","anonymous"],"mappings":"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","file":"../../../scripts/mvc/history/options-menu.js","sourcesContent":["define([\"mvc/ui/popup-menu\", \"mvc/history/copy-dialog\", \"mvc/base-mvc\", \"utils/localization\", \"mvc/webhooks\"], function(\n    PopupMenu,\n    historyCopyDialog,\n    BASE_MVC,\n    _l,\n    Webhooks\n) {\n    \"use strict\";\n\n    // ============================================================================\n    var menu = [\n        {\n            html: _l(\"History Lists\"),\n            header: true\n        },\n        {\n            html: _l(\"Saved Histories\"),\n            href: \"histories/list\",\n            target: \"_top\"\n        },\n        {\n            html: _l(\"Histories Shared with Me\"),\n            href: \"histories/list_shared\",\n            target: \"_top\"\n        },\n        {\n            html: _l(\"Current History\"),\n            header: true,\n            anon: true\n        },\n        {\n            html: _l(\"Create New\"),\n            func: function() {\n                if (Galaxy && Galaxy.currHistoryPanel) {\n                    Galaxy.currHistoryPanel.createNewHistory();\n                }\n            }\n        },\n        {\n            html: _l(\"Copy History\"),\n            func: function() {\n                historyCopyDialog(Galaxy.currHistoryPanel.model).done(function() {\n                    Galaxy.currHistoryPanel.loadCurrentHistory();\n                });\n            }\n        },\n        {\n            html: _l(\"Share or Publish\"),\n            href: \"history/sharing\"\n        },\n        {\n            html: _l(\"Show Structure\"),\n            href: \"history/display_structured\",\n            anon: true\n        },\n        {\n            html: _l(\"Extract Workflow\"),\n            href: \"workflow/build_from_current_history\"\n        },\n        {\n            html: _l(\"Delete\"),\n            anon: true,\n            func: function() {\n                if (Galaxy && Galaxy.currHistoryPanel && confirm(_l(\"Really delete the current history?\"))) {\n                    Galaxy.currHistoryPanel.model._delete().done(function() {\n                        Galaxy.currHistoryPanel.loadCurrentHistory();\n                    });\n                }\n            }\n        },\n        {\n            html: _l(\"Delete Permanently\"),\n            purge: true,\n            anon: true,\n            func: function() {\n                if (\n                    Galaxy &&\n                    Galaxy.currHistoryPanel &&\n                    confirm(_l(\"Really delete the current history permanently? This cannot be undone.\"))\n                ) {\n                    Galaxy.currHistoryPanel.model.purge().done(function() {\n                        Galaxy.currHistoryPanel.loadCurrentHistory();\n                    });\n                }\n            }\n        },\n\n        {\n            html: _l(\"Dataset Actions\"),\n            header: true,\n            anon: true\n        },\n        {\n            html: _l(\"Copy Datasets\"),\n            href: \"dataset/copy_datasets\"\n        },\n        {\n            html: _l(\"Dataset Security\"),\n            func: function() {\n                if (Galaxy && Galaxy.currHistoryPanel && Galaxy.router) {\n                    Galaxy.router.push(\"/histories/permissions?id=\" + Galaxy.currHistoryPanel.model.id);\n                }\n            }\n        },\n        {\n            html: _l(\"Resume Paused Jobs\"),\n            href: \"history/resume_paused_jobs?current=True\",\n            anon: true\n        },\n        {\n            html: _l(\"Collapse Expanded Datasets\"),\n            func: function() {\n                if (Galaxy && Galaxy.currHistoryPanel) {\n                    Galaxy.currHistoryPanel.collapseAll();\n                }\n            }\n        },\n        {\n            html: _l(\"Unhide Hidden Datasets\"),\n            anon: true,\n            func: function() {\n                // TODO: Deprecate this functionality and replace with group dataset selector and action combination\n                if (Galaxy && Galaxy.currHistoryPanel && confirm(_l(\"Really unhide all hidden datasets?\"))) {\n                    $.post(Galaxy.root + \"history/adjust_hidden\", { user_action: \"unhide\" }, function() {\n                        Galaxy.currHistoryPanel.loadCurrentHistory();\n                    });\n                }\n            }\n        },\n        {\n            html: _l(\"Delete Hidden Datasets\"),\n            anon: true,\n            func: function() {\n                // TODO: Deprecate this functionality and replace with group dataset selector and action combination\n                if (Galaxy && Galaxy.currHistoryPanel && confirm(_l(\"Really delete all hidden datasets?\"))) {\n                    $.post(Galaxy.root + \"history/adjust_hidden\", { user_action: \"delete\" }, function() {\n                        Galaxy.currHistoryPanel.loadCurrentHistory();\n                    });\n                }\n            }\n        },\n        {\n            html: _l(\"Purge Deleted Datasets\"),\n            confirm: _l(\"Really delete all deleted datasets permanently? This cannot be undone.\"),\n            href: \"history/purge_deleted_datasets\",\n            purge: true,\n            anon: true\n        },\n\n        {\n            html: _l(\"Downloads\"),\n            header: true\n        },\n        {\n            html: _l(\"Export Tool Citations\"),\n            href: \"history/citations\",\n            anon: true\n        },\n        {\n            html: _l(\"Export History to File\"),\n            href: \"history/export_archive?preview=True\",\n            anon: true\n        },\n\n        {\n            html: _l(\"Other Actions\"),\n            header: true\n        },\n        {\n            html: _l(\"Import from File\"),\n            href: \"history/import_archive\"\n        }\n    ];\n\n    // Webhooks\n    Webhooks.add({\n        url: \"api/webhooks/history-menu/all\",\n        async: false, // (hypothetically) slows down the performance\n        callback: function(webhooks) {\n            var webhooks_menu = [];\n\n            $.each(webhooks.models, function(index, model) {\n                var webhook = model.toJSON();\n                if (webhook.activate) {\n                    webhooks_menu.push({\n                        html: _l(webhook.config.title),\n                        // func: function() {},\n                        anon: true\n                    });\n                }\n            });\n\n            if (webhooks_menu.length > 0) {\n                webhooks_menu.unshift({\n                    html: _l(\"Webhooks\"),\n                    header: true\n                });\n                $.merge(menu, webhooks_menu);\n            }\n        }\n    });\n\n    function buildMenu(isAnon, purgeAllowed, urlRoot) {\n        return _.clone(menu).filter(function(menuOption) {\n            if (isAnon && !menuOption.anon) {\n                return false;\n            }\n            if (!purgeAllowed && menuOption.purge) {\n                return false;\n            }\n\n            //TODO:?? hard-coded galaxy_main\n            if (menuOption.href) {\n                menuOption.href = urlRoot + menuOption.href;\n                menuOption.target = menuOption.target || \"galaxy_main\";\n            }\n\n            if (menuOption.confirm) {\n                menuOption.func = function() {\n                    if (confirm(menuOption.confirm)) {\n                        galaxy_main.location = menuOption.href;\n                    }\n                };\n            }\n            return true;\n        });\n    }\n\n    var create = function($button, options) {\n        options = options || {};\n        var isAnon = options.anonymous === undefined ? true : options.anonymous,\n            purgeAllowed = options.purgeAllowed || false,\n            menu = buildMenu(isAnon, purgeAllowed, Galaxy.root);\n        //console.debug( 'menu:', menu );\n        return new PopupMenu($button, menu);\n    };\n\n    // ============================================================================\n    return create;\n});\n"]}