{"version":3,"sources":["mvc/history/history-view.js"],"names":["_super","_listView2","default","ModelListPanel","HistoryView","extend","_logNamespace","HDAViewClass","_hdaLi2","HDAListItemView","HDCAViewClass","_hdcaLi2","HDCAListItemView","collectionClass","_historyContents2","HistoryContents","modelCollectionKey","tagName","className","prototype","emptyMsg","_localization2","noneFoundMsg","initialize","attributes","call","this","linkTarget","detailedFetchTimeoutId","_createDefaultCollection","history","model","freeModel","_clearDetailedFetchTimeout","clearTimeout","_setUpListeners","_this","error","xhr","options","msg","details","clearUpdateTimeout","loading-done","_","delay","contents","fetchCollectionCounts","view","view:attached","scrollTo","contentsOptions","_this2","silent","setModel","errorHandler","History","historyId","trigger","always","render","refreshContents","refresh","$","when","_setUpCollectionListeners","loadHistory","listenTo","collection","info","_toggleContentsLoadingIndicator","$emptyMessage","hide","_showLoadingIndicator","speed","callback","$el","$indicator","text","slideDown","isUndefined","fxSpeed","_hideLoadingIndicator","slideUp","remove","_buildNewRender","$newRender","_renderSelectButton","$where","multiselectActions","length","html","hideSelectors","find","$existing","_faIconButton2","faIcon","prependTo","$whereTo","get","active","$emptyMsg","empty","append","show","haveSearchDetails","views","title","$list","_renderEmptyMessage","searchFor","renderItems","models","_renderPagination","_renderSomeItems","toggle","_filterCollection","shouldPaginate","$paginationControls","templates","pagination","current","currentPage","tooltip","_this3","m","last","getLastPage","push","_filterItem","map","includeHidden","hidden","includeDeleted","_renderItemView$el","_getItemViewClass","contentType","_getItemViewOptions","TypeError","expanded","storage","isExpanded","id","hasUser","ownedByCurrUser","_setUpItemViewListeners","panel","v","addExpanded","removeExpanded","collapsed","clearExpanded","collapseAll","events","getSelectedModels","click > .controls .prev","click > .controls .next","change > .controls .pages","click .messages [class$=message]","_clickPrevPage","ev","fetchPrevPage","_clickNextPage","fetchNextPage","_changePageSelect","currentTarget","val","page","toggleShowDeleted","fetchPage","setIncludeDeleted","fetchCurrentPage","renderAll","undefined","setIncludeHidden","toggleShowHidden","_firstSearch","searchItems","log","searchInput","progressivelyFetchDetails","progress","response","limit","offset","_this4","inputSelector","clearSearch","done","_this5","status","readyState","isString","message","_errorModal2","errorModal","badGatewayErrorModal","ajaxErrorModal","clearMessages","$messages","children","fadeOut","scrollToHid","hid","scrollToItem","first","viewsWhereModel","ordinalIndicator","number","numStr","toString","controlsTemplate","_baseMvc2","wrapTemplate","el","controls","paginationTemplate","clone"],"mappings":"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","file":"../../../scripts/mvc/history/history-view.js","sourcesContent":["import LIST_VIEW from \"mvc/list/list-view\";\nimport HISTORY_MODEL from \"mvc/history/history-model\";\nimport HISTORY_CONTENTS from \"mvc/history/history-contents\";\nimport HISTORY_PREFS from \"mvc/history/history-preferences\";\nimport HDA_LI from \"mvc/history/hda-li\";\nimport HDCA_LI from \"mvc/history/hdca-li\";\nimport USER from \"mvc/user/user-model\";\nimport ERROR_MODAL from \"mvc/ui/error-modal\";\nimport faIconButton from \"ui/fa-icon-button\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport _l from \"utils/localization\";\nimport \"ui/search-input\";\n\n/* =============================================================================\nTODO:\n\n============================================================================= */\n/** @class  non-editable, read-only View/Controller for a history model.\n *  Allows:\n *      changing the loaded history\n *      displaying data, info, and download\n *      tracking history attrs: size, tags, annotations, name, etc.\n *  Does not allow:\n *      changing the name\n */\nvar _super = LIST_VIEW.ModelListPanel;\nvar HistoryView = _super.extend(\n    /** @lends HistoryView.prototype */ {\n        _logNamespace: \"history\",\n\n        /** class to use for constructing the HDA views */\n        HDAViewClass: HDA_LI.HDAListItemView,\n        /** class to use for constructing the HDCA views */\n        HDCAViewClass: HDCA_LI.HDCAListItemView,\n        /** class to used for constructing collection of sub-view models */\n        collectionClass: HISTORY_CONTENTS.HistoryContents,\n        /** key of attribute in model to assign to this.collection */\n        modelCollectionKey: \"contents\",\n\n        tagName: \"div\",\n        className: `${_super.prototype.className} history-panel`,\n\n        /** string to display when the collection is empty */\n        emptyMsg: _l(\"This history is empty\"),\n        /** displayed when no items match the search terms */\n        noneFoundMsg: _l(\"No matching datasets found\"),\n        /** string used for search placeholder */\n        searchPlaceholder: _l(\"search datasets\"),\n\n        /** @type {Number} ms to wait after history load to fetch/decorate hdcas with element_count */\n        FETCH_COLLECTION_COUNTS_DELAY: 2000,\n\n        // ......................................................................... SET UP\n        /** Set up the view, bind listeners.\n         *  @param {Object} attributes optional settings for the panel\n         */\n        initialize: function(attributes) {\n            _super.prototype.initialize.call(this, attributes);\n            // ---- instance vars\n            // control contents/behavior based on where (and in what context) the panel is being used\n            /** where should pages from links be displayed? (default to new tab/window) */\n            this.linkTarget = attributes.linkTarget || \"_blank\";\n\n            /** timeout id for detailed fetch of collection counts, etc... */\n            this.detailedFetchTimeoutId = null;\n        },\n\n        /** create and return a collection for when none is initially passed */\n        _createDefaultCollection: function() {\n            // override\n            return new this.collectionClass([], {\n                history: this.model\n            });\n        },\n\n        /** In this override, clear the update timer on the model */\n        freeModel: function() {\n            _super.prototype.freeModel.call(this);\n            if (this.model) {\n                this.model.clearUpdateTimeout();\n            }\n            this._clearDetailedFetchTimeout();\n            return this;\n        },\n\n        /** clear the timeout and the cached timeout id */\n        _clearDetailedFetchTimeout: function() {\n            if (this.detailedFetchTimeoutId) {\n                clearTimeout(this.detailedFetchTimeoutId);\n                this.detailedFetchTimeoutId = null;\n            }\n        },\n\n        /** create any event listeners for the panel\n         *  @fires: rendered:initial    on the first render\n         *  @fires: empty-history       when switching to a history with no contents or creating a new history\n         */\n        _setUpListeners: function() {\n            _super.prototype._setUpListeners.call(this);\n            this.on({\n                error: function(model, xhr, options, msg, details) {\n                    this.errorHandler(model, xhr, options, msg, details);\n                },\n                \"loading-done\": () => {\n                    // after the initial load, decorate with more time consuming fields (like HDCA element_counts)\n                    this.detailedFetchTimeoutId = _.delay(() => {\n                        this.detailedFetchTimeoutId = null;\n                        this.model.contents.fetchCollectionCounts();\n                    }, this.FETCH_COLLECTION_COUNTS_DELAY);\n                },\n                \"views:ready view:attached view:removed\": function(view) {\n                    this._renderSelectButton();\n                },\n                \"view:attached\": function(view) {\n                    this.scrollTo(0);\n                }\n            });\n            // this.on( 'all', function(){ console.debug( arguments ); });\n        },\n\n        // ------------------------------------------------------------------------ loading history/hda models\n        /** load the history with the given id then it's contents, sending ajax options to both */\n        loadHistory: function(historyId, options, contentsOptions) {\n            contentsOptions = _.extend(contentsOptions || { silent: true });\n            this.info(\"loadHistory:\", historyId, options, contentsOptions);\n            this.setModel(new HISTORY_MODEL.History({ id: historyId }));\n\n            contentsOptions.silent = true;\n            this.trigger(\"loading\");\n            return this.model.fetchWithContents(options, contentsOptions).always(() => {\n                this.render();\n                this.trigger(\"loading-done\");\n            });\n        },\n\n        /** convenience alias to the model. Updates the item list only (not the history) */\n        refreshContents: function(options) {\n            if (this.model) {\n                return this.model.refresh(options);\n            }\n            // may have callbacks - so return an empty promise\n            return $.when();\n        },\n\n        /** Override to reset web storage when the id changes (since it needs the id) */\n        _setUpCollectionListeners: function() {\n            _super.prototype._setUpCollectionListeners.call(this);\n            return this.listenTo(this.collection, {\n                // 'all' : function(){ console.log( this.collection + ':', arguments ); },\n                \"fetching-more\": function() {\n                    this._toggleContentsLoadingIndicator(true);\n                    this.$emptyMessage().hide();\n                },\n                \"fetching-more-done\": function() {\n                    this._toggleContentsLoadingIndicator(false);\n                }\n            });\n        },\n\n        // ------------------------------------------------------------------------ panel rendering\n        /** hide the $el and display a loading indicator (in the $el's parent) when loading new data */\n        _showLoadingIndicator: function(msg, speed, callback) {\n            var $indicator = $('<div class=\"loading-indicator\"/>');\n            this.$el.html($indicator.text(msg).slideDown(!_.isUndefined(speed) ? speed : this.fxSpeed));\n        },\n\n        /** hide the loading indicator */\n        _hideLoadingIndicator: function(speed) {\n            // make speed a bit slower to compensate for slow rendering of up to 500 contents\n            this.$(\".loading-indicator\").slideUp(!_.isUndefined(speed) ? speed : this.fxSpeed + 200, function() {\n                $(this).remove();\n            });\n        },\n\n        /** In this override, add a btn to toggle the selectors */\n        _buildNewRender: function() {\n            var $newRender = _super.prototype._buildNewRender.call(this);\n            this._renderSelectButton($newRender);\n            return $newRender;\n        },\n\n        /** button for starting select mode */\n        _renderSelectButton: function($where) {\n            $where = $where || this.$el;\n            // do not render selector option if no actions\n            if (!this.multiselectActions().length) {\n                return null;\n            }\n            // do not render (and remove even) if nothing to select\n            if (!this.views.length) {\n                this.hideSelectors();\n                $where.find(\".controls .actions .show-selectors-btn\").remove();\n                return null;\n            }\n            // don't bother rendering if there's one already\n            var $existing = $where.find(\".controls .actions .show-selectors-btn\");\n            if ($existing.length) {\n                return $existing;\n            }\n\n            return faIconButton({\n                title: _l(\"Operations on multiple datasets\"),\n                classes: \"show-selectors-btn\",\n                faIcon: \"fa-check-square-o\"\n            }).prependTo($where.find(\".controls .actions\"));\n        },\n\n        /** override to avoid showing intial empty message using contents_active */\n        _renderEmptyMessage: function($whereTo) {\n            var $emptyMsg = this.$emptyMessage($whereTo);\n            var empty = this.model.get(\"contents_active\").active <= 0;\n            if (empty) {\n                return $emptyMsg\n                    .empty()\n                    .append(this.emptyMsg)\n                    .show();\n            } else if (this.searchFor && this.model.contents.haveSearchDetails() && !this.views.length) {\n                return $emptyMsg\n                    .empty()\n                    .append(this.noneFoundMsg)\n                    .show();\n            }\n            $emptyMsg.hide();\n            return $();\n        },\n\n        /** the scroll container for this panel - can be $el, $el.parent(), or grandparent depending on context */\n        $scrollContainer: function($where) {\n            // override or set via attributes.$scrollContainer\n            return this.$list($where);\n        },\n\n        // ------------------------------------------------------------------------ subviews\n        _toggleContentsLoadingIndicator: function(show) {\n            if (!show) {\n                this.$list()\n                    .find(\".contents-loading-indicator\")\n                    .remove();\n            } else {\n                this.$list().html(\n                    '<div class=\"contents-loading-indicator\">' + '<span class=\"fa fa-2x fa-spinner fa-spin\"/></div>'\n                );\n            }\n        },\n\n        /** override to render pagination also */\n        renderItems: function($whereTo) {\n            // console.log( this + '.renderItems-----------------', new Date() );\n            $whereTo = $whereTo || this.$el;\n            var $list = this.$list($whereTo);\n\n            // TODO: bootstrap hack to remove orphaned tooltips\n            $(\".tooltip\").remove();\n\n            $list.empty();\n            this.views = [];\n\n            var models = this._filterCollection();\n            if (models.length) {\n                this._renderPagination($whereTo);\n                this.views = this._renderSomeItems(models, $list);\n            } else {\n                // TODO: consolidate with _renderPagination above by (???) passing in models/length?\n                $whereTo.find(\"> .controls .list-pagination\").empty();\n            }\n            this._renderEmptyMessage($whereTo).toggle(!models.length);\n\n            this.trigger(\"views:ready\", this.views);\n            return this.views;\n        },\n\n        /** render pagination controls if not searching and contents says we're paginating */\n        _renderPagination: function($whereTo) {\n            var $paginationControls = $whereTo.find(\"> .controls .list-pagination\");\n            if (this.searchFor || !this.model.contents.shouldPaginate()) return $paginationControls.empty();\n\n            $paginationControls.html(\n                this.templates.pagination(\n                    {\n                        // pagination is 1-based for the user\n                        current: this.model.contents.currentPage + 1,\n                        last: this.model.contents.getLastPage() + 1\n                    },\n                    this\n                )\n            );\n            $paginationControls.find(\"select.pages\").tooltip();\n            return $paginationControls;\n        },\n\n        /** render a subset of the entire collection (client-side pagination) */\n        _renderSomeItems: function(models, $list) {\n            var views = [];\n            $list.append(\n                models.map(m => {\n                    var view = this._createItemView(m);\n                    views.push(view);\n                    return this._renderItemView$el(view);\n                })\n            );\n            return views;\n        },\n\n        // ------------------------------------------------------------------------ sub-views\n        /** in this override, check if the contents would also display based on includeDeleted/hidden */\n        _filterItem: function(model) {\n            var contents = this.model.contents;\n            return (\n                (contents.includeHidden || !model.hidden()) &&\n                (contents.includeDeleted || !model.isDeletedOrPurged()) &&\n                _super.prototype._filterItem.call(this, model)\n            );\n        },\n\n        /** In this override, since history contents are mixed,\n         *      get the appropo view class based on history_content_type\n         */\n        _getItemViewClass: function(model) {\n            var contentType = model.get(\"history_content_type\");\n            switch (contentType) {\n                case \"dataset\":\n                    return this.HDAViewClass;\n                case \"dataset_collection\":\n                    return this.HDCAViewClass;\n            }\n            throw new TypeError(`Unknown history_content_type: ${contentType}`);\n        },\n\n        /** in this override, add a linktarget, and expand if id is in web storage */\n        _getItemViewOptions: function(model) {\n            var options = _super.prototype._getItemViewOptions.call(this, model);\n            return _.extend(options, {\n                linkTarget: this.linkTarget,\n                expanded: this.model.contents.storage.isExpanded(model.id),\n                hasUser: this.model.ownedByCurrUser()\n            });\n        },\n\n        /** In this override, add/remove expanded/collapsed model ids to/from web storage */\n        _setUpItemViewListeners: function(view) {\n            var panel = this;\n            _super.prototype._setUpItemViewListeners.call(panel, view);\n            //TODO: send from content view: this.model.collection.storage.addExpanded\n            // maintain a list of items whose bodies are expanded\n            return panel.listenTo(view, {\n                expanded: function(v) {\n                    panel.model.contents.storage.addExpanded(v.model);\n                },\n                collapsed: function(v) {\n                    panel.model.contents.storage.removeExpanded(v.model);\n                }\n            });\n        },\n\n        /** override to remove expandedIds from webstorage */\n        collapseAll: function() {\n            this.model.contents.storage.clearExpanded();\n            _super.prototype.collapseAll.call(this);\n        },\n\n        // ------------------------------------------------------------------------ selection\n        /** Override to correctly set the historyId of the new collection */\n        getSelectedModels: function() {\n            var collection = _super.prototype.getSelectedModels.call(this);\n            collection.historyId = this.collection.historyId;\n            return collection;\n        },\n\n        // ------------------------------------------------------------------------ panel events\n        /** event map */\n        events: _.extend(_.clone(_super.prototype.events), {\n            \"click .show-selectors-btn\": \"toggleSelectors\",\n            \"click > .controls .prev\": \"_clickPrevPage\",\n            \"click > .controls .next\": \"_clickNextPage\",\n            \"change > .controls .pages\": \"_changePageSelect\",\n            // allow (error) messages to be clicked away\n            \"click .messages [class$=message]\": \"clearMessages\"\n        }),\n\n        _clickPrevPage: function(ev) {\n            this.model.clearUpdateTimeout();\n            this.model.contents.fetchPrevPage();\n        },\n\n        _clickNextPage: function(ev) {\n            this.model.clearUpdateTimeout();\n            this.model.contents.fetchNextPage();\n        },\n\n        _changePageSelect: function(ev) {\n            this.model.clearUpdateTimeout();\n            var page = $(ev.currentTarget).val();\n            this.model.contents.fetchPage(page);\n        },\n\n        /** Toggle and store the deleted visibility and re-render items\n         * @returns {Boolean} new setting\n         */\n        toggleShowDeleted: function(show, options) {\n            show = show !== undefined ? show : !this.model.contents.includeDeleted;\n            var contents = this.model.contents;\n            contents.setIncludeDeleted(show, options);\n            this.trigger(\"show-deleted\", show);\n\n            contents.fetchCurrentPage({ renderAll: true });\n            return show;\n        },\n\n        /** Toggle and store whether to render explicity hidden contents\n         * @returns {Boolean} new setting\n         */\n        toggleShowHidden: function(show, store, options) {\n            // console.log( 'toggleShowHidden', show, store );\n            show = show !== undefined ? show : !this.model.contents.includeHidden;\n            var contents = this.model.contents;\n            contents.setIncludeHidden(show, options);\n            this.trigger(\"show-hidden\", show);\n\n            contents.fetchCurrentPage({ renderAll: true });\n            return show;\n        },\n\n        /** On the first search, if there are no details - load them, then search */\n        _firstSearch: function(searchFor) {\n            var inputSelector = \"> .controls .search-input\";\n            this.log(\"onFirstSearch\", searchFor);\n\n            // if the contents already have enough details to search, search and return now\n            if (this.model.contents.haveSearchDetails()) {\n                this.searchItems(searchFor);\n                return;\n            }\n\n            // otherwise, load the details progressively here\n            this.$(inputSelector).searchInput(\"toggle-loading\");\n            // set this now so that only results will show during progress\n            this.searchFor = searchFor;\n            var xhr = this.model.contents\n                .progressivelyFetchDetails({ silent: true })\n                .progress((response, limit, offset) => {\n                    this.renderItems();\n                    this.trigger(\"search:loading-progress\", limit, offset);\n                })\n                .always(() => {\n                    this.$el.find(inputSelector).searchInput(\"toggle-loading\");\n                })\n                .done(() => {\n                    this.searchItems(searchFor, \"force\");\n                });\n        },\n\n        /** clear the search filters and show all views that are normally shown */\n        clearSearch: function(searchFor) {\n            if (!this.searchFor) return this;\n            //this.log( 'onSearchClear', this );\n            this.searchFor = \"\";\n            this.trigger(\"search:clear\", this);\n            this.$(\"> .controls .search-query\").val(\"\");\n            // NOTE: silent + render prevents collection update event with merge only\n            // - which causes an empty page due to event handler above\n            this.model.contents.fetchCurrentPage({ silent: true }).done(() => {\n                this.renderItems();\n            });\n            return this;\n        },\n\n        // ........................................................................ error handling\n        /** Event handler for errors (from the panel, the history, or the history's contents)\n         *  Alternately use two strings for model and xhr to use custom message and title (respectively)\n         *  @param {Model or View} model    the (Backbone) source of the error\n         *  @param {XMLHTTPRequest} xhr     any ajax obj. assoc. with the error\n         *  @param {Object} options         the options map commonly used with bbone ajax\n         */\n        errorHandler: function(model, xhr, options) {\n            //TODO: to mixin or base model\n            // interrupted ajax or no connection\n            if (xhr && xhr.status === 0 && xhr.readyState === 0) {\n                // return ERROR_MODAL.offlineErrorModal();\n                // fail silently\n                return;\n            }\n            // otherwise, leave something to report in the console\n            this.error(model, xhr, options);\n            // and feedback to a modal\n            // if sent two strings (and possibly details as 'options'), use those as message and title\n            if (_.isString(model) && _.isString(xhr)) {\n                var message = model;\n                var title = xhr;\n                return ERROR_MODAL.errorModal(message, title, options);\n            }\n            // bad gateway\n            // TODO: possibly to global handler\n            if (xhr && xhr.status === 502) {\n                return ERROR_MODAL.badGatewayErrorModal();\n            }\n            return ERROR_MODAL.ajaxErrorModal(model, xhr, options);\n        },\n\n        /** Remove all messages from the panel. */\n        clearMessages: function(ev) {\n            var $target = !_.isUndefined(ev) ? $(ev.currentTarget) : this.$messages().children('[class$=\"message\"]');\n            $target.fadeOut(this.fxSpeed, function() {\n                $(this).remove();\n            });\n            return this;\n        },\n\n        // ........................................................................ scrolling\n        /** Scrolls the panel to show the content sub-view with the given hid.\n         *  @param {Integer} hid    the hid of item to scroll into view\n         *  @returns {HistoryView} the panel\n         */\n        scrollToHid: function(hid) {\n            return this.scrollToItem(_.first(this.viewsWhereModel({ hid: hid })));\n        },\n\n        // ........................................................................ misc\n        /** utility for adding -st, -nd, -rd, -th to numbers */\n        ordinalIndicator: function(number) {\n            var numStr = `${number}`;\n            switch (numStr.charAt(numStr.length - 1)) {\n                case \"1\":\n                    return `${numStr}st`;\n                case \"2\":\n                    return `${numStr}nd`;\n                case \"3\":\n                    return `${numStr}rd`;\n                default:\n                    return `${numStr}th`;\n            }\n        },\n\n        /** Return a string rep of the history */\n        toString: function() {\n            return `HistoryView(${this.model ? this.model.get(\"name\") : \"\"})`;\n        }\n    }\n);\n\n//------------------------------------------------------------------------------ TEMPLATES\nHistoryView.prototype.templates = (() => {\n    var mainTemplate = () =>\n        `<div>\n            <div class=\"controls\"></div>\n            <ul class=\"list-items\"></ul>\n            <div class=\"empty-message infomessagesmall\"></div>',\n        </div>`;\n\n    var controlsTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<div class=\"controls\">',\n            '<div class=\"title\">',\n            '<div class=\"name\"><%- history.name %></div>',\n            \"</div>\",\n            '<div class=\"subtitle\"></div>',\n            '<div class=\"history-size\"><%- history.nice_size %></div>',\n\n            '<div class=\"actions\"></div>',\n\n            '<div class=\"messages\">',\n            \"<% if( history.deleted && history.purged ){ %>\",\n            '<div class=\"deleted-msg warningmessagesmall\">',\n            _l(\"This history has been purged and deleted\"),\n            \"</div>\",\n            \"<% } else if( history.deleted ){ %>\",\n            '<div class=\"deleted-msg warningmessagesmall\">',\n            _l(\"This history has been deleted\"),\n            \"</div>\",\n            \"<% } else if( history.purged ){ %>\",\n            '<div class=\"deleted-msg warningmessagesmall\">',\n            _l(\"This history has been purged\"),\n            \"</div>\",\n            \"<% } %>\",\n\n            \"<% if( history.message ){ %>\",\n            // should already be localized\n            '<div class=\"<%= history.message.level || \"info\" %>messagesmall\">',\n            \"<%= history.message.text %>\",\n            \"</div>\",\n            \"<% } %>\",\n            \"</div>\",\n\n            // add tags and annotations\n            '<div class=\"tags-display\"></div>',\n            '<div class=\"annotation-display\"></div>',\n\n            '<div class=\"search\">',\n            '<div class=\"search-input\"></div>',\n            \"</div>\",\n\n            '<div class=\"list-actions\">',\n            '<div class=\"btn-group\">',\n            '<button class=\"select-all btn btn-default\"',\n            'data-mode=\"select\">',\n            _l(\"All\"),\n            \"</button>\",\n            '<button class=\"deselect-all btn btn-default\"',\n            'data-mode=\"select\">',\n            _l(\"None\"),\n            \"</button>\",\n            \"</div>\",\n            '<div class=\"list-action-menu btn-group\">',\n            \"</div>\",\n            \"</div>\",\n            '<div class=\"list-pagination form-inline\"></div>',\n            \"</div>\"\n        ],\n        \"history\"\n    );\n\n    var paginationTemplate = BASE_MVC.wrapTemplate(\n        [\n            '<button class=\"prev\" <%- pages.current === 1 ? \"disabled\" : \"\" %>>previous</button>',\n            '<select class=\"pages form-control\" ',\n            'title=\"',\n            _l(\"Click to open and select a page. Begin typing a page number to select it\"),\n            '\">',\n            \"<% _.range( 1, pages.last + 1 ).forEach( function( i ){ %>\",\n            '<option value=\"<%- i - 1 %>\" <%- i === pages.current ? \"selected\" : \"\" %>>',\n            \"<%- view.ordinalIndicator( i ) %> of <%- pages.last %> pages\",\n            \"</option>\",\n            \"<% }); %>\",\n            \"</select>\",\n            '<button class=\"next\" <%- pages.current === pages.last ? \"disabled\" : \"\" %>>next</button>'\n        ],\n        \"pages\"\n    );\n\n    return _.extend(_.clone(_super.prototype.templates), {\n        el: mainTemplate,\n        controls: controlsTemplate,\n        pagination: paginationTemplate\n    });\n})();\n\n//==============================================================================\nexport default {\n    HistoryView: HistoryView\n};\n"]}