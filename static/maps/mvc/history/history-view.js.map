{"version":3,"sources":["mvc/history/history-view.js"],"names":["define","LIST_VIEW","_super","HistoryView","HISTORY_PREFS","_logNamespace","HDCA_LI","USER","HDAViewClass","faIconButton","HDCAViewClass","_l","FETCH_COLLECTION_COUNTS_DELAY","extend","initialize","HDA_LI","HDAListItemView","HDCAListItemView","collectionClass","HISTORY_CONTENTS","HistoryContents","modelCollectionKey","tagName","detailedFetchTimeoutId","className","prototype","_createDefaultCollection","noneFoundMsg","searchPlaceholder","_clearDetailedFetchTimeout","call","this","attributes","linkTarget","history","model","freeModel","errorHandler","self","clearUpdateTimeout","_renderSelectButton","clearTimeout","_setUpListeners","loadHistory","options","contentsOptions","error","historyId","xhr","msg","details","loading-done","silent","fetchWithContents","contents","fetchCollectionCounts","views:ready view:attached view:removed","view","scrollTo","_setUpCollectionListeners","collection","info","_toggleContentsLoadingIndicator","id","trigger","always","render","_showLoadingIndicator","$indicator","$","slideDown","when","listenTo","fetching-more","$newRender","_buildNewRender","speed","callback","$el","html","text","_","isUndefined","fxSpeed","_hideLoadingIndicator","slideUp","$existing","remove","faIcon","prependTo","$emptyMsg","$emptyMessage","$where","empty","multiselectActions","length","views","hide","hideSelectors","find","$scrollContainer","classes","$list","_renderEmptyMessage","$whereTo","get","active","append","emptyMsg","searchFor","haveSearchDetails","_renderPagination","show","$paginationControls","renderItems","_renderSomeItems","push","models","_filterCollection","includeHidden","toggle","shouldPaginate","TypeError","pagination","current","currentPage","last","hasUser","ownedByCurrUser","tooltip","_setUpItemViewListeners","panel","map","m","_createItemView","_renderItemView$el","addExpanded","_filterItem","collapseAll","storage","clearExpanded","hidden","includeDeleted","isDeletedOrPurged","_getItemViewClass","contentType","clone","_clickPrevPage","_getItemViewOptions","fetchPrevPage","expanded","isExpanded","_changePageSelect","page","ev","currentTarget","v","toggleShowDeleted","undefined","fetchCurrentPage","toggleShowHidden","getSelectedModels","renderAll","events","click > .controls .prev","click > .controls .next","change > .controls .pages","_clickNextPage","fetchNextPage","val","fetchPage","setIncludeDeleted","store","setIncludeHidden","_firstSearch","status","log","searchItems","title","searchInput","progressivelyFetchDetails","response","limit","offset","ERROR_MODAL","done","clearSearch","readyState","templates","isString","mainTemplate","BASE_MVC","wrapTemplate","errorModal","message","badGatewayErrorModal","ajaxErrorModal","paginationTemplate","controlsTemplate","fadeOut","scrollToHid","hid","scrollToItem","first","viewsWhereModel","ordinalIndicator","number","numStr","charAt","toString","el","controls"],"mappings":"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","file":"../../../scripts/mvc/history/history-view.js","sourcesContent":["define(\n    [\n        \"mvc/list/list-view\",\n        \"mvc/history/history-model\",\n        \"mvc/history/history-contents\",\n        \"mvc/history/history-preferences\",\n        \"mvc/history/hda-li\",\n        \"mvc/history/hdca-li\",\n        \"mvc/user/user-model\",\n        \"mvc/ui/error-modal\",\n        \"ui/fa-icon-button\",\n        \"mvc/base-mvc\",\n        \"utils/localization\",\n        \"ui/search-input\"\n    ],\n    function(\n        LIST_VIEW,\n        HISTORY_MODEL,\n        HISTORY_CONTENTS,\n        HISTORY_PREFS,\n        HDA_LI,\n        HDCA_LI,\n        USER,\n        ERROR_MODAL,\n        faIconButton,\n        BASE_MVC,\n        _l\n    ) {\n        \"use strict\";\n\n        /* =============================================================================\nTODO:\n\n============================================================================= */\n        /** @class  non-editable, read-only View/Controller for a history model.\n *  Allows:\n *      changing the loaded history\n *      displaying data, info, and download\n *      tracking history attrs: size, tags, annotations, name, etc.\n *  Does not allow:\n *      changing the name\n */\n        var _super = LIST_VIEW.ModelListPanel;\n        var HistoryView = _super.extend(\n            /** @lends HistoryView.prototype */ {\n                _logNamespace: \"history\",\n\n                /** class to use for constructing the HDA views */\n                HDAViewClass: HDA_LI.HDAListItemView,\n                /** class to use for constructing the HDCA views */\n                HDCAViewClass: HDCA_LI.HDCAListItemView,\n                /** class to used for constructing collection of sub-view models */\n                collectionClass: HISTORY_CONTENTS.HistoryContents,\n                /** key of attribute in model to assign to this.collection */\n                modelCollectionKey: \"contents\",\n\n                tagName: \"div\",\n                className: _super.prototype.className + \" history-panel\",\n\n                /** string to display when the collection is empty */\n                emptyMsg: _l(\"This history is empty\"),\n                /** displayed when no items match the search terms */\n                noneFoundMsg: _l(\"No matching datasets found\"),\n                /** string used for search placeholder */\n                searchPlaceholder: _l(\"search datasets\"),\n\n                /** @type {Number} ms to wait after history load to fetch/decorate hdcas with element_count */\n                FETCH_COLLECTION_COUNTS_DELAY: 2000,\n\n                // ......................................................................... SET UP\n                /** Set up the view, bind listeners.\n     *  @param {Object} attributes optional settings for the panel\n     */\n                initialize: function(attributes) {\n                    _super.prototype.initialize.call(this, attributes);\n                    // ---- instance vars\n                    // control contents/behavior based on where (and in what context) the panel is being used\n                    /** where should pages from links be displayed? (default to new tab/window) */\n                    this.linkTarget = attributes.linkTarget || \"_blank\";\n\n                    /** timeout id for detailed fetch of collection counts, etc... */\n                    this.detailedFetchTimeoutId = null;\n                },\n\n                /** create and return a collection for when none is initially passed */\n                _createDefaultCollection: function() {\n                    // override\n                    return new this.collectionClass([], {\n                        history: this.model\n                    });\n                },\n\n                /** In this override, clear the update timer on the model */\n                freeModel: function() {\n                    _super.prototype.freeModel.call(this);\n                    if (this.model) {\n                        this.model.clearUpdateTimeout();\n                    }\n                    this._clearDetailedFetchTimeout();\n                    return this;\n                },\n\n                /** clear the timeout and the cached timeout id */\n                _clearDetailedFetchTimeout: function() {\n                    if (this.detailedFetchTimeoutId) {\n                        clearTimeout(this.detailedFetchTimeoutId);\n                        this.detailedFetchTimeoutId = null;\n                    }\n                },\n\n                /** create any event listeners for the panel\n     *  @fires: rendered:initial    on the first render\n     *  @fires: empty-history       when switching to a history with no contents or creating a new history\n     */\n                _setUpListeners: function() {\n                    _super.prototype._setUpListeners.call(this);\n                    this.on({\n                        error: function(model, xhr, options, msg, details) {\n                            this.errorHandler(model, xhr, options, msg, details);\n                        },\n                        \"loading-done\": function() {\n                            var self = this;\n                            // after the initial load, decorate with more time consuming fields (like HDCA element_counts)\n                            self.detailedFetchTimeoutId = _.delay(function() {\n                                self.detailedFetchTimeoutId = null;\n                                self.model.contents.fetchCollectionCounts();\n                            }, self.FETCH_COLLECTION_COUNTS_DELAY);\n                        },\n                        \"views:ready view:attached view:removed\": function(view) {\n                            this._renderSelectButton();\n                        },\n                        \"view:attached\": function(view) {\n                            this.scrollTo(0);\n                        }\n                    });\n                    // this.on( 'all', function(){ console.debug( arguments ); });\n                },\n\n                // ------------------------------------------------------------------------ loading history/hda models\n                /** load the history with the given id then it's contents, sending ajax options to both */\n                loadHistory: function(historyId, options, contentsOptions) {\n                    contentsOptions = _.extend(contentsOptions || { silent: true });\n                    this.info(\"loadHistory:\", historyId, options, contentsOptions);\n                    var self = this;\n                    self.setModel(new HISTORY_MODEL.History({ id: historyId }));\n\n                    contentsOptions.silent = true;\n                    self.trigger(\"loading\");\n                    return self.model.fetchWithContents(options, contentsOptions).always(function() {\n                        self.render();\n                        self.trigger(\"loading-done\");\n                    });\n                },\n\n                /** convenience alias to the model. Updates the item list only (not the history) */\n                refreshContents: function(options) {\n                    if (this.model) {\n                        return this.model.refresh(options);\n                    }\n                    // may have callbacks - so return an empty promise\n                    return $.when();\n                },\n\n                /** Override to reset web storage when the id changes (since it needs the id) */\n                _setUpCollectionListeners: function() {\n                    _super.prototype._setUpCollectionListeners.call(this);\n                    return this.listenTo(this.collection, {\n                        // 'all' : function(){ console.log( this.collection + ':', arguments ); },\n                        \"fetching-more\": function() {\n                            this._toggleContentsLoadingIndicator(true);\n                            this.$emptyMessage().hide();\n                        },\n                        \"fetching-more-done\": function() {\n                            this._toggleContentsLoadingIndicator(false);\n                        }\n                    });\n                },\n\n                // ------------------------------------------------------------------------ panel rendering\n                /** hide the $el and display a loading indicator (in the $el's parent) when loading new data */\n                _showLoadingIndicator: function(msg, speed, callback) {\n                    var $indicator = $('<div class=\"loading-indicator\"/>');\n                    this.$el.html($indicator.text(msg).slideDown(!_.isUndefined(speed) ? speed : this.fxSpeed));\n                },\n\n                /** hide the loading indicator */\n                _hideLoadingIndicator: function(speed) {\n                    // make speed a bit slower to compensate for slow rendering of up to 500 contents\n                    this.$(\".loading-indicator\").slideUp(\n                        !_.isUndefined(speed) ? speed : this.fxSpeed + 200,\n                        function() {\n                            $(this).remove();\n                        }\n                    );\n                },\n\n                /** In this override, add a btn to toggle the selectors */\n                _buildNewRender: function() {\n                    var $newRender = _super.prototype._buildNewRender.call(this);\n                    this._renderSelectButton($newRender);\n                    return $newRender;\n                },\n\n                /** button for starting select mode */\n                _renderSelectButton: function($where) {\n                    $where = $where || this.$el;\n                    // do not render selector option if no actions\n                    if (!this.multiselectActions().length) {\n                        return null;\n                    }\n                    // do not render (and remove even) if nothing to select\n                    if (!this.views.length) {\n                        this.hideSelectors();\n                        $where.find(\".controls .actions .show-selectors-btn\").remove();\n                        return null;\n                    }\n                    // don't bother rendering if there's one already\n                    var $existing = $where.find(\".controls .actions .show-selectors-btn\");\n                    if ($existing.length) {\n                        return $existing;\n                    }\n\n                    return faIconButton({\n                        title: _l(\"Operations on multiple datasets\"),\n                        classes: \"show-selectors-btn\",\n                        faIcon: \"fa-check-square-o\"\n                    }).prependTo($where.find(\".controls .actions\"));\n                },\n\n                /** override to avoid showing intial empty message using contents_active */\n                _renderEmptyMessage: function($whereTo) {\n                    var self = this;\n                    var $emptyMsg = self.$emptyMessage($whereTo);\n\n                    var empty = self.model.get(\"contents_active\").active <= 0;\n                    if (empty) {\n                        return $emptyMsg\n                            .empty()\n                            .append(self.emptyMsg)\n                            .show();\n                    } else if (self.searchFor && self.model.contents.haveSearchDetails() && !self.views.length) {\n                        return $emptyMsg\n                            .empty()\n                            .append(self.noneFoundMsg)\n                            .show();\n                    }\n                    $emptyMsg.hide();\n                    return $();\n                },\n\n                /** the scroll container for this panel - can be $el, $el.parent(), or grandparent depending on context */\n                $scrollContainer: function($where) {\n                    // override or set via attributes.$scrollContainer\n                    return this.$list($where);\n                },\n\n                // ------------------------------------------------------------------------ subviews\n                _toggleContentsLoadingIndicator: function(show) {\n                    if (!show) {\n                        this.$list()\n                            .find(\".contents-loading-indicator\")\n                            .remove();\n                    } else {\n                        this.$list().html(\n                            '<div class=\"contents-loading-indicator\">' +\n                                '<span class=\"fa fa-2x fa-spinner fa-spin\"/></div>'\n                        );\n                    }\n                },\n\n                /** override to render pagination also */\n                renderItems: function($whereTo) {\n                    // console.log( this + '.renderItems-----------------', new Date() );\n                    $whereTo = $whereTo || this.$el;\n                    var self = this;\n                    var $list = self.$list($whereTo);\n\n                    // TODO: bootstrap hack to remove orphaned tooltips\n                    $(\".tooltip\").remove();\n\n                    $list.empty();\n                    self.views = [];\n\n                    var models = self._filterCollection();\n                    if (models.length) {\n                        self._renderPagination($whereTo);\n                        self.views = self._renderSomeItems(models, $list);\n                    } else {\n                        // TODO: consolidate with _renderPagination above by (???) passing in models/length?\n                        $whereTo.find(\"> .controls .list-pagination\").empty();\n                    }\n                    self._renderEmptyMessage($whereTo).toggle(!models.length);\n\n                    self.trigger(\"views:ready\", self.views);\n                    return self.views;\n                },\n\n                /** render pagination controls if not searching and contents says we're paginating */\n                _renderPagination: function($whereTo) {\n                    var $paginationControls = $whereTo.find(\"> .controls .list-pagination\");\n                    if (this.searchFor || !this.model.contents.shouldPaginate()) return $paginationControls.empty();\n\n                    $paginationControls.html(\n                        this.templates.pagination(\n                            {\n                                // pagination is 1-based for the user\n                                current: this.model.contents.currentPage + 1,\n                                last: this.model.contents.getLastPage() + 1\n                            },\n                            this\n                        )\n                    );\n                    $paginationControls.find(\"select.pages\").tooltip();\n                    return $paginationControls;\n                },\n\n                /** render a subset of the entire collection (client-side pagination) */\n                _renderSomeItems: function(models, $list) {\n                    var self = this;\n                    var views = [];\n                    $list.append(\n                        models.map(function(m) {\n                            var view = self._createItemView(m);\n                            views.push(view);\n                            return self._renderItemView$el(view);\n                        })\n                    );\n                    return views;\n                },\n\n                // ------------------------------------------------------------------------ sub-views\n                /** in this override, check if the contents would also display based on includeDeleted/hidden */\n                _filterItem: function(model) {\n                    var self = this;\n                    var contents = self.model.contents;\n                    return (\n                        (contents.includeHidden || !model.hidden()) &&\n                        (contents.includeDeleted || !model.isDeletedOrPurged()) &&\n                        _super.prototype._filterItem.call(self, model)\n                    );\n                },\n\n                /** In this override, since history contents are mixed,\n     *      get the appropo view class based on history_content_type\n     */\n                _getItemViewClass: function(model) {\n                    var contentType = model.get(\"history_content_type\");\n                    switch (contentType) {\n                        case \"dataset\":\n                            return this.HDAViewClass;\n                        case \"dataset_collection\":\n                            return this.HDCAViewClass;\n                    }\n                    throw new TypeError(\"Unknown history_content_type: \" + contentType);\n                },\n\n                /** in this override, add a linktarget, and expand if id is in web storage */\n                _getItemViewOptions: function(model) {\n                    var options = _super.prototype._getItemViewOptions.call(this, model);\n                    return _.extend(options, {\n                        linkTarget: this.linkTarget,\n                        expanded: this.model.contents.storage.isExpanded(model.id),\n                        hasUser: this.model.ownedByCurrUser()\n                    });\n                },\n\n                /** In this override, add/remove expanded/collapsed model ids to/from web storage */\n                _setUpItemViewListeners: function(view) {\n                    var panel = this;\n                    _super.prototype._setUpItemViewListeners.call(panel, view);\n                    //TODO: send from content view: this.model.collection.storage.addExpanded\n                    // maintain a list of items whose bodies are expanded\n                    return panel.listenTo(view, {\n                        expanded: function(v) {\n                            panel.model.contents.storage.addExpanded(v.model);\n                        },\n                        collapsed: function(v) {\n                            panel.model.contents.storage.removeExpanded(v.model);\n                        }\n                    });\n                },\n\n                /** override to remove expandedIds from webstorage */\n                collapseAll: function() {\n                    this.model.contents.storage.clearExpanded();\n                    _super.prototype.collapseAll.call(this);\n                },\n\n                // ------------------------------------------------------------------------ selection\n                /** Override to correctly set the historyId of the new collection */\n                getSelectedModels: function() {\n                    var collection = _super.prototype.getSelectedModels.call(this);\n                    collection.historyId = this.collection.historyId;\n                    return collection;\n                },\n\n                // ------------------------------------------------------------------------ panel events\n                /** event map */\n                events: _.extend(_.clone(_super.prototype.events), {\n                    \"click .show-selectors-btn\": \"toggleSelectors\",\n                    \"click > .controls .prev\": \"_clickPrevPage\",\n                    \"click > .controls .next\": \"_clickNextPage\",\n                    \"change > .controls .pages\": \"_changePageSelect\",\n                    // allow (error) messages to be clicked away\n                    \"click .messages [class$=message]\": \"clearMessages\"\n                }),\n\n                _clickPrevPage: function(ev) {\n                    this.model.clearUpdateTimeout();\n                    this.model.contents.fetchPrevPage();\n                },\n\n                _clickNextPage: function(ev) {\n                    this.model.clearUpdateTimeout();\n                    this.model.contents.fetchNextPage();\n                },\n\n                _changePageSelect: function(ev) {\n                    this.model.clearUpdateTimeout();\n                    var page = $(ev.currentTarget).val();\n                    this.model.contents.fetchPage(page);\n                },\n\n                /** Toggle and store the deleted visibility and re-render items\n     * @returns {Boolean} new setting\n     */\n                toggleShowDeleted: function(show, options) {\n                    show = show !== undefined ? show : !this.model.contents.includeDeleted;\n                    var self = this;\n                    var contents = self.model.contents;\n                    contents.setIncludeDeleted(show, options);\n                    self.trigger(\"show-deleted\", show);\n\n                    contents.fetchCurrentPage({ renderAll: true });\n                    return show;\n                },\n\n                /** Toggle and store whether to render explicity hidden contents\n     * @returns {Boolean} new setting\n     */\n                toggleShowHidden: function(show, store, options) {\n                    // console.log( 'toggleShowHidden', show, store );\n                    show = show !== undefined ? show : !this.model.contents.includeHidden;\n                    var self = this;\n                    var contents = self.model.contents;\n                    contents.setIncludeHidden(show, options);\n                    self.trigger(\"show-hidden\", show);\n\n                    contents.fetchCurrentPage({ renderAll: true });\n                    return show;\n                },\n\n                /** On the first search, if there are no details - load them, then search */\n                _firstSearch: function(searchFor) {\n                    var self = this;\n                    var inputSelector = \"> .controls .search-input\";\n                    this.log(\"onFirstSearch\", searchFor);\n\n                    // if the contents already have enough details to search, search and return now\n                    if (self.model.contents.haveSearchDetails()) {\n                        self.searchItems(searchFor);\n                        return;\n                    }\n\n                    // otherwise, load the details progressively here\n                    self.$(inputSelector).searchInput(\"toggle-loading\");\n                    // set this now so that only results will show during progress\n                    self.searchFor = searchFor;\n                    var xhr = self.model.contents\n                        .progressivelyFetchDetails({ silent: true })\n                        .progress(function(response, limit, offset) {\n                            self.renderItems();\n                            self.trigger(\"search:loading-progress\", limit, offset);\n                        })\n                        .always(function() {\n                            self.$el.find(inputSelector).searchInput(\"toggle-loading\");\n                        })\n                        .done(function() {\n                            self.searchItems(searchFor, \"force\");\n                        });\n                },\n\n                /** clear the search filters and show all views that are normally shown */\n                clearSearch: function(searchFor) {\n                    var self = this;\n                    if (!self.searchFor) return self;\n                    //self.log( 'onSearchClear', self );\n                    self.searchFor = \"\";\n                    self.trigger(\"search:clear\", self);\n                    self.$(\"> .controls .search-query\").val(\"\");\n                    // NOTE: silent + render prevents collection update event with merge only\n                    // - which causes an empty page due to event handler above\n                    self.model.contents.fetchCurrentPage({ silent: true }).done(function() {\n                        self.renderItems();\n                    });\n                    return self;\n                },\n\n                // ........................................................................ error handling\n                /** Event handler for errors (from the panel, the history, or the history's contents)\n     *  Alternately use two strings for model and xhr to use custom message and title (respectively)\n     *  @param {Model or View} model    the (Backbone) source of the error\n     *  @param {XMLHTTPRequest} xhr     any ajax obj. assoc. with the error\n     *  @param {Object} options         the options map commonly used with bbone ajax\n     */\n                errorHandler: function(model, xhr, options) {\n                    //TODO: to mixin or base model\n                    // interrupted ajax or no connection\n                    if (xhr && xhr.status === 0 && xhr.readyState === 0) {\n                        // return ERROR_MODAL.offlineErrorModal();\n                        // fail silently\n                        return;\n                    }\n                    // otherwise, leave something to report in the console\n                    this.error(model, xhr, options);\n                    // and feedback to a modal\n                    // if sent two strings (and possibly details as 'options'), use those as message and title\n                    if (_.isString(model) && _.isString(xhr)) {\n                        var message = model;\n                        var title = xhr;\n                        return ERROR_MODAL.errorModal(message, title, options);\n                    }\n                    // bad gateway\n                    // TODO: possibly to global handler\n                    if (xhr && xhr.status === 502) {\n                        return ERROR_MODAL.badGatewayErrorModal();\n                    }\n                    return ERROR_MODAL.ajaxErrorModal(model, xhr, options);\n                },\n\n                /** Remove all messages from the panel. */\n                clearMessages: function(ev) {\n                    var $target = !_.isUndefined(ev)\n                        ? $(ev.currentTarget)\n                        : this.$messages().children('[class$=\"message\"]');\n                    $target.fadeOut(this.fxSpeed, function() {\n                        $(this).remove();\n                    });\n                    return this;\n                },\n\n                // ........................................................................ scrolling\n                /** Scrolls the panel to show the content sub-view with the given hid.\n     *  @param {Integer} hid    the hid of item to scroll into view\n     *  @returns {HistoryView} the panel\n     */\n                scrollToHid: function(hid) {\n                    return this.scrollToItem(_.first(this.viewsWhereModel({ hid: hid })));\n                },\n\n                // ........................................................................ misc\n                /** utility for adding -st, -nd, -rd, -th to numbers */\n                ordinalIndicator: function(number) {\n                    var numStr = number + \"\";\n                    switch (numStr.charAt(numStr.length - 1)) {\n                        case \"1\":\n                            return numStr + \"st\";\n                        case \"2\":\n                            return numStr + \"nd\";\n                        case \"3\":\n                            return numStr + \"rd\";\n                        default:\n                            return numStr + \"th\";\n                    }\n                },\n\n                /** Return a string rep of the history */\n                toString: function() {\n                    return \"HistoryView(\" + (this.model ? this.model.get(\"name\") : \"\") + \")\";\n                }\n            }\n        );\n\n        //------------------------------------------------------------------------------ TEMPLATES\n        HistoryView.prototype.templates = (function() {\n            var mainTemplate = BASE_MVC.wrapTemplate([\n                // temp container\n                \"<div>\",\n                '<div class=\"controls\"></div>',\n                '<ul class=\"list-items\"></ul>',\n                '<div class=\"empty-message infomessagesmall\"></div>',\n                \"</div>\"\n            ]);\n\n            var controlsTemplate = BASE_MVC.wrapTemplate(\n                [\n                    '<div class=\"controls\">',\n                    '<div class=\"title\">',\n                    '<div class=\"name\"><%- history.name %></div>',\n                    \"</div>\",\n                    '<div class=\"subtitle\"></div>',\n                    '<div class=\"history-size\"><%- history.nice_size %></div>',\n\n                    '<div class=\"actions\"></div>',\n\n                    '<div class=\"messages\">',\n                    \"<% if( history.deleted && history.purged ){ %>\",\n                    '<div class=\"deleted-msg warningmessagesmall\">',\n                    _l(\"This history has been purged and deleted\"),\n                    \"</div>\",\n                    \"<% } else if( history.deleted ){ %>\",\n                    '<div class=\"deleted-msg warningmessagesmall\">',\n                    _l(\"This history has been deleted\"),\n                    \"</div>\",\n                    \"<% } else if( history.purged ){ %>\",\n                    '<div class=\"deleted-msg warningmessagesmall\">',\n                    _l(\"This history has been purged\"),\n                    \"</div>\",\n                    \"<% } %>\",\n\n                    \"<% if( history.message ){ %>\",\n                    // should already be localized\n                    '<div class=\"<%= history.message.level || \"info\" %>messagesmall\">',\n                    \"<%= history.message.text %>\",\n                    \"</div>\",\n                    \"<% } %>\",\n                    \"</div>\",\n\n                    // add tags and annotations\n                    '<div class=\"tags-display\"></div>',\n                    '<div class=\"annotation-display\"></div>',\n\n                    '<div class=\"search\">',\n                    '<div class=\"search-input\"></div>',\n                    \"</div>\",\n\n                    '<div class=\"list-actions\">',\n                    '<div class=\"btn-group\">',\n                    '<button class=\"select-all btn btn-default\"',\n                    'data-mode=\"select\">',\n                    _l(\"All\"),\n                    \"</button>\",\n                    '<button class=\"deselect-all btn btn-default\"',\n                    'data-mode=\"select\">',\n                    _l(\"None\"),\n                    \"</button>\",\n                    \"</div>\",\n                    '<div class=\"list-action-menu btn-group\">',\n                    \"</div>\",\n                    \"</div>\",\n                    '<div class=\"list-pagination form-inline\"></div>',\n                    \"</div>\"\n                ],\n                \"history\"\n            );\n\n            var paginationTemplate = BASE_MVC.wrapTemplate(\n                [\n                    '<button class=\"prev\" <%- pages.current === 1 ? \"disabled\" : \"\" %>>previous</button>',\n                    '<select class=\"pages form-control\" ',\n                    'title=\"',\n                    _l(\"Click to open and select a page. Begin typing a page number to select it\"),\n                    '\">',\n                    \"<% _.range( 1, pages.last + 1 ).forEach( function( i ){ %>\",\n                    '<option value=\"<%- i - 1 %>\" <%- i === pages.current ? \"selected\" : \"\" %>>',\n                    \"<%- view.ordinalIndicator( i ) %> of <%- pages.last %> pages\",\n                    \"</option>\",\n                    \"<% }); %>\",\n                    \"</select>\",\n                    '<button class=\"next\" <%- pages.current === pages.last ? \"disabled\" : \"\" %>>next</button>'\n                ],\n                \"pages\"\n            );\n\n            return _.extend(_.clone(_super.prototype.templates), {\n                el: mainTemplate,\n                controls: controlsTemplate,\n                pagination: paginationTemplate\n            });\n        })();\n\n        //==============================================================================\n        return {\n            HistoryView: HistoryView\n        };\n    }\n);\n"]}