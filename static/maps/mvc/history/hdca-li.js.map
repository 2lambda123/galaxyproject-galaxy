{"version":3,"sources":["mvc/history/hdca-li.js"],"names":["_super","_collectionLi2","default","DCListItemView","HDCAListItemView","extend","className","prototype","_setUpListeners","call","this","listenTo","model","change:tags change:populated change:visible","options","render","collectionType","get","_collectionView2","ListCollectionView","PairCollectionView","ListOfPairsCollectionView","TypeError","_swapNewRender","$newRender","_states2","OK","RUNNING","$el","addClass","state","toString","templates","warnings","hidden","collection","_localization2","_","titleBar","hid","escape","name"],"mappings":"uXAQIA,EAASC,EAAAC,QAAMC,eAGfC,EAAmBJ,EAAOK,QAEtBC,UAAcN,EAAOO,UAAUD,UAA/B,mBAGAE,gBAAiB,WACbR,EAAOO,UAAUC,gBAAgBC,KAAKC,MACtCA,KAAKC,SAASD,KAAKE,OACfC,8CAA+C,SAASD,EAAOE,GAC3DJ,KAAKK,aAZrBf,sBAAS,WACb,IAAAgB,EAAAN,KAAAE,MAAAK,IAAA,mBAmBY,OAAQD,GAjBhBZ,IAAAA,OACA,OAAAc,EAAAhB,QAAAiB,mBACIb,IAAcN,SAmBF,OAAOkB,EAAAhB,QAAQkB,mBAjB3B,IAAA,cACAZ,OAAiBU,EAAAhB,QAAAmB,0BACbrB,IAAOO,YACFI,OAASO,EAAAhB,QAAKU,0BAEX,MAAA,IAAAU,UAAA,4BAAAN,IAsBZO,eAAgB,SAASC,GAjBzBxB,EAAAO,UAAAgB,eAAAd,KAAAC,KAAAc,GAEI,IAAIR,EAAAA,KAAAA,MAAiBC,IAAKL,aAA1Ba,EAAAvB,QAAAwB,GAAoCD,EAAAvB,QAAAyB,QAIhC,OAFAjB,KAAAkB,IAAKC,SAAL,SAAAC,GAEApB,KAAKkB,KAKDG,SAAA,WAER,MAAA,qBAVArB,KAAAE,MAAA,GAAAF,KAAAE,MAAA,cAUA,OAMAR,EAAAG,UAAAyB,UAAA,WACA,IAAAC,EAAIH,EAAAA,UAAclB,EAALL,UAAeyB,UAAeC,UAC3CC,OAAA,SAAAC,GACAA,EAASN,UAET,EAAAO,EAAAlC,SAAA,sCAcyD,OAAjEmC,EAAAhC,UAAAL,EAAAO,UAAAyB,WAsBIC,SAAUA,EAddK,SAjBc,SAAAH,GAAA,MAAA,0KA3ClBA,EAAAI,IA2CkB,+CAuBmBF,EAAEG,OAAOL,EAAWM,MAvBvC,sFASVR,EAAAA,QAAa5B,gBAAkBE,GATrB,4BAVN,cAyCJ0B,iBAAUA","file":"../../../scripts/mvc/history/hdca-li.js","sourcesContent":["import STATES from \"mvc/dataset/states\";\nimport DC_LI from \"mvc/collection/collection-li\";\nimport DC_VIEW from \"mvc/collection/collection-view\";\nimport BASE_MVC from \"mvc/base-mvc\";\nimport HISTORY_ITEM_LI from \"mvc/history/history-item-li\";\nimport _l from \"utils/localization\";\n\n//==============================================================================\nvar _super = DC_LI.DCListItemView;\n/** @class Read only view for HistoryDatasetCollectionAssociation (a dataset collection inside a history).\n */\nvar HDCAListItemView = _super.extend(\n    /** @lends HDCAListItemView.prototype */ {\n        className: `${_super.prototype.className} history-content`,\n\n        /** event listeners */\n        _setUpListeners: function() {\n            _super.prototype._setUpListeners.call(this);\n            this.listenTo(this.model, {\n                \"change:tags change:populated change:visible\": function(model, options) {\n                    this.render();\n                }\n            });\n        },\n\n        /** Override to provide the proper collections panels as the foldout */\n        _getFoldoutPanelClass: function() {\n            var collectionType = this.model.get(\"collection_type\");\n            switch (collectionType) {\n                case \"list\":\n                    return DC_VIEW.ListCollectionView;\n                case \"paired\":\n                    return DC_VIEW.PairCollectionView;\n                case \"list:paired\":\n                    return DC_VIEW.ListOfPairsCollectionView;\n                case \"list:list\":\n                    return DC_VIEW.ListOfListsCollectionView;\n            }\n            throw new TypeError(`Unknown collection_type: ${collectionType}`);\n        },\n\n        /** In this override, add the state as a class for use with state-based CSS */\n        _swapNewRender: function($newRender) {\n            _super.prototype._swapNewRender.call(this, $newRender);\n            //TODO: model currently has no state\n            var state = !this.model.get(\"populated\") ? STATES.RUNNING : STATES.OK;\n            //if( this.model.has( 'state' ) ){\n            this.$el.addClass(`state-${state}`);\n            //}\n            return this.$el;\n        },\n\n        // ......................................................................... misc\n        /** String representation */\n        toString: function() {\n            var modelString = this.model ? `${this.model}` : \"(no model)\";\n            return `HDCAListItemView(${modelString})`;\n        }\n    }\n);\n\n/** underscore templates */\nHDCAListItemView.prototype.templates = (() => {\n    var warnings = _.extend({}, _super.prototype.templates.warnings, {\n        hidden: collection => {\n            collection.visible\n                ? \"\"\n                : `<div class=\"hidden-msg warningmessagesmall\">${_l(\"This collection has been hidden\")}</div>`;\n        }\n    });\n\n    // could steal this from hda-base (or use mixed content)\n    var titleBarTemplate = collection => `\n        <div class=\"title-bar clear\" tabindex=\"0\">\n            <span class=\"state-icon\"></span>\n            <div class=\"title\">\n                <span class=\"hid\">${collection.hid}</span>\n                <span class=\"name\">${_.escape(collection.name)}</span>\n            </div>\n            <div class=\"subtitle\"></div>\n            ${HISTORY_ITEM_LI.nametagTemplate(collection)}\n        </div>\n    `;\n\n    return _.extend({}, _super.prototype.templates, {\n        warnings: warnings,\n        titleBar: titleBarTemplate\n    });\n})();\n\n//==============================================================================\nexport default {\n    HDCAListItemView: HDCAListItemView\n};\n"]}