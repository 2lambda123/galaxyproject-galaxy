{"version":3,"sources":["mvc/history/history-view-edit-current.js"],"names":["define","HISTORY_MODEL","BASE_MVC","_l","defaults","SessionStorageModel","extend","tagsEditorShown","annotationEditorShown","toString","JSON","stringify","this","toJSON","HistoryViewPrefs","storageKey","_super","HISTORY_VIEW_EDIT","HistoryViewEdit","CurrentHistoryView","foldoutStyle","prototype","className","emptyMsg","HDCAViewClass","initialize","attributes","preferences","id","_","pick","join","currentContentId","_setUpListeners","keys","call","panelStack","url","Galaxy","switchToHistory","user","isAnonymous","panel","when","on","loadHistory","historyId","set","loadCurrentHistory","$","root","trigger","setModel","log","model","checkForUpdates","createNewHistory","_setUpModelListeners","listenTo","render","collection","change:nice_size change:size","arguments","change:id","once","_setUpCollectionListeners","newState","oldState","$el","is","storage","includeHidden","_setUpBehaviors","$where","_renderQuotaMessage","$newRender","debounce","scrollTop","$whereTo","$scrollContainer","off","_debouncedScrollCaptureHandler","_buildNewRender","find","prependTo","_renderAnnotation","annotationEditor","toggle","_renderTags","get","_swapNewRender","tagsEditor","delay","pos","scrollTo","hidden","_attachItems","_setCurrentContentById","_expandDrilldownPanel","_collapseDrilldownPanel","addItemView","options","view","_setUpItemViewListeners","push","drilldown","expanded:drilldown","v","$controls","add","appendTo","setCurrentContent","$list","removeClass","addClass","$toolMenu","parent","viewFromModelId","listenToGalaxy","hide","parentName","delegateEvents","useToURLRegexMap","rerun","show_params","events","clone","click .uploader-link","ev","upload","show","click .get-data-link","click","galaxy","center-frame:load","data","pathToMatch","fullpath","hdaId","quotaMeter","showQuotaMessage","edit","report_error","$target","isUndefined","currentTarget","use","remove","fxSpeed","match","regex","center-panel:load","connectToQuotaMeter","$msg","slideUp","hideQuotaMessage","isOverQuota","confirm","clearMessages","self","contents","renderItems","$messages","children","not","jQuery","visible","deleted","unhideHidden","done","deleteHidden","_filterAndUpdate","purged","templates","quotaMsgTemplate","wrapTemplate","quotaMsg"],"mappings":"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","file":"../../../scripts/mvc/history/history-view-edit-current.js","sourcesContent":["define([\"mvc/history/history-model\", \"mvc/history/history-view-edit\", \"mvc/base-mvc\", \"utils/localization\"], function(\n    HISTORY_MODEL,\n    HISTORY_VIEW_EDIT,\n    BASE_MVC,\n    _l\n) {\n    \"use strict\";\n\n    // ============================================================================\n    /** session storage for history panel preferences (and to maintain state)\n */\n    var HistoryViewPrefs = BASE_MVC.SessionStorageModel.extend(\n        /** @lends HistoryViewPrefs.prototype */ {\n            defaults: {\n                /** should the tags editor be shown or hidden initially? */\n                tagsEditorShown: false,\n                /** should the annotation editor be shown or hidden initially? */\n                annotationEditorShown: false,\n                ///** what is the currently focused content (dataset or collection) in the current history?\n                // *      (the history panel will highlight and scroll to the focused content view)\n                // */\n                //focusedContentId : null\n                /** Current scroll position */\n                scrollPosition: 0\n            },\n            toString: function() {\n                return \"HistoryViewPrefs(\" + JSON.stringify(this.toJSON()) + \")\";\n            }\n        }\n    );\n\n    /** key string to store panel prefs (made accessible on class so you can access sessionStorage directly) */\n    HistoryViewPrefs.storageKey = function storageKey() {\n        return \"history-panel\";\n    };\n\n    /* =============================================================================\nTODO:\n\n============================================================================= */\n    var _super = HISTORY_VIEW_EDIT.HistoryViewEdit;\n    // used in root/index.mako\n    /** @class View/Controller for the user's current history model as used in the history\n *      panel (current right hand panel) of the analysis page.\n *\n *  The only history panel that:\n *      will poll for updates.\n *      displays datasets in reverse hid order.\n */\n    var CurrentHistoryView = _super.extend(\n        /** @lends CurrentHistoryView.prototype */ {\n            className: _super.prototype.className + \" current-history-panel\",\n\n            /** override to use drilldown (and not foldout) for how collections are displayed */\n            HDCAViewClass: _super.prototype.HDCAViewClass.extend({\n                foldoutStyle: \"drilldown\"\n            }),\n\n            emptyMsg: [\n                _l(\"This history is empty\"),\n                \". \",\n                _l(\"You can \"),\n                '<a class=\"uploader-link\" href=\"javascript:void(0)\">',\n                _l(\"load your own data\"),\n                \"</a>\",\n                _l(\" or \"),\n                '<a class=\"get-data-link\" href=\"javascript:void(0)\">',\n                _l(\"get data from an external source\"),\n                \"</a>\"\n            ].join(\"\"),\n\n            // ......................................................................... SET UP\n            /** Set up the view, set up storage, bind listeners to HistoryContents events */\n            initialize: function(attributes) {\n                attributes = attributes || {};\n\n                // ---- persistent preferences\n                /** maintain state / preferences over page loads */\n                this.preferences = new HistoryViewPrefs(\n                    _.extend(\n                        {\n                            id: HistoryViewPrefs.storageKey()\n                        },\n                        _.pick(attributes, _.keys(HistoryViewPrefs.prototype.defaults))\n                    )\n                );\n\n                _super.prototype.initialize.call(this, attributes);\n\n                /** sub-views that will overlay this panel (collections) */\n                this.panelStack = [];\n\n                /** id of currently focused content */\n                this.currentContentId = attributes.currentContentId || null;\n                //NOTE: purposely not sent to localstorage since panel recreation roughly lines up with a reset of this value\n            },\n\n            /** Override to cache the current scroll position with a listener */\n            _setUpListeners: function() {\n                _super.prototype._setUpListeners.call(this);\n\n                var panel = this;\n                // reset scroll position when there's a new history\n                this.on(\"new-model\", function() {\n                    panel.preferences.set(\"scrollPosition\", 0);\n                });\n            },\n\n            // ------------------------------------------------------------------------ loading history/item models\n            // TODO: next three more appropriate moved to the app level\n            /** (re-)loads the user's current history & contents w/ details */\n            loadCurrentHistory: function() {\n                return this.loadHistory(null, {\n                    url: Galaxy.root + \"history/current_history_json\"\n                });\n            },\n\n            /** loads a history & contents w/ details and makes them the current history */\n            switchToHistory: function(historyId, attributes) {\n                if (Galaxy.user.isAnonymous()) {\n                    this.trigger(\"error\", _l(\"You must be logged in to switch histories\"), _l(\"Anonymous user\"));\n                    return $.when();\n                }\n                return this.loadHistory(historyId, {\n                    url: Galaxy.root + \"history/set_as_current?id=\" + historyId\n                });\n            },\n\n            /** creates a new history on the server and sets it as the user's current history */\n            createNewHistory: function(attributes) {\n                if (Galaxy.user.isAnonymous()) {\n                    this.trigger(\"error\", _l(\"You must be logged in to create histories\"), _l(\"Anonymous user\"));\n                    return $.when();\n                }\n                return this.loadHistory(null, {\n                    url: Galaxy.root + \"history/create_new_current\"\n                });\n            },\n\n            /** release/free/shutdown old models and set up panel for new models */\n            setModel: function(model, attributes, render) {\n                _super.prototype.setModel.call(this, model, attributes, render);\n                if (this.model && this.model.id) {\n                    this.log(\"checking for updates\");\n                    this.model.checkForUpdates();\n                }\n                return this;\n            },\n\n            // ------------------------------------------------------------------------ history/content event listening\n            /** listening for history events */\n            _setUpModelListeners: function() {\n                _super.prototype._setUpModelListeners.call(this);\n                // re-broadcast any model change events so that listeners don't have to re-bind to each history\n                return this.listenTo(this.model, {\n                    \"change:nice_size change:size\": function() {\n                        this.trigger(\"history-size-change\", this, this.model, arguments);\n                    },\n                    \"change:id\": function() {\n                        this.once(\"loading-done\", function() {\n                            this.model.checkForUpdates();\n                        });\n                    }\n                });\n            },\n\n            /** listening for collection events */\n            _setUpCollectionListeners: function() {\n                _super.prototype._setUpCollectionListeners.call(this);\n                // if a hidden item is created (gen. by a workflow), moves thru the updater to the ready state,\n                //  then: remove it from the collection if the panel is set to NOT show hidden datasets\n                this.listenTo(this.collection, \"state:ready\", function(model, newState, oldState) {\n                    if (!model.get(\"visible\") && !this.collection.storage.includeHidden()) {\n                        this.removeItemView(model);\n                    }\n                });\n            },\n\n            // ------------------------------------------------------------------------ panel rendering\n            /** override to add a handler to capture the scroll position when the parent scrolls */\n            _setUpBehaviors: function($where) {\n                $where = $where || this.$el;\n                // console.log( '_setUpBehaviors', this.$scrollContainer( $where ).get(0), this.$list( $where ) );\n                // we need to call this in _setUpBehaviors which is called after render since the $el\n                // may not be attached to $el.parent and $scrollContainer() may not work\n                var panel = this;\n                _super.prototype._setUpBehaviors.call(panel, $where);\n\n                // cache the handler to remove and re-add so we don't pile up the handlers\n                if (!this._debouncedScrollCaptureHandler) {\n                    this._debouncedScrollCaptureHandler = _.debounce(function scrollCapture() {\n                        // cache the scroll position (only if visible)\n                        if (panel.$el.is(\":visible\")) {\n                            panel.preferences.set(\"scrollPosition\", $(this).scrollTop());\n                        }\n                    }, 40);\n                }\n\n                panel\n                    .$scrollContainer($where)\n                    .off(\"scroll\", this._debouncedScrollCaptureHandler)\n                    .on(\"scroll\", this._debouncedScrollCaptureHandler);\n                return panel;\n            },\n\n            /** In this override, handle null models and move the search input to the top */\n            _buildNewRender: function() {\n                if (!this.model) {\n                    return $();\n                }\n                var $newRender = _super.prototype._buildNewRender.call(this);\n                $newRender.find(\".search\").prependTo($newRender.find(\"> .controls\"));\n                this._renderQuotaMessage($newRender);\n                return $newRender;\n            },\n\n            /** render the message displayed when a user is over quota and can't run jobs */\n            _renderQuotaMessage: function($whereTo) {\n                $whereTo = $whereTo || this.$el;\n                return $(this.templates.quotaMsg({}, this)).prependTo($whereTo.find(\".messages\"));\n            },\n\n            /** In this override, get and set current panel preferences when editor is used */\n            _renderTags: function($where) {\n                var panel = this;\n                // render tags and show/hide based on preferences\n                _super.prototype._renderTags.call(panel, $where);\n                if (panel.preferences.get(\"tagsEditorShown\")) {\n                    panel.tagsEditor.toggle(true);\n                }\n                // store preference when shown or hidden\n                panel.listenTo(panel.tagsEditor, \"hiddenUntilActivated:shown hiddenUntilActivated:hidden\", function(\n                    tagsEditor\n                ) {\n                    panel.preferences.set(\"tagsEditorShown\", tagsEditor.hidden);\n                });\n            },\n\n            /** In this override, get and set current panel preferences when editor is used */\n            _renderAnnotation: function($where) {\n                var panel = this;\n                // render annotation and show/hide based on preferences\n                _super.prototype._renderAnnotation.call(panel, $where);\n                if (panel.preferences.get(\"annotationEditorShown\")) {\n                    panel.annotationEditor.toggle(true);\n                }\n                // store preference when shown or hidden\n                panel.listenTo(\n                    panel.annotationEditor,\n                    \"hiddenUntilActivated:shown hiddenUntilActivated:hidden\",\n                    function(annotationEditor) {\n                        panel.preferences.set(\"annotationEditorShown\", annotationEditor.hidden);\n                    }\n                );\n            },\n\n            /** Override to scroll to cached position (in prefs) after swapping */\n            _swapNewRender: function($newRender) {\n                _super.prototype._swapNewRender.call(this, $newRender);\n                var panel = this;\n                _.delay(function() {\n                    var pos = panel.preferences.get(\"scrollPosition\");\n                    if (pos) {\n                        panel.scrollTo(pos, 0);\n                    }\n                }, 10);\n                //TODO: is this enough of a delay on larger histories?\n\n                return this;\n            },\n\n            // ------------------------------------------------------------------------ sub-views\n            /** Override to add the current-content highlight class to currentContentId's view */\n            _attachItems: function($whereTo) {\n                _super.prototype._attachItems.call(this, $whereTo);\n                var panel = this;\n                if (panel.currentContentId) {\n                    panel._setCurrentContentById(panel.currentContentId);\n                }\n                return this;\n            },\n\n            /** Override to remove any drill down panels */\n            addItemView: function(model, collection, options) {\n                var view = _super.prototype.addItemView.call(this, model, collection, options);\n                if (!view) {\n                    return view;\n                }\n                if (this.panelStack.length) {\n                    return this._collapseDrilldownPanel();\n                }\n                return view;\n            },\n\n            // ------------------------------------------------------------------------ collection sub-views\n            /** In this override, add/remove expanded/collapsed model ids to/from web storage */\n            _setUpItemViewListeners: function(view) {\n                var panel = this;\n                _super.prototype._setUpItemViewListeners.call(panel, view);\n                // use pub-sub to: handle drilldown expansion and collapse\n                return panel.listenTo(view, {\n                    \"expanded:drilldown\": function(v, drilldown) {\n                        this._expandDrilldownPanel(drilldown);\n                    },\n                    \"collapsed:drilldown\": function(v, drilldown) {\n                        this._collapseDrilldownPanel(drilldown);\n                    }\n                });\n            },\n\n            /** display 'current content': add a visible highlight and store the id of a content item */\n            setCurrentContent: function(view) {\n                this.$(\".history-content.current-content\").removeClass(\"current-content\");\n                if (view) {\n                    view.$el.addClass(\"current-content\");\n                    this.currentContentId = view.model.id;\n                } else {\n                    this.currentContentId = null;\n                }\n            },\n\n            /** find the view with the id and then call setCurrentContent on it */\n            _setCurrentContentById: function(id) {\n                var view = this.viewFromModelId(id) || null;\n                this.setCurrentContent(view);\n            },\n\n            /** Handle drill down by hiding this panels list and controls and showing the sub-panel */\n            _expandDrilldownPanel: function(drilldown) {\n                this.panelStack.push(drilldown);\n                // hide this panel's controls and list, set the name for back navigation, and attach to the $el\n                this.$controls()\n                    .add(this.$list())\n                    .hide();\n                drilldown.parentName = this.model.get(\"name\");\n                drilldown\n                    .delegateEvents()\n                    .render()\n                    .$el.appendTo(this.$el);\n            },\n\n            /** Handle drilldown close by freeing the panel and re-rendering this panel */\n            _collapseDrilldownPanel: function(drilldown) {\n                this.panelStack.pop();\n                //TODO: MEM: free the panel\n                this.$controls()\n                    .add(this.$list())\n                    .show();\n            },\n\n            // ........................................................................ panel events\n            /** event map */\n            events: _.extend(_.clone(_super.prototype.events), {\n                // the two links in the empty message\n                \"click .uploader-link\": function(ev) {\n                    Galaxy.upload.show(ev);\n                },\n                \"click .get-data-link\": function(ev) {\n                    var $toolMenu = $(\".toolMenuContainer\");\n                    $toolMenu.parent().scrollTop(0);\n                    $toolMenu.find('span:contains(\"Get Data\")').click();\n                }\n            }),\n\n            // ........................................................................ external objects/MVC\n            listenToGalaxy: function(galaxy) {\n                this.listenTo(galaxy, {\n                    // when the galaxy_main iframe is loaded with a new page,\n                    // compare the url to the following list and if there's a match\n                    // pull the id from url and indicate in the history view that\n                    // the dataset with that id is the 'current'ly active dataset\n                    \"center-frame:load\": function(data) {\n                        var pathToMatch = data.fullpath;\n                        var hdaId = null;\n                        var useToURLRegexMap = {\n                            display: /datasets\\/([a-f0-9]+)\\/display/,\n                            edit: /datasets\\/([a-f0-9]+)\\/edit/,\n                            report_error: /dataset\\/errors\\?id=([a-f0-9]+)/,\n                            rerun: /tool_runner\\/rerun\\?id=([a-f0-9]+)/,\n                            show_params: /datasets\\/([a-f0-9]+)\\/show_params/\n                            // no great way to do this here? (leave it in the dataset event handlers above?)\n                            // 'visualization' : 'visualization',\n                        };\n                        _.find(useToURLRegexMap, function(regex, use) {\n                            // grab the more specific match result (1), save, and use it as the find flag\n                            hdaId = _.result(pathToMatch.match(regex), 1);\n                            return hdaId;\n                        });\n                        // need to type mangle to go from web route to history contents\n                        this._setCurrentContentById(hdaId ? \"dataset-\" + hdaId : null);\n                    },\n                    // when the center panel is given a new view, clear the current indicator\n                    \"center-panel:load\": function(view) {\n                        this._setCurrentContentById();\n                    }\n                });\n            },\n\n            //TODO: remove quota meter from panel and remove this\n            /** add listeners to an external quota meter (mvc/user/user-quotameter.js) */\n            connectToQuotaMeter: function(quotaMeter) {\n                if (!quotaMeter) {\n                    return this;\n                }\n                // show/hide the 'over quota message' in the history when the meter tells it to\n                this.listenTo(quotaMeter, \"quota:over\", this.showQuotaMessage);\n                this.listenTo(quotaMeter, \"quota:under\", this.hideQuotaMessage);\n\n                // having to add this to handle re-render of hview while overquota (the above do not fire)\n                this.on(\"rendered rendered:initial\", function() {\n                    if (quotaMeter && quotaMeter.isOverQuota()) {\n                        this.showQuotaMessage();\n                    }\n                });\n                return this;\n            },\n\n            /** Override to preserve the quota message */\n            clearMessages: function(ev) {\n                var $target = !_.isUndefined(ev)\n                    ? $(ev.currentTarget)\n                    : this.$messages().children('[class$=\"message\"]');\n                $target = $target.not(\".quota-message\");\n                $target.fadeOut(this.fxSpeed, function() {\n                    $(this).remove();\n                });\n                return this;\n            },\n\n            /** Show the over quota message (which happens to be in the history panel).\n     */\n            showQuotaMessage: function() {\n                var $msg = this.$(\".quota-message\");\n                if ($msg.is(\":hidden\")) {\n                    $msg.slideDown(this.fxSpeed);\n                }\n            },\n\n            /** Hide the over quota message (which happens to be in the history panel).\n     */\n            hideQuotaMessage: function() {\n                var $msg = this.$(\".quota-message\");\n                if (!$msg.is(\":hidden\")) {\n                    $msg.slideUp(this.fxSpeed);\n                }\n            },\n\n            // ........................................................................ options menu\n            //TODO: remove to batch\n            /** unhide any hidden datasets */\n            unhideHidden: function() {\n                var self = this;\n                if (confirm(_l(\"Really unhide all hidden datasets?\"))) {\n                    // get all hidden, regardless of deleted/purged\n                    return self.model.contents\n                        ._filterAndUpdate({ visible: false, deleted: \"\", purged: \"\" }, { visible: true })\n                        .done(function() {\n                            // TODO: would be better to render these as they're unhidden instead of all at once\n                            if (!self.model.contents.includeHidden) {\n                                self.renderItems();\n                            }\n                        });\n                }\n                return jQuery.when();\n            },\n\n            /** delete any hidden datasets */\n            deleteHidden: function() {\n                var self = this;\n                if (confirm(_l(\"Really delete all hidden datasets?\"))) {\n                    return self.model.contents._filterAndUpdate(\n                        // get all hidden, regardless of deleted/purged\n                        { visible: false, deleted: \"\", purged: \"\" },\n                        // both delete *and* unhide them\n                        { deleted: true, visible: true }\n                    );\n                }\n                return jQuery.when();\n            },\n\n            /** Return a string rep of the history */\n            toString: function() {\n                return \"CurrentHistoryView(\" + (this.model ? this.model.get(\"name\") : \"\") + \")\";\n            }\n        }\n    );\n\n    //------------------------------------------------------------------------------ TEMPLATES\n    CurrentHistoryView.prototype.templates = (function() {\n        var quotaMsgTemplate = BASE_MVC.wrapTemplate(\n            [\n                '<div class=\"quota-message errormessage\">',\n                _l(\"You are over your disk quota\"),\n                \". \",\n                _l(\"Tool execution is on hold until your disk usage drops below your allocated quota\"),\n                \".\",\n                \"</div>\"\n            ],\n            \"history\"\n        );\n        return _.extend(_.clone(_super.prototype.templates), {\n            quotaMsg: quotaMsgTemplate\n        });\n    })();\n\n    //==============================================================================\n    return {\n        CurrentHistoryView: CurrentHistoryView\n    };\n});\n"]}