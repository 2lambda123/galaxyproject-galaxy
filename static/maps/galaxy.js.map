{"version":3,"sources":["galaxy.js"],"names":["define","_","Backbone","BASE_MVC","userModel","metricsLogger","addLogging","localize","GalaxyApp","options","bootstrapped","NAMESPACE_KEY","DEBUGGING_KEY","storageErr","extend","getItem","localDebugging","self","logger","_processOptions","_init","this","root","Events","params","session_csrf_token","_patchGalaxy","Galaxy","debug","config","_initConfig","_initLocale","window","_initLogger","loggerOptions","_initUser","_setUpListeners","user","patchExisting","prototype","defaultOptions","k","defaults","hasOwnProperty","patchWith","MetricsLogger","console","emit","consoleLevel","ALL","consoleNamespaceWhitelist","call","arguments","split","LoggableMixin","map","i","data","Array","slice","_l","userJSON","User","JSON","url","parse","err","lastAjax","location","href","debugging","setting","localStorage","removeItem","log","setItem","debuggingNamespaces","namespaces","newSettings","userEmail","toString","get"],"mappings":"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","file":"../scripts/galaxy.js","sourcesContent":["define(\n    [\n        \"libs/underscore\",\n        \"libs/backbone\",\n        \"mvc/base-mvc\",\n        \"mvc/user/user-model\",\n        \"utils/metrics-logger\",\n        \"utils/add-logging\",\n        \"utils/localization\"\n    ],\n    function(_, Backbone, BASE_MVC, userModel, metricsLogger, addLogging, localize) {\n        // TODO: move into a singleton pattern and have dependents import Galaxy\n        // ============================================================================\n        /** Base galaxy client-side application.\n *      Iniitializes:\n *          logger      : the logger/metrics-logger\n *          localize    : the string localizer\n *          config      : the current configuration (any k/v in\n *              galaxy.ini available from the configuration API)\n *          user        : the current user (as a mvc/user/user-model)\n */\n        function GalaxyApp(options, bootstrapped) {\n            var self = this;\n            return self._init(options || {}, bootstrapped || {});\n        }\n\n        // add logging shortcuts for this object\n        addLogging(GalaxyApp, \"GalaxyApp\");\n\n        // a debug flag can be set via local storage and made available during script/page loading\n        var DEBUGGING_KEY = \"galaxy:debug\",\n            NAMESPACE_KEY = DEBUGGING_KEY + \":namespaces\",\n            localDebugging = false;\n        try {\n            localDebugging = localStorage.getItem(DEBUGGING_KEY) == \"true\";\n        } catch (storageErr) {\n            console.log(localize(\"localStorage not available for debug flag retrieval\"));\n        }\n\n        /** initalize options and sub-components */\n        GalaxyApp.prototype._init = function __init(options, bootstrapped) {\n            var self = this;\n            _.extend(self, Backbone.Events);\n            if (localDebugging) {\n                self.logger = console;\n                console.debug(\"debugging galaxy:\", \"options:\", options, \"bootstrapped:\", bootstrapped);\n            }\n\n            self._processOptions(options);\n\n            // add root and url parameters\n            self.root = options.root || \"/\";\n            self.params = options.params || {};\n            self.session_csrf_token = options.session_csrf_token || null;\n\n            self._initConfig(options.config || {});\n            self._patchGalaxy(window.Galaxy);\n\n            self._initLogger(self.options.loggerOptions || {});\n            // at this point, either logging or not and namespaces are enabled - chat it up\n            self.debug(\"GalaxyApp.options: \", self.options);\n            self.debug(\"GalaxyApp.config: \", self.config);\n            self.debug(\"GalaxyApp.logger: \", self.logger);\n\n            self._initLocale();\n            self.debug(\"GalaxyApp.localize: \", self.localize);\n\n            self.config = options.config || {};\n            self.debug(\"GalaxyApp.config: \", self.config);\n\n            self._initUser(options.user || {});\n            self.debug(\"GalaxyApp.user: \", self.user);\n\n            self._setUpListeners();\n            self.trigger(\"ready\", self);\n\n            return self;\n        };\n\n        /** default options */\n        GalaxyApp.prototype.defaultOptions = {\n            /** monkey patch attributes from existing window.Galaxy object? */\n            patchExisting: true,\n            /** root url of this app */\n            root: \"/\",\n            session_csrf_token: null\n        };\n\n        /** filter to options present in defaultOptions (and default to them) */\n        GalaxyApp.prototype._processOptions = function _processOptions(options) {\n            var self = this,\n                defaults = self.defaultOptions;\n\n            self.options = {};\n            for (var k in defaults) {\n                if (defaults.hasOwnProperty(k)) {\n                    self.options[k] = options.hasOwnProperty(k) ? options[k] : defaults[k];\n                }\n            }\n            return self;\n        };\n\n        /** parse the config and any extra info derived from it */\n        GalaxyApp.prototype._initConfig = function _initConfig(config) {\n            var self = this;\n            self.config = config;\n\n            // give precendence to localdebugging for this setting\n            self.config.debug = localDebugging || self.config.debug;\n\n            return self;\n        };\n\n        /** add an option from options if the key matches an option in defaultOptions */\n        GalaxyApp.prototype._patchGalaxy = function _patchGalaxy(patchWith) {\n            var self = this;\n            // in case req or plain script tag order has created a prev. version of the Galaxy obj...\n            if (self.options.patchExisting && patchWith) {\n                // self.debug( 'found existing Galaxy object:', patchWith );\n                // ...(for now) monkey patch any added attributes that the previous Galaxy may have had\n                //TODO: move those attributes to more formal assignment in GalaxyApp\n                for (var k in patchWith) {\n                    if (patchWith.hasOwnProperty(k)) {\n                        // self.debug( '\\t patching in ' + k + ' to Galaxy:', self[ k ] );\n                        self[k] = patchWith[k];\n                    }\n                }\n            }\n        };\n\n        /** set up the metrics logger (utils/metrics-logger) and pass loggerOptions */\n        GalaxyApp.prototype._initLogger = function _initLogger(loggerOptions) {\n            var self = this;\n\n            // default to console logging at the debug level if the debug flag is set\n            if (self.config.debug) {\n                loggerOptions.consoleLogger = loggerOptions.consoleLogger || console;\n                loggerOptions.consoleLevel = loggerOptions.consoleLevel || metricsLogger.MetricsLogger.ALL;\n                // load any logging namespaces from localStorage if we can\n                try {\n                    loggerOptions.consoleNamespaceWhitelist = localStorage.getItem(NAMESPACE_KEY).split(\",\");\n                } catch (storageErr) {}\n            }\n\n            self.logger = new metricsLogger.MetricsLogger(loggerOptions);\n            self.emit = {};\n            [\"log\", \"debug\", \"info\", \"warn\", \"error\", \"metric\"].map(function(i) {\n                self.emit[i] = function(data) {\n                    self.logger.emit(i, arguments[0], Array.prototype.slice.call(arguments, 1));\n                };\n            });\n\n            if (self.config.debug) {\n                // add this logger to mvc's loggable mixin so that all models can use the logger\n                BASE_MVC.LoggableMixin.logger = self.logger;\n            }\n            return self;\n        };\n\n        /** add the localize fn to this object and the window namespace (as '_l') */\n        GalaxyApp.prototype._initLocale = function _initLocale(options) {\n            var self = this;\n            self.debug(\"_initLocale:\", options);\n            self.localize = localize;\n            // add to window as global shortened alias\n            // TODO: temporary - remove when can require for plugins\n            window._l = self.localize;\n            return self;\n        };\n\n        /** set up the current user as a Backbone model (mvc/user/user-model) */\n        GalaxyApp.prototype._initUser = function _initUser(userJSON) {\n            var self = this;\n            self.debug(\"_initUser:\", userJSON);\n            self.user = new userModel.User(userJSON);\n            self.user.logger = self.logger;\n            return self;\n        };\n\n        /** Set up DOM/jQuery/Backbone event listeners enabled for all pages */\n        GalaxyApp.prototype._setUpListeners = function _setUpListeners() {\n            var self = this;\n\n            // hook to jq beforeSend to record the most recent ajax call and cache some data about it\n            /** cached info about the last ajax call made through jQuery */\n            self.lastAjax = {};\n            $(document).bind(\"ajaxSend\", function(ev, xhr, options) {\n                var data = options.data;\n                try {\n                    data = JSON.parse(data);\n                } catch (err) {}\n\n                self.lastAjax = {\n                    url: location.href.slice(0, -1) + options.url,\n                    data: data\n                };\n                //TODO:?? we might somehow manage to *retry* ajax using either this hook or Backbone.sync\n            });\n            return self;\n        };\n\n        /** Turn debugging/console-output on/off by passing boolean. Pass nothing to get current setting. */\n        GalaxyApp.prototype.debugging = function _debugging(setting) {\n            var self = this;\n            try {\n                if (setting === undefined) {\n                    return localStorage.getItem(DEBUGGING_KEY) === \"true\";\n                }\n                if (setting) {\n                    localStorage.setItem(DEBUGGING_KEY, true);\n                    return true;\n                }\n\n                localStorage.removeItem(DEBUGGING_KEY);\n                // also remove all namespaces\n                self.debuggingNamespaces(null);\n            } catch (storageErr) {\n                console.log(localize(\"localStorage not available for debug flag retrieval\"));\n            }\n            return false;\n        };\n\n        /** Add, remove, or clear namespaces from the debugging filters\n *  Pass no arguments to retrieve the existing namespaces as an array.\n *  Pass in null to clear all namespaces (all logging messages will show now).\n *  Pass in an array of strings or single string of the namespaces to filter to.\n *  Returns the new/current namespaces as an array;\n */\n        GalaxyApp.prototype.debuggingNamespaces = function _debuggingNamespaces(namespaces) {\n            var self = this;\n            try {\n                if (namespaces === undefined) {\n                    var csv = localStorage.getItem(NAMESPACE_KEY);\n                    return typeof csv === \"string\" ? csv.split(\",\") : [];\n                } else if (namespaces === null) {\n                    localStorage.removeItem(NAMESPACE_KEY);\n                } else {\n                    localStorage.setItem(NAMESPACE_KEY, namespaces);\n                }\n                var newSettings = self.debuggingNamespaces();\n                if (self.logger) {\n                    self.logger.options.consoleNamespaceWhitelist = newSettings;\n                }\n                return newSettings;\n            } catch (storageErr) {\n                console.log(localize(\"localStorage not available for debug namespace retrieval\"));\n            }\n        };\n\n        /** string rep */\n        GalaxyApp.prototype.toString = function toString() {\n            var userEmail = this.user ? this.user.get(\"email\") || \"(anonymous)\" : \"uninitialized\";\n            return \"GalaxyApp(\" + userEmail + \")\";\n        };\n\n        // ============================================================================\n        return {\n            GalaxyApp: GalaxyApp\n        };\n    }\n);\n"]}