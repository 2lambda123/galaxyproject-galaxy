{"version":3,"sources":["ui/filter-control.js"],"names":["factory","define","amd","jQuery","dropDownSelect","options","selected","isEmpty","$select","$","length","selectThis","$this","parents","newSelection","find","_","map","option","join","click","event","this","text","trigger","FilterControl","element","prototype","DATA_KEY","_renderKeySelect","__renderKeySelect","filterControl","filters","keys","filter","extend","defaults","$keySelect","$element","empty","append","_renderOpSelect","_renderValueInput","currFilter","$opSelect","ops","addClass","_triggerChange","key","on","selection","findWhere","render","$valueSelect","$value","value","hasClass","op","values","$filterControl","data","type","apply","nonOptionsArgs","val","fn","makeArray","arguments","slice"],"mappings":"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","file":"../../scripts/ui/filter-control.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\n(function(factory) {\n    if (typeof define === \"function\" && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([\"jquery\"], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n})(function($) {\n    //==============================================================================\n    /**\n\t *  Template function that produces a bootstrap dropdown to replace the\n\t *  vanilla HTML select input. Pass in an array of options and an initial selection:\n\t *  $( '.my-div' ).append( dropDownSelect( [ 'option1', 'option2' ], 'option2' );\n\t *\n\t *  When the user changes the selected option a 'change.dropdown-select' event will\n\t *  fire with both the jq event and the new selection text as arguments.\n\t *\n\t *  Get the currently selected choice using:\n\t *  var userChoice = $( '.my-div .dropdown-select .dropdown-select-selected' ).text();\n\t *\n\t */\n    function dropDownSelect(options, selected) {\n        // replacement for vanilla select element using bootstrap dropdowns instead\n        selected = selected || (!_.isEmpty(options) ? options[0] : \"\");\n        var $select = $(\n            [\n                '<div class=\"dropdown-select btn-group\">',\n                '<button type=\"button\" class=\"btn btn-default\">',\n                '<span class=\"dropdown-select-selected\">' + selected + \"</span>\",\n                \"</button>\",\n                \"</div>\"\n            ].join(\"\\n\")\n        );\n\n        // if there's only one option, do not style/create as buttons, dropdown - use simple span\n        // otherwise, a dropdown displaying the current selection\n        if (options && options.length > 1) {\n            $select\n                .find(\"button\")\n                .addClass(\"dropdown-toggle\")\n                .attr(\"data-toggle\", \"dropdown\")\n                .append(' <span class=\"caret\"></span>');\n            $select.append(\n                [\n                    '<ul class=\"dropdown-menu\" role=\"menu\">',\n                    _.map(options, function(option) {\n                        return ['<li><a href=\"javascript:void(0)\">', option, \"</a></li>\"].join(\"\");\n                    }).join(\"\\n\"),\n                    \"</ul>\"\n                ].join(\"\\n\")\n            );\n        }\n\n        // trigger 'change.dropdown-select' when a new selection is made using the dropdown\n        function selectThis(event) {\n            var $this = $(this),\n                $select = $this.parents(\".dropdown-select\"),\n                newSelection = $this.text();\n            $select.find(\".dropdown-select-selected\").text(newSelection);\n            $select.trigger(\"change.dropdown-select\", newSelection);\n        }\n\n        $select.find(\"a\").click(selectThis);\n        return $select;\n    }\n\n    //==============================================================================\n    /**\n     *  Creates a three part bootstrap button group (key, op, value) meant to\n     *  allow the user control of filters (e.g. { key: 'name', op: 'contains', value: 'my_history' })\n     *\n     *  Each field uses a dropDownSelect (from ui.js) to allow selection\n     *  (with the 'value' field appearing as an input when set to do so).\n     *\n     *  Any change or update in any of the fields will trigger a 'change.filter-control'\n     *  event which will be passed an object containing those fields (as the example above).\n     *\n     *  Pass in an array of possible filter objects to control what the user can select.\n     *  Each filter object should have:\n     *      key : generally the attribute name on which to filter something\n     *      ops : an array of 1 or more filter operations (e.g. [ 'is', '<', 'contains', '!=' ])\n     *      values (optional) : an array of possible values for the filter (e.g. [ 'true', 'false' ])\n     *  @example:\n     *  $( '.my-div' ).filterControl({\n     *      filters : [\n     *          { key: 'name',    ops: [ 'is exactly', 'contains' ] }\n     *          { key: 'deleted', ops: [ 'is' ], values: [ 'true', 'false' ] }\n     *      ]\n     *  });\n     *  // after initialization, you can prog. get the current value using:\n     *  $( '.my-div' ).filterControl( 'val' )\n     *\n     */\n    function FilterControl(element, options) {\n        return this.init(element, options);\n    }\n    /** the data key that this object will be stored under in the DOM element */\n    FilterControl.prototype.DATA_KEY = \"filter-control\";\n\n    /** parses options, sets up instance vars, and does initial render */\n    FilterControl.prototype.init = function _init(element, options) {\n        options = options || { filters: [] };\n        this.$element = $(element).addClass(\"filter-control btn-group\");\n        this.options = jQuery.extend(true, {}, this.defaults, options);\n\n        this.currFilter = this.options.filters[0];\n        return this.render();\n    };\n\n    /** render (or re-render) the controls on the element */\n    FilterControl.prototype.render = function _render() {\n        this.$element.empty().append([this._renderKeySelect(), this._renderOpSelect(), this._renderValueInput()]);\n        return this;\n    };\n\n    /** render the key dropDownSelect, bind a change event to it, and return it */\n    FilterControl.prototype._renderKeySelect = function __renderKeySelect() {\n        var filterControl = this;\n        var keys = this.options.filters.map(function(filter) {\n            return filter.key;\n        });\n        this.$keySelect = dropDownSelect(keys, this.currFilter.key)\n            .addClass(\"filter-control-key\")\n            .on(\"change.dropdown-select\", function(event, selection) {\n                filterControl.currFilter = _.findWhere(filterControl.options.filters, { key: selection });\n                // when the filter/key changes, re-render the control entirely\n                filterControl.render()._triggerChange();\n            });\n        return this.$keySelect;\n    };\n\n    /** render the op dropDownSelect, bind a change event to it, and return it */\n    FilterControl.prototype._renderOpSelect = function __renderOpSelect() {\n        var filterControl = this,\n            ops = this.currFilter.ops;\n        //TODO: search for currOp in avail. ops: use that for selected if there; otherwise: first op\n        this.$opSelect = dropDownSelect(ops, ops[0])\n            .addClass(\"filter-control-op\")\n            .on(\"change.dropdown-select\", function(event, selection) {\n                filterControl._triggerChange();\n            });\n        return this.$opSelect;\n    };\n\n    /** render the value control, bind a change event to it, and return it */\n    FilterControl.prototype._renderValueInput = function __renderValueInput() {\n        var filterControl = this;\n        // if a values attribute is prov. on the filter - make this a dropdown; otherwise, use an input\n        if (this.currFilter.values) {\n            this.$valueSelect = dropDownSelect(\n                this.currFilter.values,\n                this.currFilter.values[0]\n            ).on(\"change.dropdown-select\", function(event, selection) {\n                filterControl._triggerChange();\n            });\n        } else {\n            //TODO: allow setting a value type (mainly for which html5 input to use: range, number, etc.)\n            this.$valueSelect = $(\"<input/>\")\n                .addClass(\"form-control\")\n                .on(\"change\", function(event, value) {\n                    filterControl._triggerChange();\n                });\n        }\n        this.$valueSelect.addClass(\"filter-control-value\");\n        return this.$valueSelect;\n    };\n\n    /** return the current state/setting for the filter as a three key object: key, op, value */\n    FilterControl.prototype.val = function _val() {\n        var key = this.$element.find(\".filter-control-key .dropdown-select-selected\").text(),\n            op = this.$element.find(\".filter-control-op .dropdown-select-selected\").text(),\n            // handle either a dropdown or plain input\n            $value = this.$element.find(\".filter-control-value\"),\n            value = $value.hasClass(\"dropdown-select\") ? $value.find(\".dropdown-select-selected\").text() : $value.val();\n        return { key: key, op: op, value: value };\n    };\n\n    // single point of change for change event\n    FilterControl.prototype._triggerChange = function __triggerChange() {\n        this.$element.trigger(\"change.filter-control\", this.val());\n    };\n\n    // as jq plugin\n    jQuery.fn.extend({\n        filterControl: function $filterControl(options) {\n            var nonOptionsArgs = jQuery.makeArray(arguments).slice(1);\n            return this.map(function() {\n                var $this = $(this),\n                    data = $this.data(FilterControl.prototype.DATA_KEY);\n\n                if (jQuery.type(options) === \"object\") {\n                    data = new FilterControl($this, options);\n                    $this.data(FilterControl.prototype.DATA_KEY, data);\n                }\n                if (data && jQuery.type(options) === \"string\") {\n                    var fn = data[options];\n                    if (jQuery.type(fn) === \"function\") {\n                        return fn.apply(data, nonOptionsArgs);\n                    }\n                }\n                return this;\n            });\n        }\n    });\n});\n"]}