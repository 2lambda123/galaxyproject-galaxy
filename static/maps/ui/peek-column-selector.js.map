{"version":3,"sources":["ui/peek-column-selector.js"],"names":["factory","define","amd","jQuery","RENAMABLE_HEADER_CLASS","control","disabled","type","Error","JSON","stringify","multiselect","selected","label","id","indexOf","validateControl","columnIndex","$","addClass","BUTTON_CLASS","buildControlCell","$td","html","attr","COLUMN_INDEX_DATA_KEY","buildButton","DISABLED_CLASS","setSelectedText","$cell","$button","children","undefined","selectedText","unselectedText","buildSingleSelectCell","click","ev","SELECTED_CLASS","parent","hasClass","selectClick","this","$otherSelected","eventData","key","parents","trigger","CHANGE_EVENT","buildMultiSelectCell","toggleClass","map","i","e","val","makeArray","selectedColumnIndeces","buildControlCells","count","$cells","push","$controlRow","cellCount","includePrompts","$promptCell","PROMPT_CLASS","text","append","peekColumnSelector","options","extend","defaults","$peektable","rowCount","find","$commentRows","length","$this","get","match","RegExp","commentChar","css","hideCommentRows","$topLeft","$headers","topLeftContent","replace","first","prepend","each","prevName","COLUMN_NAME_DATA_KEY","name","newColumnName","renameColumns","index","data","prompt","controls","buildControlRow","columnCount","columnNames","call","RENAME_EVENT","forEach","PEEKCONTROL_CLASS","ROW_CLASS","fn"],"mappings":"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","file":"../../scripts/ui/peek-column-selector.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\n(function(factory) {\n    if (typeof define === \"function\" && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([\"jquery\"], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n})(function($) {\n    //==============================================================================\n    /** Column selection using the peek display as the control.\n     *  Adds rows to the bottom of the peek with clickable areas in each cell\n     *      to allow the user to select columns.\n     *  Column selection can be limited to a single column or multiple.\n     *  (Optionally) adds a left hand column of column selection prompts.\n     *  (Optionally) allows the column headers to be clicked/renamed\n     *      and set to some initial value.\n     *  (Optionally) hides comment rows.\n     *  (Optionally) allows pre-selecting and disabling certain columns for\n     *      each row control.\n     *\n     *  Construct by selecting a peek table to be used with jQuery and\n     *      calling 'peekColumnSelector' with options.\n     *  Options must include a 'controls' array and can include other options\n     *      listed below.\n     *  @example:\n     *  $( 'pre.peek' ).peekColumnSelector({\n     *          columnNames : [\"Chromosome\", \"Start\", \"Base\", \"\", \"\", \"Qual\" ],\n     *          controls : [\n     *              { label: 'X Column',  id: 'xColumn' },\n     *              { label: 'Y Column',  id: 'yColumn', selected: 2 },\n     *              { label: 'ID Column', id: 'idColumn', selected: 4, disabled: [ 1, 5 ] },\n     *              { label: 'Heatmap',   id: 'heatmap', selected: [ 2, 4 ], disabled: [ 0, 1 ], multiselect: true,\n     *                selectedText: 'Included', unselectedText: 'Excluded' }\n     *          ],\n     *          renameColumns       : true,\n     *          hideCommentRows     : true,\n     *          includePrompts      : true,\n     *          topLeftContent      : 'Data sample:'\n     *      }).on( 'peek-column-selector.change', function( ev, selection ){\n     *          console.info( 'new selection:', selection );\n     *          //{ yColumn: 2 }\n     *      }).on( 'peek-column-selector.rename', function( ev, names ){\n     *          console.info( 'column names', names );\n     *          //[ 'Bler', 'Start', 'Base', '', '', 'Qual' ]\n     *      });\n     *\n     *  An event is fired when column selection is changed and the event\n     *      is passed an object in the form: { the row id : the new selection value }.\n     *  An event is also fired when the table headers are re-named and\n     *      is passed the new array of column names.\n     */\n\n    /** option defaults */\n    var defaults = {\n            /** does this control allow renaming headers? */\n            renameColumns: false,\n            /** does this control allow renaming headers? */\n            columnNames: [],\n            /** the comment character used by the peek's datatype */\n            commentChar: \"#\",\n            /** should comment rows be shown or hidden in the peek */\n            hideCommentRows: false,\n            /** should a column of row control prompts be used */\n            includePrompts: true,\n            /** what is the content of the top left cell (often a title) */\n            topLeftContent: \"Columns:\"\n        },\n        /** class added to the pre.peek element (to allow css on just the control) */\n        PEEKCONTROL_CLASS = \"peek-column-selector\",\n        /** the string of the event fired when a control row changes */\n        CHANGE_EVENT = \"peek-column-selector.change\",\n        /** the string of the event fired when a column is renamed */\n        RENAME_EVENT = \"peek-column-selector.rename\",\n        /** class added to the control rows */\n        ROW_CLASS = \"control\",\n        /** class added to the left-hand cells that serve as row prompts */\n        PROMPT_CLASS = \"control-prompt\",\n        /** class added to selected _cells_/tds */\n        SELECTED_CLASS = \"selected\",\n        /** class added to disabled/un-clickable cells/tds */\n        DISABLED_CLASS = \"disabled\",\n        /** class added to the clickable surface within a cell to select it */\n        BUTTON_CLASS = \"button\",\n        /** class added to peek table header (th) cells to indicate they can be clicked and are renamable */\n        RENAMABLE_HEADER_CLASS = \"renamable-header\",\n        /** the data key used for each cell to store the column index ('data-...') */\n        COLUMN_INDEX_DATA_KEY = \"column-index\",\n        /** renamable header data key used to store the column name (w/o the number and dot: '1.Bler') */\n        COLUMN_NAME_DATA_KEY = \"column-name\";\n\n    //TODO: not happy with pure functional here - rows should polymorph (multi, single, etc.)\n    //TODO: needs clean up, move handlers to outer scope\n\n    // ........................................................................\n    /** validate the control data sent in for each row */\n    function validateControl(control) {\n        if (control.disabled && jQuery.type(control.disabled) !== \"array\") {\n            throw new Error('\"disabled\" must be defined as an array of indeces: ' + JSON.stringify(control));\n        }\n        if (control.multiselect && control.selected && jQuery.type(control.selected) !== \"array\") {\n            throw new Error('Mulitselect rows need an array for \"selected\": ' + JSON.stringify(control));\n        }\n        if (!control.label || !control.id) {\n            throw new Error(\"Peek controls need a label and id for each control row: \" + JSON.stringify(control));\n        }\n        if (control.disabled && control.disabled.indexOf(control.selected) !== -1) {\n            throw new Error(\"Selected column is in the list of disabled columns: \" + JSON.stringify(control));\n        }\n        return control;\n    }\n\n    /** build the inner control surface (i.e. button-like) */\n    function buildButton(control, columnIndex) {\n        return $(\"<div/>\")\n            .addClass(BUTTON_CLASS)\n            .text(control.label);\n    }\n\n    /** build the basic (shared) cell structure */\n    function buildControlCell(control, columnIndex) {\n        var $td = $(\"<td/>\")\n            .html(buildButton(control, columnIndex))\n            .attr(\"data-\" + COLUMN_INDEX_DATA_KEY, columnIndex);\n\n        // disable if index in disabled array\n        if (control.disabled && control.disabled.indexOf(columnIndex) !== -1) {\n            $td.addClass(DISABLED_CLASS);\n        }\n        return $td;\n    }\n\n    /** set the text of the control based on selected/un */\n    function setSelectedText($cell, control, columnIndex) {\n        var $button = $cell.children(\".\" + BUTTON_CLASS);\n        if ($cell.hasClass(SELECTED_CLASS)) {\n            $button.html(control.selectedText !== undefined ? control.selectedText : control.label);\n        } else {\n            $button.html(control.unselectedText !== undefined ? control.unselectedText : control.label);\n        }\n    }\n\n    /** build a cell for a row that only allows one selection */\n    function buildSingleSelectCell(control, columnIndex) {\n        // only one selection - selected is single index\n        var $cell = buildControlCell(control, columnIndex);\n        if (control.selected === columnIndex) {\n            $cell.addClass(SELECTED_CLASS);\n        }\n        setSelectedText($cell, control, columnIndex);\n\n        // only add the handler to non-disabled controls\n        if (!$cell.hasClass(DISABLED_CLASS)) {\n            $cell.click(function selectClick(ev) {\n                var $cell = $(this);\n                // don't re-select or fire event if already selected\n                if (!$cell.hasClass(SELECTED_CLASS)) {\n                    // only one can be selected - remove selected on all others, add it here\n                    var $otherSelected = $cell\n                        .parent()\n                        .children(\".\" + SELECTED_CLASS)\n                        .removeClass(SELECTED_CLASS);\n                    $otherSelected.each(function() {\n                        setSelectedText($(this), control, columnIndex);\n                    });\n\n                    $cell.addClass(SELECTED_CLASS);\n                    setSelectedText($cell, control, columnIndex);\n\n                    // fire the event from the table itself, passing the id and index of selected\n                    var eventData = {},\n                        key = $cell.parent().attr(\"id\"),\n                        val = $cell.data(COLUMN_INDEX_DATA_KEY);\n                    eventData[key] = val;\n                    $cell.parents(\".peek\").trigger(CHANGE_EVENT, eventData);\n                }\n            });\n        }\n        return $cell;\n    }\n\n    /** build a cell for a row that allows multiple selections */\n    function buildMultiSelectCell(control, columnIndex) {\n        var $cell = buildControlCell(control, columnIndex);\n        // multiple selection - selected is an array\n        if (control.selected && control.selected.indexOf(columnIndex) !== -1) {\n            $cell.addClass(SELECTED_CLASS);\n        }\n        setSelectedText($cell, control, columnIndex);\n\n        // only add the handler to non-disabled controls\n        if (!$cell.hasClass(DISABLED_CLASS)) {\n            $cell.click(function multiselectClick(ev) {\n                var $cell = $(this);\n                // can be more than one selected - toggle selected on this cell\n                $cell.toggleClass(SELECTED_CLASS);\n                setSelectedText($cell, control, columnIndex);\n                var selectedColumnIndeces = $cell\n                    .parent()\n                    .find(\".\" + SELECTED_CLASS)\n                    .map(function(i, e) {\n                        return $(e).data(COLUMN_INDEX_DATA_KEY);\n                    });\n                // fire the event from the table itself, passing the id and index of selected\n                var eventData = {},\n                    key = $cell.parent().attr(\"id\"),\n                    val = jQuery.makeArray(selectedColumnIndeces);\n                eventData[key] = val;\n                $cell.parents(\".peek\").trigger(CHANGE_EVENT, eventData);\n            });\n        }\n        return $cell;\n    }\n\n    /** iterate over columns in peek and create a control for each */\n    function buildControlCells(count, control) {\n        var $cells = [];\n        // build a control for each column - using a build fn based on control\n        for (var columnIndex = 0; columnIndex < count; columnIndex += 1) {\n            $cells.push(\n                control.multiselect\n                    ? buildMultiSelectCell(control, columnIndex)\n                    : buildSingleSelectCell(control, columnIndex)\n            );\n        }\n        return $cells;\n    }\n\n    /** build a row of controls for the peek */\n    function buildControlRow(cellCount, control, includePrompts) {\n        var $controlRow = $(\"<tr/>\")\n            .attr(\"id\", control.id)\n            .addClass(ROW_CLASS);\n        if (includePrompts) {\n            var $promptCell = $(\"<td/>\")\n                .addClass(PROMPT_CLASS)\n                .text(control.label + \":\");\n            $controlRow.append($promptCell);\n        }\n        $controlRow.append(buildControlCells(cellCount, control));\n        return $controlRow;\n    }\n\n    // ........................................................................\n    /** add to the peek, using options for configuration, return the peek */\n    function peekColumnSelector(options) {\n        options = jQuery.extend(true, {}, defaults, options);\n\n        var $peek = $(this).addClass(PEEKCONTROL_CLASS),\n            $peektable = $peek.find(\"table\"),\n            // get the size of the tables - width and height, number of comment rows\n            columnCount = $peektable.find(\"th\").length,\n            rowCount = $peektable.find(\"tr\").length,\n            // get the rows containing text starting with the comment char (also make them grey)\n            $commentRows = $peektable.find(\"td[colspan]\").map(function(e, i) {\n                var $this = $(this);\n                if ($this.text() && $this.text().match(new RegExp(\"^\" + options.commentChar))) {\n                    return $(this)\n                        .css(\"color\", \"grey\")\n                        .parent()\n                        .get(0);\n                }\n                return null;\n            });\n\n        // should comment rows in the peek be hidden?\n        if (options.hideCommentRows) {\n            $commentRows.hide();\n            rowCount -= $commentRows.length;\n        }\n        //console.debug( 'rowCount:', rowCount, 'columnCount:', columnCount, '$commentRows:', $commentRows );\n\n        // should a first column of control prompts be added?\n        if (options.includePrompts) {\n            var $topLeft = $(\"<th/>\")\n                .addClass(\"top-left\")\n                .text(options.topLeftContent)\n                .attr(\"rowspan\", rowCount);\n            $peektable\n                .find(\"tr\")\n                .first()\n                .prepend($topLeft);\n        }\n\n        // save either the options column name or the parsed text of each column header in html5 data attr and text\n        var $headers = $peektable.find(\"th:not(.top-left)\").each(function(i, e) {\n            var $this = $(this),\n                // can be '1.name' or '1'\n                text = $this.text().replace(/^\\d+\\.*/, \"\"),\n                name = options.columnNames[i] || text;\n            $this.attr(\"data-\" + COLUMN_NAME_DATA_KEY, name).text(i + 1 + (name ? \".\" + name : \"\"));\n        });\n\n        // allow renaming of columns when the header is clicked\n        if (options.renameColumns) {\n            $headers.addClass(RENAMABLE_HEADER_CLASS).click(function renameColumn() {\n                // prompt for new name\n                var $this = $(this),\n                    index = $this.index() + (options.includePrompts ? 0 : 1),\n                    prevName = $this.data(COLUMN_NAME_DATA_KEY),\n                    newColumnName = prompt(\"New column name:\", prevName);\n                if (newColumnName !== null && newColumnName !== prevName) {\n                    // set the new text and data\n                    $this\n                        .text(index + (newColumnName ? \".\" + newColumnName : \"\"))\n                        .data(COLUMN_NAME_DATA_KEY, newColumnName)\n                        .attr(\"data-\", COLUMN_NAME_DATA_KEY, newColumnName);\n                    // fire event for new column names\n                    var columnNames = jQuery.makeArray(\n                        $this\n                            .parent()\n                            .children(\"th:not(.top-left)\")\n                            .map(function() {\n                                return $(this).data(COLUMN_NAME_DATA_KEY);\n                            })\n                    );\n                    $this.parents(\".peek\").trigger(RENAME_EVENT, columnNames);\n                }\n            });\n        }\n\n        // build a row for each control\n        options.controls.forEach(function(control, i) {\n            validateControl(control);\n            var $controlRow = buildControlRow(columnCount, control, options.includePrompts);\n            $peektable.find(\"tbody\").append($controlRow);\n        });\n        return this;\n    }\n\n    // ........................................................................\n    // as jq plugin\n    jQuery.fn.extend({\n        peekColumnSelector: function $peekColumnSelector(options) {\n            return this.map(function() {\n                return peekColumnSelector.call(this, options);\n            });\n        }\n    });\n});\n"]}