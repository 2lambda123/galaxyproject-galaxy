{"version":3,"sources":["ui/pagination.js"],"names":["factory","define","amd","jQuery","Pagination","element","options","this","numPages","init","_make$Li","contents","$","join","prototype","DATA_KEY","startingPage","perPage","totalDataSize","$element","extend","defaults","currPage","Math","ceil","data","_render","_renderPages","_renderPrevNext","pagination","$prev","addClass","prevPage","currDataSize","$next","nextPage","html","$paginationContainer","append","$scrollingContainer","page$LiClick","i","$pageLi","goToPage","ev","_scrollToActivePage","$container","find","length","$activePage","scrollLeft","midpoint","width","position","left","page","trigger","create","fn","makeArray","arguments","slice","type","map","previousControl","apply","nonOptionsArgs"],"mappings":"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","file":"../../scripts/ui/pagination.js","sourcesContent":["// from: https://raw.githubusercontent.com/umdjs/umd/master/jqueryPlugin.js\n// Uses AMD or browser globals to create a jQuery plugin.\n(function(factory) {\n    if (typeof define === \"function\" && define.amd) {\n        // AMD. Register as an anonymous module.\n        define([\"jquery\"], factory);\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n})(function($) {\n    /** Builds (twitter bootstrap styled) pagination controls.\n     *  If the totalDataSize is not null, a horizontal list of page buttons is displayed.\n     *  If totalDataSize is null, two links ('Prev' and 'Next) are displayed.\n     *  When pages are changed, a 'pagination.page-change' event is fired\n     *      sending the event and the (0-based) page requested.\n     */\n    function Pagination(element, options) {\n        /** the total number of pages */\n        this.numPages = null;\n        /** the current, active page */\n        this.currPage = 0;\n        return this.init(element, options);\n    }\n\n    /** data key under which this object will be stored in the element */\n    Pagination.prototype.DATA_KEY = \"pagination\";\n    /** default options */\n    Pagination.prototype.defaults = {\n        /** which page to begin at */\n        startingPage: 0,\n        /** number of data per page */\n        perPage: 20,\n        /** the total number of data (null == unknown) */\n        totalDataSize: null,\n        /** size of current data on current page */\n        currDataSize: null\n    };\n\n    /** init the control, calc numPages if possible, and render\n     *  @param {jQuery} the element that will contain the pagination control\n     *  @param {Object} options a map containing overrides to the pagination default options\n     */\n    Pagination.prototype.init = function _init($element, options) {\n        options = options || {};\n        this.$element = $element;\n        this.options = jQuery.extend(true, {}, this.defaults, options);\n\n        this.currPage = this.options.startingPage;\n        if (this.options.totalDataSize !== null) {\n            this.numPages = Math.ceil(this.options.totalDataSize / this.options.perPage);\n            // limit currPage by numPages\n            if (this.currPage >= this.numPages) {\n                this.currPage = this.numPages - 1;\n            }\n        }\n        //console.debug( 'Pagination.prototype.init:', this.$element, this.currPage );\n        //console.debug( JSON.stringify( this.options ) );\n\n        // bind to data of element\n        this.$element.data(Pagination.prototype.DATA_KEY, this);\n\n        this._render();\n        return this;\n    };\n\n    /** helper to create a simple li + a combo */\n    function _make$Li(contents) {\n        return $(['<li><a href=\"javascript:void(0);\">', contents, \"</a></li>\"].join(\"\"));\n    }\n\n    /** render previous and next pagination buttons */\n    Pagination.prototype._render = function __render() {\n        // no data - no pagination\n        if (this.options.totalDataSize === 0) {\n            return this;\n        }\n        // only one page\n        if (this.numPages === 1) {\n            return this;\n        }\n\n        // when the number of pages are known, render each page as a link\n        if (this.numPages > 0) {\n            this._renderPages();\n            this._scrollToActivePage();\n\n            // when the number of pages is not known, render previous or next\n        } else {\n            this._renderPrevNext();\n        }\n        return this;\n    };\n\n    /** render previous and next pagination buttons */\n    Pagination.prototype._renderPrevNext = function __renderPrevNext() {\n        var pagination = this,\n            $prev = _make$Li(\"Prev\"),\n            $next = _make$Li(\"Next\"),\n            $paginationContainer = $(\"<ul/>\").addClass(\"pagination pagination-prev-next\");\n\n        // disable if it either end\n        if (this.currPage === 0) {\n            $prev.addClass(\"disabled\");\n        } else {\n            $prev.click(function() {\n                pagination.prevPage();\n            });\n        }\n        if (\n            (this.numPages && this.currPage === this.numPages - 1) ||\n            (this.options.currDataSize && this.options.currDataSize < this.options.perPage)\n        ) {\n            $next.addClass(\"disabled\");\n        } else {\n            $next.click(function() {\n                pagination.nextPage();\n            });\n        }\n\n        this.$element.html($paginationContainer.append([$prev, $next]));\n        //console.debug( this.$element, this.$element.html() );\n        return this.$element;\n    };\n\n    /** render page links for each possible page (if we can) */\n    Pagination.prototype._renderPages = function __renderPages() {\n        // it's better to scroll the control and let the user see all pages\n        //  than to force her/him to change pages in order to find the one they want (as traditional << >> does)\n        var pagination = this,\n            $scrollingContainer = $(\"<div>\").addClass(\"pagination-scroll-container\"),\n            $paginationContainer = $(\"<ul/>\").addClass(\"pagination pagination-page-list\"),\n            page$LiClick = function(ev) {\n                pagination.goToPage($(this).data(\"page\"));\n            };\n\n        for (var i = 0; i < this.numPages; i += 1) {\n            // add html5 data tag 'page' for later click event handler use\n            var $pageLi = _make$Li(i + 1)\n                .attr(\"data-page\", i)\n                .click(page$LiClick);\n            // highlight the current page\n            if (i === this.currPage) {\n                $pageLi.addClass(\"active\");\n            }\n            //console.debug( '\\t', $pageLi );\n            $paginationContainer.append($pageLi);\n        }\n        return this.$element.html($scrollingContainer.html($paginationContainer));\n    };\n\n    /** scroll scroll-container (if any) to show the active page */\n    Pagination.prototype._scrollToActivePage = function __scrollToActivePage() {\n        // scroll to show active page in center of scrollable area\n        var $container = this.$element.find(\".pagination-scroll-container\");\n        // no scroll container : don't scroll\n        if (!$container.length) {\n            return this;\n        }\n\n        var $activePage = this.$element.find(\"li.active\"),\n            midpoint = $container.width() / 2;\n        //console.debug( $container, $activePage, midpoint );\n        $container.scrollLeft($container.scrollLeft() + $activePage.position().left - midpoint);\n        return this;\n    };\n\n    /** go to a certain page */\n    Pagination.prototype.goToPage = function goToPage(page) {\n        if (page <= 0) {\n            page = 0;\n        }\n        if (this.numPages && page >= this.numPages) {\n            page = this.numPages - 1;\n        }\n        if (page === this.currPage) {\n            return this;\n        }\n\n        //console.debug( '\\t going to page ' + page )\n        this.currPage = page;\n        this.$element.trigger(\"pagination.page-change\", this.currPage);\n        //console.info( 'pagination:page-change', this.currPage );\n        this._render();\n        return this;\n    };\n\n    /** go to the previous page */\n    Pagination.prototype.prevPage = function prevPage() {\n        return this.goToPage(this.currPage - 1);\n    };\n\n    /** go to the next page */\n    Pagination.prototype.nextPage = function nextPage() {\n        return this.goToPage(this.currPage + 1);\n    };\n\n    /** return the current page */\n    Pagination.prototype.page = function page() {\n        return this.currPage;\n    };\n\n    // alternate constructor invocation\n    Pagination.create = function _create($element, options) {\n        return new Pagination($element, options);\n    };\n\n    // as jq plugin\n    jQuery.fn.extend({\n        pagination: function $pagination(options) {\n            var nonOptionsArgs = jQuery.makeArray(arguments).slice(1);\n\n            // if passed an object - use that as an options map to create pagination for each selected\n            if (jQuery.type(options) === \"object\") {\n                return this.map(function() {\n                    Pagination.create($(this), options);\n                    return this;\n                });\n            }\n\n            // (other invocations only work on the first element in selected)\n            var $firstElement = $(this[0]),\n                previousControl = $firstElement.data(Pagination.prototype.DATA_KEY);\n            // if a pagination control was found for this element, either...\n            if (previousControl) {\n                // invoke a function on the pagination object if passed a string (the function name)\n                if (jQuery.type(options) === \"string\") {\n                    var fn = previousControl[options];\n                    if (jQuery.type(fn) === \"function\") {\n                        return fn.apply(previousControl, nonOptionsArgs);\n                    }\n\n                    // if passed nothing, return the previously set control\n                } else {\n                    return previousControl;\n                }\n            }\n            // if there is no control already set, return undefined\n            return undefined;\n        }\n    });\n});\n"]}