<<<<<<< HEAD
{"version":3,"sources":["webpack:///admin.bundled.js","webpack:///./galaxy/scripts/apps/admin.js","webpack:///./galaxy/scripts/mvc/ui/ui-misc.js?fd98*","webpack:///./galaxy/scripts/mvc/ui/ui-portlet.js?0568*","webpack:///./galaxy/scripts/mvc/form/form-view.js?db3b*","webpack:///./galaxy/scripts/mvc/ui/ui-buttons.js?4ced*","webpack:///./galaxy/scripts/mvc/grid/grid-view.js?be4f*","webpack:///./galaxy/scripts/mvc/ui/ui-list.js?ecf1*","webpack:///./galaxy/scripts/mvc/ui/ui-options.js?405a*","webpack:///./galaxy/scripts/mvc/ui/ui-select-default.js?402d*","webpack:///./galaxy/scripts/mvc/ui/popup-menu.js?a948*","webpack:///./galaxy/scripts/mvc/form/form-data.js?6144*","webpack:///./galaxy/scripts/mvc/ui/ui-table.js?4ded*","webpack:///./galaxy/scripts/mvc/form/form-input.js?af7f*","webpack:///./galaxy/scripts/mvc/form/form-parameters.js?0ee1*","webpack:///./galaxy/scripts/mvc/form/form-repeat.js?7c22*","webpack:///./galaxy/scripts/mvc/form/form-section.js?2ccb*","webpack:///./galaxy/scripts/mvc/grid/grid-model.js?e551*","webpack:///./galaxy/scripts/mvc/grid/grid-template.js?73e1*","webpack:///./galaxy/scripts/mvc/tool/tool-genomespace.js?5b3a*","webpack:///./galaxy/scripts/mvc/ui/ui-color-picker.js?fa1d*","webpack:///./galaxy/scripts/mvc/ui/ui-drilldown.js?de06*","webpack:///./galaxy/scripts/mvc/ui/ui-select-content.js?e092*","webpack:///./galaxy/scripts/mvc/ui/ui-select-ftp.js?cf41*","webpack:///./galaxy/scripts/mvc/ui/ui-select-genomespace.js?f8ed*","webpack:///./galaxy/scripts/mvc/ui/ui-select-library.js?fd76*","webpack:///./galaxy/scripts/mvc/ui/ui-slider.js?93a7*","webpack:///./galaxy/scripts/layout/router.js?1c11","webpack:///./galaxy/scripts/mvc/form/form-wrapper.js?ceac","webpack:///./galaxy/scripts/apps/panels/admin-panel.js"],"names":["webpackJsonp","module","exports","__webpack_require__","_","jQuery","$","GalaxyApp","AdminPanel","FormWrapper","GridView","QueryStringParsing","Router","Page","window","app","options","bootstrapped","Galaxy","debug","AdminRouter","extend","routes","(/)admin(/)users","(/)admin(/)roles","(/)admin(/)groups","(/)admin(/)tool_versions","(/)admin(/)quotas","(/)admin(/)forms","(/)admin(/)form(/)(:form_id)","authenticate","args","name","user","id","get","show_users","this","page","display","url_base","root","url_data","params","dict_format","show_roles","show_groups","show_tool_versions","show_quotas","show_forms","show_form","form_id","form_defs","reset_user_password","title","url","icon","submit_title","redirect","manage_roles_and_groups_for_user","manage_users_and_groups_for_role","manage_users_and_roles_for_group","manage_users_and_groups_for_quota","create_role","create_group","create_quota","rename_role","rename_group","rename_quota","edit_quota","set_quota_default","create_form","edit_form","View","config","active_view","Left","call","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","Backbone","Utils","Select","Slider","Options","Drilldown","Buttons","Modal","Label","tagName","initialize","model","Model","setElement","listenTo","render","new_title","set","value","$el","removeClass","addClass","html","Message","message","status","cls","persistent","fade","update","messageForDisplay","timeout","clearTimeout","self","setTimeout","fadeOut","escape","UnescapedMessage","Input","type","placeholder","disabled","readonly","visible","area","color","style","events","input","new_val","undefined","attr","css","datalist","isArray","length","autocomplete","source","request","response","change","_onchange","val","each","attr_name","removeAttr","Hidden","append","$info","$hidden","show","text","hide","Upload","$file","$text","$wait","on","e","_readFile","file","target","files","reader","FileReader","onload","wait","result","readAsText","Button","ButtonDefault","ButtonIcon","ButtonCheck","ButtonMenu","ButtonLink","RadioButton","Checkbox","Radio","apply","Ui","uid","buttons","body","scrollable","nopadding","operations","collapsible","collapsible_button","collapsed","onchange_title","_template","$body","$title_text","$title_icon","$header","$content","$backdrop","$buttons","$operations","tooltip","onclick","attributes","off","collapse","expand","prop","make_text_editable","on_finish","empty","item","header","fadeIn","enableButton","find","disableButton","hideOperation","showOperation","setOperation","callback","height","setIcon","disable","enable","Portlet","FormSection","FormData","initial_errors","always_refresh","onchange","new_model","data","matchModel","node","input_id","input_list","isEqual","field","field_list","new_options","indexOf","i","opt","push","label","trigger","emit","active","is_dynamic","unwait","highlight","silent","input_element","element_list","error","portlet","$panel","parents","filter","first","animate","scrollTop","offset","top","errors","error_messages","matchResponse","Manager","_renderForm","create","current_check","checksum","refresh_on_change","new_check","reset","remove","section","inputs","wait_text","wait_cls","percentage","$icon","$title","$progress","$progress_bar","placement","width","href","icons","total","$button","$menu","pull","onunload","tag","collection","Collection","$root","where","preventDefault","submodel","suboptions","$link","divider","addMenu","add","merge","ajaxSettings","traditional","GridModel","Templates","PopupMenu","grid","grid_config","add_tag_to_grid_filter","tag_name","tag_value","advanced_search","is","slideToggle","add_filter_condition","items","filters","v","k","ajax","param","success","embedded","init_grid","use_panels","padding","overflow","handle_refresh","refresh_frames","inArray","currHistoryPanel","loadCurrentHistory","replace","footer","use_hide_message","init_grid_elements","init_grid_controls","init_refresh_on_change","click","submit_operation","select","keyup","set_sort_condition","submit","column_key","text_input_obj","text_input","parent","remove_filter_condition","set_categorical_filter","check_all_items","checkboxes","check_count","update_checked","rating","set_page","execute","items_length","index","button","popup","operation","_add_operation","settings","operation_config","allowed","allow_popup","addItem","url_args","confirmation_text","confirm","func","encode_id","findItemByHtml","add_filter","t","filter_element","container","go_page_one","remove_filter","col_key","cur_sort","new_sort","substring","sort_arrow","new_value","category_filter","cur_value","trim","filter_value","new_page","page_num","parseInt","split","cur_page","children","operation_button","operation_name","number_of_checked_ids","findWhere","item_ids","check","state","c","href_parts","href_parms_str","href_parms","toLowerCase","location","get_url_data","can_async_op","update_grid","go_to","async","$div","closest","load","method","alert","response_text","insert","json","parseJSON","complete","multiple","optional","v_id","v_name","_refresh","lst","isEmpty","_templateRow","Base","error_text","_changeValue","_changeWait","_changeData","_changeVisible","$message","$options","all_button","_getValue","_templateOptions","option","_templateOption","_messageShow","_setValue","values","selected","BaseIcons","pair","prototype","data2","empty_text","searchable","individual","pagesize","_changeDisabled","_renderSearchable","_renderClassic","$select","$dropdown","$resize","$resize_icon","event","currentY","pageY","currentHeight","minHeight","Math","max","select2","prepend","_match","term","String","toUpperCase","order","tags","matched_tags","closeOnSelect","query","q","results","found","slice","more","formatResult","reduce","memo","exists","d","sorter","keep","sort","setOnChange","a","b","menu","_renderAndShow","clickEvent","appendTo","_getShownPosition","_setUpCloseBehavior","position","template","li","join","map","checked","menuWidth","x","pageX","min","document","scrollLeft","left","closePopup","err","contents","one","splice","removeItem","findIndexByHtml","has","toString","make_popupmenu","button_element","initial_options","convertedOptions","optionVal","optionKey","newOption","convertLinksToOptions","$parent","selector","elem","linkHref","linkTarget","confirmText","fromExistingDom","$buttonElement","$menuElement","menuElementLinkSelector","make_popup_menus","menuSelector","buttonSelectorBuildFn","popupMenusCreated","fromDom","sum","JSON","stringify","flat_id","input_value","flat_dict","result_dict","convert","identifier","head","section_label","block_indices","block_prefix","block_label","pos","substr","test_param","selectedCase","matchCase","flat","ignore","collapsible_value","payload","p_id","dict","_iterate","match","visitInputs","search","new_id","separator","Array","child","hasClass","truevalue","falsevalue","cases","prefix","context","key","cache","j","content","ondblclick","onconfirm","selectable","cls_tr","$thead","$tbody","$tmessage","row","_row","row_count","dblclick","addHeader","appendHeader","align","wrapper","_commit","del","delAll","before","after","size","_onclick","old_value","_ondblclick","app_options","text_enable","text_disable","cls_enable","cls_disable","$field","$preview","$collapsible","$collapsible_text","$collapsible_icon","$error_text","$error","backdrop","help_text","help_argument","collapsible_state","SelectContent","SelectLibrary","SelectFtp","SelectGenomeSpace","ColorPicker","types","password","data_column","genomebuild","data_collection","integer","float","boolean","drill_down","hidden","hidden_data","baseurl","library_data","ftpfile","upload","genomespacefile","input_def","fieldClass","_fieldSelect","_fieldText","_fieldData","extensions","flavor","is_workflow","SelectClass","_fieldDrilldown","str_value","_fieldSlider","precise","_fieldHidden","info","_fieldBoolean","_fieldColor","_fieldLibrary","_fieldFtp","_fieldGenomeSpace","_fieldUpload","list","button_new","onnew","$list","button_delete","ondel","hideOptions","Repeat","InputElement","Parameters","parameters","_addConditional","_addRepeat","_addSection","_addRow","case_def","section_row","nonhidden","sub_section","_append","sub_section_id","block_index","repeat","n_cache","default","help","expanded","hide_label","text_value","collapsible_preview","argument","fixed","defaults","async_ops","categorical_filters","sort_key","show_item_checkboxes","num_pages","op","cur_val","condition","condition_index","pairs","get_url","tmpl","grid_header","grid_table","info_text","global_actions","show_popup","action","grid_filters","columns","column","extra","num_rows_rendered","encoded_id","current_item_id","nowrap","column_settings","column_config","link","attach_popup","label_id_prefix","use_paging","num_page_links","cur_page_num","page_link_range","min_page","min_offset","max_offset","max_range","max_page","page_index","allow_multiple","found_global","global_operation","legend","default_filter_dict","advanced_search_display","show_advanced_search_link","filterable","f_key","d_key","standard_search_display","grid_column_filter","column_label","is_text","temp_column","column_filter","seperator","cf_label","cf","cf_key","cf_arg","filter_key","sanitize","openFileBrowser","GS_UI_URL","genomespace_ui_url","GS_UPLOAD_URL","newWin","open","successCalBack","addEventListener","focus","setCallbackOnGSUploadError","colors","standard","base","theme","$view","$value","_build","$boxes","_templateCheck","hex","rgb","_content","line_def","_templateContent","$line","$box","_templateBox","bottom","header_index","element","_setState","header_id","is_expanded","$subgroup","attach","iterate","$tmpl","level","has_options","new_header","$group","Batch","DISABLED","ENABLED","LINKED","Configurations","src","batch","data_multiple","workflow_data","workflow_data_multiple","workflow_data_collection","module_data","module_data_collection","src_labels","hda","hdca","pagelimit","statustimer","button_product","$batch_div","$batch","linked","clone","enabled","lastenter","_handleDrop","history","_changeCurrent","_changeType","current","id_list","fields","_batch","details","hid","$batchfield","batchmode","button_type","config_id","textify","button_data","button_width","margin-left","select_options","ev","drop_data","parse","originalEvent","dataTransfer","getData","new_src","history_content_type","current_value","_handleDropStatus","map_over_type","List","ftpfile_list","GenomespaceBrowser","browse_button","browseGenomeSpace","filename_textbox","token_textbox","successCallback","destination","token","Table","Libraries","LibraryDatasets","library_id","fetch","libraries","datasets","library_select","dataset_list","library_current","step","$slider","pressed","which","_isParameter","opts","has_slider","slider","ui","isNaN","round","QUERY_STRING","__identifer","random","isEmptyObject","navigate","queryObj","pop","access_denied","Form","done","form","submit_tooltip","submit_icon","_submit","fail","contentType","success_message","_showMessage","responseJSON","err_msg","_l","categories","enable_quotas","allow_user_impersonation","is_tool_shed_installed","enable_beta_ts_api_install","installing_repository_ids","is_repo_installed","category","$section","_templateSection","$entries","router"],"mappings":"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","file":"admin.bundled.js","sourcesContent":["webpackJsonp([4],[\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(_) {var jQuery = __webpack_require__(1),\n\t    $ = jQuery,\n\t    GalaxyApp = __webpack_require__(51).GalaxyApp,\n\t    AdminPanel = __webpack_require__(102),\n\t    FormWrapper = __webpack_require__(61),\n\t    GridView = __webpack_require__(12),\n\t    Ui = __webpack_require__(5),\n\t    QueryStringParsing = __webpack_require__(26),\n\t    Router = __webpack_require__(54),\n\t    Page = __webpack_require__(52);\n\t\n\twindow.app = function app(options, bootstrapped) {\n\t    window.Galaxy = new GalaxyApp(options, bootstrapped);\n\t    Galaxy.debug('admin app');\n\t\n\t    /** Routes */\n\t    var AdminRouter = Router.extend({\n\t        routes: {\n\t            '(/)admin(/)users': 'show_users',\n\t            '(/)admin(/)roles': 'show_roles',\n\t            '(/)admin(/)groups': 'show_groups',\n\t            '(/)admin(/)tool_versions': 'show_tool_versions',\n\t            '(/)admin(/)quotas': 'show_quotas',\n\t            '(/)admin(/)forms': 'show_forms',\n\t            '(/)admin(/)form(/)(:form_id)': 'show_form'\n\t        },\n\t\n\t        authenticate: function (args, name) {\n\t            return Galaxy.user && Galaxy.user.id && Galaxy.user.get('is_admin');\n\t        },\n\t\n\t        show_users: function () {\n\t            this.page.display(new GridView({ url_base: Galaxy.root + 'admin/users_list', url_data: Galaxy.params, dict_format: true }));\n\t        },\n\t\n\t        show_roles: function () {\n\t            this.page.display(new GridView({ url_base: Galaxy.root + 'admin/roles_list', url_data: Galaxy.params, dict_format: true }));\n\t        },\n\t\n\t        show_groups: function () {\n\t            this.page.display(new GridView({ url_base: Galaxy.root + 'admin/groups_list', url_data: Galaxy.params, dict_format: true }));\n\t        },\n\t\n\t        show_tool_versions: function () {\n\t            this.page.display(new GridView({ url_base: Galaxy.root + 'admin/tool_versions_list', url_data: Galaxy.params, dict_format: true }));\n\t        },\n\t\n\t        show_quotas: function () {\n\t            this.page.display(new GridView({ url_base: Galaxy.root + 'admin/quotas_list', url_data: Galaxy.params, dict_format: true }));\n\t        },\n\t\n\t        show_forms: function () {\n\t            this.page.display(new GridView({ url_base: Galaxy.root + 'forms/forms_list', url_data: Galaxy.params, dict_format: true }));\n\t        },\n\t\n\t        show_form: function (form_id) {\n\t            var id = '?id=' + QueryStringParsing.get('id');\n\t            var form_defs = {\n\t                reset_user_password: {\n\t                    title: 'Reset passwords',\n\t                    url: 'admin/reset_user_password' + id,\n\t                    icon: 'fa-user',\n\t                    submit_title: 'Save new password',\n\t                    redirect: 'admin/users'\n\t                },\n\t                manage_roles_and_groups_for_user: {\n\t                    url: 'admin/manage_roles_and_groups_for_user' + id,\n\t                    icon: 'fa-users',\n\t                    redirect: 'admin/users'\n\t                },\n\t                manage_users_and_groups_for_role: {\n\t                    url: 'admin/manage_users_and_groups_for_role' + id,\n\t                    redirect: 'admin/roles'\n\t                },\n\t                manage_users_and_roles_for_group: {\n\t                    url: 'admin/manage_users_and_roles_for_group' + id,\n\t                    redirect: 'admin/groups'\n\t                },\n\t                manage_users_and_groups_for_quota: {\n\t                    url: 'admin/manage_users_and_groups_for_quota' + id,\n\t                    redirect: 'admin/quotas'\n\t                },\n\t                create_role: {\n\t                    url: 'admin/create_role',\n\t                    redirect: 'admin/roles'\n\t                },\n\t                create_group: {\n\t                    url: 'admin/create_group',\n\t                    redirect: 'admin/groups'\n\t                },\n\t                create_quota: {\n\t                    url: 'admin/create_quota',\n\t                    redirect: 'admin/quotas'\n\t                },\n\t                rename_role: {\n\t                    url: 'admin/rename_role' + id,\n\t                    redirect: 'admin/roles'\n\t                },\n\t                rename_group: {\n\t                    url: 'admin/rename_group' + id,\n\t                    redirect: 'admin/groups'\n\t                },\n\t                rename_quota: {\n\t                    url: 'admin/rename_quota' + id,\n\t                    redirect: 'admin/quotas'\n\t                },\n\t                edit_quota: {\n\t                    url: 'admin/edit_quota' + id,\n\t                    redirect: 'admin/quotas'\n\t                },\n\t                set_quota_default: {\n\t                    url: 'admin/set_quota_default' + id,\n\t                    redirect: 'admin/quotas'\n\t                },\n\t                create_form: {\n\t                    url: 'forms/create_form',\n\t                    redirect: 'admin/forms'\n\t                },\n\t                edit_form: {\n\t                    url: 'forms/edit_form' + id,\n\t                    redirect: 'admin/forms'\n\t                }\n\t            };\n\t            this.page.display(new FormWrapper.View(form_defs[form_id]));\n\t        }\n\t    });\n\t\n\t    $(function () {\n\t        _.extend(options.config, { active_view: 'admin' });\n\t        Galaxy.page = new Page.View(_.extend(options, {\n\t            Left: AdminPanel,\n\t            Router: AdminRouter\n\t        }));\n\t    });\n\t};\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))\n\n/***/ }),\n/* 1 */,\n/* 2 */,\n/* 3 */,\n/* 4 */,\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {/**\n\t *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n\t */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(15), __webpack_require__(42), __webpack_require__(14), __webpack_require__(37), __webpack_require__(11), __webpack_require__(8)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Select, Slider, Options, Drilldown, Buttons, Modal) {\n\t\n\t    /** Label wrapper */\n\t    var Label = Backbone.View.extend({\n\t        tagName: 'label',\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model(options);\n\t            this.tagName = options.tagName || this.tagName;\n\t            this.setElement($('<' + this.tagName + '/>'));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t        title: function (new_title) {\n\t            this.model.set('title', new_title);\n\t        },\n\t        value: function () {\n\t            return this.model.get('title');\n\t        },\n\t        render: function () {\n\t            this.$el.removeClass().addClass('ui-label').addClass(this.model.get('cls')).html(this.model.get('title'));\n\t            return this;\n\t        }\n\t    });\n\t\n\t    /** Displays messages used e.g. in the tool form */\n\t    var Message = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                message: null,\n\t                status: 'info',\n\t                cls: '',\n\t                persistent: false,\n\t                fade: true\n\t            }).set(options);\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t        update: function (options) {\n\t            this.model.set(options);\n\t        },\n\t        render: function () {\n\t            this.$el.removeClass().addClass('ui-message').addClass(this.model.get('cls'));\n\t            var status = this.model.get('status');\n\t            if (this.model.get('large')) {\n\t                this.$el.addClass((status == 'success' && 'done' || status == 'danger' && 'error' || status) + 'messagelarge');\n\t            } else {\n\t                this.$el.addClass('alert').addClass('alert-' + status);\n\t            }\n\t            if (this.model.get('message')) {\n\t                this.$el.html(this.messageForDisplay());\n\t                this.$el[this.model.get('fade') ? 'fadeIn' : 'show']();\n\t                this.timeout && window.clearTimeout(this.timeout);\n\t                if (!this.model.get('persistent')) {\n\t                    var self = this;\n\t                    this.timeout = window.setTimeout(function () {\n\t                        self.model.set('message', '');\n\t                    }, 3000);\n\t                }\n\t            } else {\n\t                this.$el.fadeOut();\n\t            }\n\t            return this;\n\t        },\n\t        messageForDisplay: function () {\n\t            return _.escape(this.model.get('message'));\n\t        }\n\t    });\n\t\n\t    var UnescapedMessage = Message.extend({\n\t        messageForDisplay: function () {\n\t            return this.model.get('message');\n\t        }\n\t    });\n\t\n\t    /** Renders an input element used e.g. in the tool form */\n\t    var Input = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                type: 'text',\n\t                placeholder: '',\n\t                disabled: false,\n\t                readonly: false,\n\t                visible: true,\n\t                cls: '',\n\t                area: false,\n\t                color: null,\n\t                style: null\n\t            }).set(options);\n\t            this.tagName = this.model.get('area') ? 'textarea' : 'input';\n\t            this.setElement($('<' + this.tagName + '/>'));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t        events: {\n\t            'input': '_onchange'\n\t        },\n\t        value: function (new_val) {\n\t            new_val !== undefined && this.model.set('value', typeof new_val === 'string' ? new_val : '');\n\t            return this.model.get('value');\n\t        },\n\t        render: function () {\n\t            var self = this;\n\t            this.$el.removeClass().addClass('ui-' + this.tagName).addClass(this.model.get('cls')).addClass(this.model.get('style')).attr('id', this.model.id).attr('type', this.model.get('type')).attr('placeholder', this.model.get('placeholder')).css('color', this.model.get('color') || '').css('border-color', this.model.get('color') || '');\n\t            var datalist = this.model.get('datalist');\n\t            if ($.isArray(datalist) && datalist.length > 0) {\n\t                this.$el.autocomplete({ source: function (request, response) {\n\t                        response(self.model.get('datalist'));\n\t                    },\n\t                    change: function () {\n\t                        self._onchange();\n\t                    } });\n\t            }\n\t            if (this.model.get('value') !== this.$el.val()) {\n\t                this.$el.val(this.model.get('value'));\n\t            }\n\t            _.each(['readonly', 'disabled'], function (attr_name) {\n\t                self.model.get(attr_name) ? self.$el.attr(attr_name, true) : self.$el.removeAttr(attr_name);\n\t            });\n\t            this.$el[this.model.get('visible') ? 'show' : 'hide']();\n\t            return this;\n\t        },\n\t        _onchange: function () {\n\t            this.value(this.$el.val());\n\t            this.model.get('onchange') && this.model.get('onchange')(this.model.get('value'));\n\t        }\n\t    });\n\t\n\t    /** Creates a hidden element input field used e.g. in the tool form */\n\t    var Hidden = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model(options);\n\t            this.setElement($('<div/>').append(this.$info = $('<div/>')).append(this.$hidden = $('<div/>')));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t        value: function (new_val) {\n\t            new_val !== undefined && this.model.set('value', new_val);\n\t            return this.model.get('value');\n\t        },\n\t        render: function () {\n\t            this.$el.attr('id', this.model.id);\n\t            this.$hidden.val(this.model.get('value'));\n\t            this.model.get('info') ? this.$info.show().text(this.model.get('info')) : this.$info.hide();\n\t            return this;\n\t        }\n\t    });\n\t\n\t    /** Creates a upload element input field */\n\t    var Upload = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            var self = this;\n\t            this.model = options && options.model || new Backbone.Model(options);\n\t            this.setElement($('<div/>').append(this.$info = $('<div/>')).append(this.$file = $('<input/>').attr('type', 'file').addClass('ui-margin-bottom')).append(this.$text = $('<textarea/>').addClass('ui-textarea').attr('disabled', true)).append(this.$wait = $('<i/>').addClass('fa fa-spinner fa-spin')));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.$file.on('change', function (e) {\n\t                self._readFile(e);\n\t            });\n\t            this.render();\n\t        },\n\t        value: function (new_val) {\n\t            new_val !== undefined && this.model.set('value', new_val);\n\t            return this.model.get('value');\n\t        },\n\t        render: function () {\n\t            this.$el.attr('id', this.model.id);\n\t            this.model.get('info') ? this.$info.show().text(this.model.get('info')) : this.$info.hide();\n\t            this.model.get('value') ? this.$text.text(this.model.get('value')).show() : this.$text.hide();\n\t            this.model.get('wait') ? this.$wait.show() : this.$wait.hide();\n\t            return this;\n\t        },\n\t        _readFile: function (e) {\n\t            var self = this;\n\t            var file = e.target.files && e.target.files[0];\n\t            if (file) {\n\t                var reader = new FileReader();\n\t                reader.onload = function () {\n\t                    self.model.set({ wait: false, value: this.result });\n\t                };\n\t                this.model.set({ wait: true, value: null });\n\t                reader.readAsText(file);\n\t            }\n\t        }\n\t    });\n\t\n\t    return {\n\t        Button: Buttons.ButtonDefault,\n\t        ButtonIcon: Buttons.ButtonIcon,\n\t        ButtonCheck: Buttons.ButtonCheck,\n\t        ButtonMenu: Buttons.ButtonMenu,\n\t        ButtonLink: Buttons.ButtonLink,\n\t        Input: Input,\n\t        Label: Label,\n\t        Message: Message,\n\t        UnescapedMessage: UnescapedMessage,\n\t        Upload: Upload,\n\t        Modal: Modal,\n\t        RadioButton: Options.RadioButton,\n\t        Checkbox: Options.Checkbox,\n\t        Radio: Options.Radio,\n\t        Select: Select,\n\t        Hidden: Hidden,\n\t        Slider: Slider,\n\t        Drilldown: Drilldown\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ }),\n/* 6 */,\n/* 7 */,\n/* 8 */,\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui) {\n\t    var View = Backbone.View.extend({\n\t        visible: false,\n\t        initialize: function (options) {\n\t            var self = this;\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                cls: 'ui-portlet',\n\t                title: '',\n\t                icon: '',\n\t                buttons: null,\n\t                body: null,\n\t                scrollable: true,\n\t                nopadding: false,\n\t                operations: null,\n\t                collapsible: false,\n\t                collapsible_button: false,\n\t                collapsed: false,\n\t                onchange_title: null\n\t            }).set(options);\n\t            this.setElement(this._template());\n\t\n\t            // link all dom elements\n\t            this.$body = this.$('.portlet-body');\n\t            this.$title_text = this.$('.portlet-title-text');\n\t            this.$title_icon = this.$('.portlet-title-icon');\n\t            this.$header = this.$('.portlet-header');\n\t            this.$content = this.$('.portlet-content');\n\t            this.$backdrop = this.$('.portlet-backdrop');\n\t            this.$buttons = this.$('.portlet-buttons');\n\t            this.$operations = this.$('.portlet-operations');\n\t\n\t            // add body to component list\n\t            this.model.get('body') && this.append(this.model.get('body'));\n\t\n\t            // add icon for collapsible option\n\t            this.collapsible_button = new Ui.ButtonIcon({\n\t                icon: 'fa-eye',\n\t                tooltip: 'Collapse/Expand',\n\t                cls: 'ui-button-icon-plain',\n\t                onclick: function () {\n\t                    self[self.collapsed ? 'expand' : 'collapse']();\n\t                }\n\t            });\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var self = this;\n\t            var options = this.model.attributes;\n\t            this.$el.removeClass().addClass(options.cls).attr('id', options.id);\n\t            this.$header[options.title ? 'show' : 'hide']();\n\t            this.$title_text.html(options.title);\n\t            _.each([this.$content, this.$body], function ($el) {\n\t                $el[options.nopadding ? 'addClass' : 'removeClass']('no-padding');\n\t            });\n\t\n\t            // render title icon\n\t            if (options.icon) {\n\t                this.$title_icon.removeClass().addClass('portlet-title-icon fa').addClass(options.icon).show();\n\t            } else {\n\t                this.$title_icon.hide();\n\t            }\n\t\n\t            // make portlet collapsible\n\t            this.$title_text[options.collapsible ? 'addClass' : 'removeClass']('no-highlight collapsible').off();\n\t            if (options.collapsible) {\n\t                this.$title_text.on('click', function () {\n\t                    self[self.collapsed ? 'expand' : 'collapse']();\n\t                });\n\t                options.collapsed ? this.collapse() : this.expand();\n\t            }\n\t\n\t            // allow title editing\n\t            this.$title_text.prop('disabled', !options.onchange_title);\n\t            options.onchange_title && this.$title_text.make_text_editable({\n\t                on_finish: function (new_title) {\n\t                    options.onchange_title(new_title);\n\t                }\n\t            });\n\t\n\t            // render buttons\n\t            if (options.buttons) {\n\t                this.$buttons.empty().show();\n\t                $.each(this.model.get('buttons'), function (name, item) {\n\t                    item.$el.prop('id', name);\n\t                    self.$buttons.append(item.$el);\n\t                });\n\t            } else {\n\t                this.$buttons.hide();\n\t            }\n\t\n\t            // render operations\n\t            this.$operations.empty;\n\t            if (options.collapsible_button) {\n\t                this.$operations.append(this.collapsible_button.$el);\n\t            }\n\t            if (options.operations) {\n\t                $.each(options.operations, function (name, item) {\n\t                    item.$el.prop('id', name);\n\t                    self.$operations.append(item.$el);\n\t                });\n\t            }\n\t            return this;\n\t        },\n\t\n\t        /** Append new doms to body */\n\t        append: function ($el) {\n\t            this.$body.append($el);\n\t        },\n\t\n\t        /** Remove all content */\n\t        empty: function () {\n\t            this.$body.empty();\n\t        },\n\t\n\t        /** Return header element */\n\t        header: function () {\n\t            return this.$header;\n\t        },\n\t\n\t        /** Return body element */\n\t        body: function () {\n\t            return this.$body;\n\t        },\n\t\n\t        /** Show portlet */\n\t        show: function () {\n\t            this.visible = true;\n\t            this.$el.fadeIn('fast');\n\t        },\n\t\n\t        /** Hide portlet */\n\t        hide: function () {\n\t            this.visible = false;\n\t            this.$el.hide();\n\t        },\n\t\n\t        /** Enable a particular button */\n\t        enableButton: function (id) {\n\t            this.$buttons.find('#' + id).prop('disabled', false);\n\t        },\n\t\n\t        /** Disable a particular button */\n\t        disableButton: function (id) {\n\t            this.$buttons.find('#' + id).prop('disabled', true);\n\t        },\n\t\n\t        /** Hide a particular operation */\n\t        hideOperation: function (id) {\n\t            this.$operations.find('#' + id).hide();\n\t        },\n\t\n\t        /** Show a particular operation */\n\t        showOperation: function (id) {\n\t            this.$operations.find('#' + id).show();\n\t        },\n\t\n\t        /** Replaces the event callback of an existing operation */\n\t        setOperation: function (id, callback) {\n\t            this.$operations.find('#' + id).off('click').on('click', callback);\n\t        },\n\t\n\t        /** Change title */\n\t        title: function (new_title) {\n\t            new_title && this.$title_text.html(new_title);\n\t            return this.$title_text.html();\n\t        },\n\t\n\t        /** Collapse portlet */\n\t        collapse: function () {\n\t            this.collapsed = true;\n\t            this.$content.height('0%');\n\t            this.$body.hide();\n\t            this.collapsible_button.setIcon('fa-eye-slash');\n\t        },\n\t\n\t        /** Expand portlet */\n\t        expand: function () {\n\t            this.collapsed = false;\n\t            this.$content.height('100%');\n\t            this.$body.fadeIn('fast');\n\t            this.collapsible_button.setIcon('fa-eye');\n\t        },\n\t\n\t        /** Disable content access */\n\t        disable: function () {\n\t            this.$backdrop.show();\n\t        },\n\t\n\t        /** Enable content access */\n\t        enable: function () {\n\t            this.$backdrop.hide();\n\t        },\n\t\n\t        _template: function () {\n\t            return $('<div/>').append($('<div/>').addClass('portlet-header').append($('<div/>').addClass('portlet-operations')).append($('<div/>').addClass('portlet-title').append($('<i/>').addClass('portlet-title-icon')).append($('<span/>').addClass('portlet-title-text')))).append($('<div/>').addClass('portlet-content').append($('<div/>').addClass('portlet-body')).append($('<div/>').addClass('portlet-buttons'))).append($('<div/>').addClass('portlet-backdrop'));\n\t        }\n\t    });\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(3), __webpack_require__(1)))\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {/**\n\t    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n\t*/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(9), __webpack_require__(5), __webpack_require__(32), __webpack_require__(19)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Portlet, Ui, FormSection, FormData) {\n\t    return Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.model = new Backbone.Model({\n\t                initial_errors: false,\n\t                cls: 'ui-portlet-limited',\n\t                icon: null,\n\t                always_refresh: true,\n\t                status: 'warning',\n\t                onchange: function () {}\n\t            }).set(options);\n\t            this.setElement('<div/>');\n\t            this.render();\n\t        },\n\t\n\t        /** Update available options */\n\t        update: function (new_model) {\n\t            var self = this;\n\t            this.data.matchModel(new_model, function (node, input_id) {\n\t                var input = self.input_list[input_id];\n\t                if (input && input.options) {\n\t                    if (!_.isEqual(input.options, node.options)) {\n\t                        input.options = node.options;\n\t                        var field = self.field_list[input_id];\n\t                        if (field.update) {\n\t                            var new_options = [];\n\t                            if (['data', 'data_collection', 'drill_down'].indexOf(input.type) != -1) {\n\t                                new_options = input.options;\n\t                            } else {\n\t                                for (var i in node.options) {\n\t                                    var opt = node.options[i];\n\t                                    if (opt.length > 2) {\n\t                                        new_options.push({ label: opt[0], value: opt[1] });\n\t                                    }\n\t                                }\n\t                            }\n\t                            field.update(new_options);\n\t                            field.trigger('change');\n\t                            Galaxy.emit.debug('form-view::update()', 'Updating options for ' + input_id);\n\t                        }\n\t                    }\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Set form into wait mode */\n\t        wait: function (active) {\n\t            for (var i in this.input_list) {\n\t                var field = this.field_list[i];\n\t                var input = this.input_list[i];\n\t                if (input.is_dynamic && field.wait && field.unwait) {\n\t                    field[active ? 'wait' : 'unwait']();\n\t                }\n\t            }\n\t        },\n\t\n\t        /** Highlight and scroll to input element (currently only used for error notifications) */\n\t        highlight: function (input_id, message, silent) {\n\t            var input_element = this.element_list[input_id];\n\t            if (input_element) {\n\t                input_element.error(message || 'Please verify this parameter.');\n\t                this.portlet.expand();\n\t                this.trigger('expand', input_id);\n\t                if (!silent) {\n\t                    var $panel = this.$el.parents().filter(function () {\n\t                        return ['auto', 'scroll'].indexOf($(this).css('overflow')) != -1;\n\t                    }).first();\n\t                    $panel.animate({ scrollTop: $panel.scrollTop() + input_element.$el.offset().top - 120 }, 500);\n\t                }\n\t            }\n\t        },\n\t\n\t        /** Highlights errors */\n\t        errors: function (options) {\n\t            this.trigger('reset');\n\t            if (options && options.errors) {\n\t                var error_messages = this.data.matchResponse(options.errors);\n\t                for (var input_id in this.element_list) {\n\t                    var input = this.element_list[input_id];\n\t                    if (error_messages[input_id]) {\n\t                        this.highlight(input_id, error_messages[input_id], true);\n\t                    }\n\t                }\n\t            }\n\t        },\n\t\n\t        /** Render tool form */\n\t        render: function () {\n\t            var self = this;\n\t            this.off('change');\n\t            this.off('reset');\n\t            // contains the dom field elements as created by the parameter factory i.e. form-parameters\n\t            this.field_list = {};\n\t            // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n\t            this.input_list = {};\n\t            // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n\t            this.element_list = {};\n\t            // converts the form into a json data structure\n\t            this.data = new FormData.Manager(this);\n\t            this._renderForm();\n\t            this.data.create();\n\t            this.model.get('initial_errors') && this.errors(this.model.attributes);\n\t            // add listener which triggers on checksum change, and reset the form input wrappers\n\t            var current_check = this.data.checksum();\n\t            this.on('change', function (input_id) {\n\t                var input = self.input_list[input_id];\n\t                if (!input || input.refresh_on_change || self.model.get('always_refresh')) {\n\t                    var new_check = self.data.checksum();\n\t                    if (new_check != current_check) {\n\t                        current_check = new_check;\n\t                        self.model.get('onchange')();\n\t                    }\n\t                }\n\t            });\n\t            this.on('reset', function () {\n\t                _.each(self.element_list, function (input_element) {\n\t                    input_element.reset();\n\t                });\n\t            });\n\t            return this;\n\t        },\n\t\n\t        /** Renders/appends dom elements of the form */\n\t        _renderForm: function () {\n\t            $('.tooltip').remove();\n\t            var options = this.model.attributes;\n\t            this.message = new Ui.UnescapedMessage();\n\t            this.section = new FormSection.View(this, { inputs: options.inputs });\n\t            this.portlet = new Portlet.View({\n\t                icon: options.icon,\n\t                title: options.title,\n\t                cls: options.cls,\n\t                operations: options.operations,\n\t                buttons: options.buttons,\n\t                collapsible: options.collapsible,\n\t                collapsed: options.collapsed,\n\t                onchange_title: options.onchange_title\n\t            });\n\t            this.portlet.append(this.message.$el);\n\t            this.portlet.append(this.section.$el);\n\t            this.$el.empty();\n\t            options.inputs && this.$el.append(this.portlet.$el);\n\t            options.message && this.message.update({ persistent: true, status: options.status, message: options.message });\n\t            Galaxy.emit.debug('form-view::initialize()', 'Completed');\n\t        }\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(3), __webpack_require__(1)))\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {/** This module contains all button views. */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n\t    /** This renders the default button which is used e.g. at the bottom of the upload modal. */\n\t    var ButtonDefault = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                title: '',\n\t                icon: '',\n\t                cls: 'btn btn-default',\n\t                wait: false,\n\t                wait_text: 'Sending...',\n\t                wait_cls: 'btn btn-info',\n\t                disabled: false,\n\t                percentage: -1\n\t            }).set(options);\n\t            this.setElement($('<button/>').attr('type', 'button').append(this.$icon = $('<i/>')).append(this.$title = $('<span/>')).append(this.$progress = $('<div/>').append(this.$progress_bar = $('<div/>'))));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var self = this;\n\t            var options = this.model.attributes;\n\t            this.$el.removeClass().addClass('ui-button-default').addClass(options.disabled && 'disabled').attr('id', options.id).attr('disabled', options.disabled).off('click').on('click', function () {\n\t                $('.tooltip').hide();\n\t                options.onclick && !self.disabled && options.onclick();\n\t            }).tooltip({ title: options.tooltip, placement: 'bottom' });\n\t            this.$progress.addClass('progress').css('display', options.percentage !== -1 ? 'block' : 'none');\n\t            this.$progress_bar.addClass('progress-bar').css({ width: options.percentage + '%' });\n\t            this.$icon.removeClass().addClass('icon fa');\n\t            this.$title.removeClass().addClass('title');\n\t            if (options.wait) {\n\t                this.$el.addClass(options.wait_cls).prop('disabled', true);\n\t                this.$icon.addClass('fa-spinner fa-spin ui-margin-right');\n\t                this.$title.html(options.wait_text);\n\t            } else {\n\t                this.$el.addClass(options.cls);\n\t                this.$icon.addClass(options.icon);\n\t                this.$title.html(options.title);\n\t                options.icon && options.title && this.$icon.addClass('ui-margin-right');\n\t            }\n\t        },\n\t\n\t        /** Show button */\n\t        show: function () {\n\t            this.$el.show();\n\t        },\n\t\n\t        /** Hide button */\n\t        hide: function () {\n\t            this.$el.hide();\n\t        },\n\t\n\t        /** Disable button */\n\t        disable: function () {\n\t            this.model.set('disabled', true);\n\t        },\n\t\n\t        /** Enable button */\n\t        enable: function () {\n\t            this.model.set('disabled', false);\n\t        },\n\t\n\t        /** Show spinner to indicate that the button is not ready to be clicked */\n\t        wait: function () {\n\t            this.model.set('wait', true);\n\t        },\n\t\n\t        /** Hide spinner to indicate that the button is ready to be clicked */\n\t        unwait: function () {\n\t            this.model.set('wait', false);\n\t        },\n\t\n\t        /** Change icon */\n\t        setIcon: function (icon) {\n\t            this.model.set('icon', icon);\n\t        }\n\t    });\n\t\n\t    /** This button allows the right-click/open-in-new-tab feature, its used e.g. for panel buttons. */\n\t    var ButtonLink = ButtonDefault.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                title: '',\n\t                icon: '',\n\t                cls: ''\n\t            }).set(options);\n\t            this.setElement($('<a/>').append(this.$icon = $('<span/>')));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var options = this.model.attributes;\n\t            this.$el.removeClass().addClass(options.cls).attr({ id: options.id,\n\t                href: options.href || 'javascript:void(0)',\n\t                title: options.title,\n\t                target: options.target || '_top',\n\t                disabled: options.disabled }).tooltip({ placement: 'bottom' }).off('click').on('click', function () {\n\t                options.onclick && !options.disabled && options.onclick();\n\t            });\n\t            this.$icon.removeClass().addClass(options.icon);\n\t        }\n\t    });\n\t\n\t    /** The check button is used in the tool form and allows to distinguish between multiple states e.g. all, partially and nothing selected. */\n\t    var ButtonCheck = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                title: 'Select/Unselect all',\n\t                icons: ['fa-square-o', 'fa-minus-square-o', 'fa-check-square-o'],\n\t                value: 0,\n\t                onchange: function () {}\n\t            }).set(options);\n\t            this.setElement($('<div/>').append(this.$icon = $('<span/>')).append(this.$title = $('<span/>')));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function (options) {\n\t            var self = this;\n\t            var options = this.model.attributes;\n\t            this.$el.addClass('ui-button-check').off('click').on('click', function () {\n\t                self.model.set('value', self.model.get('value') === 0 && 2 || 0);\n\t                options.onclick && options.onclick();\n\t            });\n\t            this.$title.html(options.title);\n\t            this.$icon.removeClass().addClass('icon fa ui-margin-right').addClass(options.icons[options.value]);\n\t        },\n\t\n\t        /* Sets a new value and/or returns the value.\n\t        * @param{Integer}   new_val - Set a new value 0=unchecked, 1=partial and 2=checked.\n\t        * OR:\n\t        * @param{Integer}   new_val - Number of selected options.\n\t        * @param{Integer}   total   - Total number of available options.\n\t        */\n\t        value: function (new_val, total) {\n\t            if (new_val !== undefined) {\n\t                if (total && new_val !== 0) {\n\t                    new_val = new_val !== total && 1 || 2;\n\t                }\n\t                this.model.set('value', new_val);\n\t                this.model.get('onchange')(this.model.get('value'));\n\t            }\n\t            return this.model.get('value');\n\t        }\n\t    });\n\t\n\t    /** This renders a differently styled, more compact button version. */\n\t    var ButtonIcon = ButtonDefault.extend({\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                title: '',\n\t                icon: '',\n\t                cls: 'ui-button-icon',\n\t                disabled: false\n\t            }).set(options);\n\t            this.setElement($('<div/>').append(this.$button = $('<div/>').append(this.$icon = $('<i/>')).append(this.$title = $('<span/>'))));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function (options) {\n\t            var self = this;\n\t            var options = this.model.attributes;\n\t            this.$el.removeClass().addClass(options.cls).addClass(options.disabled && 'disabled').attr('disabled', options.disabled).attr('id', options.id).off('click').on('click', function () {\n\t                $('.tooltip').hide();\n\t                !options.disabled && options.onclick && options.onclick();\n\t            });\n\t            this.$button.addClass('button').tooltip({ title: options.tooltip, placement: 'bottom' });\n\t            this.$icon.removeClass().addClass('icon fa').addClass(options.icon);\n\t            this.$title.addClass('title').html(options.title);\n\t            options.icon && options.title && this.$icon.addClass('ui-margin-right');\n\t        }\n\t    });\n\t\n\t    /** This class creates a button with dropdown menu. */\n\t    var ButtonMenu = ButtonDefault.extend({\n\t        $menu: null,\n\t        initialize: function (options) {\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: '',\n\t                title: '',\n\t                pull: 'right',\n\t                icon: null,\n\t                onclick: null,\n\t                cls: 'ui-button-icon ui-button-menu',\n\t                tooltip: '',\n\t                target: '',\n\t                href: '',\n\t                onunload: null,\n\t                visible: true,\n\t                tag: ''\n\t            }).set(options);\n\t            this.collection = new Backbone.Collection();\n\t            this.setElement($('<div/>').append(this.$root = $('<div/>').append(this.$icon = $('<i/>')).append(this.$title = $('<span/>'))));\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.listenTo(this.collection, 'change add remove reset', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var self = this;\n\t            var options = this.model.attributes;\n\t            this.$el.removeClass().addClass('dropdown').addClass(options.cls).attr('id', options.id).css({ display: options.visible && this.collection.where({ visible: true }).length > 0 ? 'block' : 'none' });\n\t            this.$root.addClass('root button dropdown-toggle').attr('data-toggle', 'dropdown').tooltip({ title: options.tooltip, placement: 'bottom' }).off('click').on('click', function (e) {\n\t                $('.tooltip').hide();\n\t                e.preventDefault();\n\t                options.onclick && options.onclick();\n\t            });\n\t            this.$icon.removeClass().addClass('icon fa').addClass(options.icon);\n\t            this.$title.removeClass().addClass('title').html(options.title);\n\t            options.icon && options.title && this.$icon.addClass('ui-margin-right');\n\t            this.$menu && this.$menu.remove();\n\t            if (this.collection.length > 0) {\n\t                this.$menu = $('<ul/>').addClass('menu dropdown-menu').addClass('pull-' + self.model.get('pull')).attr('role', 'menu');\n\t                this.$el.append(this.$menu);\n\t            }\n\t            this.collection.each(function (submodel) {\n\t                var suboptions = submodel.attributes;\n\t                if (suboptions.visible) {\n\t                    var $link = $('<a/>').addClass('dropdown-item').attr({ href: suboptions.href, target: suboptions.target }).append($('<i/>').addClass('fa').addClass(suboptions.icon).css('display', suboptions.icon ? 'inline-block' : 'none')).append(suboptions.title).on('click', function (e) {\n\t                        if (suboptions.onclick) {\n\t                            e.preventDefault();\n\t                            suboptions.onclick();\n\t                        }\n\t                    });\n\t                    self.$menu.append($('<li/>').append($link));\n\t                    suboptions.divider && self.$menu.append($('<li/>').addClass('divider'));\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Add a new menu item */\n\t        addMenu: function (options) {\n\t            this.collection.add(Utils.merge(options, {\n\t                title: '',\n\t                target: '',\n\t                href: '',\n\t                onclick: null,\n\t                divider: false,\n\t                visible: true,\n\t                icon: null,\n\t                cls: 'button-menu btn-group'\n\t            }));\n\t        }\n\t    });\n\t\n\t    return {\n\t        ButtonDefault: ButtonDefault,\n\t        ButtonLink: ButtonLink,\n\t        ButtonIcon: ButtonIcon,\n\t        ButtonCheck: ButtonCheck,\n\t        ButtonMenu: ButtonMenu\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery, Backbone, $, _) {// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n\t// not appended to the identifier of a nested array.\n\tjQuery.ajaxSettings.traditional = true;\n\t\n\t// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(33), __webpack_require__(34), __webpack_require__(18)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, GridModel, Templates, PopupMenu) {\n\t\n\t    // grid view\n\t    return Backbone.View.extend({\n\t\n\t        // model\n\t        grid: null,\n\t\n\t        // Initialize\n\t        initialize: function (grid_config) {\n\t            this.grid = new GridModel();\n\t            this.dict_format = grid_config.dict_format;\n\t            var self = this;\n\t            window.add_tag_to_grid_filter = function (tag_name, tag_value) {\n\t                // Put tag name and value together.\n\t                var tag = tag_name + (tag_value !== undefined && tag_value !== \"\" ? \":\" + tag_value : \"\");\n\t                var advanced_search = $('#advanced-search').is(\":visible\");\n\t                if (!advanced_search) {\n\t                    $('#standard-search').slideToggle('fast');\n\t                    $('#advanced-search').slideToggle('fast');\n\t                }\n\t                self.add_filter_condition(\"tags\", tag);\n\t            };\n\t\n\t            // set element\n\t            if (this.dict_format) {\n\t                this.setElement('<div/>');\n\t                if (grid_config.url_base && !grid_config.items) {\n\t                    var url_data = grid_config.url_data || {};\n\t                    _.each(grid_config.filters, function (v, k) {\n\t                        url_data['f-' + k] = v;\n\t                    });\n\t                    $.ajax({\n\t                        url: grid_config.url_base + '?' + $.param(url_data),\n\t                        success: function (response) {\n\t                            response.embedded = grid_config.embedded;\n\t                            response.filters = grid_config.filters || {};\n\t                            self.init_grid(response);\n\t                        }\n\t                    });\n\t                } else {\n\t                    this.init_grid(grid_config);\n\t                }\n\t            } else {\n\t                this.setElement('#grid-container');\n\t                this.init_grid(grid_config);\n\t            }\n\t\n\t            // fix padding\n\t            if (grid_config.use_panels) {\n\t                $('#center').css({\n\t                    padding: '10px',\n\t                    overflow: 'auto'\n\t                });\n\t            }\n\t        },\n\t\n\t        // refresh frames\n\t        handle_refresh: function (refresh_frames) {\n\t            if (refresh_frames) {\n\t                if ($.inArray('history', refresh_frames) > -1) {\n\t                    if (top.Galaxy && top.Galaxy.currHistoryPanel) {\n\t                        top.Galaxy.currHistoryPanel.loadCurrentHistory();\n\t                    }\n\t                }\n\t            }\n\t        },\n\t\n\t        // Initialize\n\t        init_grid: function (grid_config) {\n\t            this.grid.set(grid_config);\n\t\n\t            // get options\n\t            var options = this.grid.attributes;\n\t\n\t            // handle refresh requests\n\t            this.handle_refresh(options.refresh_frames);\n\t\n\t            // strip protocol and domain\n\t            var url = this.grid.get('url_base');\n\t            url = url.replace(/^.*\\/\\/[^\\/]+/, '');\n\t            this.grid.set('url_base', url);\n\t\n\t            // append main template\n\t            this.$el.html(Templates.grid(options));\n\t\n\t            // update div contents\n\t            this.$el.find('#grid-table-header').html(Templates.header(options));\n\t            this.$el.find('#grid-table-body').html(Templates.body(options));\n\t            this.$el.find('#grid-table-footer').html(Templates.footer(options));\n\t\n\t            // update message\n\t            if (options.message) {\n\t                this.$el.find('#grid-message').html(Templates.message(options));\n\t                var self = this;\n\t                if (options.use_hide_message) {\n\t                    setTimeout(function () {\n\t                        self.$el.find('#grid-message').html('');\n\t                    }, 5000);\n\t                }\n\t            }\n\t\n\t            // configure elements\n\t            this.init_grid_elements();\n\t            this.init_grid_controls();\n\t\n\t            // attach global event handler\n\t            // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n\t            init_refresh_on_change();\n\t        },\n\t\n\t        // Initialize grid controls\n\t        init_grid_controls: function () {\n\t\n\t            // link\n\t            var self = this;\n\t\n\t            // Initialize grid operation button.\n\t            this.$el.find('.operation-button').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    self.submit_operation(this);\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Initialize text filters to select text on click and use normal font when user is typing.\n\t            this.$el.find('input[type=text]').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    $(this).select();\n\t                }).keyup(function () {\n\t                    $(this).css('font-style', 'normal');\n\t                });\n\t            });\n\t\n\t            // Initialize sort links.\n\t            this.$el.find('.sort-link').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    self.set_sort_condition($(this).attr('sort_key'));\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Initialize text filters.\n\t            this.$el.find('.text-filter-form').each(function () {\n\t                $(this).off();\n\t                $(this).submit(function () {\n\t                    var column_key = $(this).attr('column_key');\n\t                    var text_input_obj = $('#input-' + column_key + '-filter');\n\t                    var text_input = text_input_obj.val();\n\t                    text_input_obj.val('');\n\t                    self.add_filter_condition(column_key, text_input);\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Initialize categorical filters.\n\t            this.$el.find('.text-filter-val > a').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    // Remove visible element.\n\t                    $(this).parent().remove();\n\t\n\t                    // Remove filter condition.\n\t                    self.remove_filter_condition($(this).attr('filter_key'), $(this).attr('filter_val'));\n\t\n\t                    // Return\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Initialize categorical filters.\n\t            this.$el.find('.categorical-filter > a').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    self.set_categorical_filter($(this).attr('filter_key'), $(this).attr('filter_val'));\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Initialize standard, advanced search toggles.\n\t            this.$el.find('.advanced-search-toggle').each(function () {\n\t                $(this).off();\n\t                $(this).click(function () {\n\t                    self.$el.find('#standard-search').slideToggle('fast');\n\t                    self.$el.find('#advanced-search').slideToggle('fast');\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // Add event to check all box\n\t            this.$el.find('#check_all').off();\n\t            this.$el.find('#check_all').on('click', function () {\n\t                self.check_all_items();\n\t            });\n\t        },\n\t\n\t        // Initialize grid elements.\n\t        init_grid_elements: function () {\n\t            // Initialize grid selection checkboxes.\n\t            this.$el.find('.grid').each(function () {\n\t                var checkboxes = $(this).find(\"input.grid-row-select-checkbox\");\n\t                var check_count = $(this).find(\"span.grid-selected-count\");\n\t                var update_checked = function () {\n\t                    check_count.text($(checkboxes).filter(\":checked\").length);\n\t                };\n\t\n\t                $(checkboxes).each(function () {\n\t                    $(this).change(update_checked);\n\t                });\n\t                update_checked();\n\t            });\n\t\n\t            // Initialize ratings.\n\t            if (this.$el.find('.community_rating_star').length !== 0) this.$el.find('.community_rating_star').rating({});\n\t\n\t            // get options\n\t            var options = this.grid.attributes;\n\t            var self = this;\n\t\n\t            //\n\t            // add page click events\n\t            //\n\t            this.$el.find('.page-link > a').each(function () {\n\t                $(this).click(function () {\n\t                    self.set_page($(this).attr('page_num'));\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            //\n\t            // add inbound/outbound events\n\t            //\n\t            this.$el.find('.use-target').each(function () {\n\t                $(this).click(function (e) {\n\t                    self.execute({\n\t                        href: $(this).attr('href'),\n\t                        target: $(this).attr('target')\n\t                    });\n\t                    return false;\n\t                });\n\t            });\n\t\n\t            // empty grid?\n\t            var items_length = options.items.length;\n\t            if (items_length == 0) {\n\t                return;\n\t            }\n\t\n\t            // add operation popup menus\n\t            _.each(options.items, function (item, index) {\n\t                var button = self.$('#grid-' + index + '-popup').off();\n\t                var popup = new PopupMenu(button);\n\t                _.each(options['operations'], function (operation) {\n\t                    self._add_operation(popup, operation, item);\n\t                });\n\t            });\n\t        },\n\t\n\t        /** Add an operation to the items menu */\n\t        _add_operation: function (popup, operation, item) {\n\t            var self = this;\n\t            var settings = item.operation_config[operation.label];\n\t            if (settings.allowed && operation.allow_popup) {\n\t                popup.addItem({\n\t                    html: operation.label,\n\t                    href: settings.url_args,\n\t                    target: settings.target,\n\t                    confirmation_text: operation.confirm,\n\t                    func: function (e) {\n\t                        e.preventDefault();\n\t                        var label = $(e.target).html();\n\t                        if (operation.onclick) {\n\t                            operation.onclick(item.encode_id);\n\t                        } else {\n\t                            self.execute(this.findItemByHtml(label));\n\t                        }\n\t                    }\n\t                });\n\t            }\n\t        },\n\t\n\t        // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n\t        add_filter_condition: function (name, value) {\n\t            // Do nothing is value is empty.\n\t            if (value === \"\") {\n\t                return false;\n\t            }\n\t\n\t            // Add condition to grid.\n\t            this.grid.add_filter(name, value, true);\n\t\n\t            // Add button that displays filter and provides a button to delete it.\n\t            var t = $(Templates.filter_element(name, value));\n\t            var self = this;\n\t            t.click(function () {\n\t                // Remove visible element.\n\t                $(this).remove();\n\t\n\t                // Remove filter condition.\n\t                self.remove_filter_condition(name, value);\n\t            });\n\t\n\t            // append to container\n\t            var container = this.$el.find('#' + name + '-filtering-criteria');\n\t            container.append(t);\n\t\n\t            // execute\n\t            this.go_page_one();\n\t            this.execute();\n\t        },\n\t\n\t        // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n\t        remove_filter_condition: function (name, value) {\n\t            // Remove filter condition.\n\t            this.grid.remove_filter(name, value);\n\t\n\t            // Execute\n\t            this.go_page_one();\n\t            this.execute();\n\t        },\n\t\n\t        // Set sort condition for grid.\n\t        set_sort_condition: function (col_key) {\n\t            // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n\t            // currently sorted column, sort is reversed.\n\t            var cur_sort = this.grid.get('sort_key');\n\t            var new_sort = col_key;\n\t            if (cur_sort.indexOf(col_key) !== -1) {\n\t                // Reverse sort.\n\t                if (cur_sort.substring(0, 1) !== '-') {\n\t                    new_sort = '-' + col_key;\n\t                }\n\t            }\n\t\n\t            // Remove sort arrows elements.\n\t            this.$el.find('.sort-arrow').remove();\n\t\n\t            // Add sort arrow element to new sort column.\n\t            var sort_arrow = new_sort.substring(0, 1) == '-' ? '&uarr;' : '&darr;';\n\t            var t = $('<span>' + sort_arrow + '</span>').addClass('sort-arrow');\n\t\n\t            // Add to header\n\t            this.$el.find('#' + col_key + '-header').append(t);\n\t\n\t            // Update grid.\n\t            this.grid.set('sort_key', new_sort);\n\t            this.go_page_one();\n\t            this.execute();\n\t        },\n\t\n\t        // Set new value for categorical filter.\n\t        set_categorical_filter: function (name, new_value) {\n\t            // Update filter hyperlinks to reflect new filter value.\n\t            var category_filter = this.grid.get('categorical_filters')[name],\n\t                cur_value = this.grid.get('filters')[name];\n\t            var self = this;\n\t            this.$el.find('.' + name + '-filter').each(function () {\n\t                var text = $.trim($(this).text());\n\t                var filter = category_filter[text];\n\t                var filter_value = filter[name];\n\t                if (filter_value == new_value) {\n\t                    // Remove filter link since grid will be using this filter. It is assumed that\n\t                    // this element has a single child, a hyperlink/anchor with text.\n\t                    $(this).empty();\n\t                    $(this).addClass('current-filter');\n\t                    $(this).append(text);\n\t                } else if (filter_value == cur_value) {\n\t                    // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n\t                    // this element has a single child, a hyperlink/anchor.\n\t                    $(this).empty();\n\t                    var t = $('<a href=\"#\">' + text + '</a>');\n\t                    t.click(function () {\n\t                        self.set_categorical_filter(name, filter_value);\n\t                    });\n\t                    $(this).removeClass('current-filter');\n\t                    $(this).append(t);\n\t                }\n\t            });\n\t\n\t            // Update grid.\n\t            this.grid.add_filter(name, new_value);\n\t            this.go_page_one();\n\t            this.execute();\n\t        },\n\t\n\t        // Set page to view.\n\t        set_page: function (new_page) {\n\t            // Update page hyperlink to reflect new page.\n\t            var self = this;\n\t            this.$el.find('.page-link').each(function () {\n\t                var id = $(this).attr('id'),\n\t                    page_num = parseInt(id.split('-')[2], 10),\n\t                    // Id has form 'page-link-<page_num>\n\t                cur_page = self.grid.get('cur_page'),\n\t                    text;\n\t                if (page_num === new_page) {\n\t                    // Remove link to page since grid will be on this page. It is assumed that\n\t                    // this element has a single child, a hyperlink/anchor with text.\n\t                    text = $(this).children().text();\n\t                    $(this).empty();\n\t                    $(this).addClass('inactive-link');\n\t                    $(this).text(text);\n\t                } else if (page_num === cur_page) {\n\t                    // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n\t                    // this element has a single child, a hyperlink/anchor.\n\t                    text = $(this).text();\n\t                    $(this).empty();\n\t                    $(this).removeClass('inactive-link');\n\t                    var t = $('<a href=\"#\">' + text + '</a>');\n\t                    t.click(function () {\n\t                        self.set_page(page_num);\n\t                    });\n\t                    $(this).append(t);\n\t                }\n\t            });\n\t\n\t            if (new_page === 'all') {\n\t                this.grid.set('cur_page', new_page);\n\t            } else {\n\t                this.grid.set('cur_page', parseInt(new_page, 10));\n\t            }\n\t            this.execute();\n\t        },\n\t\n\t        // confirmation/submission of operation request\n\t        submit_operation: function (operation_button, confirmation_text) {\n\t            // identify operation\n\t            var operation_name = $(operation_button).val();\n\t\n\t            // verify in any item is selected\n\t            var number_of_checked_ids = this.$el.find('input[name=\"id\"]:checked').length;\n\t            if (!number_of_checked_ids > 0) {\n\t                return false;\n\t            }\n\t\n\t            // Check to see if there's grid confirmation text for this operation\n\t            var operation = _.findWhere(this.grid.attributes.operations, { label: operation_name });\n\t            if (operation && !confirmation_text) {\n\t                confirmation_text = operation.confirm || '';\n\t            }\n\t\n\t            // collect ids\n\t            var item_ids = [];\n\t            this.$el.find('input[name=id]:checked').each(function () {\n\t                item_ids.push($(this).val());\n\t            });\n\t\n\t            // execute operation\n\t            var options = {\n\t                operation: operation_name,\n\t                id: item_ids,\n\t                confirmation_text: confirmation_text\n\t            };\n\t            if (operation.target == 'top') {\n\t                options = _.extend(options, {\n\t                    href: operation.href,\n\t                    target: operation.target\n\t                });\n\t            }\n\t            this.execute(options);\n\t            return true;\n\t        },\n\t\n\t        check_all_items: function () {\n\t            var check = this.$('.grid-row-select-checkbox');\n\t            var state = this.$('#check_all').prop('checked');\n\t            _.each(check, function (c) {\n\t                $(c).prop('checked', state);\n\t            });\n\t            this.init_grid_elements();\n\t        },\n\t\n\t        // Go back to page one; this is useful when a filter is applied.\n\t        go_page_one: function () {\n\t            // Need to go back to page 1 if not showing all.\n\t            var cur_page = this.grid.get('cur_page');\n\t            if (cur_page !== null && cur_page !== undefined && cur_page !== 'all') {\n\t                this.grid.set('cur_page', 1);\n\t            }\n\t        },\n\t\n\t        //\n\t        // execute operations and hyperlink requests\n\t        //\n\t        execute: function (options) {\n\t            // get url\n\t            var id = null;\n\t            var href = null;\n\t            var operation = null;\n\t            var confirmation_text = null;\n\t            var target = null;\n\t\n\t            // check for options\n\t            if (options) {\n\t                // get options\n\t                href = options.href;\n\t                operation = options.operation;\n\t                id = options.id;\n\t                confirmation_text = options.confirmation_text;\n\t                target = options.target;\n\t\n\t                // check if input contains the operation tag\n\t                if (href !== undefined && href.indexOf('operation=') != -1) {\n\t                    // Get operation, id in hyperlink's href.\n\t                    var href_parts = href.split(\"?\");\n\t                    if (href_parts.length > 1) {\n\t                        var href_parms_str = href_parts[1];\n\t                        var href_parms = href_parms_str.split(\"&\");\n\t                        for (var index = 0; index < href_parms.length; index++) {\n\t                            if (href_parms[index].indexOf('operation') != -1) {\n\t                                // Found operation parm; get operation value.\n\t                                operation = href_parms[index].split('=')[1];\n\t                                operation = operation.replace(/\\+/g, ' ');\n\t                            } else if (href_parms[index].indexOf('id') != -1) {\n\t                                // Found id parm; get id value.\n\t                                id = href_parms[index].split('=')[1];\n\t                            }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t\n\t            // check for operation details\n\t            if (operation && id) {\n\t                // show confirmation box\n\t                if (confirmation_text && confirmation_text != '' && confirmation_text != 'None' && confirmation_text != 'null') if (!confirm(confirmation_text)) return false;\n\t\n\t                // use small characters for operation?!\n\t                operation = operation.toLowerCase();\n\t\n\t                // Update grid.\n\t                this.grid.set({\n\t                    operation: operation,\n\t                    item_ids: id\n\t                });\n\t\n\t                // Do operation. If operation cannot be performed asynchronously, redirect to location.\n\t                if (target == 'top') {\n\t                    window.top.location = href + '?' + $.param(this.grid.get_url_data());\n\t                } else if (this.grid.can_async_op(operation) || this.dict_format) {\n\t                    this.update_grid();\n\t                } else {\n\t                    this.go_to(target, href);\n\t                }\n\t\n\t                // done\n\t                return false;\n\t            }\n\t\n\t            // refresh grid\n\t            if (href) {\n\t                this.go_to(target, href);\n\t                return false;\n\t            }\n\t\n\t            // refresh grid\n\t            if (this.grid.get('async') || this.dict_format) {\n\t                this.update_grid();\n\t            } else {\n\t                this.go_to(target, href);\n\t            }\n\t\n\t            // done\n\t            return false;\n\t        },\n\t\n\t        // go to url\n\t        go_to: function (target, href) {\n\t            // get aysnc status\n\t            var async = this.grid.get('async');\n\t            this.grid.set('async', false);\n\t\n\t            // get slide status\n\t            var advanced_search = this.$el.find('#advanced-search').is(':visible');\n\t            this.grid.set('advanced_search', advanced_search);\n\t\n\t            // get default url\n\t            if (!href) {\n\t                href = this.grid.get('url_base') + '?' + $.param(this.grid.get_url_data());\n\t            }\n\t\n\t            // clear grid of transient request attributes.\n\t            this.grid.set({\n\t                operation: undefined,\n\t                item_ids: undefined,\n\t                async: async\n\t            });\n\t            switch (target) {\n\t                case 'inbound':\n\t                    // this currently assumes that there is only a single grid shown at a time\n\t                    var $div = $('.grid-header').closest('.inbound');\n\t                    if ($div.length !== 0) {\n\t                        $div.load(href);\n\t                        return;\n\t                    }\n\t                    break;\n\t                case 'top':\n\t                    window.top.location = href;\n\t                    break;\n\t                default:\n\t                    window.location = href;\n\t            }\n\t        },\n\t\n\t        // Update grid.\n\t        update_grid: function () {\n\t            // If there's an operation, do POST; otherwise, do GET.\n\t            var method = this.grid.get('operation') ? 'POST' : 'GET';\n\t\n\t            // Show overlay to indicate loading and prevent user actions.\n\t            this.$el.find('.loading-elt-overlay').show();\n\t            var self = this;\n\t            $.ajax({\n\t                type: method,\n\t                url: self.grid.get('url_base'),\n\t                data: self.grid.get_url_data(),\n\t                error: function (response) {\n\t                    alert('Grid refresh failed');\n\t                },\n\t                success: function (response_text) {\n\t\n\t                    // backup\n\t                    var embedded = self.grid.get('embedded');\n\t                    var insert = self.grid.get('insert');\n\t                    var advanced_search = self.$el.find('#advanced-search').is(':visible');\n\t\n\t                    // request new configuration\n\t                    var json = self.dict_format ? response_text : $.parseJSON(response_text);\n\t\n\t                    // update\n\t                    json.embedded = embedded;\n\t                    json.insert = insert;\n\t                    json.advanced_search = advanced_search;\n\t\n\t                    // Initialize new grid config\n\t                    self.init_grid(json);\n\t\n\t                    // Hide loading overlay.\n\t                    self.$el.find('.loading-elt-overlay').hide();\n\t                },\n\t                complete: function () {\n\t                    // Clear grid of transient request attributes.\n\t                    self.grid.set({\n\t                        operation: undefined,\n\t                        item_ids: undefined\n\t                    });\n\t                }\n\t            });\n\t        }\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(9), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Portlet, Ui) {\n\t\n\t    // ui list element\n\t    var View = Backbone.View.extend({\n\t        // create portlet to keep track of selected list elements\n\t        initialize: function (options) {\n\t            // link this\n\t            var self = this;\n\t\n\t            // initialize options\n\t            this.options = options;\n\t            this.name = options.name || 'element';\n\t            this.multiple = options.multiple || false;\n\t\n\t            // create message handler\n\t            this.message = new Ui.Message();\n\t\n\t            // create portlet\n\t            this.portlet = new Portlet.View({ cls: 'ui-portlet-section' });\n\t\n\t            // create select field containing the options which can be inserted into the list\n\t            this.select = new Ui.Select.View({ optional: options.optional });\n\t\n\t            // create insert new list element button\n\t            this.button = new Ui.ButtonIcon({\n\t                icon: 'fa fa-sign-in',\n\t                tooltip: 'Insert new ' + this.name,\n\t                onclick: function () {\n\t                    self.add({\n\t                        id: self.select.value(),\n\t                        name: self.select.text()\n\t                    });\n\t                }\n\t            });\n\t\n\t            // build main element\n\t            this.setElement(this._template(options));\n\t            this.$('.ui-list-message').append(this.message.$el);\n\t            this.$('.ui-list-portlet').append(this.portlet.$el);\n\t            this.$('.ui-list-button').append(this.button.$el);\n\t            this.$('.ui-list-select').append(this.select.$el);\n\t        },\n\t\n\t        /** Return/Set currently selected list elements */\n\t        value: function (val) {\n\t            // set new value\n\t            if (val !== undefined) {\n\t                this.portlet.empty();\n\t                if ($.isArray(val)) {\n\t                    for (var i in val) {\n\t                        var v = val[i];\n\t                        var v_id = null;\n\t                        var v_name = null;\n\t                        if ($.type(v) != 'string') {\n\t                            v_id = v.id;\n\t                            v_name = v.name;\n\t                        } else {\n\t                            v_id = v_name = v;\n\t                        }\n\t                        if (v_id != null) {\n\t                            this.add({\n\t                                id: v_id,\n\t                                name: v_name\n\t                            });\n\t                        }\n\t                    }\n\t                }\n\t                this._refresh();\n\t            }\n\t            // get current value\n\t            var lst = [];\n\t            this.$('.ui-list-id').each(function () {\n\t                lst.push({\n\t                    id: $(this).prop('id'),\n\t                    name: $(this).find('.ui-list-name').html()\n\t                });\n\t            });\n\t            if (lst.length == 0) {\n\t                return null;\n\t            }\n\t            return lst;\n\t        },\n\t\n\t        /** Add row */\n\t        add: function (options) {\n\t            var self = this;\n\t            if (this.$('[id=\"' + options.id + '\"]').length === 0) {\n\t                if (!Utils.isEmpty(options.id)) {\n\t                    var $el = $(this._templateRow({\n\t                        id: options.id,\n\t                        name: options.name\n\t                    }));\n\t                    $el.on('click', function () {\n\t                        $el.remove();\n\t                        self._refresh();\n\t                    });\n\t                    $el.on('mouseover', function () {\n\t                        $el.addClass('portlet-highlight');\n\t                    });\n\t                    $el.on('mouseout', function () {\n\t                        $el.removeClass('portlet-highlight');\n\t                    });\n\t                    this.portlet.append($el);\n\t                    this._refresh();\n\t                } else {\n\t                    this.message.update({ message: 'Please select a valid ' + this.name + '.', status: 'danger' });\n\t                }\n\t            } else {\n\t                this.message.update({ message: 'This ' + this.name + ' is already in the list.' });\n\t            }\n\t        },\n\t\n\t        /** Update available options */\n\t        update: function (options) {\n\t            this.select.update(options);\n\t        },\n\t\n\t        /** Refresh view */\n\t        _refresh: function () {\n\t            if (this.$('.ui-list-id').length > 0) {\n\t                !this.multiple && this.button.disable();\n\t                this.$('.ui-list-portlet').show();\n\t            } else {\n\t                this.button.enable();\n\t                this.$('.ui-list-portlet').hide();\n\t            }\n\t            this.options.onchange && this.options.onchange();\n\t        },\n\t\n\t        /** Main Template */\n\t        _template: function (options) {\n\t            return '<div class=\"ui-list\">' + '<div class=\"ui-margin-top\">' + '<span class=\"ui-list-button\"/>' + '<span class=\"ui-list-select\"/>' + '</div>' + '<div class=\"ui-list-message\"/>' + '<div class=\"ui-list-portlet\"/>' + '</div>';\n\t        },\n\t\n\t        /** Row Template */\n\t        _templateRow: function (options) {\n\t            return '<div id=\"' + options.id + '\" class=\"ui-list-id\">' + '<span class=\"ui-list-delete fa fa-trash\"/>' + '<span class=\"ui-list-name\">' + options.name + '</span>' + '</div>';\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {/** Base class for options based ui elements **/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Buttons) {\n\t    var Base = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            var self = this;\n\t            this.model = options && options.model || new Backbone.Model({\n\t                visible: true,\n\t                data: [],\n\t                id: Utils.uid(),\n\t                error_text: 'No options available.',\n\t                wait_text: 'Please wait...',\n\t                multiple: false,\n\t                optional: false,\n\t                onchange: function () {}\n\t            }).set(options);\n\t            this.listenTo(this.model, 'change:value', this._changeValue, this);\n\t            this.listenTo(this.model, 'change:wait', this._changeWait, this);\n\t            this.listenTo(this.model, 'change:data', this._changeData, this);\n\t            this.listenTo(this.model, 'change:visible', this._changeVisible, this);\n\t            this.on('change', function () {\n\t                self.model.get('onchange')(self.value());\n\t            });\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var self = this;\n\t            this.$el.empty().removeClass().addClass('ui-options').append(this.$message = $('<div/>')).append(this.$menu = $('<div/>').addClass('ui-options-menu')).append(this.$options = $(this._template()));\n\t\n\t            // add select/unselect all button\n\t            this.all_button = null;\n\t            if (this.model.get('multiple')) {\n\t                this.all_button = new Buttons.ButtonCheck({\n\t                    onclick: function () {\n\t                        self.$('input').prop('checked', self.all_button.value() !== 0);\n\t                        self.value(self._getValue());\n\t                        self.trigger('change');\n\t                    }\n\t                });\n\t                this.$menu.append(this.all_button.$el);\n\t            }\n\t\n\t            // finalize dom\n\t            this._changeData();\n\t            this._changeWait();\n\t            this._changeVisible();\n\t        },\n\t\n\t        /** Update available options */\n\t        update: function (options) {\n\t            this.model.set('data', options);\n\t        },\n\t\n\t        _changeData: function () {\n\t            var self = this;\n\t            this.$options.empty();\n\t            if (this._templateOptions) {\n\t                this.$options.append(this._templateOptions(this.model.get('data')));\n\t            } else {\n\t                _.each(this.model.get('data'), function (option) {\n\t                    self.$options.append($(self._templateOption(option)).addClass('ui-option').tooltip({ title: option.tooltip, placement: 'bottom' }));\n\t                });\n\t            }\n\t            var self = this;\n\t            this.$('input').on('change', function () {\n\t                self.value(self._getValue());\n\t                self.trigger('change');\n\t            });\n\t            this._changeValue();\n\t            this._changeWait();\n\t        },\n\t\n\t        _changeVisible: function () {\n\t            this.$el[this.model.get('visible') ? 'show' : 'hide']();\n\t        },\n\t\n\t        _changeWait: function () {\n\t            if (this.model.get('wait')) {\n\t                if (this.length() === 0) {\n\t                    this._messageShow(this.model.get('wait_text'), 'info');\n\t                    this.$options.hide();\n\t                    this.$menu.hide();\n\t                }\n\t            } else {\n\t                if (this.length() === 0) {\n\t                    this._messageShow(this.model.get('error_text'), 'danger');\n\t                    this.$options.hide();\n\t                    this.$menu.hide();\n\t                } else {\n\t                    this.$message.hide();\n\t                    this.$options.css('display', 'inline-block');\n\t                    this.$menu.show();\n\t                }\n\t            }\n\t        },\n\t\n\t        _changeValue: function () {\n\t            this._setValue(this.model.get('value'));\n\t            if (this._getValue() === null && !this.model.get('multiple') && !this.model.get('optional')) {\n\t                this._setValue(this.first());\n\t            }\n\t            this.all_button && this.all_button.value($.isArray(this._getValue()) ? this._getValue().length : 0, this.length());\n\t        },\n\t\n\t        /** Return/Set current selection */\n\t        value: function (new_value) {\n\t            new_value !== undefined && this.model.set('value', new_value);\n\t            return this._getValue();\n\t        },\n\t\n\t        /** Return first available option */\n\t        first: function () {\n\t            var options = this.$('input').first();\n\t            return options.length > 0 ? options.val() : null;\n\t        },\n\t\n\t        /** Show a spinner indicating that the select options are currently loaded */\n\t        wait: function () {\n\t            this.model.set('wait', true);\n\t        },\n\t\n\t        /** Hide spinner indicating that the request has been completed */\n\t        unwait: function () {\n\t            this.model.set('wait', false);\n\t        },\n\t\n\t        /** Returns the number of options */\n\t        length: function () {\n\t            return this.$('.ui-option').length;\n\t        },\n\t\n\t        /** Set value to dom */\n\t        _setValue: function (new_value) {\n\t            var self = this;\n\t            if (new_value !== undefined) {\n\t                this.$('input').prop('checked', false);\n\t                if (new_value !== null) {\n\t                    var values = $.isArray(new_value) ? new_value : [new_value];\n\t                    _.each(values, function (v) {\n\t                        self.$('input[value=\"' + v + '\"]').first().prop('checked', true);\n\t                    });\n\t                }\n\t            }\n\t        },\n\t\n\t        /** Return current selection */\n\t        _getValue: function () {\n\t            var selected = [];\n\t            this.$(':checked').each(function () {\n\t                selected.push($(this).val());\n\t            });\n\t            if (Utils.isEmpty(selected)) {\n\t                return null;\n\t            }\n\t            return this.model.get('multiple') ? selected : selected[0];\n\t        },\n\t\n\t        /** Show message instead if options */\n\t        _messageShow: function (text, status) {\n\t            this.$message.show().removeClass().addClass('ui-message alert alert-' + status).html(text);\n\t        },\n\t\n\t        /** Main template function */\n\t        _template: function () {\n\t            return $('<div/>').addClass('ui-options-list');\n\t        }\n\t    });\n\t\n\t    /** Iconized **/\n\t    var BaseIcons = Base.extend({\n\t        _templateOption: function (pair) {\n\t            var id = Utils.uid();\n\t            return $('<div/>').addClass('ui-option').append($('<input/>').attr({\n\t                id: id,\n\t                type: this.model.get('type'),\n\t                name: this.model.id,\n\t                value: pair.value })).append($('<label/>').addClass('ui-options-label').attr('for', id).html(pair.label));\n\t        }\n\t    });\n\t\n\t    /** Radio button field **/\n\t    var Radio = {};\n\t    Radio.View = BaseIcons.extend({\n\t        initialize: function (options) {\n\t            options.type = 'radio';\n\t            BaseIcons.prototype.initialize.call(this, options);\n\t        }\n\t    });\n\t\n\t    /** Checkbox options field **/\n\t    var Checkbox = {};\n\t    Checkbox.View = BaseIcons.extend({\n\t        initialize: function (options) {\n\t            options.type = 'checkbox';\n\t            options.multiple = true;\n\t            BaseIcons.prototype.initialize.call(this, options);\n\t        }\n\t    });\n\t\n\t    /** Radio button options field styled as classic buttons **/\n\t    var RadioButton = {};\n\t    RadioButton.View = Base.extend({\n\t        initialize: function (options) {\n\t            Base.prototype.initialize.call(this, options);\n\t        },\n\t\n\t        /** Set current value */\n\t        _setValue: function (new_value) {\n\t            if (new_value !== undefined) {\n\t                this.$('input').prop('checked', false);\n\t                this.$('label').removeClass('active');\n\t                this.$('[value=\"' + new_value + '\"]').prop('checked', true).closest('label').addClass('active');\n\t            }\n\t        },\n\t\n\t        /** Template for a single option */\n\t        _templateOption: function (pair) {\n\t            var $el = $('<label/>').addClass('btn btn-default');\n\t            pair.icon && $el.append($('<i/>').addClass('fa').addClass(pair.icon).addClass(!pair.label && 'no-padding'));\n\t            $el.append($('<input/>').attr({ type: 'radio', name: this.model.id, value: pair.value }));\n\t            pair.label && $el.append(pair.label);\n\t            return $el;\n\t        },\n\t\n\t        /** Main template function */\n\t        _template: function () {\n\t            return $('<div/>').addClass('btn-group ui-radiobutton').attr('data-toggle', 'buttons');\n\t        }\n\t    });\n\t\n\t    return {\n\t        Base: Base,\n\t        BaseIcons: BaseIcons,\n\t        Radio: Radio,\n\t        RadioButton: RadioButton,\n\t        Checkbox: Checkbox\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {/**\n\t *  This class creates/wraps a default html select field as backbone class.\n\t */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(11)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Buttons) {\n\t    var View = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            var self = this;\n\t            this.data = [];\n\t            this.data2 = [];\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                cls: 'ui-select',\n\t                error_text: 'No options available',\n\t                empty_text: 'Nothing selected',\n\t                visible: true,\n\t                wait: false,\n\t                multiple: false,\n\t                searchable: true,\n\t                optional: false,\n\t                disabled: false,\n\t                onchange: function () {},\n\t                value: null,\n\t                individual: false,\n\t                pagesize: 20\n\t            }).set(options);\n\t            this.on('change', function () {\n\t                self.model.get('onchange') && self.model.get('onchange')(self.value());\n\t            });\n\t            this.listenTo(this.model, 'change:data', this._changeData, this);\n\t            this.listenTo(this.model, 'change:disabled', this._changeDisabled, this);\n\t            this.listenTo(this.model, 'change:wait', this._changeWait, this);\n\t            this.listenTo(this.model, 'change:visible', this._changeVisible, this);\n\t            this.listenTo(this.model, 'change:value', this._changeValue, this);\n\t            this.listenTo(this.model, 'change:multiple change:searchable change:cls change:id', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var self = this;\n\t            this.model.get('searchable') ? this._renderSearchable() : this._renderClassic();\n\t            this.$el.addClass(this.model.get('cls')).attr('id', this.model.get('id'));\n\t            this.$select.empty().addClass('select').attr('id', this.model.get('id') + '_select').prop('multiple', this.model.get('multiple')).on('change', function () {\n\t                self.value(self._getValue());\n\t                self.trigger('change');\n\t            });\n\t            this._changeData();\n\t            this._changeWait();\n\t            this._changeVisible();\n\t            this._changeDisabled();\n\t        },\n\t\n\t        /** Renders the classic selection field */\n\t        _renderClassic: function () {\n\t            var self = this;\n\t            this.$el.addClass(this.model.get('multiple') ? 'ui-select-multiple' : 'ui-select').append(this.$select = $('<select/>')).append(this.$dropdown = $('<div/>')).append(this.$resize = $('<div/>').append(this.$resize_icon = $('<i/>')));\n\t            if (this.model.get('multiple')) {\n\t                this.$dropdown.hide();\n\t                this.$resize_icon.addClass('fa fa-angle-double-right fa-rotate-45').show();\n\t                this.$resize.removeClass().addClass('icon-resize').show().off('mousedown').on('mousedown', function (event) {\n\t                    var currentY = event.pageY;\n\t                    var currentHeight = self.$select.height();\n\t                    self.minHeight = self.minHeight || currentHeight;\n\t                    $('#dd-helper').show().on('mousemove', function (event) {\n\t                        self.$select.height(Math.max(currentHeight + (event.pageY - currentY), self.minHeight));\n\t                    }).on('mouseup mouseleave', function () {\n\t                        $('#dd-helper').hide().off();\n\t                    });\n\t                });\n\t            } else {\n\t                this.$dropdown.show();\n\t                this.$resize.hide();\n\t                this.$resize_icon.hide();\n\t            }\n\t        },\n\t\n\t        /** Renders the default select2 field */\n\t        _renderSearchable: function () {\n\t            var self = this;\n\t            this.$el.append(this.$select = $('<div/>')).append(this.$dropdown = $('<div/>'));\n\t            this.$dropdown.hide();\n\t            if (!this.model.get('multiple')) {\n\t                this.$dropdown.show().on('click', function () {\n\t                    self.$select.select2 && self.$select.select2('open');\n\t                });\n\t            }\n\t            this.all_button = null;\n\t            if (this.model.get('multiple') && !this.model.get('individual')) {\n\t                this.all_button = new Buttons.ButtonCheck({\n\t                    onclick: function () {\n\t                        var new_value = [];\n\t                        self.all_button.value() !== 0 && _.each(self.model.get('data'), function (option) {\n\t                            new_value.push(option.value);\n\t                        });\n\t                        self.value(new_value);\n\t                        self.trigger('change');\n\t                    }\n\t                });\n\t                this.$el.prepend(this.all_button.$el);\n\t            }\n\t        },\n\t\n\t        /** Matches a search term with a given text */\n\t        _match: function (term, text) {\n\t            return !term || term == '' || String(text).toUpperCase().indexOf(term.toUpperCase()) >= 0;\n\t        },\n\t\n\t        /** Updates the selection options */\n\t        _changeData: function () {\n\t            var self = this;\n\t            this.data = [];\n\t            if (!this.model.get('multiple') && this.model.get('optional')) {\n\t                this.data.push({ value: '__null__', label: self.model.get('empty_text') });\n\t            }\n\t            _.each(this.model.get('data'), function (option) {\n\t                self.data.push(option);\n\t            });\n\t            if (this.length() == 0) {\n\t                this.data.push({ value: '__null__', label: this.model.get('error_text') });\n\t            }\n\t            if (this.model.get('searchable')) {\n\t                this.data2 = [];\n\t                _.each(this.data, function (option, index) {\n\t                    self.data2.push({ order: index, id: option.value, text: option.label, tags: option.tags });\n\t                });\n\t                this.$select.data('select2') && this.$select.select2('destroy');\n\t                this.matched_tags = {};\n\t                this.$select.select2({\n\t                    data: self.data2,\n\t                    closeOnSelect: !this.model.get('multiple'),\n\t                    multiple: this.model.get('multiple'),\n\t                    query: function (q) {\n\t                        self.matched_tags = {};\n\t                        var pagesize = self.model.get('pagesize');\n\t                        var results = _.filter(self.data2, function (e) {\n\t                            var found = false;\n\t                            _.each(e.tags, function (tag) {\n\t                                if (self._match(q.term, tag)) {\n\t                                    found = self.matched_tags[tag] = true;\n\t                                }\n\t                            });\n\t                            return found || self._match(q.term, e.text);\n\t                        });\n\t                        q.callback({\n\t                            results: results.slice((q.page - 1) * pagesize, q.page * pagesize),\n\t                            more: results.length >= q.page * pagesize\n\t                        });\n\t                    },\n\t                    formatResult: function (result) {\n\t                        return _.escape(result.text) + '<div class=\"ui-tags\">' + _.reduce(result.tags, function (memo, tag) {\n\t                            if (self.matched_tags[tag]) {\n\t                                return memo + '&nbsp;' + '<div class=\"label label-info\">' + _.escape(tag) + '</div>';\n\t                            }\n\t                            return memo;\n\t                        }, '') + '</div>';\n\t                    }\n\t                });\n\t                this.$('.select2-container .select2-search input').off('blur');\n\t            } else {\n\t                this.$select.find('option').remove();\n\t                _.each(this.data, function (option) {\n\t                    self.$select.append($('<option/>').attr('value', option.value).html(_.escape(option.label)));\n\t                });\n\t            }\n\t            this.model.set('disabled', this.length() == 0);\n\t            this._changeValue();\n\t        },\n\t\n\t        /** Handles field enabling/disabling, usually used when no options are available */\n\t        _changeDisabled: function () {\n\t            if (this.model.get('searchable')) {\n\t                this.$select.select2(this.model.get('disabled') ? 'disable' : 'enable');\n\t            } else {\n\t                this.$select.prop('disabled', this.model.get('disabled'));\n\t            }\n\t        },\n\t\n\t        /** Searchable fields may display a spinner e.g. while waiting for a server response */\n\t        _changeWait: function () {\n\t            this.$dropdown.removeClass().addClass('icon-dropdown fa').addClass(this.model.get('wait') ? 'fa-spinner fa-spin' : 'fa-caret-down');\n\t        },\n\t\n\t        /** Handles field visibility */\n\t        _changeVisible: function () {\n\t            this.$el[this.model.get('visible') ? 'show' : 'hide']();\n\t            this.$select[this.model.get('visible') ? 'show' : 'hide']();\n\t        },\n\t\n\t        /** Synchronizes the model value with the actually selected field value */\n\t        _changeValue: function () {\n\t            this._setValue(this.model.get('value'));\n\t            if (this.model.get('multiple')) {\n\t                if (this.all_button) {\n\t                    var value = this._getValue();\n\t                    this.all_button.value($.isArray(value) ? value.length : 0, this.length());\n\t                }\n\t            } else if (this._getValue() === null && !this.model.get('optional')) {\n\t                this._setValue(this.first());\n\t            }\n\t        },\n\t\n\t        /** Return/Set current selection */\n\t        value: function (new_value) {\n\t            new_value !== undefined && this.model.set('value', new_value);\n\t            return this._getValue();\n\t        },\n\t\n\t        /** Return the first select option */\n\t        first: function () {\n\t            return this.data.length > 0 ? this.data[0].value : null;\n\t        },\n\t\n\t        /** Check if a value is an existing option */\n\t        exists: function (value) {\n\t            return _.findWhere(this.data, { value: value });\n\t        },\n\t\n\t        /** Return the label/text of the current selection */\n\t        text: function () {\n\t            var v = this._getValue();\n\t            var d = this.exists($.isArray(v) ? v[0] : v);\n\t            return d ? d.label : '';\n\t        },\n\t\n\t        /** Show the select field */\n\t        show: function () {\n\t            this.model.set('visible', true);\n\t        },\n\t\n\t        /** Hide the select field */\n\t        hide: function () {\n\t            this.model.set('visible', false);\n\t        },\n\t\n\t        /** Show a spinner indicating that the select options are currently loaded */\n\t        wait: function () {\n\t            this.model.set('wait', true);\n\t        },\n\t\n\t        /** Hide spinner indicating that the request has been completed */\n\t        unwait: function () {\n\t            this.model.set('wait', false);\n\t        },\n\t\n\t        /** Returns true if the field is disabled */\n\t        disabled: function () {\n\t            return this.model.get('disabled');\n\t        },\n\t\n\t        /** Enable the select field */\n\t        enable: function () {\n\t            this.model.set('disabled', false);\n\t        },\n\t\n\t        /** Disable the select field */\n\t        disable: function () {\n\t            this.model.set('disabled', true);\n\t        },\n\t\n\t        /** Update all available options at once */\n\t        add: function (options, sorter) {\n\t            _.each(this.model.get('data'), function (v) {\n\t                v.keep && !_.findWhere(options, { value: v.value }) && options.push(v);\n\t            });\n\t            sorter && options && options.sort(sorter);\n\t            this.model.set('data', options);\n\t        },\n\t\n\t        /** Update available options */\n\t        update: function (options) {\n\t            this.model.set('data', options);\n\t        },\n\t\n\t        /** Set the custom onchange callback function */\n\t        setOnChange: function (callback) {\n\t            this.model.set('onchange', callback);\n\t        },\n\t\n\t        /** Number of available options */\n\t        length: function () {\n\t            return $.isArray(this.model.get('data')) ? this.model.get('data').length : 0;\n\t        },\n\t\n\t        /** Set value to dom */\n\t        _setValue: function (new_value) {\n\t            var self = this;\n\t            if (new_value === null || new_value === undefined) {\n\t                new_value = '__null__';\n\t            }\n\t            if (this.model.get('multiple')) {\n\t                new_value = $.isArray(new_value) ? new_value : [new_value];\n\t            } else if ($.isArray(new_value)) {\n\t                if (new_value.length > 0) {\n\t                    new_value = new_value[0];\n\t                } else {\n\t                    new_value = '__null__';\n\t                }\n\t            }\n\t            if (this.model.get('searchable')) {\n\t                if ($.isArray(new_value)) {\n\t                    var val = [];\n\t                    _.each(new_value, function (v) {\n\t                        var d = _.findWhere(self.data2, { id: v });\n\t                        d && val.push(d);\n\t                    });\n\t                    new_value = val;\n\t                } else {\n\t                    var d = _.findWhere(this.data2, { id: new_value });\n\t                    new_value = d;\n\t                }\n\t                this.$select.select2('data', new_value);\n\t            } else {\n\t                this.$select.val(new_value);\n\t            }\n\t        },\n\t\n\t        /** Get value from dom */\n\t        _getValue: function () {\n\t            var val = null;\n\t            if (this.model.get('searchable')) {\n\t                var selected = this.$select.select2('data');\n\t                if (selected) {\n\t                    if ($.isArray(selected)) {\n\t                        val = [];\n\t                        selected.sort(function (a, b) {\n\t                            return a.order - b.order;\n\t                        });\n\t                        _.each(selected, function (v) {\n\t                            val.push(v.id);\n\t                        });\n\t                    } else {\n\t                        val = selected.id;\n\t                    }\n\t                }\n\t            } else {\n\t                val = this.$select.val();\n\t            }\n\t            return Utils.isEmpty(val) ? null : val;\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ }),\n/* 16 */,\n/* 17 */,\n/* 18 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _, jQuery) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n\t    //jquery\n\t    //backbone\n\t], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t    // =============================================================================\n\t    /**\n\t     * view for a popup menu\n\t     */\n\t    var PopupMenu = Backbone.View.extend({\n\t        //TODO: maybe better as singleton off the Galaxy obj\n\t        /** Cache the desired button element and options, set up the button click handler\n\t         *  NOTE: attaches this view as HTML/jQ data on the button for later use.\n\t         */\n\t        initialize: function ($button, options) {\n\t            // default settings\n\t            this.$button = $button;\n\t            if (!this.$button.length) {\n\t                this.$button = $('<div/>');\n\t            }\n\t            this.options = options || [];\n\t            this.$button.data('popupmenu', this);\n\t\n\t            // set up button click -> open menu behavior\n\t            var menu = this;\n\t            this.$button.click(function (event) {\n\t                // if there's already a menu open, remove it\n\t                $('.popmenu-wrapper').remove();\n\t                menu._renderAndShow(event);\n\t                return false;\n\t            });\n\t        },\n\t\n\t        // render the menu, append to the page body at the click position, and set up the 'click-away' handlers, show\n\t        _renderAndShow: function (clickEvent) {\n\t            this.render();\n\t            this.$el.appendTo('body').css(this._getShownPosition(clickEvent)).show();\n\t            this._setUpCloseBehavior();\n\t        },\n\t\n\t        // render the menu\n\t        // this menu doesn't attach itself to the DOM ( see _renderAndShow )\n\t        render: function () {\n\t            // render the menu body absolute and hidden, fill with template\n\t            this.$el.addClass('popmenu-wrapper').hide().css({ position: 'absolute' }).html(this.template(this.$button.attr('id'), this.options));\n\t\n\t            // set up behavior on each link/anchor elem\n\t            if (this.options.length) {\n\t                var menu = this;\n\t                //precondition: there should be one option per li\n\t                this.$el.find('li').each(function (i, li) {\n\t                    var option = menu.options[i];\n\t\n\t                    // if the option has 'func', call that function when the anchor is clicked\n\t                    if (option.func) {\n\t                        $(this).children('a.popupmenu-option').click(function (event) {\n\t                            option.func.call(menu, event, option);\n\t                            // We must preventDefault otherwise clicking \"cancel\"\n\t                            // on a purge or something still navigates and causes\n\t                            // the action.\n\t                            event.preventDefault();\n\t                            // bubble up so that an option click will call the close behavior\n\t                        });\n\t                    }\n\t                });\n\t            }\n\t            return this;\n\t        },\n\t\n\t        template: function (id, options) {\n\t            return ['<ul id=\"', id, '-menu\" class=\"dropdown-menu\">', this._templateOptions(options), '</ul>'].join('');\n\t        },\n\t\n\t        _templateOptions: function (options) {\n\t            if (!options.length) {\n\t                return '<li>(no options)</li>';\n\t            }\n\t            return _.map(options, function (option) {\n\t                if (option.divider) {\n\t                    return '<li class=\"divider\"></li>';\n\t                } else if (option.header) {\n\t                    return ['<li class=\"head\"><a href=\"javascript:void(0);\">', option.html, '</a></li>'].join('');\n\t                }\n\t                var href = option.href || 'javascript:void(0);',\n\t                    target = option.target ? ' target=\"' + option.target + '\"' : '',\n\t                    check = option.checked ? '<span class=\"fa fa-check\"></span>' : '';\n\t                return ['<li><a class=\"popupmenu-option\" href=\"', href, '\"', target, '>', check, option.html, '</a></li>'].join('');\n\t            }).join('');\n\t        },\n\t\n\t        // get the absolute position/offset for the menu\n\t        _getShownPosition: function (clickEvent) {\n\t\n\t            // display menu horiz. centered on click...\n\t            var menuWidth = this.$el.width();\n\t            var x = clickEvent.pageX - menuWidth / 2;\n\t\n\t            // adjust to handle horiz. scroll and window dimensions ( draw entirely on visible screen area )\n\t            x = Math.min(x, $(document).scrollLeft() + $(window).width() - menuWidth - 5);\n\t            x = Math.max(x, $(document).scrollLeft() + 5);\n\t            return {\n\t                top: clickEvent.pageY,\n\t                left: x\n\t            };\n\t        },\n\t\n\t        // bind an event handler to all available frames so that when anything is clicked\n\t        // the menu is removed from the DOM and the event handler unbinds itself\n\t        _setUpCloseBehavior: function () {\n\t            var menu = this;\n\t            //TODO: alternately: focus hack, blocking overlay, jquery.blockui\n\t\n\t            // function to close popup and unbind itself\n\t            function closePopup(event) {\n\t                $(document).off('click.close_popup');\n\t                if (window && window.parent !== window) {\n\t                    try {\n\t                        $(window.parent.document).off(\"click.close_popup\");\n\t                    } catch (err) {}\n\t                } else {\n\t                    try {\n\t                        $('iframe#galaxy_main').contents().off(\"click.close_popup\");\n\t                    } catch (err) {}\n\t                }\n\t                menu.remove();\n\t            }\n\t\n\t            $('html').one(\"click.close_popup\", closePopup);\n\t            if (window && window.parent !== window) {\n\t                try {\n\t                    $(window.parent.document).find('html').one(\"click.close_popup\", closePopup);\n\t                } catch (err) {}\n\t            } else {\n\t                try {\n\t                    $('iframe#galaxy_main').contents().one(\"click.close_popup\", closePopup);\n\t                } catch (err) {}\n\t            }\n\t        },\n\t\n\t        // add a menu option/item at the given index\n\t        addItem: function (item, index) {\n\t            // append to end if no index\n\t            index = index >= 0 ? index : this.options.length;\n\t            this.options.splice(index, 0, item);\n\t            return this;\n\t        },\n\t\n\t        // remove a menu option/item at the given index\n\t        removeItem: function (index) {\n\t            if (index >= 0) {\n\t                this.options.splice(index, 1);\n\t            }\n\t            return this;\n\t        },\n\t\n\t        // search for a menu option by its html\n\t        findIndexByHtml: function (html) {\n\t            for (var i = 0; i < this.options.length; i++) {\n\t                if (_.has(this.options[i], 'html') && this.options[i].html === html) {\n\t                    return i;\n\t                }\n\t            }\n\t            return null;\n\t        },\n\t\n\t        // search for a menu option by its html\n\t        findItemByHtml: function (html) {\n\t            return this.options[this.findIndexByHtml(html)];\n\t        },\n\t\n\t        // string representation\n\t        toString: function () {\n\t            return 'PopupMenu';\n\t        }\n\t    });\n\t    /** shortcut to new for when you don't need to preserve the ref */\n\t    PopupMenu.create = function _create($button, options) {\n\t        return new PopupMenu($button, options);\n\t    };\n\t\n\t    // -----------------------------------------------------------------------------\n\t    // the following class functions are bridges from the original make_popupmenu and make_popup_menus\n\t    // to the newer backbone.js PopupMenu\n\t\n\t    /** Create a PopupMenu from simple map initial_options activated by clicking button_element.\n\t     *      Converts initial_options to object array used by PopupMenu.\n\t     *  @param {jQuery|DOMElement} button_element element which, when clicked, activates menu\n\t     *  @param {Object} initial_options map of key -> values, where\n\t     *      key is option text, value is fn to call when option is clicked\n\t     *  @returns {PopupMenu} the PopupMenu created\n\t     */\n\t    PopupMenu.make_popupmenu = function (button_element, initial_options) {\n\t        var convertedOptions = [];\n\t        _.each(initial_options, function (optionVal, optionKey) {\n\t            var newOption = { html: optionKey };\n\t\n\t            // keys with null values indicate: header\n\t            if (optionVal === null) {\n\t                // !optionVal? (null only?)\n\t                newOption.header = true;\n\t\n\t                // keys with function values indicate: a menu option\n\t            } else if (jQuery.type(optionVal) === 'function') {\n\t                newOption.func = optionVal;\n\t            }\n\t            //TODO:?? any other special optionVals?\n\t            // there was no divider option originally\n\t            convertedOptions.push(newOption);\n\t        });\n\t        return new PopupMenu($(button_element), convertedOptions);\n\t    };\n\t\n\t    /** Find all anchors in $parent (using selector) and covert anchors into a PopupMenu options map.\n\t     *  @param {jQuery} $parent the element that contains the links to convert to options\n\t     *  @param {String} selector jq selector string to find links\n\t     *  @returns {Object[]} the options array to initialize a PopupMenu\n\t     */\n\t    //TODO: lose parent and selector, pass in array of links, use map to return options\n\t    PopupMenu.convertLinksToOptions = function ($parent, selector) {\n\t        $parent = $($parent);\n\t        selector = selector || 'a';\n\t        var options = [];\n\t        $parent.find(selector).each(function (elem, i) {\n\t            var option = {},\n\t                $link = $(elem);\n\t\n\t            // convert link text to the option text (html) and the href into the option func\n\t            option.html = $link.text();\n\t            if ($link.attr('href')) {\n\t                var linkHref = $link.attr('href'),\n\t                    linkTarget = $link.attr('target'),\n\t                    confirmText = $link.attr('confirm');\n\t\n\t                option.func = function () {\n\t                    // if there's a \"confirm\" attribute, throw up a confirmation dialog, and\n\t                    //  if the user cancels - do nothing\n\t                    if (confirmText && !confirm(confirmText)) {\n\t                        return;\n\t                    }\n\t\n\t                    // if there's no confirm attribute, or the user accepted the confirm dialog:\n\t                    switch (linkTarget) {\n\t                        // relocate the center panel\n\t                        case '_parent':\n\t                            window.parent.location = linkHref;\n\t                            break;\n\t\n\t                        // relocate the entire window\n\t                        case '_top':\n\t                            window.top.location = linkHref;\n\t                            break;\n\t\n\t                        // relocate this panel\n\t                        default:\n\t                            window.location = linkHref;\n\t                    }\n\t                };\n\t            }\n\t            options.push(option);\n\t        });\n\t        return options;\n\t    };\n\t\n\t    /** Create a single popupmenu from existing DOM button and anchor elements\n\t     *  @param {jQuery} $buttonElement the element that when clicked will open the menu\n\t     *  @param {jQuery} $menuElement the element that contains the anchors to convert into a menu\n\t     *  @param {String} menuElementLinkSelector jq selector string used to find anchors to be made into menu options\n\t     *  @returns {PopupMenu} the PopupMenu (Backbone View) that can render, control the menu\n\t     */\n\t    PopupMenu.fromExistingDom = function ($buttonElement, $menuElement, menuElementLinkSelector) {\n\t        $buttonElement = $($buttonElement);\n\t        $menuElement = $($menuElement);\n\t        var options = PopupMenu.convertLinksToOptions($menuElement, menuElementLinkSelector);\n\t        // we're done with the menu (having converted it to an options map)\n\t        $menuElement.remove();\n\t        return new PopupMenu($buttonElement, options);\n\t    };\n\t\n\t    /** Create all popupmenus within a document or a more specific element\n\t     *  @param {DOMElement} parent the DOM element in which to search for popupmenus to build (defaults to document)\n\t     *  @param {String} menuSelector jq selector string to find popupmenu menu elements (defaults to \"div[popupmenu]\")\n\t     *  @param {Function} buttonSelectorBuildFn the function to build the jq button selector.\n\t     *      Will be passed $menuElement, parent.\n\t     *      (Defaults to return '#' + $menuElement.attr( 'popupmenu' ); )\n\t     *  @returns {PopupMenu[]} array of popupmenus created\n\t     */\n\t    PopupMenu.make_popup_menus = function (parent, menuSelector, buttonSelectorBuildFn) {\n\t        parent = parent || document;\n\t        // orig. Glx popupmenu menus have a (non-std) attribute 'popupmenu'\n\t        //  which contains the id of the button that activates the menu\n\t        menuSelector = menuSelector || 'div[popupmenu]';\n\t        // default to (orig. Glx) matching button to menu by using the popupmenu attr of the menu as the id of the button\n\t        buttonSelectorBuildFn = buttonSelectorBuildFn || function ($menuElement, parent) {\n\t            return '#' + $menuElement.attr('popupmenu');\n\t        };\n\t\n\t        // aggregate and return all PopupMenus\n\t        var popupMenusCreated = [];\n\t        $(parent).find(menuSelector).each(function () {\n\t            var $menuElement = $(this),\n\t                $buttonElement = $(parent).find(buttonSelectorBuildFn($menuElement, parent));\n\t            popupMenusCreated.push(PopupMenu.fromDom($buttonElement, $menuElement));\n\t            $buttonElement.addClass('popup');\n\t        });\n\t        return popupMenusCreated;\n\t    };\n\t\n\t    // =============================================================================\n\t    return PopupMenu;\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3), __webpack_require__(1)))\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {/* This class maps the form dom to an api compatible javascript dictionary. */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n\t    var Manager = Backbone.Model.extend({\n\t        initialize: function (app) {\n\t            this.app = app;\n\t        },\n\t\n\t        /** Creates a checksum. */\n\t        checksum: function () {\n\t            var sum = '';\n\t            var self = this;\n\t            this.app.section.$el.find('.section-row').each(function () {\n\t                var id = $(this).attr('id');\n\t                var field = self.app.field_list[id];\n\t                if (field) {\n\t                    sum += id + ':' + JSON.stringify(field.value && field.value()) + ':' + field.collapsed + ';';\n\t                }\n\t            });\n\t            return sum;\n\t        },\n\t\n\t        /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission. */\n\t        create: function () {\n\t            var self = this;\n\t\n\t            // get raw dictionary from dom\n\t            var dict = {};\n\t            this._iterate(this.app.section.$el, dict);\n\t\n\t            // add to result dictionary, label elements\n\t            var result_dict = {};\n\t            this.flat_dict = {};\n\t            function add(flat_id, input_id, input_value) {\n\t                self.flat_dict[flat_id] = input_id;\n\t                result_dict[flat_id] = input_value;\n\t                self.app.element_list[input_id] && self.app.element_list[input_id].$el.attr('tour_id', flat_id);\n\t            }\n\t            // converter between raw dictionary and job dictionary\n\t            function convert(identifier, head) {\n\t                for (var index in head) {\n\t                    var node = head[index];\n\t                    if (node.input) {\n\t                        var input = node.input;\n\t                        var flat_id = identifier;\n\t                        if (identifier != '') {\n\t                            flat_id += '|';\n\t                        }\n\t                        flat_id += input.name;\n\t                        switch (input.type) {\n\t                            case 'repeat':\n\t                                var section_label = 'section-';\n\t                                var block_indices = [];\n\t                                var block_prefix = null;\n\t                                for (var block_label in node) {\n\t                                    var pos = block_label.indexOf(section_label);\n\t                                    if (pos != -1) {\n\t                                        pos += section_label.length;\n\t                                        block_indices.push(parseInt(block_label.substr(pos)));\n\t                                        if (!block_prefix) {\n\t                                            block_prefix = block_label.substr(0, pos);\n\t                                        }\n\t                                    }\n\t                                }\n\t                                block_indices.sort(function (a, b) {\n\t                                    return a - b;\n\t                                });\n\t                                var index = 0;\n\t                                for (var i in block_indices) {\n\t                                    convert(flat_id + '_' + index++, node[block_prefix + block_indices[i]]);\n\t                                }\n\t                                break;\n\t                            case 'conditional':\n\t                                var value = self.app.field_list[input.id].value();\n\t                                add(flat_id + '|' + input.test_param.name, input.id, value);\n\t                                var selectedCase = matchCase(input, value);\n\t                                if (selectedCase != -1) {\n\t                                    convert(flat_id, head[input.id + '-section-' + selectedCase]);\n\t                                }\n\t                                break;\n\t                            case 'section':\n\t                                convert(!input.flat && flat_id || '', node);\n\t                                break;\n\t                            default:\n\t                                var field = self.app.field_list[input.id];\n\t                                if (field && field.value) {\n\t                                    var value = field.value();\n\t                                    if (input.ignore === undefined || input.ignore != value) {\n\t                                        if (field.collapsed && input.collapsible_value) {\n\t                                            value = input.collapsible_value;\n\t                                        }\n\t                                        add(flat_id, input.id, value);\n\t                                        if (input.payload) {\n\t                                            for (var p_id in input.payload) {\n\t                                                add(p_id, input.id, input.payload[p_id]);\n\t                                            }\n\t                                        }\n\t                                    }\n\t                                }\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            convert('', dict);\n\t            return result_dict;\n\t        },\n\t\n\t        /** Matches flat ids to corresponding input element\n\t         * @param{string} flat_id - Flat input id to be looked up.\n\t         */\n\t        match: function (flat_id) {\n\t            return this.flat_dict && this.flat_dict[flat_id];\n\t        },\n\t\n\t        /** Match conditional values to selected cases\n\t        */\n\t        matchCase: function (input, value) {\n\t            return matchCase(input, value);\n\t        },\n\t\n\t        /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n\t        */\n\t        matchModel: function (model, callback) {\n\t            var self = this;\n\t            visitInputs(model.inputs, function (input, name) {\n\t                self.flat_dict[name] && callback(input, self.flat_dict[name]);\n\t            });\n\t        },\n\t\n\t        /** Matches identifier from api response to input elements e.g. used to display validation errors\n\t        */\n\t        matchResponse: function (response) {\n\t            var result = {};\n\t            var self = this;\n\t            function search(id, head) {\n\t                if (typeof head === 'string') {\n\t                    var input_id = self.flat_dict[id];\n\t                    input_id && (result[input_id] = head);\n\t                } else {\n\t                    for (var i in head) {\n\t                        var new_id = i;\n\t                        if (id !== '') {\n\t                            var separator = '|';\n\t                            if (head instanceof Array) {\n\t                                separator = '_';\n\t                            }\n\t                            new_id = id + separator + new_id;\n\t                        }\n\t                        search(new_id, head[i]);\n\t                    }\n\t                }\n\t            }\n\t            search('', response);\n\t            return result;\n\t        },\n\t\n\t        /** Map dom tree to dictionary tree with input elements.\n\t        */\n\t        _iterate: function (parent, dict) {\n\t            var self = this;\n\t            var children = $(parent).children();\n\t            children.each(function () {\n\t                var child = this;\n\t                var id = $(child).attr('id');\n\t                if ($(child).hasClass('section-row')) {\n\t                    var input = self.app.input_list[id];\n\t                    dict[id] = input && { input: input } || {};\n\t                    self._iterate(child, dict[id]);\n\t                } else {\n\t                    self._iterate(child, dict);\n\t                }\n\t            });\n\t        }\n\t    });\n\t\n\t    /** Match conditional values to selected cases\n\t     * @param{dict}   input     - Definition of conditional input parameter\n\t     * @param{dict}   value     - Current value\n\t     */\n\t    var matchCase = function (input, value) {\n\t        if (input.test_param.type == 'boolean') {\n\t            if (value == 'true') {\n\t                value = input.test_param.truevalue || 'true';\n\t            } else {\n\t                value = input.test_param.falsevalue || 'false';\n\t            }\n\t        }\n\t        for (var i in input.cases) {\n\t            if (input.cases[i].value == value) {\n\t                return i;\n\t            }\n\t        }\n\t        return -1;\n\t    };\n\t\n\t    /** Visits tool inputs\n\t     * @param{dict}   inputs    - Nested dictionary of input elements\n\t     * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n\t     */\n\t    var visitInputs = function (inputs, callback, prefix, context) {\n\t        context = $.extend(true, {}, context);\n\t        _.each(inputs, function (input) {\n\t            if (input && input.type && input.name) {\n\t                context[input.name] = input;\n\t            }\n\t        });\n\t        for (var key in inputs) {\n\t            var node = inputs[key];\n\t            node.name = node.name || key;\n\t            var name = prefix ? prefix + '|' + node.name : node.name;\n\t            switch (node.type) {\n\t                case 'repeat':\n\t                    _.each(node.cache, function (cache, j) {\n\t                        visitInputs(cache, callback, name + '_' + j, context);\n\t                    });\n\t                    break;\n\t                case 'conditional':\n\t                    if (node.test_param) {\n\t                        callback(node.test_param, name + '|' + node.test_param.name, context);\n\t                        var selectedCase = matchCase(node, node.test_param.value);\n\t                        if (selectedCase != -1) {\n\t                            visitInputs(node.cases[selectedCase].inputs, callback, name, context);\n\t                        } else {\n\t                            Galaxy.emit.debug('form-data::visitInputs() - Invalid case for ' + name + '.');\n\t                        }\n\t                    } else {\n\t                        Galaxy.emit.debug('form-data::visitInputs() - Conditional test parameter missing for ' + name + '.');\n\t                    }\n\t                    break;\n\t                case 'section':\n\t                    visitInputs(node.inputs, callback, name, context);\n\t                    break;\n\t                default:\n\t                    callback(node, name, context);\n\t            }\n\t        }\n\t    };\n\t\n\t    return {\n\t        Manager: Manager,\n\t        visitInputs: visitInputs\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ }),\n/* 20 */,\n/* 21 */,\n/* 22 */,\n/* 23 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {/** This class creates a ui table element. */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n\t    var View = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.options = Utils.merge(options, {\n\t                content: 'No content available.',\n\t                onchange: null,\n\t                ondblclick: null,\n\t                onconfirm: null,\n\t                cls: 'ui-table',\n\t                selectable: true,\n\t                cls_tr: ''\n\t            });\n\t            this.setElement(this._template());\n\t            this.$thead = this.$('thead');\n\t            this.$tbody = this.$('tbody');\n\t            this.$tmessage = this.$('tmessage');\n\t            this.row = this._row();\n\t            this.row_count = 0;\n\t        },\n\t\n\t        events: {\n\t            'click': '_onclick',\n\t            'dblclick': '_ondblclick'\n\t        },\n\t\n\t        /** Add cell to header row */\n\t        addHeader: function ($el) {\n\t            this.row.append($('<th/>').append($el));\n\t        },\n\t\n\t        /** Append header row to table */\n\t        appendHeader: function () {\n\t            this.$thead.append(this.row);\n\t            this.row = $('<tr/>');\n\t        },\n\t\n\t        /** Add cell to row */\n\t        add: function ($el, width, align) {\n\t            var wrapper = $('<td/>');\n\t            if (width) {\n\t                wrapper.css('width', width);\n\t            }\n\t            if (align) {\n\t                wrapper.css('text-align', align);\n\t            }\n\t            this.row.append(wrapper.append($el));\n\t        },\n\t\n\t        /** Append row to table */\n\t        append: function (id, fade) {\n\t            this._commit(id, fade, false);\n\t        },\n\t\n\t        /** Prepend row to table */\n\t        prepend: function (id, fade) {\n\t            this._commit(id, fade, true);\n\t        },\n\t\n\t        /** Helper to get row element */\n\t        get: function (id) {\n\t            return this.$('#' + id);\n\t        },\n\t\n\t        /** Delete row by id */\n\t        del: function (id) {\n\t            var item = this.$tbody.find('#' + id);\n\t            if (item.length > 0) {\n\t                item.remove();\n\t                this.row_count--;\n\t                this._refresh();\n\t            }\n\t        },\n\t\n\t        /** Delete all rows */\n\t        delAll: function () {\n\t            this.$tbody.empty();\n\t            this.row_count = 0;\n\t            this._refresh();\n\t        },\n\t\n\t        /** Set a value i.e. selects/highlights a particular row by id */\n\t        value: function (new_value) {\n\t            if (this.options.selectable) {\n\t                this.before = this.$tbody.find('.current').attr('id');\n\t                if (new_value !== undefined) {\n\t                    this.$tbody.find('tr').removeClass('current');\n\t                    if (new_value) {\n\t                        this.$tbody.find('#' + new_value).addClass('current');\n\t                    }\n\t                }\n\t                var after = this.$tbody.find('.current').attr('id');\n\t                if (after === undefined) {\n\t                    return null;\n\t                } else {\n\t                    if (after != this.before && this.options.onchange) {\n\t                        this.options.onchange(new_value);\n\t                    }\n\t                    return after;\n\t                }\n\t            }\n\t        },\n\t\n\t        /** Return the number of rows */\n\t        size: function () {\n\t            return this.$tbody.find('tr').length;\n\t        },\n\t\n\t        /** Helper to append rows */\n\t        _commit: function (id, fade, prepend) {\n\t            this.del(id);\n\t            this.row.attr('id', id);\n\t            if (prepend) {\n\t                this.$tbody.prepend(this.row);\n\t            } else {\n\t                this.$tbody.append(this.row);\n\t            }\n\t            if (fade) {\n\t                this.row.hide();\n\t                this.row.fadeIn();\n\t            }\n\t            this.row = this._row();\n\t            this.row_count++;\n\t            this._refresh();\n\t        },\n\t\n\t        /** Helper to create new row */\n\t        _row: function () {\n\t            return $('<tr class=\"' + this.options.cls_tr + '\"></tr>');\n\t        },\n\t\n\t        /** Handles onclick events */\n\t        _onclick: function (e) {\n\t            var old_value = this.value();\n\t            var new_value = $(e.target).closest('tr').attr('id');\n\t            if (new_value != '') {\n\t                if (new_value && old_value != new_value) {\n\t                    if (this.options.onconfirm) {\n\t                        this.options.onconfirm(new_value);\n\t                    } else {\n\t                        this.value(new_value);\n\t                    }\n\t                }\n\t            }\n\t        },\n\t\n\t        /** Handles ondblclick events */\n\t        _ondblclick: function (e) {\n\t            var value = this.value();\n\t            if (value && this.options.ondblclick) {\n\t                this.options.ondblclick(value);\n\t            }\n\t        },\n\t\n\t        /** Refresh helper */\n\t        _refresh: function () {\n\t            if (this.row_count == 0) {\n\t                this.$tmessage.show();\n\t            } else {\n\t                this.$tmessage.hide();\n\t            }\n\t        },\n\t\n\t        /** Template */\n\t        _template: function () {\n\t            return '<div>' + '<table class=\"' + this.options.cls + '\">' + '<thead/>' + '<tbody/>' + '</table>' + '<tmessage>' + this.options.content + '</tmessage>' + '<div>';\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ }),\n/* 24 */,\n/* 25 */,\n/* 26 */,\n/* 27 */,\n/* 28 */,\n/* 29 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {/**\n\t    This class creates a form input element wrapper\n\t*/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t    return Backbone.View.extend({\n\t        initialize: function (app, options) {\n\t            this.app = app;\n\t            this.app_options = app.model ? app.model.attributes : {};\n\t            this.field = options && options.field || new Backbone.View();\n\t            this.model = options && options.model || new Backbone.Model({\n\t                text_enable: this.app_options.text_enable || 'Enable',\n\t                text_disable: this.app_options.text_disable || 'Disable',\n\t                cls_enable: this.app_options.cls_enable || 'fa fa-caret-square-o-down',\n\t                cls_disable: this.app_options.cls_disable || 'fa fa-caret-square-o-up',\n\t                always_refresh: this.app_options.always_refresh\n\t            }).set(options);\n\t\n\t            // set element and link components\n\t            this.setElement(this._template());\n\t            this.$field = this.$('.ui-form-field');\n\t            this.$info = this.$('.ui-form-info');\n\t            this.$preview = this.$('.ui-form-preview');\n\t            this.$collapsible = this.$('.ui-form-collapsible');\n\t            this.$collapsible_text = this.$('.ui-form-collapsible-text');\n\t            this.$collapsible_icon = this.$('.ui-form-collapsible-icon');\n\t            this.$title = this.$('.ui-form-title');\n\t            this.$title_text = this.$('.ui-form-title-text');\n\t            this.$error_text = this.$('.ui-form-error-text');\n\t            this.$error = this.$('.ui-form-error');\n\t            this.$backdrop = this.$('.ui-form-backdrop');\n\t\n\t            // add field element\n\t            this.$field.prepend(this.field.$el);\n\t\n\t            // decide wether to expand or collapse fields\n\t            var collapsible_value = this.model.get('collapsible_value');\n\t            this.field.collapsed = collapsible_value !== undefined && JSON.stringify(this.model.get('value')) == JSON.stringify(collapsible_value);\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t\n\t            // add click handler\n\t            var self = this;\n\t            this.$collapsible.on('click', function () {\n\t                self.field.collapsed = !self.field.collapsed;\n\t                app.trigger && app.trigger('change');\n\t                self.render();\n\t            });\n\t\n\t            // hide error on value change\n\t            if (this.field.model && !this.model.get('always_refresh')) {\n\t                this.listenTo(this.field.model, 'change:value', function () {\n\t                    self.reset();\n\t                });\n\t            }\n\t        },\n\t\n\t        /** Set backdrop for input element */\n\t        backdrop: function () {\n\t            this.model.set('backdrop', true);\n\t        },\n\t\n\t        /** Set error text */\n\t        error: function (text) {\n\t            this.model.set('error_text', text);\n\t        },\n\t\n\t        /** Reset this view */\n\t        reset: function () {\n\t            !this.model.get('fixed') && this.model.set('error_text', null);\n\t        },\n\t\n\t        render: function () {\n\t            // render help\n\t            $('.tooltip').hide();\n\t            var help_text = this.model.get('help', '');\n\t            var help_argument = this.model.get('argument');\n\t            if (help_argument && help_text.indexOf('(' + help_argument + ')') == -1) {\n\t                help_text += ' (' + help_argument + ')';\n\t            }\n\t            this.$info.html(help_text);\n\t            // render visibility\n\t            this.$el[this.model.get('hidden') ? 'hide' : 'show']();\n\t            // render preview view for collapsed fields\n\t            this.$preview[this.field.collapsed && this.model.get('collapsible_preview') || this.model.get('disabled') ? 'show' : 'hide']().html(_.escape(this.model.get('text_value')));\n\t            // render error messages\n\t            var error_text = this.model.get('error_text');\n\t            this.$error[error_text ? 'show' : 'hide']();\n\t            this.$el[error_text ? 'addClass' : 'removeClass']('ui-error');\n\t            this.$error_text.html(error_text);\n\t            // render backdrop\n\t            this.$backdrop[this.model.get('backdrop') ? 'show' : 'hide']();\n\t            // render input field\n\t            this.field.collapsed || this.model.get('disabled') ? this.$field.hide() : this.$field.show();\n\t            // render input field color and style\n\t            this.field.model && this.field.model.set({ 'color': this.model.get('color'), 'style': this.model.get('style') });\n\t            // render collapsible options\n\t            if (!this.model.get('disabled') && this.model.get('collapsible_value') !== undefined) {\n\t                var collapsible_state = this.field.collapsed ? 'enable' : 'disable';\n\t                this.$title_text.hide();\n\t                this.$collapsible.show();\n\t                this.$collapsible_text.text(this.model.get('label'));\n\t                this.$collapsible_icon.removeClass().addClass('icon').addClass(this.model.get('cls_' + collapsible_state)).attr('data-original-title', this.model.get('text_' + collapsible_state)).tooltip({ placement: 'bottom' });\n\t            } else {\n\t                this.$title_text.show().text(this.model.get('label'));\n\t                this.$collapsible.hide();\n\t            }\n\t        },\n\t\n\t        _template: function () {\n\t            return $('<div/>').addClass('ui-form-element').append($('<div/>').addClass('ui-form-error ui-error').append($('<span/>').addClass('fa fa-arrow-down')).append($('<span/>').addClass('ui-form-error-text'))).append($('<div/>').addClass('ui-form-title').append($('<div/>').addClass('ui-form-collapsible').append($('<i/>').addClass('ui-form-collapsible-icon')).append($('<span/>').addClass('ui-form-collapsible-text'))).append($('<span/>').addClass('ui-form-title-text'))).append($('<div/>').addClass('ui-form-field').append($('<span/>').addClass('ui-form-info')).append($('<div/>').addClass('ui-form-backdrop'))).append($('<div/>').addClass('ui-form-preview'));\n\t        }\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {/**\n\t    This class creates input elements. New input parameter types should be added to the types dictionary.\n\t*/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(5), __webpack_require__(38), __webpack_require__(41), __webpack_require__(39), __webpack_require__(40), __webpack_require__(36)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, SelectContent, SelectLibrary, SelectFtp, SelectGenomeSpace, ColorPicker) {\n\t\n\t    // create form view\n\t    return Backbone.Model.extend({\n\t        /** Available parameter types */\n\t        types: {\n\t            'text': '_fieldText',\n\t            'password': '_fieldText',\n\t            'select': '_fieldSelect',\n\t            'data_column': '_fieldSelect',\n\t            'genomebuild': '_fieldSelect',\n\t            'data': '_fieldData',\n\t            'data_collection': '_fieldData',\n\t            'integer': '_fieldSlider',\n\t            'float': '_fieldSlider',\n\t            'boolean': '_fieldBoolean',\n\t            'drill_down': '_fieldDrilldown',\n\t            'color': '_fieldColor',\n\t            'hidden': '_fieldHidden',\n\t            'hidden_data': '_fieldHidden',\n\t            'baseurl': '_fieldHidden',\n\t            'library_data': '_fieldLibrary',\n\t            'ftpfile': '_fieldFtp',\n\t            'upload': '_fieldUpload',\n\t            'genomespacefile': '_fieldGenomeSpace'\n\t        },\n\t\n\t        /** Returns an input field for a given field type */\n\t        create: function (input_def) {\n\t            var fieldClass = this.types[input_def.type];\n\t            var field = typeof this[fieldClass] === 'function' ? this[fieldClass].call(this, input_def) : null;\n\t            if (!field) {\n\t                field = input_def.options ? this._fieldSelect(input_def) : this._fieldText(input_def);\n\t                Galaxy.emit.debug('form-parameters::_addRow()', 'Auto matched field type (' + input_def.type + ').');\n\t            }\n\t            input_def.value === undefined && (input_def.value = null);\n\t            field.value(input_def.value);\n\t            return field;\n\t        },\n\t\n\t        /** Data input field */\n\t        _fieldData: function (input_def) {\n\t            return new SelectContent.View({\n\t                id: 'field-' + input_def.id,\n\t                extensions: input_def.extensions,\n\t                optional: input_def.optional,\n\t                multiple: input_def.multiple,\n\t                type: input_def.type,\n\t                flavor: input_def.flavor,\n\t                data: input_def.options,\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** Select/Checkbox/Radio options field */\n\t        _fieldSelect: function (input_def) {\n\t            // show text field e.g. in workflow editor\n\t            if (input_def.is_workflow) {\n\t                return this._fieldText(input_def);\n\t            }\n\t\n\t            // customize properties\n\t            if (input_def.type == 'data_column') {\n\t                input_def.error_text = 'Missing columns in referenced dataset.';\n\t            }\n\t\n\t            // identify available options\n\t            var data = input_def.data;\n\t            if (!data) {\n\t                data = [];\n\t                _.each(input_def.options, function (option) {\n\t                    data.push({ label: option[0], value: option[1] });\n\t                });\n\t            }\n\t\n\t            // identify display type\n\t            var SelectClass = Ui.Select;\n\t            switch (input_def.display) {\n\t                case 'checkboxes':\n\t                    SelectClass = Ui.Checkbox;\n\t                    break;\n\t                case 'radio':\n\t                    SelectClass = Ui.Radio;\n\t                    break;\n\t                case 'radiobutton':\n\t                    SelectClass = Ui.RadioButton;\n\t                    break;\n\t            }\n\t\n\t            // create select field\n\t            return new SelectClass.View({\n\t                id: 'field-' + input_def.id,\n\t                data: data,\n\t                error_text: input_def.error_text || 'No options available',\n\t                multiple: input_def.multiple,\n\t                optional: input_def.optional,\n\t                onchange: input_def.onchange,\n\t                individual: input_def.individual,\n\t                searchable: input_def.flavor !== 'workflow'\n\t            });\n\t        },\n\t\n\t        /** Drill down options field */\n\t        _fieldDrilldown: function (input_def) {\n\t            // show text field e.g. in workflow editor\n\t            if (input_def.is_workflow) {\n\t                return this._fieldText(input_def);\n\t            }\n\t\n\t            // create drill down field\n\t            return new Ui.Drilldown.View({\n\t                id: 'field-' + input_def.id,\n\t                data: input_def.options,\n\t                display: input_def.display,\n\t                optional: input_def.optional,\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** Text input field */\n\t        _fieldText: function (input_def) {\n\t            // field replaces e.g. a select field\n\t            if (input_def.options && input_def.data) {\n\t                input_def.area = input_def.multiple;\n\t                if (Utils.isEmpty(input_def.value)) {\n\t                    input_def.value = null;\n\t                } else {\n\t                    if ($.isArray(input_def.value)) {\n\t                        var str_value = '';\n\t                        for (var i in input_def.value) {\n\t                            str_value += String(input_def.value[i]);\n\t                            if (!input_def.multiple) {\n\t                                break;\n\t                            }\n\t                            str_value += '\\n';\n\t                        }\n\t                        input_def.value = str_value;\n\t                    }\n\t                }\n\t            }\n\t            // create input element\n\t            return new Ui.Input({\n\t                id: 'field-' + input_def.id,\n\t                type: input_def.type,\n\t                area: input_def.area,\n\t                readonly: input_def.readonly,\n\t                placeholder: input_def.placeholder,\n\t                datalist: input_def.datalist,\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** Slider field */\n\t        _fieldSlider: function (input_def) {\n\t            return new Ui.Slider.View({\n\t                id: 'field-' + input_def.id,\n\t                precise: input_def.type == 'float',\n\t                is_workflow: input_def.is_workflow,\n\t                min: input_def.min,\n\t                max: input_def.max,\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** Hidden field */\n\t        _fieldHidden: function (input_def) {\n\t            return new Ui.Hidden({\n\t                id: 'field-' + input_def.id,\n\t                info: input_def.info\n\t            });\n\t        },\n\t\n\t        /** Boolean field */\n\t        _fieldBoolean: function (input_def) {\n\t            return new Ui.RadioButton.View({\n\t                id: 'field-' + input_def.id,\n\t                data: [{ label: 'Yes', value: 'true' }, { label: 'No', value: 'false' }],\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** Color picker field */\n\t        _fieldColor: function (input_def) {\n\t            return new ColorPicker({\n\t                id: 'field-' + input_def.id,\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** Library dataset field */\n\t        _fieldLibrary: function (input_def) {\n\t            return new SelectLibrary.View({\n\t                id: 'field-' + input_def.id,\n\t                optional: input_def.optional,\n\t                multiple: input_def.multiple,\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** FTP file field */\n\t        _fieldFtp: function (input_def) {\n\t            return new SelectFtp.View({\n\t                id: 'field-' + input_def.id,\n\t                optional: input_def.optional,\n\t                multiple: input_def.multiple,\n\t                onchange: input_def.onchange\n\t            });\n\t        },\n\t\n\t        /** GenomeSpace file select field\n\t         */\n\t        _fieldGenomeSpace: function (input_def) {\n\t            var self = this;\n\t            return new SelectGenomeSpace.View({\n\t                id: 'field-' + input_def.id,\n\t                onchange: function () {\n\t                    self.app.trigger('change');\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Upload file field */\n\t        _fieldUpload: function (input_def) {\n\t            return new Ui.Upload({\n\t                id: 'field-' + input_def.id,\n\t                onchange: input_def.onchange\n\t            });\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(3), __webpack_require__(1)))\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {/** This class creates a ui component which enables the dynamic creation of portlets */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(9), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Portlet, Ui) {\n\t    var View = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            this.list = {};\n\t            this.options = Utils.merge(options, {\n\t                title: 'Repeat',\n\t                empty_text: 'Not available.',\n\t                max: null,\n\t                min: null\n\t            });\n\t            this.button_new = new Ui.ButtonIcon({\n\t                icon: 'fa-plus',\n\t                title: 'Insert ' + this.options.title,\n\t                tooltip: 'Add new ' + this.options.title + ' block',\n\t                cls: 'ui-button-icon ui-clear-float form-repeat-add',\n\t                onclick: function () {\n\t                    options.onnew && options.onnew();\n\t                }\n\t            });\n\t            this.setElement($('<div/>').append(this.$list = $('<div/>')).append($('<div/>').append(this.button_new.$el)));\n\t        },\n\t\n\t        /** Number of repeat blocks */\n\t        size: function () {\n\t            return _.size(this.list);\n\t        },\n\t\n\t        /** Add new repeat block */\n\t        add: function (options) {\n\t            if (!options.id || this.list[options.id]) {\n\t                Galaxy.emit.debug('form-repeat::add()', 'Duplicate or invalid repeat block id.');\n\t                return;\n\t            }\n\t            var button_delete = new Ui.ButtonIcon({\n\t                icon: 'fa-trash-o',\n\t                tooltip: 'Delete this repeat block',\n\t                cls: 'ui-button-icon-plain form-repeat-delete',\n\t                onclick: function () {\n\t                    options.ondel && options.ondel();\n\t                }\n\t            });\n\t            var portlet = new Portlet.View({\n\t                id: options.id,\n\t                title: 'placeholder',\n\t                cls: options.cls || 'ui-portlet-repeat',\n\t                operations: { button_delete: button_delete }\n\t            });\n\t            portlet.append(options.$el);\n\t            portlet.$el.addClass('section-row').hide();\n\t            this.list[options.id] = portlet;\n\t            this.$list.append(portlet.$el.fadeIn('fast'));\n\t            this.options.max > 0 && this.size() >= this.options.max && this.button_new.disable();\n\t            this._refresh();\n\t        },\n\t\n\t        /** Delete repeat block */\n\t        del: function (id) {\n\t            if (!this.list[id]) {\n\t                Galaxy.emit.debug('form-repeat::del()', 'Invalid repeat block id.');\n\t                return;\n\t            }\n\t            this.$list.find('#' + id).remove();\n\t            delete this.list[id];\n\t            this.button_new.enable();\n\t            this._refresh();\n\t        },\n\t\n\t        /** Remove all */\n\t        delAll: function () {\n\t            for (var id in this.list) {\n\t                this.del(id);\n\t            }\n\t        },\n\t\n\t        /** Hides add/del options */\n\t        hideOptions: function () {\n\t            this.button_new.$el.hide();\n\t            _.each(this.list, function (portlet) {\n\t                portlet.hideOperation('button_delete');\n\t            });\n\t            _.isEmpty(this.list) && this.$el.append($('<div/>').addClass('ui-form-info').html(this.options.empty_text));\n\t        },\n\t\n\t        /** Refresh view */\n\t        _refresh: function () {\n\t            var index = 0;\n\t            for (var id in this.list) {\n\t                var portlet = this.list[id];\n\t                portlet.title(++index + ': ' + this.options.title);\n\t                portlet[this.size() > this.options.min ? 'showOperation' : 'hideOperation']('button_delete');\n\t            }\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _, jQuery) {/**\n\t    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n\t*/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(5), __webpack_require__(9), __webpack_require__(31), __webpack_require__(29), __webpack_require__(30)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, Portlet, Repeat, InputElement, Parameters) {\n\t    var View = Backbone.View.extend({\n\t        initialize: function (app, options) {\n\t            this.app = app;\n\t            this.inputs = options.inputs;\n\t            this.parameters = new Parameters();\n\t            this.setElement($('<div/>'));\n\t            this.render();\n\t        },\n\t\n\t        /** Render section view */\n\t        render: function () {\n\t            var self = this;\n\t            this.$el.empty();\n\t            _.each(this.inputs, function (input) {\n\t                self.add(input);\n\t            });\n\t        },\n\t\n\t        /** Add a new input element */\n\t        add: function (input) {\n\t            var input_def = jQuery.extend(true, {}, input);\n\t            input_def.id = input.id = Utils.uid();\n\t            this.app.input_list[input_def.id] = input_def;\n\t            switch (input_def.type) {\n\t                case 'conditional':\n\t                    this._addConditional(input_def);\n\t                    break;\n\t                case 'repeat':\n\t                    this._addRepeat(input_def);\n\t                    break;\n\t                case 'section':\n\t                    this._addSection(input_def);\n\t                    break;\n\t                default:\n\t                    this._addRow(input_def);\n\t            }\n\t        },\n\t\n\t        /** Add a conditional block */\n\t        _addConditional: function (input_def) {\n\t            var self = this;\n\t            input_def.test_param.id = input_def.id;\n\t            this.app.model.get('sustain_conditionals') && (input_def.test_param.disabled = true);\n\t            var field = this._addRow(input_def.test_param);\n\t\n\t            // set onchange event for test parameter\n\t            field.model && field.model.set('onchange', function (value) {\n\t                var selectedCase = self.app.data.matchCase(input_def, value);\n\t                for (var i in input_def.cases) {\n\t                    var case_def = input_def.cases[i];\n\t                    var section_row = self.$('#' + input_def.id + '-section-' + i);\n\t                    var nonhidden = false;\n\t                    for (var j in case_def.inputs) {\n\t                        if (!case_def.inputs[j].hidden) {\n\t                            nonhidden = true;\n\t                            break;\n\t                        }\n\t                    }\n\t                    if (i == selectedCase && nonhidden) {\n\t                        section_row.fadeIn('fast');\n\t                    } else {\n\t                        section_row.hide();\n\t                    }\n\t                }\n\t                self.app.trigger('change');\n\t            });\n\t\n\t            // add conditional sub sections\n\t            for (var i in input_def.cases) {\n\t                var sub_section = new View(this.app, { inputs: input_def.cases[i].inputs });\n\t                this._append(sub_section.$el.addClass('ui-form-section'), input_def.id + '-section-' + i);\n\t            }\n\t\n\t            // trigger refresh on conditional input field after all input elements have been created\n\t            field.trigger('change');\n\t        },\n\t\n\t        /** Add a repeat block */\n\t        _addRepeat: function (input_def) {\n\t            var self = this;\n\t            var block_index = 0;\n\t\n\t            // create repeat block element\n\t            var repeat = new Repeat.View({\n\t                title: input_def.title || 'Repeat',\n\t                min: input_def.min,\n\t                max: input_def.max,\n\t                onnew: function () {\n\t                    create(input_def.inputs);self.app.trigger('change');\n\t                }\n\t            });\n\t\n\t            // helper function to create new repeat blocks\n\t            function create(inputs) {\n\t                var sub_section_id = input_def.id + '-section-' + block_index++;\n\t                var sub_section = new View(self.app, { inputs: inputs });\n\t                repeat.add({ id: sub_section_id,\n\t                    $el: sub_section.$el,\n\t                    ondel: function () {\n\t                        repeat.del(sub_section_id);self.app.trigger('change');\n\t                    } });\n\t            }\n\t\n\t            //\n\t            // add parsed/minimum number of repeat blocks\n\t            //\n\t            var n_cache = _.size(input_def.cache);\n\t            for (var i = 0; i < Math.max(Math.max(n_cache, input_def.min || 0), input_def.default || 0); i++) {\n\t                create(i < n_cache ? input_def.cache[i] : input_def.inputs);\n\t            }\n\t\n\t            // hide options\n\t            this.app.model.get('sustain_repeats') && repeat.hideOptions();\n\t\n\t            // create input field wrapper\n\t            var input_element = new InputElement(this.app, {\n\t                label: input_def.title || input_def.name,\n\t                help: input_def.help,\n\t                field: repeat\n\t            });\n\t            this._append(input_element.$el, input_def.id);\n\t        },\n\t\n\t        /** Add a customized section */\n\t        _addSection: function (input_def) {\n\t            var portlet = new Portlet.View({\n\t                title: input_def.title || input_def.name,\n\t                cls: 'ui-portlet-section',\n\t                collapsible: true,\n\t                collapsible_button: true,\n\t                collapsed: !input_def.expanded\n\t            });\n\t            portlet.append(new View(this.app, { inputs: input_def.inputs }).$el);\n\t            portlet.append($('<div/>').addClass('ui-form-info').html(input_def.help));\n\t            this.app.on('expand', function (input_id) {\n\t                portlet.$('#' + input_id).length > 0 && portlet.expand();\n\t            });\n\t            this._append(portlet.$el, input_def.id);\n\t        },\n\t\n\t        /** Add a single input field element */\n\t        _addRow: function (input_def) {\n\t            var self = this;\n\t            var id = input_def.id;\n\t            input_def.onchange = input_def.onchange || function () {\n\t                self.app.trigger('change', id);\n\t            };\n\t            var field = this.parameters.create(input_def);\n\t            this.app.field_list[id] = field;\n\t            var input_element = new InputElement(this.app, {\n\t                name: input_def.name,\n\t                label: input_def.hide_label ? '' : input_def.label || input_def.name,\n\t                value: input_def.value,\n\t                text_value: input_def.text_value,\n\t                collapsible_value: input_def.collapsible_value,\n\t                collapsible_preview: input_def.collapsible_preview,\n\t                help: input_def.help,\n\t                argument: input_def.argument,\n\t                disabled: input_def.disabled,\n\t                color: input_def.color,\n\t                style: input_def.style,\n\t                backdrop: input_def.backdrop,\n\t                hidden: input_def.hidden,\n\t                fixed: input_def.fixed,\n\t                field: field\n\t            });\n\t            this.app.element_list[id] = input_element;\n\t            this._append(input_element.$el, input_def.id);\n\t            return field;\n\t        },\n\t\n\t        /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n\t        _append: function ($el, id) {\n\t            this.$el.append($el.addClass('section-row').attr('id', id));\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3), __webpack_require__(1)))\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t\n\t    // grid model\n\t    return Backbone.Model.extend({\n\t        defaults: {\n\t            url_base: '',\n\t            async: false,\n\t            async_ops: [],\n\t            categorical_filters: [],\n\t            filters: {},\n\t            sort_key: null,\n\t            show_item_checkboxes: false,\n\t            advanced_search: false,\n\t            cur_page: 1,\n\t            num_pages: 1,\n\t            operation: undefined,\n\t            item_ids: undefined\n\t        },\n\t\n\t        /**\n\t         * Return true if operation can be done asynchronously.\n\t         */\n\t        can_async_op: function (op) {\n\t            return _.indexOf(this.attributes.async_ops, op) !== -1;\n\t        },\n\t\n\t        /**\n\t         * Add filtering criterion.\n\t         */\n\t        add_filter: function (key, value, append) {\n\t            // Update URL arg with new condition.            \n\t            if (append) {\n\t                // Update or append value.\n\t                var cur_val = this.attributes.filters[key],\n\t                    new_val;\n\t                if (cur_val === null || cur_val === undefined) {\n\t                    new_val = value;\n\t                } else if (typeof cur_val == 'string') {\n\t                    if (cur_val == 'All' || cur_val == value) {\n\t                        new_val = value;\n\t                    } else {\n\t                        // Replace string with array.\n\t                        var values = [];\n\t                        values[0] = cur_val;\n\t                        values[1] = value;\n\t                        new_val = values;\n\t                    }\n\t                } else {\n\t                    // Current value is an array.\n\t                    new_val = cur_val;\n\t                    if (new_val.indexOf(value) === -1) {\n\t                        new_val.push(value);\n\t                    }\n\t                }\n\t                this.attributes.filters[key] = new_val;\n\t            } else {\n\t                // Replace value.\n\t                this.attributes.filters[key] = value;\n\t            }\n\t        },\n\t\n\t        /**\n\t         * Remove filtering criterion.\n\t         */\n\t        remove_filter: function (key, condition) {\n\t            var cur_val = this.attributes.filters[key];\n\t            if (cur_val === null || cur_val === undefined) {\n\t                return false;\n\t            }\n\t\n\t            if (typeof cur_val === 'string') {\n\t                // overwrite/remove condition.\n\t                this.attributes.filters[key] = '';\n\t            } else {\n\t                // filter contains an array of conditions.\n\t                var condition_index = _.indexOf(cur_val, condition);\n\t                if (condition_index !== -1) {\n\t                    cur_val[condition_index] = '';\n\t                }\n\t            }\n\t        },\n\t\n\t        /**\n\t         * Returns URL data for obtaining a new grid.\n\t         */\n\t        get_url_data: function () {\n\t            var url_data = {\n\t                async: this.attributes.async,\n\t                sort: this.attributes.sort_key,\n\t                page: this.attributes.cur_page,\n\t                show_item_checkboxes: this.attributes.show_item_checkboxes,\n\t                advanced_search: this.attributes.advanced_search\n\t            };\n\t\n\t            // Add operation, item_ids only if they have values.\n\t            if (this.attributes.operation) {\n\t                url_data.operation = this.attributes.operation;\n\t            }\n\t            if (this.attributes.item_ids) {\n\t                url_data.id = this.attributes.item_ids;\n\t            }\n\t\n\t            // Add filter arguments to data, placing \"f-\" in front of all arguments.\n\t            var self = this;\n\t            _.each(_.pairs(self.attributes.filters), function (k) {\n\t                url_data['f-' + k[0]] = k[1];\n\t            });\n\t            return url_data;\n\t        },\n\t\n\t        // Return URL for obtaining a new grid\n\t        get_url: function (args) {\n\t            return this.get('url_base') + '?' + $.param(this.get_url_data()) + '&' + $.param(args);\n\t        }\n\t\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(3), __webpack_require__(1)))\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(jQuery, _) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n\t\n\t    // grid view templates\n\t    return {\n\t        // template\n\t        grid: function (options) {\n\t            var tmpl = '';\n\t            if (options.embedded) {\n\t                tmpl = this.grid_header(options) + this.grid_table(options);\n\t            } else {\n\t                tmpl = '<div class=\"loading-elt-overlay\"></div>' + '<table>' + '<tr>' + '<td width=\"75%\">' + this.grid_header(options) + '</td>' + '<td></td>' + '<td></td>' + '</tr>' + '<tr>' + '<td width=\"100%\" id=\"grid-message\" valign=\"top\"></td>' + '<td></td>' + '<td></td>' + '</tr>' + '</table>' + this.grid_table(options);\n\t            }\n\t\n\t            // add info text\n\t            if (options.info_text) {\n\t                tmpl += '<br><div class=\"toolParamHelp\" style=\"clear: both;\">' + options.info_text + '</div>';\n\t            }\n\t\n\t            // return\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        grid_table: function (options) {\n\t            return '<form method=\"post\" onsubmit=\"return false;\">' + '<table id=\"grid-table\" class=\"grid\">' + '<thead id=\"grid-table-header\"></thead>' + '<tbody id=\"grid-table-body\"></tbody>' + '<tfoot id=\"grid-table-footer\"></tfoot>' + '</table>' + '</form>';\n\t        },\n\t\n\t        // template\n\t        grid_header: function (options) {\n\t            var tmpl = '<div class=\"grid-header\">';\n\t            if (!options.embedded) {\n\t                tmpl += '<h2>' + options.title + '</h2>';\n\t            }\n\t            if (options.global_actions) {\n\t                tmpl += '<ul class=\"manage-table-actions\">';\n\t                var show_popup = options.global_actions.length >= 3;\n\t                if (show_popup) {\n\t                    tmpl += '<li><a class=\"action-button\" id=\"popup-global-actions\" class=\"menubutton\">Actions</a></li>' + '<div popupmenu=\"popup-global-actions\">';\n\t                }\n\t                for (var i in options.global_actions) {\n\t                    var action = options.global_actions[i];\n\t                    tmpl += '<li>' + '<a class=\"action-button use-target\" target=\"' + action.target + '\" href=\"' + action.url_args + '\" onclick=\"return false;\" >' + action.label + '</a>' + '</li>';\n\t                }\n\t                if (show_popup) {\n\t                    tmpl += '</div>';\n\t                }\n\t                tmpl += '</ul>';\n\t            }\n\t            if (options.insert) {\n\t                tmpl += options.insert;\n\t            }\n\t\n\t            // add grid filters\n\t            tmpl += this.grid_filters(options);\n\t            tmpl += '</div>';\n\t\n\t            // return template\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        header: function (options) {\n\t\n\t            // start\n\t            var tmpl = '<tr>';\n\t\n\t            // add checkbox\n\t            if (options.show_item_checkboxes) {\n\t                tmpl += '<th>';\n\t                if (options.items.length > 0) {\n\t                    tmpl += '<input type=\"checkbox\" id=\"check_all\" name=select_all_checkbox value=\"true\">' + '<input type=\"hidden\" name=select_all_checkbox value=\"true\">';\n\t                }\n\t                tmpl += '</th>';\n\t            }\n\t\n\t            // create header elements\n\t            for (var i in options.columns) {\n\t                var column = options.columns[i];\n\t                if (column.visible) {\n\t                    tmpl += '<th id=\"' + column.key + '-header\">';\n\t                    if (column.href) {\n\t                        tmpl += '<a href=\"' + column.href + '\" class=\"sort-link\" sort_key=\"' + column.key + '\">' + column.label + '</a>';\n\t                    } else {\n\t                        tmpl += column.label;\n\t                    }\n\t                    tmpl += '<span class=\"sort-arrow\">' + column.extra + '</span>' + '</th>';\n\t                }\n\t            }\n\t\n\t            // finalize\n\t            tmpl += '</tr>';\n\t\n\t            // return template\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        body: function (options) {\n\t            // initialize\n\t            var tmpl = '';\n\t            var num_rows_rendered = 0;\n\t            var items_length = options.items.length;\n\t\n\t            // empty grid?\n\t            if (items_length == 0) {\n\t                // No results.\n\t                tmpl += '<tr><td colspan=\"100\"><em>No Items</em></td></tr>';\n\t                num_rows_rendered = 1;\n\t            }\n\t\n\t            // create rows\n\t            for (var i in options.items) {\n\t\n\t                // encode ids\n\t                var item = options.items[i];\n\t                var encoded_id = item.encode_id;\n\t                var popupmenu_id = 'grid-' + i + '-popup';\n\t\n\t                // Tag current\n\t                tmpl += '<tr ';\n\t                if (options.current_item_id == item.id) {\n\t                    tmpl += 'class=\"current\"';\n\t                }\n\t                tmpl += '>';\n\t\n\t                // Item selection column\n\t                if (options.show_item_checkboxes) {\n\t                    tmpl += '<td style=\"width: 1.5em;\">' + '<input type=\"checkbox\" name=\"id\" value=\"' + encoded_id + '\" id=\"' + encoded_id + '\" class=\"grid-row-select-checkbox\" />' + '</td>';\n\t                }\n\t\n\t                // Data columns\n\t                for (var j in options.columns) {\n\t                    var column = options.columns[j];\n\t                    if (column.visible) {\n\t                        // Nowrap\n\t                        var nowrap = '';\n\t                        if (column.nowrap) {\n\t                            nowrap = 'style=\"white-space:nowrap;\"';\n\t                        }\n\t\n\t                        // get column settings\n\t                        var column_settings = item.column_config[column.label];\n\t\n\t                        // load attributes\n\t                        var link = column_settings.link;\n\t                        var value = column_settings.value;\n\t                        var target = column_settings.target;\n\t\n\t                        // unescape value\n\t                        if (jQuery.type(value) === 'string') {\n\t                            value = value.replace(/\\/\\//g, '/');\n\t                        }\n\t\n\t                        // Attach popup menu?\n\t                        var id = '';\n\t                        var cls = '';\n\t                        if (column.attach_popup) {\n\t                            id = 'grid-' + i + '-popup';\n\t                            cls = 'menubutton';\n\t                            if (link != '') {\n\t                                cls += ' split';\n\t                            }\n\t                            cls += ' popup';\n\t                        }\n\t\n\t                        // Check for row wrapping\n\t                        tmpl += '<td ' + nowrap + '>';\n\t\n\t                        // Link\n\t                        if (link) {\n\t                            if (options.operations.length != 0) {\n\t                                tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\" style=\"float: left;\">';\n\t                            }\n\t                            tmpl += '<a class=\"menubutton-label use-target\" target=\"' + target + '\" href=\"' + link + '\" onclick=\"return false;\">' + value + '</a>';\n\t                            if (options.operations.length != 0) {\n\t                                tmpl += '</div>';\n\t                            }\n\t                        } else {\n\t                            tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\"><label id=\"' + column.label_id_prefix + encoded_id + '\" for=\"' + encoded_id + '\">' + (value || '') + '</label></div>';\n\t                        }\n\t                        tmpl += '</td>';\n\t                    }\n\t                }\n\t                tmpl += '</tr>';\n\t                num_rows_rendered++;\n\t            }\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        footer: function (options) {\n\t\n\t            // create template string\n\t            var tmpl = '';\n\t\n\t            // paging\n\t            if (options.use_paging && options.num_pages > 1) {\n\t                // get configuration\n\t                var num_page_links = options.num_page_links;\n\t                var cur_page_num = options.cur_page_num;\n\t                var num_pages = options.num_pages;\n\t\n\t                // First pass on min page.\n\t                var page_link_range = num_page_links / 2;\n\t                var min_page = cur_page_num - page_link_range;\n\t                var min_offset = 0;\n\t                if (min_page <= 0) {\n\t                    // Min page is too low.\n\t                    min_page = 1;\n\t                    min_offset = page_link_range - (cur_page_num - min_page);\n\t                }\n\t\n\t                // Set max page.\n\t                var max_range = page_link_range + min_offset;\n\t                var max_page = cur_page_num + max_range;\n\t                var max_offset;\n\t                if (max_page <= num_pages) {\n\t                    // Max page is fine.\n\t                    max_offset = 0;\n\t                } else {\n\t                    // Max page is too high.\n\t                    max_page = num_pages;\n\t                    // +1 to account for the +1 in the loop below.\n\t                    max_offset = max_range - (max_page + 1 - cur_page_num);\n\t                }\n\t\n\t                // Second and final pass on min page to add any unused\n\t                // offset from max to min.\n\t                if (max_offset != 0) {\n\t                    min_page -= max_offset;\n\t                    if (min_page < 1) {\n\t                        min_page = 1;\n\t                    }\n\t                }\n\t\n\t                // template header\n\t                tmpl += '<tr id=\"page-links-row\">';\n\t                if (options.show_item_checkboxes) {\n\t                    tmpl += '<td></td>';\n\t                }\n\t                tmpl += '<td colspan=\"100\">' + '<span id=\"page-link-container\">' + 'Page:';\n\t\n\t                if (min_page > 1) {\n\t                    tmpl += '<span class=\"page-link\" id=\"page-link-1\"><a href=\"javascript:void(0);\" page_num=\"1\" onclick=\"return false;\">1</a></span> ...';\n\t                }\n\t\n\t                // create page urls\n\t                for (var page_index = min_page; page_index < max_page + 1; page_index++) {\n\t\n\t                    if (page_index == options.cur_page_num) {\n\t                        tmpl += '<span class=\"page-link inactive-link\" id=\"page-link-' + page_index + '\">' + page_index + '</span>';\n\t                    } else {\n\t                        tmpl += '<span class=\"page-link\" id=\"page-link-' + page_index + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + page_index + '\">' + page_index + '</a></span>';\n\t                    }\n\t                }\n\t\n\t                // show last page\n\t                if (max_page < num_pages) {\n\t                    tmpl += '...' + '<span class=\"page-link\" id=\"page-link-' + num_pages + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + num_pages + '\">' + num_pages + '</a></span>';\n\t                }\n\t                tmpl += '</span>';\n\t\n\t                // Show all link\n\t                tmpl += '<span class=\"page-link\" id=\"show-all-link-span\"> | <a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"all\">Show All</a></span>' + '</td>' + '</tr>';\n\t            }\n\t\n\t            // Grid operations for multiple items.\n\t            if (options.show_item_checkboxes) {\n\t                // start template\n\t                tmpl += '<tr>' + '<input type=\"hidden\" id=\"operation\" name=\"operation\" value=\"\">' + '<td></td>' + '<td colspan=\"100\">' + 'For <span class=\"grid-selected-count\"></span> selected items: ';\n\t\n\t                // configure buttons for operations\n\t                for (var i in options.operations) {\n\t                    var operation = options.operations[i];\n\t                    if (operation.allow_multiple) {\n\t                        tmpl += '<input type=\"button\" value=\"' + operation.label + '\" class=\"operation-button action-button\">&nbsp;';\n\t                    }\n\t                }\n\t\n\t                // finalize template\n\t                tmpl += '</td>' + '</tr>';\n\t            }\n\t\n\t            // count global operations\n\t            var found_global = false;\n\t            for (i in options.operations) {\n\t                if (options.operations[i].global_operation) {\n\t                    found_global = true;\n\t                    break;\n\t                }\n\t            }\n\t\n\t            // add global operations\n\t            if (found_global) {\n\t                tmpl += '<tr>' + '<td colspan=\"100\">';\n\t                for (i in options.operations) {\n\t                    var operation = options.operations[i];\n\t                    if (operation.global_operation) {\n\t                        tmpl += '<a class=\"action-button\" href=\"' + operation.global_operation + '\">' + operation.label + '</a>';\n\t                    }\n\t                }\n\t                tmpl += '</td>' + '</tr>';\n\t            }\n\t\n\t            // add legend\n\t            if (options.legend) {\n\t                tmpl += '<tr>' + '<td colspan=\"100\">' + options.legend + '</td>' + '</tr>';\n\t            }\n\t\n\t            // return\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        message: function (options) {\n\t            var status = options.status == 'success' ? 'done' : options.status;\n\t            return '<p>' + '<div class=\"' + status + 'message transient-message\">' + _.escape(options.message) + '</div>' + '<div style=\"clear: both\"></div>' + '</p>';\n\t        },\n\t\n\t        // template\n\t        grid_filters: function (options) {\n\t\n\t            // get filters\n\t            var default_filter_dict = options.default_filter_dict;\n\t            var filters = options.filters;\n\t\n\t            // show advanced search if flag set or if there are filters for advanced search fields\n\t            var advanced_search_display = 'none';\n\t            if (options.advanced_search) {\n\t                advanced_search_display = 'block';\n\t            }\n\t\n\t            // identify columns with advanced filtering\n\t            var show_advanced_search_link = false;\n\t            for (var i in options.columns) {\n\t                var column = options.columns[i];\n\t                if (column.filterable == 'advanced') {\n\t                    var column_key = column.key;\n\t                    var f_key = filters[column_key];\n\t                    var d_key = default_filter_dict[column_key];\n\t                    if (f_key && d_key && f_key != d_key) {\n\t                        advanced_search_display = 'block';\n\t                    }\n\t                    show_advanced_search_link = true;\n\t                }\n\t            }\n\t\n\t            // hide standard search if advanced is shown\n\t            var standard_search_display = 'block';\n\t            if (advanced_search_display == 'block') {\n\t                standard_search_display = 'none';\n\t            }\n\t\n\t            //\n\t            // standard search\n\t            //\n\t            var tmpl = '<div id=\"standard-search\" style=\"display: ' + standard_search_display + ';\">' + '<table>' + '<tr>' + '<td style=\"padding: 0;\">' + '<table>';\n\t\n\t            // add standard filters\n\t            for (var i in options.columns) {\n\t                var column = options.columns[i];\n\t                if (column.filterable == 'standard') {\n\t                    tmpl += this.grid_column_filter(options, column);\n\t                }\n\t            }\n\t\n\t            // finalize standard search\n\t            tmpl += '</table>' + '</td>' + '</tr>' + '<tr>' + '<td>';\n\t\n\t            // show advanced search link in standard display\n\t            if (show_advanced_search_link) {\n\t                tmpl += '<a href=\"\" class=\"advanced-search-toggle\">Advanced Search</a>';\n\t            }\n\t\n\t            // finalize standard search display\n\t            tmpl += '</td>' + '</tr>' + '</table>' + '</div>';\n\t\n\t            //\n\t            // advanced search\n\t            //\n\t            tmpl += '<div id=\"advanced-search\" style=\"display: ' + advanced_search_display + '; margin-top: 5px; border: 1px solid #ccc;\">' + '<table>' + '<tr>' + '<td style=\"text-align: left\" colspan=\"100\">' + '<a href=\"\" class=\"advanced-search-toggle\">Close Advanced Search</a>' + '</td>' + '</tr>';\n\t\n\t            // add advanced filters\n\t            for (var i in options.columns) {\n\t                var column = options.columns[i];\n\t                if (column.filterable == 'advanced') {\n\t                    tmpl += this.grid_column_filter(options, column);\n\t                }\n\t            }\n\t\n\t            // finalize advanced search template\n\t            tmpl += '</table>' + '</div>';\n\t\n\t            // return template\n\t            return tmpl;\n\t        },\n\t\n\t        // template\n\t        grid_column_filter: function (options, column) {\n\t\n\t            // collect parameters\n\t            var default_filter_dict = options.default_filter_dict;\n\t            var filters = options.filters;\n\t            var column_label = column.label;\n\t            var column_key = column.key;\n\t            if (column.filterable == 'advanced') {\n\t                column_label = column_label.toLowerCase();\n\t            }\n\t\n\t            // start\n\t            var tmpl = '<tr>';\n\t\n\t            if (column.filterable == 'advanced') {\n\t                tmpl += '<td align=\"left\" style=\"padding-left: 10px\">' + column_label + ':</td>';\n\t            }\n\t            tmpl += '<td style=\"padding-bottom: 1px;\">';\n\t            if (column.is_text) {\n\t                tmpl += '<form class=\"text-filter-form\" column_key=\"' + column_key + '\" action=\"' + options.url + '\" method=\"get\" >';\n\t                // Carry forward filtering criteria with hidden inputs.\n\t                for (i in options.columns) {\n\t                    var temp_column = options.columns[i];\n\t                    var filter_value = filters[temp_column.key];\n\t                    if (filter_value) {\n\t                        if (filter_value != 'All') {\n\t                            if (temp_column.is_text) {\n\t                                filter_value = JSON.stringify(filter_value);\n\t                            }\n\t                            tmpl += '<input type=\"hidden\" id=\"' + temp_column.key + '\" name=\"f-' + temp_column.key + '\" value=\"' + filter_value + '\"/>';\n\t                        }\n\t                    }\n\t                }\n\t                // Print current filtering criteria and links to delete.\n\t                tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\t\n\t                // add filters\n\t                var column_filter = filters[column_key];\n\t                if (column_filter) {\n\t                    // identify type\n\t                    var type = jQuery.type(column_filter);\n\t\n\t                    // single filter value\n\t                    if (type == 'string') {\n\t                        if (column_filter != 'All') {\n\t                            // append template\n\t                            tmpl += this.filter_element(column_key, column_filter);\n\t                        }\n\t                    }\n\t\n\t                    // multiple filter values\n\t                    if (type == 'array') {\n\t                        for (var i in column_filter) {\n\t                            // get filter\n\t                            var filter = column_filter[i];\n\t\n\t                            // copy filters and remove entry\n\t                            var params = column_filter;\n\t                            params = params.slice(i);\n\t\n\t                            // append template\n\t                            tmpl += this.filter_element(column_key, filter);\n\t                        }\n\t                    }\n\t                }\n\t\n\t                // close span\n\t                tmpl += '</span>';\n\t\n\t                // Set value, size of search input field. Minimum size is 20 characters.\n\t                var value = '';\n\t                if (column.filterable == 'standard') {\n\t                    value = column.label.toLowerCase();\n\t                    var size = value.length;\n\t                    if (size < 20) {\n\t                        size = 20;\n\t                    }\n\t                    // +4 to account for space after placeholder\n\t                    size = size + 4;\n\t                }\n\t\n\t                // print input field for column\n\t                tmpl += '<span class=\"search-box\">' + '<input class=\"search-box-input\" id=\"input-' + column_key + '-filter\" name=\"f-' + column_key + '\" type=\"text\" placeholder=\"' + value + '\" size=\"' + size + '\"/>' + '<button type=\"submit\" style=\"background: transparent; border: none; padding: 4px; margin: 0px;\">' + '<i class=\"fa fa-search\"></i>' + '</button>' + '</span>' + '</form>';\n\t            } else {\n\t                // filter criteria\n\t                tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\t\n\t                // add category filters\n\t                var seperator = false;\n\t                for (var cf_label in options.categorical_filters[column_key]) {\n\t                    // get category filter\n\t                    var cf = options.categorical_filters[column_key][cf_label];\n\t\n\t                    // each filter will have only a single argument, so get that single argument\n\t                    var cf_key = '';\n\t                    var cf_arg = '';\n\t                    for (var key in cf) {\n\t                        cf_key = key;\n\t                        cf_arg = cf[key];\n\t                    }\n\t\n\t                    // add seperator\n\t                    if (seperator) {\n\t                        tmpl += ' | ';\n\t                    }\n\t                    seperator = true;\n\t\n\t                    // add category\n\t                    var filter = filters[column_key];\n\t                    if (filter && cf[column_key] && filter == cf_arg) {\n\t                        tmpl += '<span class=\"categorical-filter ' + column_key + '-filter current-filter\">' + cf_label + '</span>';\n\t                    } else {\n\t                        tmpl += '<span class=\"categorical-filter ' + column_key + '-filter\">' + '<a href=\"javascript:void(0);\" filter_key=\"' + cf_key + '\" filter_val=\"' + cf_arg + '\">' + cf_label + '</a>' + '</span>';\n\t                    }\n\t                }\n\t                tmpl += '</span>';\n\t            }\n\t            tmpl += '</td>' + '</tr>';\n\t\n\t            // return template\n\t            return tmpl;\n\t        },\n\t\n\t        // template for filter items\n\t        filter_element: function (filter_key, filter_value) {\n\t            filter_value = Utils.sanitize(filter_value);\n\t            return '<span class=\"text-filter-val\">' + filter_value + '<a href=\"javascript:void(0);\" filter_key=\"' + filter_key + '\" filter_val=\"' + filter_value + '\">' + '<i class=\"fa fa-times\" style=\"padding-left: 5px; padding-bottom: 6px;\"/>' + '</a>' + '</span>';\n\t        }\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(3)))\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;// Provides support for interacting with the GenomeSpace File Browser popup dialogue\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n\t\n\t    // tool form templates\n\t    return {\n\t        openFileBrowser: function (options) {\n\t            var GS_UI_URL = window.Galaxy.config.genomespace_ui_url;\n\t            var GS_UPLOAD_URL = GS_UI_URL + 'upload/loadUrlToGenomespace.html?getLocation=true';\n\t\n\t            var newWin = window.open(GS_UPLOAD_URL, \"GenomeSpace File Browser\", \"height=360px,width=600px\");\n\t\n\t            successCalBack = options['successCallback'];\n\t            window.addEventListener(\"message\", function (e) {\n\t                successCalBack(e.data);\n\t            }, false);\n\t\n\t            newWin.focus();\n\t\n\t            if (options['errorCallback'] != null) newWin.setCallbackOnGSUploadError = config['errorCallback'];\n\t        }\n\t\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {/** Renders the color picker used e.g. in the tool form **/\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n\t    return Backbone.View.extend({\n\t        colors: {\n\t            standard: ['c00000', 'ff0000', 'ffc000', 'ffff00', '92d050', '00b050', '00b0f0', '0070c0', '002060', '7030a0'],\n\t            base: ['ffffff', '000000', 'eeece1', '1f497d', '4f81bd', 'c0504d', '9bbb59', '8064a2', '4bacc6', 'f79646'],\n\t            theme: [['f2f2f2', '7f7f7f', 'ddd9c3', 'c6d9f0', 'dbe5f1', 'f2dcdb', 'ebf1dd', 'e5e0ec', 'dbeef3', 'fdeada'], ['d8d8d8', '595959', 'c4bd97', '8db3e2', 'b8cce4', 'e5b9b7', 'd7e3bc', 'ccc1d9', 'b7dde8', 'fbd5b5'], ['bfbfbf', '3f3f3f', '938953', '548dd4', '95b3d7', 'd99694', 'c3d69b', 'b2a2c7', '92cddc', 'fac08f'], ['a5a5a5', '262626', '494429', '17365d', '366092', '953734', '76923c', '5f497a', '31859b', 'e36c09'], ['7f7f7e', '0c0c0c', '1d1b10', '0f243e', '244061', '632423', '4f6128', '3f3151', '205867', '974806']]\n\t        },\n\t\n\t        initialize: function (options) {\n\t            this.options = Utils.merge(options, {});\n\t            this.setElement(this._template());\n\t            this.$panel = this.$('.ui-color-picker-panel');\n\t            this.$view = this.$('.ui-color-picker-view');\n\t            this.$value = this.$('.ui-color-picker-value');\n\t            this.$header = this.$('.ui-color-picker-header');\n\t            this._build();\n\t            this.visible = false;\n\t            this.value(this.options.value);\n\t            this.$boxes = this.$('.ui-color-picker-box');\n\t            var self = this;\n\t            this.$boxes.on('click', function () {\n\t                self.value($(this).css('background-color'));\n\t                self.$header.trigger('click');\n\t            });\n\t            this.$header.on('click', function () {\n\t                self.visible = !self.visible;\n\t                if (self.visible) {\n\t                    self.$view.fadeIn('fast');\n\t                } else {\n\t                    self.$view.fadeOut('fast');\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Get/set value */\n\t        value: function (new_val) {\n\t            if (new_val !== undefined && new_val !== null) {\n\t                this.$value.css('background-color', new_val);\n\t                this.$('.ui-color-picker-box').empty();\n\t                this.$(this._getValue()).html(this._templateCheck());\n\t                this.options.onchange && this.options.onchange(new_val);\n\t            }\n\t            return this._getValue();\n\t        },\n\t\n\t        /** Get value from dom */\n\t        _getValue: function () {\n\t            var rgb = this.$value.css('background-color');\n\t            rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n\t            if (rgb) {\n\t                function hex(x) {\n\t                    return ('0' + parseInt(x).toString(16)).slice(-2);\n\t                }\n\t                return '#' + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);\n\t            } else {\n\t                return null;\n\t            }\n\t        },\n\t\n\t        /** Build color panel */\n\t        _build: function () {\n\t            this._content({ colors: this.colors.base });\n\t            for (var i in this.colors.theme) {\n\t                var line_def = {};\n\t                if (i == 0) {\n\t                    line_def['bottom'] = true;\n\t                } else if (i != this.colors.theme.length - 1) {\n\t                    line_def['top'] = true;\n\t                    line_def['bottom'] = true;\n\t                } else {\n\t                    line_def['top'] = true;\n\t                }\n\t                line_def['colors'] = this.colors.theme[i];\n\t                this._content(line_def);\n\t            }\n\t            this._content({ colors: this.colors.standard });\n\t        },\n\t\n\t        /** Create content */\n\t        _content: function (options) {\n\t            var colors = options.colors;\n\t            var $content = $(this._templateContent());\n\t            var $line = $content.find('.line');\n\t            this.$panel.append($content);\n\t            for (var i in colors) {\n\t                var $box = $(this._templateBox(colors[i]));\n\t                if (options.top) {\n\t                    $box.css('border-top', 'none');\n\t                    $box.css('border-top-left-radius', '0px');\n\t                    $box.css('border-top-right-radius', '0px');\n\t                }\n\t                if (options.bottom) {\n\t                    $box.css('border-bottom', 'none');\n\t                    $box.css('border-bottom-left-radius', '0px');\n\t                    $box.css('border-bottom-right-radius', '0px');\n\t                }\n\t                $line.append($box);\n\t            }\n\t            return $content;\n\t        },\n\t\n\t        /** Check icon */\n\t        _templateCheck: function () {\n\t            return '<div class=\"ui-color-picker-check fa fa-check\"/>';\n\t        },\n\t\n\t        /** Content template */\n\t        _templateContent: function () {\n\t            return '<div class=\"ui-color-picker-content\">' + '<div class=\"line\"/>' + '</div>';\n\t        },\n\t\n\t        /** Box template */\n\t        _templateBox: function (color) {\n\t            return '<div id=\"' + color + '\" class=\"ui-color-picker-box\" style=\"background-color: #' + color + ';\"/>';\n\t        },\n\t\n\t        /** Main template */\n\t        _template: function () {\n\t            return '<div class=\"ui-color-picker\">' + '<div class=\"ui-color-picker-header\">' + '<div class=\"ui-color-picker-value\"/>' + '<div class=\"ui-color-picker-label\">Select a color</div>' + '</div>' + '<div class=\"ui-color-picker-view ui-input\">' + '<div class=\"ui-color-picker-panel\"/>' + '</div>';\n\t            '</div>';\n\t        }\n\t    });\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function($, _) {/** This class creates/wraps a drill down element. */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(14)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Options) {\n\t\n\t    var View = Options.BaseIcons.extend({\n\t        initialize: function (options) {\n\t            options.type = options.display || 'checkbox';\n\t            options.multiple = options.type == 'checkbox';\n\t            Options.BaseIcons.prototype.initialize.call(this, options);\n\t        },\n\t\n\t        /** Set states for selected values */\n\t        _setValue: function (new_value) {\n\t            Options.BaseIcons.prototype._setValue.call(this, new_value);\n\t            if (new_value !== undefined && new_value !== null && this.header_index) {\n\t                var self = this;\n\t                var values = $.isArray(new_value) ? new_value : [new_value];\n\t                _.each(values, function (v) {\n\t                    var list = self.header_index[v];\n\t                    _.each(list, function (element) {\n\t                        self._setState(element, true);\n\t                    });\n\t                });\n\t            }\n\t        },\n\t\n\t        /** Expand/collapse a sub group */\n\t        _setState: function (header_id, is_expanded) {\n\t            var $button = this.$('.button-' + header_id);\n\t            var $subgroup = this.$('.subgroup-' + header_id);\n\t            $button.data('is_expanded', is_expanded);\n\t            if (is_expanded) {\n\t                $subgroup.show();\n\t                $button.removeClass('fa-plus-square').addClass('fa-minus-square');\n\t            } else {\n\t                $subgroup.hide();\n\t                $button.removeClass('fa-minus-square').addClass('fa-plus-square');\n\t            }\n\t        },\n\t\n\t        /** Template to create options tree */\n\t        _templateOptions: function () {\n\t            var self = this;\n\t            this.header_index = {};\n\t\n\t            // attach event handler\n\t            function attach($el, header_id) {\n\t                var $button = $el.find('.button-' + header_id);\n\t                $button.on('click', function () {\n\t                    self._setState(header_id, !$button.data('is_expanded'));\n\t                });\n\t            }\n\t\n\t            // recursive function which iterates through options\n\t            function iterate($tmpl, options, header) {\n\t                header = header || [];\n\t                for (var i in options) {\n\t                    var level = options[i];\n\t                    var has_options = level.options && level.options.length > 0;\n\t                    var new_header = header.slice(0);\n\t                    self.header_index[level.value] = new_header.slice(0);\n\t                    var $group = $('<div/>');\n\t                    if (has_options) {\n\t                        var header_id = Utils.uid();\n\t                        var $button = $('<span/>').addClass('button-' + header_id).addClass('ui-drilldown-button fa fa-plus-square');\n\t                        var $subgroup = $('<div/>').addClass('subgroup-' + header_id).addClass('ui-drilldown-subgroup');\n\t                        $group.append($('<div/>').append($button).append(self._templateOption({ label: level.name, value: level.value })));\n\t                        new_header.push(header_id);\n\t                        iterate($subgroup, level.options, new_header);\n\t                        $group.append($subgroup);\n\t                        attach($group, header_id);\n\t                    } else {\n\t                        $group.append(self._templateOption({ label: level.name, value: level.value }));\n\t                    }\n\t                    $tmpl.append($group);\n\t                }\n\t            }\n\t\n\t            // iterate through options and create dom\n\t            var $tmpl = $('<div/>');\n\t            iterate($tmpl, this.model.get('data'));\n\t            return $tmpl;\n\t        },\n\t\n\t        /** Template for drill down view */\n\t        _template: function () {\n\t            return $('<div/>').addClass('ui-options-list drilldown-container').attr('id', this.model.id);\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(3)))\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(5), __webpack_require__(15)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, Select) {\n\t\n\t    /** Batch mode variations */\n\t    var Batch = { DISABLED: 'disabled', ENABLED: 'enabled', LINKED: 'linked' };\n\t\n\t    /** List of available content selectors options */\n\t    var Configurations = {\n\t        data: [{ src: 'hda', icon: 'fa-file-o', tooltip: 'Single dataset', multiple: false, batch: Batch.DISABLED }, { src: 'hda', icon: 'fa-files-o', tooltip: 'Multiple datasets', multiple: true, batch: Batch.LINKED }, { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection', multiple: false, batch: Batch.LINKED }],\n\t        data_multiple: [{ src: 'hda', icon: 'fa-files-o', tooltip: 'Multiple datasets', multiple: true, batch: Batch.DISABLED }, { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collections', multiple: true, batch: Batch.DISABLED }],\n\t        data_collection: [{ src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection', multiple: false, batch: Batch.DISABLED }],\n\t        workflow_data: [{ src: 'hda', icon: 'fa-file-o', tooltip: 'Single dataset', multiple: false, batch: Batch.DISABLED }],\n\t        workflow_data_multiple: [{ src: 'hda', icon: 'fa-files-o', tooltip: 'Multiple datasets', multiple: true, batch: Batch.DISABLED }],\n\t        workflow_data_collection: [{ src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection', multiple: false, batch: Batch.DISABLED }],\n\t        module_data: [{ src: 'hda', icon: 'fa-file-o', tooltip: 'Single dataset', multiple: false, batch: Batch.DISABLED }, { src: 'hda', icon: 'fa-files-o', tooltip: 'Multiple datasets', multiple: true, batch: Batch.ENABLED }],\n\t        module_data_collection: [{ src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection', multiple: false, batch: Batch.DISABLED }, { src: 'hdca', icon: 'fa-folder', tooltip: 'Multiple collections', multiple: true, batch: Batch.ENABLED }]\n\t    };\n\t\n\t    /** View for hda and hdca content selector ui elements */\n\t    var View = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            var self = this;\n\t            this.model = options && options.model || new Backbone.Model({\n\t                src_labels: { 'hda': 'dataset', 'hdca': 'dataset collection' },\n\t                pagelimit: 100,\n\t                statustimer: 1000\n\t            }).set(options);\n\t            this.setElement($('<div/>').addClass('ui-select-content'));\n\t            this.button_product = new Ui.RadioButton.View({\n\t                value: 'false',\n\t                data: [{ icon: 'fa fa-chain', value: 'false',\n\t                    tooltip: 'Linked inputs will be run in matched order with other datasets e.g. use this for matching forward and reverse reads.' }, { icon: 'fa fa-chain-broken', value: 'true',\n\t                    tooltip: 'Unlinked dataset inputs will be run against *all* other inputs.' }] });\n\t            var $batch_div = $('<div/>').addClass('ui-form-info').append($('<i/>').addClass('fa fa-sitemap')).append($('<span/>').html('This is a batch mode input field. Separate jobs will be triggered for each dataset selection.'));\n\t            this.$batch = {\n\t                linked: $batch_div.clone(),\n\t                enabled: $batch_div.clone().append($('<div/>').append($('<div/>').addClass('ui-form-title').html('Batch options:')).append(this.button_product.$el)).append($('<div/>').css('clear', 'both'))\n\t            };\n\t\n\t            // add drag-drop event handlers\n\t            this.$el.on('dragenter', function (e) {\n\t                this.lastenter = e.target;self.$el.addClass('ui-dragover');\n\t            }).on('dragover', function (e) {\n\t                e.preventDefault();\n\t            }).on('dragleave', function (e) {\n\t                this.lastenter === e.target && self.$el.removeClass('ui-dragover');\n\t            }).on('drop', function (e) {\n\t                self._handleDrop(e);\n\t            });\n\t\n\t            // track current history elements\n\t            this.history = {};\n\t\n\t            // add listeners\n\t            this.listenTo(this.model, 'change:data', this._changeData, this);\n\t            this.listenTo(this.model, 'change:wait', this._changeWait, this);\n\t            this.listenTo(this.model, 'change:current', this._changeCurrent, this);\n\t            this.listenTo(this.model, 'change:value', this._changeValue, this);\n\t            this.listenTo(this.model, 'change:type change:optional change:multiple change:extensions', this._changeType, this);\n\t            this.render();\n\t\n\t            // add change event\n\t            this.on('change', function () {\n\t                options.onchange && options.onchange(self.value());\n\t            });\n\t        },\n\t\n\t        render: function () {\n\t            this._changeType();\n\t            this._changeValue();\n\t            this._changeWait();\n\t        },\n\t\n\t        /** Indicate that select fields are being updated */\n\t        wait: function () {\n\t            this.model.set('wait', true);\n\t        },\n\t\n\t        /** Indicate that the options update has been completed */\n\t        unwait: function () {\n\t            this.model.set('wait', false);\n\t        },\n\t\n\t        /** Update data representing selectable options */\n\t        update: function (options) {\n\t            this.model.set('data', options);\n\t        },\n\t\n\t        /** Return the currently selected dataset values */\n\t        value: function (new_value) {\n\t            new_value !== undefined && this.model.set('value', new_value);\n\t            var current = this.model.get('current');\n\t            if (this.config[current]) {\n\t                var id_list = this.fields[current].value();\n\t                if (id_list !== null) {\n\t                    id_list = $.isArray(id_list) ? id_list : [id_list];\n\t                    if (id_list.length > 0) {\n\t                        var result = this._batch({ values: [] });\n\t                        for (var i in id_list) {\n\t                            var details = this.history[id_list[i] + '_' + this.config[current].src];\n\t                            if (details) {\n\t                                result.values.push(details);\n\t                            } else {\n\t                                Galaxy.emit.debug('ui-select-content::value()', 'Requested details not found for \\'' + id_list[i] + '\\'.');\n\t                                return null;\n\t                            }\n\t                        }\n\t                        result.values.sort(function (a, b) {\n\t                            return a.hid - b.hid;\n\t                        });\n\t                        return result;\n\t                    }\n\t                }\n\t            } else {\n\t                Galaxy.emit.debug('ui-select-content::value()', 'Invalid value/source \\'' + new_value + '\\'.');\n\t            }\n\t            return null;\n\t        },\n\t\n\t        /** Change of current select field */\n\t        _changeCurrent: function () {\n\t            var self = this;\n\t            _.each(this.fields, function (field, i) {\n\t                if (self.model.get('current') == i) {\n\t                    field.$el.show();\n\t                    _.each(self.$batch, function ($batchfield, batchmode) {\n\t                        $batchfield[self.config[i].batch == batchmode ? 'show' : 'hide']();\n\t                    });\n\t                    self.button_type.value(i);\n\t                } else {\n\t                    field.$el.hide();\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Change of type */\n\t        _changeType: function () {\n\t            var self = this;\n\t\n\t            // identify selector type identifier i.e. [ flavor ]_[ type ]_[ multiple ]\n\t            var config_id = (this.model.get('flavor') ? this.model.get('flavor') + '_' : '') + String(this.model.get('type')) + (this.model.get('multiple') ? '_multiple' : '');\n\t            if (Configurations[config_id]) {\n\t                this.config = Configurations[config_id];\n\t            } else {\n\t                this.config = Configurations['data'];\n\t                Galaxy.emit.debug('ui-select-content::_changeType()', 'Invalid configuration/type id \\'' + config_id + '\\'.');\n\t            }\n\t\n\t            // prepare extension component of error message\n\t            var data = self.model.get('data');\n\t            var extensions = Utils.textify(this.model.get('extensions'));\n\t            var src_labels = this.model.get('src_labels');\n\t\n\t            // build views\n\t            this.fields = [];\n\t            this.button_data = [];\n\t            _.each(this.config, function (c, i) {\n\t                self.button_data.push({\n\t                    value: i,\n\t                    icon: c.icon,\n\t                    tooltip: c.tooltip\n\t                });\n\t                self.fields.push(new Select.View({\n\t                    optional: self.model.get('optional'),\n\t                    multiple: c.multiple,\n\t                    searchable: !c.multiple || data && data[c.src] && data[c.src].length > self.model.get('pagelimit'),\n\t                    individual: true,\n\t                    error_text: 'No ' + (extensions ? extensions + ' ' : '') + (src_labels[c.src] || 'content') + ' available.',\n\t                    onchange: function () {\n\t                        self.trigger('change');\n\t                    }\n\t                }));\n\t            });\n\t            this.button_type = new Ui.RadioButton.View({\n\t                value: this.model.get('current'),\n\t                data: this.button_data,\n\t                onchange: function (value) {\n\t                    self.model.set('current', value);\n\t                    self.trigger('change');\n\t                }\n\t            });\n\t\n\t            // append views\n\t            this.$el.empty();\n\t            var button_width = 0;\n\t            if (this.fields.length > 1) {\n\t                this.$el.append(this.button_type.$el);\n\t                button_width = Math.max(0, this.fields.length * 36) + 'px';\n\t            }\n\t            _.each(this.fields, function (field) {\n\t                self.$el.append(field.$el.css({ 'margin-left': button_width }));\n\t            });\n\t            _.each(this.$batch, function ($batchfield, batchmode) {\n\t                self.$el.append($batchfield.css({ 'margin-left': button_width }));\n\t            });\n\t            this.model.set('current', 0);\n\t            this._changeCurrent();\n\t            this._changeData();\n\t        },\n\t\n\t        /** Change of wait flag */\n\t        _changeWait: function () {\n\t            var self = this;\n\t            _.each(this.fields, function (field) {\n\t                field[self.model.get('wait') ? 'wait' : 'unwait']();\n\t            });\n\t        },\n\t\n\t        /** Change of available options */\n\t        _changeData: function () {\n\t            var options = this.model.get('data');\n\t            var self = this;\n\t            var select_options = {};\n\t            _.each(options, function (items, src) {\n\t                select_options[src] = [];\n\t                _.each(items, function (item) {\n\t                    select_options[src].push({\n\t                        hid: item.hid,\n\t                        keep: item.keep,\n\t                        label: item.hid + ': ' + item.name,\n\t                        value: item.id,\n\t                        tags: item.tags\n\t                    });\n\t                    self.history[item.id + '_' + src] = item;\n\t                });\n\t            });\n\t            _.each(this.config, function (c, i) {\n\t                select_options[c.src] && self.fields[i].add(select_options[c.src], function (a, b) {\n\t                    return b.hid - a.hid;\n\t                });\n\t            });\n\t        },\n\t\n\t        /** Change of incoming value */\n\t        _changeValue: function () {\n\t            var new_value = this.model.get('value');\n\t            if (new_value && new_value.values && new_value.values.length > 0) {\n\t                // create list with content ids\n\t                var list = [];\n\t                _.each(new_value.values, function (value) {\n\t                    list.push(value.id);\n\t                });\n\t                // sniff first suitable field type from config list\n\t                var src = new_value.values[0].src;\n\t                var multiple = new_value.values.length > 1;\n\t                for (var i = 0; i < this.config.length; i++) {\n\t                    var field = this.fields[i];\n\t                    var c = this.config[i];\n\t                    if (c.src == src && [multiple, true].indexOf(c.multiple) !== -1) {\n\t                        this.model.set('current', i);\n\t                        field.value(list);\n\t                        break;\n\t                    }\n\t                }\n\t            } else {\n\t                _.each(this.fields, function (field) {\n\t                    field.value(null);\n\t                });\n\t            }\n\t        },\n\t\n\t        /** Handles drop events e.g. from history panel */\n\t        _handleDrop: function (ev) {\n\t            try {\n\t                var data = this.model.get('data');\n\t                var current = this.model.get('current');\n\t                var config = this.config[current];\n\t                var field = this.fields[current];\n\t                var drop_data = JSON.parse(ev.originalEvent.dataTransfer.getData('text'))[0];\n\t                var new_id = drop_data.id;\n\t                var new_src = drop_data.history_content_type == 'dataset' ? 'hda' : 'hdca';\n\t                var new_value = { id: new_id, src: new_src };\n\t                if (data && _.findWhere(data[new_src], new_value)) {\n\t                    if (config.src == new_src) {\n\t                        var current_value = field.value();\n\t                        if (current_value && config.multiple) {\n\t                            if (current_value.indexOf(new_id) == -1) {\n\t                                current_value.push(new_id);\n\t                            }\n\t                        } else {\n\t                            current_value = new_id;\n\t                        }\n\t                        field.value(current_value);\n\t                    } else {\n\t                        this.model.set('value', { values: [new_value] });\n\t                        this.model.trigger('change:value');\n\t                    }\n\t                    this.trigger('change');\n\t                    this._handleDropStatus('success');\n\t                } else {\n\t                    this._handleDropStatus('danger');\n\t                }\n\t            } catch (e) {\n\t                this._handleDropStatus('danger');\n\t            }\n\t        },\n\t\n\t        /** Highlight drag result */\n\t        _handleDropStatus: function (status) {\n\t            var self = this;\n\t            this.$el.removeClass('ui-dragover').addClass('ui-dragover-' + status);\n\t            setTimeout(function () {\n\t                self.$el.removeClass('ui-dragover-' + status);\n\t            }, this.model.get('statustimer'));\n\t        },\n\t\n\t        /** Assists in identifying the batch mode */\n\t        _batch: function (result) {\n\t            result['batch'] = false;\n\t            var current = this.model.get('current');\n\t            var config = this.config[current];\n\t            if (config.src == 'hdca' && !config.multiple) {\n\t                var hdca = this.history[this.fields[current].value() + '_hdca'];\n\t                if (hdca && hdca.map_over_type) {\n\t                    result['batch'] = true;\n\t                }\n\t            }\n\t            if (config.batch == Batch.LINKED || config.batch == Batch.ENABLED) {\n\t                result['batch'] = true;\n\t                if (config.batch == Batch.ENABLED && this.button_product.value() === 'true') {\n\t                    result['product'] = true;\n\t                }\n\t            }\n\t            return result;\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(13)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, List) {\n\t\n\t    /**\n\t     * FTP file selector\n\t     */\n\t    var View = Backbone.View.extend({\n\t        // initialize\n\t        initialize: function (options) {\n\t            // link this\n\t            var self = this;\n\t\n\t            // create ui-list view to keep track of selected ftp files\n\t            this.ftpfile_list = new List.View({\n\t                name: 'file',\n\t                optional: options.optional,\n\t                multiple: options.multiple,\n\t                onchange: function () {\n\t                    options.onchange && options.onchange(self.value());\n\t                }\n\t            });\n\t\n\t            // create elements\n\t            this.setElement(this.ftpfile_list.$el);\n\t\n\t            // initial fetch of ftps\n\t            Utils.get({\n\t                url: Galaxy.root + 'api/remote_files',\n\t                success: function (response) {\n\t                    var data = [];\n\t                    for (var i in response) {\n\t                        data.push({\n\t                            value: response[i]['path'],\n\t                            label: response[i]['path']\n\t                        });\n\t                    }\n\t                    self.ftpfile_list.update(data);\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Return/Set currently selected ftp datasets */\n\t        value: function (val) {\n\t            return this.ftpfile_list.value(val);\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(5), __webpack_require__(35)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, GenomespaceBrowser) {\n\t\n\t    /**\n\t     * GenomeSpace file selector\n\t     */\n\t    var View = Backbone.View.extend({\n\t        // initialize\n\t        initialize: function (options) {\n\t\n\t            // link this\n\t            var self = this;\n\t\n\t            // create insert new list element button\n\t            this.browse_button = new Ui.ButtonIcon({\n\t                title: 'Browse',\n\t                icon: 'fa fa-sign-in',\n\t                tooltip: 'Browse GenomeSpace',\n\t                onclick: function () {\n\t                    self.browseGenomeSpace();\n\t                }\n\t            });\n\t\n\t            // create genomespace filepath textbox\n\t            this.filename_textbox = new Ui.Input();\n\t\n\t            // create genomespace token textbox\n\t            this.token_textbox = new Ui.Input({\n\t                type: 'password'\n\t            });\n\t\n\t            // create elements\n\t            this.setElement(this._template(options));\n\t            this.$('.ui-gs-browse-button').append(this.browse_button.$el);\n\t            this.$('.ui-gs-filename-textbox').append(this.filename_textbox.$el);\n\t            this.$('.ui-gs-token-textbox').append(this.token_textbox.$el);\n\t        },\n\t\n\t        /** Browse GenomeSpace */\n\t        browseGenomeSpace: function (options) {\n\t            var self = this;\n\t            GenomespaceBrowser.openFileBrowser({\n\t                successCallback: function (data) {\n\t                    self.value(data.destination + \"^\" + data.token);\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Main Template */\n\t        _template: function (options) {\n\t            return '<div class=\"ui-gs-select-file\">' + '<div class=\"ui-gs-browse-field\">' + '<span class=\"ui-gs-browse-button\" />' + '<span class=\"ui-gs-filename-textbox\" />' + '</div>' + '<div class=\"ui-gs-token-field\">' + '<span class=ui-gs-label\"><div class=\"ui-gs-token-label\">Token</div></span>' + '<span class=\"ui-gs-token-textbox\" />' + '</div>' + '</div>';\n\t        },\n\t\n\t        /** Return/Set currently selected genomespace filename/token */\n\t        value: function (new_value) {\n\t            // check if new_value is defined\n\t            if (new_value !== undefined) {\n\t                this._setValue(new_value);\n\t            } else {\n\t                return this._getValue();\n\t            }\n\t        },\n\t\n\t        // get value\n\t        _getValue: function () {\n\t            return this.filename_textbox.value() + \"^\" + this.token_textbox.value();\n\t        },\n\t\n\t        // set value\n\t        _setValue: function (new_value) {\n\t            if (new_value) {\n\t                values = new_value.split(\"^\");\n\t                this.filename_textbox.value(values[0]);\n\t                this.token_textbox.value(values[1]);\n\t            }\n\t        }\n\t\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone) {// dependencies\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4), __webpack_require__(5), __webpack_require__(23), __webpack_require__(13)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, Table, List) {\n\t\n\t    // collection of libraries\n\t    var Libraries = Backbone.Collection.extend({\n\t        url: Galaxy.root + 'api/libraries?deleted=false'\n\t    });\n\t\n\t    // collection of dataset\n\t    var LibraryDatasets = Backbone.Collection.extend({\n\t        initialize: function () {\n\t            var self = this;\n\t            this.config = new Backbone.Model({ library_id: null });\n\t            this.config.on('change', function () {\n\t                self.fetch({ reset: true });\n\t            });\n\t        },\n\t        url: function () {\n\t            return Galaxy.root + 'api/libraries/' + this.config.get('library_id') + '/contents';\n\t        }\n\t    });\n\t\n\t    // hda/hdca content selector ui element\n\t    var View = Backbone.View.extend({\n\t        // initialize\n\t        initialize: function (options) {\n\t            // link this\n\t            var self = this;\n\t\n\t            // collections\n\t            this.libraries = new Libraries();\n\t            this.datasets = new LibraryDatasets();\n\t\n\t            // link app and options\n\t            this.options = options;\n\t\n\t            // select field for the library\n\t            // TODO: Remove this once the library API supports searching for library datasets\n\t            this.library_select = new Ui.Select.View({\n\t                onchange: function (value) {\n\t                    self.datasets.config.set('library_id', value);\n\t                }\n\t            });\n\t\n\t            // create ui-list view to keep track of selected data libraries\n\t            this.dataset_list = new List.View({\n\t                name: 'dataset',\n\t                optional: options.optional,\n\t                multiple: options.multiple,\n\t                onchange: function () {\n\t                    self.trigger('change');\n\t                }\n\t            });\n\t\n\t            // add reset handler for fetched libraries\n\t            this.libraries.on('reset', function () {\n\t                var data = [];\n\t                self.libraries.each(function (model) {\n\t                    data.push({\n\t                        value: model.id,\n\t                        label: model.get('name')\n\t                    });\n\t                });\n\t                self.library_select.update(data);\n\t            });\n\t\n\t            // add reset handler for fetched library datasets\n\t            this.datasets.on('reset', function () {\n\t                var data = [];\n\t                var library_current = self.library_select.text();\n\t                if (library_current !== null) {\n\t                    self.datasets.each(function (model) {\n\t                        if (model.get('type') === 'file') {\n\t                            data.push({\n\t                                value: model.id,\n\t                                label: model.get('name')\n\t                            });\n\t                        }\n\t                    });\n\t                }\n\t                self.dataset_list.update(data);\n\t            });\n\t\n\t            // add change event. fires on trigger\n\t            this.on('change', function () {\n\t                options.onchange && options.onchange(self.value());\n\t            });\n\t\n\t            // create elements\n\t            this.setElement(this._template());\n\t            this.$('.library-select').append(this.library_select.$el);\n\t            this.$el.append(this.dataset_list.$el);\n\t\n\t            // initial fetch of libraries\n\t            this.libraries.fetch({\n\t                reset: true,\n\t                success: function () {\n\t                    self.library_select.trigger('change');\n\t                    if (self.options.value !== undefined) {\n\t                        self.value(self.options.value);\n\t                    }\n\t                }\n\t            });\n\t        },\n\t\n\t        /** Return/Set currently selected library datasets */\n\t        value: function (val) {\n\t            return this.dataset_list.value(val);\n\t        },\n\t\n\t        /** Template */\n\t        _template: function () {\n\t            return '<div class=\"ui-select-library\">' + '<div class=\"library ui-margin-bottom\">' + '<span class=\"library-title\">Select Library</span>' + '<span class=\"library-select\"/>' + '</div>' + '</div>';\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(4)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n\t    var View = Backbone.View.extend({\n\t        initialize: function (options) {\n\t            var self = this;\n\t            this.model = options && options.model || new Backbone.Model({\n\t                id: Utils.uid(),\n\t                min: null,\n\t                max: null,\n\t                step: null,\n\t                precise: false,\n\t                split: 10000,\n\t                value: null,\n\t                onchange: function () {}\n\t            }).set(options);\n\t\n\t            // create new element\n\t            this.setElement(this._template());\n\t            this.$el.attr('id', this.model.id);\n\t            this.$text = this.$('.ui-form-slider-text');\n\t            this.$slider = this.$('.ui-form-slider-element');\n\t\n\t            // add text field event\n\t            var pressed = [];\n\t            this.$text.on('change', function () {\n\t                self.value($(this).val());\n\t            }).on('keyup', function (e) {\n\t                pressed[e.which] = false;\n\t            }).on('keydown', function (e) {\n\t                var v = e.which;\n\t                pressed[v] = true;\n\t                if (self.model.get('is_workflow') && pressed[16] && v == 52) {\n\t                    self.value('$');\n\t                    event.preventDefault();\n\t                } else if (!(v == 8 || v == 9 || v == 13 || v == 37 || v == 39 || v >= 48 && v <= 57 && !pressed[16] || v >= 96 && v <= 105 || (v == 190 || v == 110) && $(this).val().indexOf('.') == -1 && self.model.get('precise') || (v == 189 || v == 109) && $(this).val().indexOf('-') == -1 || self._isParameter($(this).val()) || pressed[91] || pressed[17])) {\n\t                    event.preventDefault();\n\t                }\n\t            });\n\t\n\t            // build slider, cannot be rebuild in render\n\t            var opts = this.model.attributes;\n\t            this.has_slider = opts.max !== null && opts.min !== null && opts.max > opts.min;\n\t            var step = opts.step;\n\t            if (!step) {\n\t                if (opts.precise && this.has_slider) {\n\t                    step = (opts.max - opts.min) / opts.split;\n\t                } else {\n\t                    step = 1.0;\n\t                }\n\t            }\n\t            if (this.has_slider) {\n\t                this.$text.addClass('ui-form-slider-left');\n\t                this.$slider.slider({ min: opts.min, max: opts.max, step: step }).on('slide', function (event, ui) {\n\t                    self.value(ui.value);\n\t                });\n\t            } else {\n\t                this.$slider.hide();\n\t            }\n\t\n\t            // add listeners\n\t            this.listenTo(this.model, 'change', this.render, this);\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var value = this.model.get('value');\n\t            this.has_slider && this.$slider.slider('value', value);\n\t            value !== this.$text.val() && this.$text.val(value);\n\t        },\n\t\n\t        /** Set and return the current value */\n\t        value: function (new_val) {\n\t            var options = this.model.attributes;\n\t            if (new_val !== undefined) {\n\t                if (new_val !== null && new_val !== '' && !this._isParameter(new_val)) {\n\t                    isNaN(new_val) && (new_val = 0);\n\t                    !options.precise && (new_val = Math.round(new_val));\n\t                    options.max !== null && (new_val = Math.min(new_val, options.max));\n\t                    options.min !== null && (new_val = Math.max(new_val, options.min));\n\t                }\n\t                this.model.set('value', new_val);\n\t                this.model.trigger('change');\n\t                options.onchange(new_val);\n\t            }\n\t            return this.model.get('value');\n\t        },\n\t\n\t        /** Return true if the field contains a workflow parameter i.e. $('name') */\n\t        _isParameter: function (value) {\n\t            return this.model.get('is_workflow') && String(value).substring(0, 1) === '$';\n\t        },\n\t\n\t        /** Slider template */\n\t        _template: function () {\n\t            return '<div class=\"ui-form-slider\">' + '<input class=\"ui-form-slider-text\" type=\"text\"/>' + '<div class=\"ui-form-slider-element\"/>' + '</div>';\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ }),\n/* 43 */,\n/* 44 */,\n/* 45 */,\n/* 46 */,\n/* 47 */,\n/* 48 */,\n/* 49 */,\n/* 50 */,\n/* 51 */,\n/* 52 */,\n/* 53 */,\n/* 54 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Backbone) {var jQuery = __webpack_require__(1),\n\t    $ = jQuery,\n\t    QUERY_STRING = __webpack_require__(26),\n\t    Ui = __webpack_require__(5);\n\t\n\tvar Router = Backbone.Router.extend({\n\t    // TODO: not many client routes at this point - fill and remove from server.\n\t    // since we're at root here, this may be the last to be routed entirely on the client.\n\t    initialize: function (page, options) {\n\t        this.page = page;\n\t        this.options = options;\n\t    },\n\t\n\t    /** helper to push a new navigation state */\n\t    push: function (url, data) {\n\t        data = data || {};\n\t        data.__identifer = Math.random().toString(36).substr(2);\n\t        if (!$.isEmptyObject(data)) {\n\t            url += url.indexOf('?') == -1 ? '?' : '&';\n\t            url += $.param(data, true);\n\t        }\n\t        Galaxy.params = {};\n\t        this.navigate(url, { 'trigger': true });\n\t    },\n\t\n\t    /** override to parse query string into obj and send to each route */\n\t    execute: function (callback, args, name) {\n\t        Galaxy.debug('router execute:', callback, args, name);\n\t        var queryObj = QUERY_STRING.parse(args.pop());\n\t        args.push(queryObj);\n\t        if (callback) {\n\t            if (this.authenticate(args, name)) {\n\t                callback.apply(this, args);\n\t            } else {\n\t                this.access_denied();\n\t            }\n\t        }\n\t    },\n\t\n\t    authenticate: function (args, name) {\n\t        return true;\n\t    },\n\t\n\t    access_denied: function () {\n\t        this.page.display(new Ui.Message({ status: 'danger', message: 'You must be logged in with proper credentials to make this request.', persistent: true }));\n\t    }\n\t});\n\t\n\tmodule.exports = Router;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ }),\n/* 55 */,\n/* 56 */,\n/* 57 */,\n/* 58 */,\n/* 59 */,\n/* 60 */,\n/* 61 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(Backbone, $) {/** Generic form view */\n\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(10), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Form, Ui) {\n\t\n\t    var View = Backbone.View.extend({\n\t\n\t        initialize: function (options) {\n\t            this.model = new Backbone.Model(options);\n\t            this.url = this.model.get('url');\n\t            this.redirect = this.model.get('redirect');\n\t            this.setElement('<div/>');\n\t            this.render();\n\t        },\n\t\n\t        render: function () {\n\t            var self = this;\n\t            $.ajax({\n\t                url: Galaxy.root + this.url,\n\t                type: 'GET'\n\t            }).done(function (response) {\n\t                var options = $.extend({}, self.model.attributes, response);\n\t                var form = new Form({\n\t                    title: options.title,\n\t                    message: options.message,\n\t                    status: options.status || 'warning',\n\t                    icon: options.icon,\n\t                    inputs: options.inputs,\n\t                    buttons: {\n\t                        'submit': new Ui.Button({\n\t                            tooltip: options.submit_tooltip,\n\t                            title: options.submit_title || 'Save',\n\t                            icon: options.submit_icon || 'fa-save',\n\t                            cls: 'btn btn-primary ui-clear-float',\n\t                            onclick: function () {\n\t                                self._submit(form);\n\t                            }\n\t                        })\n\t                    }\n\t                });\n\t                self.$el.empty().append(form.$el);\n\t            }).fail(function (response) {\n\t                self.$el.empty().append(new Ui.Message({\n\t                    message: 'Failed to load resource ' + self.url + '.',\n\t                    status: 'danger',\n\t                    persistent: true\n\t                }).$el);\n\t            });\n\t        },\n\t\n\t        _submit: function (form) {\n\t            var self = this;\n\t            $.ajax({\n\t                url: Galaxy.root + self.url,\n\t                data: JSON.stringify(form.data.create()),\n\t                type: 'PUT',\n\t                contentType: 'application/json'\n\t            }).done(function (response) {\n\t                var success_message = { message: response.message, status: 'success', persistent: false };\n\t                if (self.redirect) {\n\t                    window.location = Galaxy.root + self.redirect + '?' + $.param(success_message);\n\t                } else {\n\t                    form.data.matchModel(response, function (input, input_id) {\n\t                        form.field_list[input_id].value(input.value);\n\t                    });\n\t                    self._showMessage(form, success_message);\n\t                }\n\t            }).fail(function (response) {\n\t                self._showMessage(form, { message: response.responseJSON.err_msg, status: 'danger', persistent: false });\n\t            });\n\t        },\n\t\n\t        _showMessage: function (form, options) {\n\t            var $panel = form.$el.parents().filter(function () {\n\t                return ['auto', 'scroll'].indexOf($(this).css('overflow')) != -1;\n\t            }).first();\n\t            $panel.animate({ scrollTop: 0 }, 500);\n\t            form.message.update(options);\n\t        }\n\t    });\n\t\n\t    return {\n\t        View: View\n\t    };\n\t}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1)))\n\n/***/ }),\n/* 62 */,\n/* 63 */,\n/* 64 */,\n/* 65 */,\n/* 66 */,\n/* 67 */,\n/* 68 */,\n/* 69 */,\n/* 70 */,\n/* 71 */,\n/* 72 */,\n/* 73 */,\n/* 74 */,\n/* 75 */,\n/* 76 */,\n/* 77 */,\n/* 78 */,\n/* 79 */,\n/* 80 */,\n/* 81 */,\n/* 82 */,\n/* 83 */,\n/* 84 */,\n/* 85 */,\n/* 86 */,\n/* 87 */,\n/* 88 */,\n/* 89 */,\n/* 90 */,\n/* 91 */,\n/* 92 */,\n/* 93 */,\n/* 94 */,\n/* 95 */,\n/* 96 */,\n/* 97 */,\n/* 98 */,\n/* 99 */,\n/* 100 */,\n/* 101 */,\n/* 102 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var _l = __webpack_require__(6);\n\t\n\tvar AdminPanel = Backbone.View.extend({\n\t    initialize: function (page, options) {\n\t        var self = this;\n\t        this.page = page;\n\t        this.root = options.root;\n\t        this.config = options.config;\n\t        this.settings = options.settings;\n\t        this.message = options.message;\n\t        this.status = options.status;\n\t        this.model = new Backbone.Model({\n\t            title: _l('Administration')\n\t        });\n\t        this.categories = new Backbone.Collection([{\n\t            title: 'Server',\n\t            items: [{\n\t                title: 'Data types registry',\n\t                url: 'admin/view_datatypes_registry'\n\t            }, {\n\t                title: 'Data tables registry',\n\t                url: 'admin/view_tool_data_tables'\n\t            }, {\n\t                title: 'Display applications',\n\t                url: 'admin/display_applications'\n\t            }, {\n\t                title: 'Manage jobs',\n\t                url: 'admin/jobs'\n\t            }, {\n\t                title: 'Local data',\n\t                url: 'data_manager'\n\t            }]\n\t        }, {\n\t            title: 'User Management',\n\t            items: [{\n\t                title: 'Users',\n\t                url: 'admin/users',\n\t                target: '__use_router__'\n\t            }, {\n\t                title: 'Quotas',\n\t                url: 'admin/quotas',\n\t                target: '__use_router__',\n\t                enabled: self.config.enable_quotas\n\t            }, {\n\t                title: 'Groups',\n\t                url: 'admin/groups',\n\t                target: '__use_router__'\n\t            }, {\n\t                title: 'Roles',\n\t                url: 'admin/roles',\n\t                target: '__use_router__'\n\t            }, {\n\t                title: 'Forms',\n\t                url: 'admin/forms',\n\t                target: '__use_router__'\n\t            }, {\n\t                title: 'API keys',\n\t                url: 'userskeys/all_users'\n\t            }, {\n\t                title: 'Impersonate a user',\n\t                url: 'admin/impersonate',\n\t                enabled: self.config.allow_user_impersonation\n\t            }]\n\t        }, {\n\t            title: 'Tools and Tool Shed',\n\t            items: [{\n\t                title: 'Search Tool Shed',\n\t                url: 'admin_toolshed/browse_tool_sheds',\n\t                enabled: self.settings.is_tool_shed_installed\n\t            }, {\n\t                title: 'Search Tool Shed (Beta)',\n\t                url: 'admin_toolshed/browse_toolsheds',\n\t                enabled: self.settings.is_tool_shed_installed && self.config.enable_beta_ts_api_install\n\t            }, {\n\t                title: 'Monitor installing repositories',\n\t                url: 'admin_toolshed/monitor_repository_installation?installing_repository_ids=' + self.settings.installing_repository_ids,\n\t                enabled: self.settings.installing_repository_ids\n\t            }, {\n\t                title: 'Manage installed tools',\n\t                url: 'admin_toolshed/browse_repositories',\n\t                enabled: self.settings.is_repo_installed\n\t            }, {\n\t                title: 'Reset metadata',\n\t                url: 'admin_toolshed/reset_metadata_on_selected_installed_repositories',\n\t                enabled: self.settings.is_repo_installed\n\t            }, {\n\t                title: 'Download local tool',\n\t                url: 'admin/package_tool'\n\t            }, {\n\t                title: 'Tool lineage',\n\t                url: 'admin/tool_versions',\n\t                target: '__use_router__'\n\t            }, {\n\t                title: 'Reload a tool\\'s configuration',\n\t                url: 'admin/reload_tool'\n\t            }, {\n\t                title: 'Review tool migration stages',\n\t                url: 'admin/review_tool_migration_stages'\n\t            }, {\n\t                title: 'View Tool Error Logs',\n\t                url: 'admin/tool_errors'\n\t            }, {\n\t                title: 'Manage Display Whitelist',\n\t                url: 'admin/sanitize_whitelist'\n\t            }, {\n\t                title: 'Manage Tool Dependencies',\n\t                url: 'admin/manage_tool_dependencies'\n\t            }]\n\t        }]);\n\t        this.setElement(this._template());\n\t    },\n\t\n\t    render: function () {\n\t        var self = this;\n\t        this.$el.empty();\n\t        this.categories.each(function (category) {\n\t            var $section = $(self._templateSection(category.attributes));\n\t            var $entries = $section.find('.ui-side-section-body');\n\t            _.each(category.get('items'), function (item) {\n\t                if (item.enabled === undefined || item.enabled) {\n\t                    var $link = $('<a/>').attr({ href: self.root + item.url }).text(_l(item.title));\n\t                    if (item.target == '__use_router__') {\n\t                        $link.on('click', function (e) {\n\t                            e.preventDefault();self.page.router.push(item.url);\n\t                        });\n\t                    } else {\n\t                        $link.attr('target', 'galaxy_main');\n\t                    }\n\t                    $entries.append($('<div/>').addClass('ui-side-section-body-title').append($link));\n\t                }\n\t            });\n\t            self.$el.append($section);\n\t        });\n\t        this.page.$('#galaxy_main').prop('src', this.root + 'admin/center?message=' + this.message + '&status=' + this.status);\n\t    },\n\t\n\t    _templateSection: function (options) {\n\t        return ['<div>', '<div class=\"ui-side-section-title\">' + _l(options.title) + '</div>', '<div class=\"ui-side-section-body\"/>', '</div>'].join('');\n\t    },\n\t\n\t    _template: function () {\n\t        return '<div class=\"ui-side-panel\"/>';\n\t    },\n\t\n\t    toString: function () {\n\t        return 'adminPanel';\n\t    }\n\t});\n\t\n\tmodule.exports = AdminPanel;\n\t/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2), __webpack_require__(1), __webpack_require__(3)))\n\n/***/ })\n]);\n\n\n// WEBPACK FOOTER //\n// admin.bundled.js","var jQuery = require( 'jquery' ),\n    $ = jQuery,\n    GalaxyApp = require( 'galaxy' ).GalaxyApp,\n    AdminPanel = require( './panels/admin-panel' ),\n    FormWrapper = require( 'mvc/form/form-wrapper' ),\n    GridView = require( 'mvc/grid/grid-view' ),\n    Ui = require( 'mvc/ui/ui-misc' ),\n    QueryStringParsing = require( 'utils/query-string-parsing' ),\n    Router = require( 'layout/router' ),\n    Page = require( 'layout/page' );\n\nwindow.app = function app( options, bootstrapped ){\n    window.Galaxy = new GalaxyApp( options, bootstrapped );\n    Galaxy.debug( 'admin app' );\n\n    /** Routes */\n    var AdminRouter = Router.extend({\n        routes: {\n            '(/)admin(/)users' : 'show_users',\n            '(/)admin(/)roles' : 'show_roles',\n            '(/)admin(/)groups' : 'show_groups',\n            '(/)admin(/)tool_versions' : 'show_tool_versions',\n            '(/)admin(/)quotas' : 'show_quotas',\n            '(/)admin(/)forms' : 'show_forms',\n            '(/)admin(/)form(/)(:form_id)' : 'show_form'\n        },\n\n        authenticate: function( args, name ) {\n            return Galaxy.user && Galaxy.user.id && Galaxy.user.get( 'is_admin' );\n        },\n\n        show_users: function() {\n            this.page.display( new GridView( { url_base: Galaxy.root + 'admin/users_list', url_data: Galaxy.params, dict_format: true } ) );\n        },\n\n        show_roles: function() {\n            this.page.display( new GridView( { url_base: Galaxy.root + 'admin/roles_list', url_data: Galaxy.params, dict_format: true } ) );\n        },\n\n        show_groups: function() {\n            this.page.display( new GridView( { url_base: Galaxy.root + 'admin/groups_list', url_data: Galaxy.params, dict_format: true } ) );\n        },\n\n        show_tool_versions: function() {\n            this.page.display( new GridView( { url_base: Galaxy.root + 'admin/tool_versions_list', url_data: Galaxy.params, dict_format: true } ) );\n        },\n\n        show_quotas: function() {\n            this.page.display( new GridView( { url_base: Galaxy.root + 'admin/quotas_list', url_data: Galaxy.params, dict_format: true } ) );\n        },\n\n        show_forms: function() {\n            this.page.display( new GridView( { url_base: Galaxy.root + 'forms/forms_list', url_data: Galaxy.params, dict_format: true } ) );\n        },\n\n        show_form : function( form_id ) {\n            var id = '?id=' + QueryStringParsing.get( 'id' );\n            var form_defs = {\n                reset_user_password: {\n                    title           : 'Reset passwords',\n                    url             : 'admin/reset_user_password' + id,\n                    icon            : 'fa-user',\n                    submit_title    : 'Save new password',\n                    redirect        : 'admin/users'\n                },\n                manage_roles_and_groups_for_user: {\n                    url             : 'admin/manage_roles_and_groups_for_user' + id,\n                    icon            : 'fa-users',\n                    redirect        : 'admin/users'\n                },\n                manage_users_and_groups_for_role: {\n                    url             : 'admin/manage_users_and_groups_for_role' + id,\n                    redirect        : 'admin/roles'\n                },\n                manage_users_and_roles_for_group: {\n                    url             : 'admin/manage_users_and_roles_for_group' + id,\n                    redirect        : 'admin/groups'\n                },\n                manage_users_and_groups_for_quota: {\n                    url             : 'admin/manage_users_and_groups_for_quota' + id,\n                    redirect        : 'admin/quotas'\n                },\n                create_role: {\n                    url             : 'admin/create_role',\n                    redirect        : 'admin/roles'\n                },\n                create_group: {\n                    url             : 'admin/create_group',\n                    redirect        : 'admin/groups'\n                },\n                create_quota: {\n                    url             : 'admin/create_quota',\n                    redirect        : 'admin/quotas'\n                },\n                rename_role: {\n                    url             : 'admin/rename_role' + id,\n                    redirect        : 'admin/roles'\n                },\n                rename_group: {\n                    url             : 'admin/rename_group' + id,\n                    redirect        : 'admin/groups'\n                },\n                rename_quota: {\n                    url             : 'admin/rename_quota' + id,\n                    redirect        : 'admin/quotas'\n                },\n                edit_quota: {\n                    url             : 'admin/edit_quota' + id,\n                    redirect        : 'admin/quotas'\n                },\n                set_quota_default: {\n                    url             : 'admin/set_quota_default' + id,\n                    redirect        : 'admin/quotas'\n                },\n                create_form: {\n                    url             : 'forms/create_form',\n                    redirect        : 'admin/forms'\n                },\n                edit_form: {\n                    url             : 'forms/edit_form' + id,\n                    redirect        : 'admin/forms'\n                },\n            };\n            this.page.display( new FormWrapper.View ( form_defs[ form_id ] ) );\n        }\n    });\n\n    $(function() {\n        _.extend( options.config, { active_view : 'admin' } );\n        Galaxy.page = new Page.View( _.extend( options, {\n            Left    : AdminPanel,\n            Router  : AdminRouter\n        } ) );\n    });\n};\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/apps/admin.js","/**\n *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n */\ndefine(['utils/utils',\n    'mvc/ui/ui-select-default',\n    'mvc/ui/ui-slider',\n    'mvc/ui/ui-options',\n    'mvc/ui/ui-drilldown',\n    'mvc/ui/ui-buttons',\n    'mvc/ui/ui-modal'],\n    function( Utils, Select, Slider, Options, Drilldown, Buttons, Modal ) {\n\n    /** Label wrapper */\n    var Label = Backbone.View.extend({\n        tagName: 'label',\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model( options );\n            this.tagName = options.tagName || this.tagName;\n            this.setElement( $( '<' + this.tagName + '/>' ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        title: function( new_title ) {\n            this.model.set( 'title', new_title );\n        },\n        value: function() {\n            return this.model.get( 'title' );\n        },\n        render: function() {\n            this.$el.removeClass()\n                    .addClass( 'ui-label' )\n                    .addClass( this.model.get( 'cls' ) )\n                    .html( this.model.get( 'title' ) );\n            return this;\n        }\n    });\n\n    /** Displays messages used e.g. in the tool form */\n    var Message = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                message     : null,\n                status      : 'info',\n                cls         : '',\n                persistent  : false,\n                fade        : true\n            }).set( options );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        update: function( options ) {\n            this.model.set( options );\n        },\n        render: function() {\n            this.$el.removeClass().addClass( 'ui-message' ).addClass( this.model.get( 'cls' ) );\n            var status = this.model.get( 'status' );\n            if ( this.model.get( 'large' ) ) {\n                this.$el.addClass((( status == 'success' && 'done' ) ||\n                                   ( status == 'danger' && 'error' ) ||\n                                     status ) + 'messagelarge' );\n            } else {\n                this.$el.addClass( 'alert' ).addClass( 'alert-' + status );\n            }\n            if ( this.model.get( 'message' ) ) {\n                this.$el.html( this.messageForDisplay() );\n                this.$el[ this.model.get( 'fade' ) ? 'fadeIn' : 'show' ]();\n                this.timeout && window.clearTimeout( this.timeout );\n                if ( !this.model.get( 'persistent' ) ) {\n                    var self = this;\n                    this.timeout = window.setTimeout( function() {\n                        self.model.set( 'message', '' );\n                    }, 3000 );\n                }\n            } else {\n                this.$el.fadeOut();\n            }\n            return this;\n        },\n        messageForDisplay: function() {\n            return _.escape( this.model.get( 'message' ) );\n        }\n    });\n\n    var UnescapedMessage = Message.extend({\n        messageForDisplay: function() {\n            return this.model.get( 'message' );\n        }\n    });\n\n    /** Renders an input element used e.g. in the tool form */\n    var Input = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                type            : 'text',\n                placeholder     : '',\n                disabled        : false,\n                readonly        : false,\n                visible         : true,\n                cls             : '',\n                area            : false,\n                color           : null,\n                style           : null\n            }).set( options );\n            this.tagName = this.model.get( 'area' ) ? 'textarea' : 'input';\n            this.setElement( $( '<' + this.tagName + '/>' ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        events: {\n            'input': '_onchange'\n        },\n        value: function( new_val ) {\n            new_val !== undefined && this.model.set( 'value', typeof new_val === 'string' ? new_val : '' );\n            return this.model.get( 'value' );\n        },\n        render: function() {\n            var self = this;\n            this.$el.removeClass()\n                    .addClass( 'ui-' + this.tagName )\n                    .addClass( this.model.get( 'cls' ) )\n                    .addClass( this.model.get( 'style' ) )\n                    .attr( 'id', this.model.id )\n                    .attr( 'type', this.model.get( 'type' ) )\n                    .attr( 'placeholder', this.model.get( 'placeholder' ) )\n                    .css( 'color', this.model.get( 'color' ) || '' )\n                    .css( 'border-color', this.model.get( 'color' ) || '' );\n            var datalist = this.model.get( 'datalist' );\n            if ( $.isArray( datalist ) && datalist.length > 0 ) {\n                this.$el.autocomplete( { source : function( request, response ) { response( self.model.get( 'datalist' ) ) },\n                                         change : function() { self._onchange() } } );\n            }\n            if ( this.model.get( 'value' ) !== this.$el.val() ) {\n                this.$el.val( this.model.get( 'value' ) );\n            }\n            _.each( [ 'readonly', 'disabled' ], function( attr_name ) {\n                self.model.get( attr_name ) ? self.$el.attr( attr_name, true ) : self.$el.removeAttr( attr_name );\n            });\n            this.$el[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n            return this;\n        },\n        _onchange: function() {\n            this.value( this.$el.val() );\n            this.model.get( 'onchange' ) && this.model.get( 'onchange' )( this.model.get( 'value' ) );\n        }\n    });\n\n    /** Creates a hidden element input field used e.g. in the tool form */\n    var Hidden = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model( options );\n            this.setElement( $ ( '<div/>' ).append( this.$info = $( '<div/>' ) )\n                                           .append( this.$hidden = $( '<div/>' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n        value: function( new_val ) {\n            new_val !== undefined && this.model.set( 'value', new_val );\n            return this.model.get( 'value' );\n        },\n        render: function() {\n            this.$el.attr( 'id', this.model.id );\n            this.$hidden.val( this.model.get( 'value' ) );\n            this.model.get( 'info' ) ? this.$info.show().text( this.model.get( 'info' ) ) : this.$info.hide();\n            return this;\n        }\n    });\n\n    /** Creates a upload element input field */\n    var Upload = Backbone.View.extend({\n        initialize: function( options ) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model( options );\n            this.setElement( $ ( '<div/>' ).append( this.$info = $( '<div/>' ) )\n                                           .append( this.$file = $( '<input/>' ).attr( 'type', 'file' ).addClass( 'ui-margin-bottom' ) )\n                                           .append( this.$text = $( '<textarea/>' ).addClass( 'ui-textarea' ).attr( 'disabled', true ) )\n                                           .append( this.$wait = $( '<i/>' ).addClass( 'fa fa-spinner fa-spin' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.$file.on( 'change', function( e ) { self._readFile( e ) } );\n            this.render();\n        },\n        value: function( new_val ) {\n            new_val !== undefined && this.model.set( 'value', new_val );\n            return this.model.get( 'value' );\n        },\n        render: function() {\n            this.$el.attr( 'id', this.model.id );\n            this.model.get( 'info' ) ? this.$info.show().text( this.model.get( 'info' ) ) : this.$info.hide();\n            this.model.get( 'value' ) ? this.$text.text( this.model.get( 'value' ) ).show() : this.$text.hide();\n            this.model.get( 'wait' ) ? this.$wait.show() : this.$wait.hide();\n            return this;\n        },\n        _readFile: function( e ) {\n            var self = this;\n            var file = e.target.files && e.target.files[ 0 ];\n            if ( file ) {\n                var reader = new FileReader();\n                reader.onload = function() {\n                    self.model.set( { wait: false, value: this.result } );\n                }\n                this.model.set( { wait: true, value: null } );\n                reader.readAsText( file );\n            }\n        }\n    });\n\n    return {\n        Button           : Buttons.ButtonDefault,\n        ButtonIcon       : Buttons.ButtonIcon,\n        ButtonCheck      : Buttons.ButtonCheck,\n        ButtonMenu       : Buttons.ButtonMenu,\n        ButtonLink       : Buttons.ButtonLink,\n        Input            : Input,\n        Label            : Label,\n        Message          : Message,\n        UnescapedMessage : UnescapedMessage,\n        Upload           : Upload,\n        Modal            : Modal,\n        RadioButton      : Options.RadioButton,\n        Checkbox         : Options.Checkbox,\n        Radio            : Options.Radio,\n        Select           : Select,\n        Hidden           : Hidden,\n        Slider           : Slider,\n        Drilldown        : Drilldown\n    }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-misc.js","define([ 'utils/utils', 'mvc/ui/ui-misc' ], function( Utils, Ui ) {\nvar View = Backbone.View.extend({\n    visible     : false,\n    initialize  : function( options ) {\n        var self = this;\n        this.model = options && options.model || new Backbone.Model( {\n            id                  : Utils.uid(),\n            cls                 : 'ui-portlet',\n            title               : '',\n            icon                : '',\n            buttons             : null,\n            body                : null,\n            scrollable          : true,\n            nopadding           : false,\n            operations          : null,\n            collapsible         : false,\n            collapsible_button  : false,\n            collapsed           : false,\n            onchange_title      : null\n        } ).set( options );\n        this.setElement( this._template() );\n\n        // link all dom elements\n        this.$body          = this.$( '.portlet-body' );\n        this.$title_text    = this.$( '.portlet-title-text' );\n        this.$title_icon    = this.$( '.portlet-title-icon' );\n        this.$header        = this.$( '.portlet-header' );\n        this.$content       = this.$( '.portlet-content' );\n        this.$backdrop      = this.$( '.portlet-backdrop' );\n        this.$buttons       = this.$( '.portlet-buttons' );\n        this.$operations    = this.$( '.portlet-operations' );\n\n        // add body to component list\n        this.model.get( 'body' ) && this.append( this.model.get( 'body' ) );\n\n        // add icon for collapsible option\n        this.collapsible_button = new Ui.ButtonIcon({\n            icon    : 'fa-eye',\n            tooltip : 'Collapse/Expand',\n            cls     : 'ui-button-icon-plain',\n            onclick : function() { self[ self.collapsed ? 'expand' : 'collapse' ]() }\n        });\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        var options = this.model.attributes;\n        this.$el.removeClass().addClass( options.cls ).attr( 'id', options.id );\n        this.$header[ options.title ? 'show' : 'hide' ]();\n        this.$title_text.html( options.title );\n        _.each( [ this.$content, this.$body ], function( $el ) {\n            $el[ options.nopadding ? 'addClass' : 'removeClass' ]( 'no-padding' );\n        });\n\n        // render title icon\n        if ( options.icon ) {\n            this.$title_icon.removeClass().addClass( 'portlet-title-icon fa' ).addClass( options.icon ).show();\n        } else {\n            this.$title_icon.hide();\n        }\n\n        // make portlet collapsible\n        this.$title_text[ options.collapsible ? 'addClass' : 'removeClass' ]( 'no-highlight collapsible' ).off();\n        if ( options.collapsible ) {\n            this.$title_text.on( 'click', function() { self[ self.collapsed ? 'expand' : 'collapse' ]() } );\n            options.collapsed ? this.collapse() : this.expand();\n        }\n\n        // allow title editing\n        this.$title_text.prop( 'disabled', !options.onchange_title );\n        options.onchange_title && this.$title_text.make_text_editable({\n            on_finish: function( new_title ) {\n                options.onchange_title( new_title );\n            }\n        });\n\n        // render buttons\n        if ( options.buttons ) {\n            this.$buttons.empty().show();\n            $.each( this.model.get( 'buttons' ), function( name, item ) {\n                item.$el.prop( 'id', name );\n                self.$buttons.append( item.$el );\n            });\n        } else {\n            this.$buttons.hide();\n        }\n\n        // render operations\n        this.$operations.empty;\n        if ( options.collapsible_button ) {\n            this.$operations.append( this.collapsible_button.$el );\n        }\n        if ( options.operations ) {\n            $.each( options.operations, function( name, item ) {\n                item.$el.prop( 'id', name );\n                self.$operations.append( item.$el );\n            });\n        }\n        return this;\n    },\n\n    /** Append new doms to body */\n    append: function( $el ) {\n        this.$body.append( $el );\n    },\n\n    /** Remove all content */\n    empty: function() {\n        this.$body.empty();\n    },\n\n    /** Return header element */\n    header: function() {\n        return this.$header;\n    },\n\n    /** Return body element */\n    body: function() {\n        return this.$body;\n    },\n\n    /** Show portlet */\n    show: function(){\n        this.visible = true;\n        this.$el.fadeIn( 'fast' );\n    },\n\n    /** Hide portlet */\n    hide: function(){\n        this.visible = false;\n        this.$el.hide();\n    },\n\n    /** Enable a particular button */\n    enableButton: function( id ) {\n        this.$buttons.find( '#' + id ).prop( 'disabled', false );\n    },\n\n    /** Disable a particular button */\n    disableButton: function( id ) {\n        this.$buttons.find( '#' + id ).prop( 'disabled', true );\n    },\n\n    /** Hide a particular operation */\n    hideOperation: function( id ) {\n        this.$operations.find( '#' + id ).hide();\n    },\n\n    /** Show a particular operation */\n    showOperation: function( id ) {\n        this.$operations.find( '#' + id ).show();\n    },\n\n    /** Replaces the event callback of an existing operation */\n    setOperation: function( id, callback ) {\n        this.$operations.find( '#' + id ).off( 'click' ).on( 'click', callback );\n    },\n\n    /** Change title */\n    title: function( new_title ) {\n        new_title && this.$title_text.html( new_title );\n        return this.$title_text.html();\n    },\n\n    /** Collapse portlet */\n    collapse: function() {\n        this.collapsed = true;\n        this.$content.height( '0%' );\n        this.$body.hide();\n        this.collapsible_button.setIcon( 'fa-eye-slash' );\n    },\n\n    /** Expand portlet */\n    expand: function() {\n        this.collapsed = false;\n        this.$content.height( '100%' );\n        this.$body.fadeIn( 'fast' );\n        this.collapsible_button.setIcon( 'fa-eye' );\n    },\n\n    /** Disable content access */\n    disable: function() {\n        this.$backdrop.show();\n    },\n\n    /** Enable content access */\n    enable: function() {\n        this.$backdrop.hide();\n    },\n\n    _template: function() {\n        return $( '<div/>' ).append( $( '<div/>' ).addClass( 'portlet-header' )\n                                .append( $( '<div/>' ).addClass( 'portlet-operations' ) )\n                                .append( $( '<div/>' ).addClass( 'portlet-title' )\n                                    .append( $( '<i/>' ).addClass( 'portlet-title-icon' ) )\n                                    .append( $( '<span/>' ).addClass( 'portlet-title-text' ) ) ) )\n                            .append( $( '<div/>' ).addClass( 'portlet-content' )\n                                .append( $( '<div/>' ).addClass( 'portlet-body' ) )\n                                .append( $( '<div/>' ).addClass( 'portlet-buttons' ) ) )\n                            .append( $( '<div/>' ).addClass( 'portlet-backdrop' ) );\n    }\n});\nreturn {\n    View : View\n}\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-portlet.js","/**\n    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n*/\ndefine( [ 'utils/utils', 'mvc/ui/ui-portlet', 'mvc/ui/ui-misc', 'mvc/form/form-section', 'mvc/form/form-data' ],\nfunction( Utils, Portlet, Ui, FormSection, FormData ) {\n    return Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = new Backbone.Model({\n                initial_errors  : false,\n                cls             : 'ui-portlet-limited',\n                icon            : null,\n                always_refresh  : true,\n                status          : 'warning',\n                onchange        : function(){}\n            }).set( options );\n            this.setElement( '<div/>' );\n            this.render();\n        },\n\n        /** Update available options */\n        update: function( new_model ){\n            var self = this;\n            this.data.matchModel( new_model, function( node, input_id ) {\n                var input = self.input_list[ input_id ];\n                if ( input && input.options ) {\n                    if ( !_.isEqual( input.options, node.options ) ) {\n                        input.options = node.options;\n                        var field = self.field_list[ input_id ];\n                        if ( field.update ) {\n                            var new_options = [];\n                            if ( ( [ 'data', 'data_collection', 'drill_down' ] ).indexOf( input.type ) != -1 ) {\n                                new_options = input.options;\n                            } else {\n                                for ( var i in node.options ) {\n                                    var opt = node.options[ i ];\n                                    if ( opt.length > 2 ) {\n                                        new_options.push( { label: opt[ 0 ], value: opt[ 1 ] } );\n                                    }\n                                }\n                            }\n                            field.update( new_options );\n                            field.trigger( 'change' );\n                            Galaxy.emit.debug( 'form-view::update()', 'Updating options for ' + input_id );\n                        }\n                    }\n                }\n            });\n        },\n\n        /** Set form into wait mode */\n        wait: function( active ) {\n            for ( var i in this.input_list ) {\n                var field = this.field_list[ i ];\n                var input = this.input_list[ i ];\n                if ( input.is_dynamic && field.wait && field.unwait ) {\n                    field[ active ? 'wait' : 'unwait' ]();\n                }\n            }\n        },\n\n        /** Highlight and scroll to input element (currently only used for error notifications) */\n        highlight: function ( input_id, message, silent ) {\n            var input_element = this.element_list[ input_id ];\n            if ( input_element ) {\n                input_element.error( message || 'Please verify this parameter.' );\n                this.portlet.expand();\n                this.trigger( 'expand', input_id );\n                if ( !silent ) {\n                    var $panel = this.$el.parents().filter(function() {\n                        return [ 'auto', 'scroll' ].indexOf( $( this ).css( 'overflow' ) ) != -1;\n                    }).first();\n                    $panel.animate( { scrollTop : $panel.scrollTop() + input_element.$el.offset().top - 120 }, 500 );\n                }\n            }\n        },\n\n        /** Highlights errors */\n        errors: function( options ) {\n            this.trigger( 'reset' );\n            if ( options && options.errors ) {\n                var error_messages = this.data.matchResponse( options.errors );\n                for ( var input_id in this.element_list ) {\n                    var input = this.element_list[ input_id ];\n                    if ( error_messages[ input_id ] ) {\n                        this.highlight( input_id, error_messages[ input_id ], true );\n                    }\n                }\n            }\n        },\n\n        /** Render tool form */\n        render: function() {\n            var self = this;\n            this.off('change');\n            this.off('reset');\n            // contains the dom field elements as created by the parameter factory i.e. form-parameters\n            this.field_list = {};\n            // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n            this.input_list = {};\n            // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n            this.element_list = {};\n            // converts the form into a json data structure\n            this.data = new FormData.Manager( this );\n            this._renderForm();\n            this.data.create();\n            this.model.get( 'initial_errors' ) && this.errors( this.model.attributes );\n            // add listener which triggers on checksum change, and reset the form input wrappers\n            var current_check = this.data.checksum();\n            this.on( 'change', function( input_id ) {\n                var input = self.input_list[ input_id ];\n                if ( !input || input.refresh_on_change || self.model.get( 'always_refresh' ) ) {\n                    var new_check = self.data.checksum();\n                    if ( new_check != current_check ) {\n                        current_check = new_check;\n                        self.model.get( 'onchange' )();\n                    }\n                }\n            });\n            this.on('reset', function() {\n                _.each( self.element_list, function( input_element ) { input_element.reset() } );\n            });\n            return this;\n        },\n\n        /** Renders/appends dom elements of the form */\n        _renderForm: function() {\n            $( '.tooltip' ).remove();\n            var options = this.model.attributes;\n            this.message = new Ui.UnescapedMessage();\n            this.section = new FormSection.View( this, { inputs: options.inputs } );\n            this.portlet = new Portlet.View({\n                icon            : options.icon,\n                title           : options.title,\n                cls             : options.cls,\n                operations      : options.operations,\n                buttons         : options.buttons,\n                collapsible     : options.collapsible,\n                collapsed       : options.collapsed,\n                onchange_title  : options.onchange_title\n            });\n            this.portlet.append( this.message.$el );\n            this.portlet.append( this.section.$el );\n            this.$el.empty();\n            options.inputs && this.$el.append( this.portlet.$el );\n            options.message && this.message.update( { persistent: true, status: options.status, message: options.message } );\n            Galaxy.emit.debug( 'form-view::initialize()', 'Completed' );\n        }\n    });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-view.js","/** This module contains all button views. */\ndefine( [ 'utils/utils' ], function( Utils ) {\n    /** This renders the default button which is used e.g. at the bottom of the upload modal. */\n    var ButtonDefault = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : '',\n                icon        : '',\n                cls         : 'btn btn-default',\n                wait        : false,\n                wait_text   : 'Sending...',\n                wait_cls    : 'btn btn-info',\n                disabled    : false,\n                percentage  : -1\n            }).set( options );\n            this.setElement( $( '<button/>' ).attr( 'type', 'button' )\n                                             .append( this.$icon        = $( '<i/>' ) )\n                                             .append( this.$title       = $( '<span/>' ) )\n                                             .append( this.$progress    = $( '<div/>' ).append( this.$progress_bar = $( '<div/>' ) ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( 'ui-button-default' )\n                    .addClass( options.disabled && 'disabled' )\n                    .attr( 'id', options.id )\n                    .attr( 'disabled', options.disabled )\n                    .off( 'click' ).on( 'click' , function() {\n                        $( '.tooltip' ).hide();\n                        options.onclick && !self.disabled && options.onclick();\n                    })\n                    .tooltip( { title: options.tooltip, placement: 'bottom' } );\n            this.$progress.addClass( 'progress' ).css( 'display', options.percentage !== -1 ? 'block' : 'none' );\n            this.$progress_bar.addClass( 'progress-bar' ).css( { width : options.percentage + '%' } );\n            this.$icon.removeClass().addClass( 'icon fa' );\n            this.$title.removeClass().addClass( 'title' );\n            if ( options.wait ) {\n                this.$el.addClass( options.wait_cls ).prop( 'disabled', true );\n                this.$icon.addClass( 'fa-spinner fa-spin ui-margin-right' );\n                this.$title.html( options.wait_text );\n            } else {\n                this.$el.addClass( options.cls );\n                this.$icon.addClass( options.icon );\n                this.$title.html( options.title );\n                options.icon && options.title && this.$icon.addClass( 'ui-margin-right' );\n            }\n        },\n\n        /** Show button */\n        show: function() {\n            this.$el.show();\n        },\n\n        /** Hide button */\n        hide: function() {\n            this.$el.hide();\n        },\n\n        /** Disable button */\n        disable: function() {\n            this.model.set( 'disabled', true );\n        },\n\n        /** Enable button */\n        enable: function() {\n            this.model.set( 'disabled', false );\n        },\n\n        /** Show spinner to indicate that the button is not ready to be clicked */\n        wait: function() {\n            this.model.set( 'wait', true );\n        },\n\n        /** Hide spinner to indicate that the button is ready to be clicked */\n        unwait: function() {\n            this.model.set( 'wait', false );\n        },\n\n        /** Change icon */\n        setIcon: function( icon ) {\n            this.model.set( 'icon', icon );\n        }\n    });\n\n    /** This button allows the right-click/open-in-new-tab feature, its used e.g. for panel buttons. */\n    var ButtonLink = ButtonDefault.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : '',\n                icon        : '',\n                cls         : ''\n            }).set( options );\n            this.setElement( $( '<a/>' ).append( this.$icon  = $( '<span/>' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render: function() {\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( options.cls )\n                    .attr( { id         : options.id,\n                             href       : options.href || 'javascript:void(0)',\n                             title      : options.title,\n                             target     : options.target || '_top',\n                             disabled   : options.disabled } )\n                    .tooltip( { placement: 'bottom' } )\n                    .off( 'click' ).on( 'click' , function() {\n                        options.onclick && !options.disabled && options.onclick();\n                    });\n            this.$icon.removeClass().addClass( options.icon );\n        }\n    });\n\n    /** The check button is used in the tool form and allows to distinguish between multiple states e.g. all, partially and nothing selected. */\n    var ButtonCheck = Backbone.View.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : 'Select/Unselect all',\n                icons       : [ 'fa-square-o', 'fa-minus-square-o', 'fa-check-square-o' ],\n                value       : 0,\n                onchange    : function(){}\n            }).set( options );\n            this.setElement( $( '<div/>' ).append( this.$icon   = $( '<span/>' ) )\n                                          .append( this.$title  = $( '<span/>' ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render: function( options ) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.addClass( 'ui-button-check' )\n                    .off( 'click' ).on('click', function() {\n                        self.model.set( 'value', ( self.model.get( 'value' ) === 0 && 2 ) || 0 );\n                        options.onclick && options.onclick();\n                    });\n            this.$title.html( options.title );\n            this.$icon.removeClass()\n                      .addClass( 'icon fa ui-margin-right' )\n                      .addClass( options.icons[ options.value ] );\n        },\n\n        /* Sets a new value and/or returns the value.\n        * @param{Integer}   new_val - Set a new value 0=unchecked, 1=partial and 2=checked.\n        * OR:\n        * @param{Integer}   new_val - Number of selected options.\n        * @param{Integer}   total   - Total number of available options.\n        */\n        value: function ( new_val, total ) {\n            if ( new_val !== undefined ) {\n                if ( total && new_val !== 0 ) {\n                    new_val = ( new_val !== total ) && 1 || 2;\n                }\n                this.model.set( 'value', new_val );\n                this.model.get( 'onchange' )( this.model.get( 'value' ) );\n            }\n            return this.model.get( 'value' );\n        }\n    });\n\n    /** This renders a differently styled, more compact button version. */\n    var ButtonIcon = ButtonDefault.extend({\n        initialize: function( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id          : Utils.uid(),\n                title       : '',\n                icon        : '',\n                cls         : 'ui-button-icon',\n                disabled    : false\n            }).set( options );\n            this.setElement( $( '<div/>' ).append( this.$button = $( '<div/>' ).append( this.$icon  = $( '<i/>' ) )\n                                                                               .append( this.$title = $( '<span/>' ) ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render : function( options ) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( options.cls )\n                    .addClass( options.disabled && 'disabled' )\n                    .attr( 'disabled', options.disabled )\n                    .attr( 'id', options.id )\n                    .off( 'click' ).on( 'click', function() {\n                        $( '.tooltip' ).hide();\n                        !options.disabled && options.onclick && options.onclick();\n                    });\n            this.$button.addClass( 'button' ).tooltip( { title: options.tooltip, placement: 'bottom' } );\n            this.$icon.removeClass().addClass( 'icon fa' ).addClass( options.icon );\n            this.$title.addClass( 'title' ).html( options.title );\n            options.icon && options.title && this.$icon.addClass( 'ui-margin-right' );\n        }\n    });\n\n    /** This class creates a button with dropdown menu. */\n    var ButtonMenu = ButtonDefault.extend({\n        $menu: null,\n        initialize: function ( options ) {\n            this.model = options && options.model || new Backbone.Model({\n                id              : '',\n                title           : '',\n                pull            : 'right',\n                icon            : null,\n                onclick         : null,\n                cls             : 'ui-button-icon ui-button-menu',\n                tooltip         : '',\n                target          : '',\n                href            : '',\n                onunload        : null,\n                visible         : true,\n                tag             : ''\n            }).set( options );\n            this.collection = new Backbone.Collection();\n            this.setElement( $( '<div/>' ).append( this.$root = $( '<div/>' ).append( this.$icon  = $( '<i/>' ) )\n                                                                             .append( this.$title = $( '<span/>' ) ) ) );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.listenTo( this.collection, 'change add remove reset', this.render, this );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass()\n                    .addClass( 'dropdown' )\n                    .addClass( options.cls )\n                    .attr( 'id', options.id )\n                    .css( { display : options.visible && this.collection.where( { visible: true } ).length > 0 ? 'block' : 'none' } );\n            this.$root.addClass( 'root button dropdown-toggle' )\n                      .attr( 'data-toggle', 'dropdown' )\n                      .tooltip( { title: options.tooltip, placement: 'bottom' } )\n                      .off( 'click' ).on( 'click', function( e ) {\n                            $( '.tooltip' ).hide();\n                            e.preventDefault();\n                            options.onclick && options.onclick();\n                      } );\n            this.$icon.removeClass().addClass( 'icon fa' ).addClass( options.icon );\n            this.$title.removeClass().addClass( 'title' ).html( options.title );\n            options.icon && options.title && this.$icon.addClass( 'ui-margin-right' );\n            this.$menu && this.$menu.remove();\n            if ( this.collection.length > 0 ) {\n                this.$menu = $( '<ul/>' ).addClass( 'menu dropdown-menu' )\n                                         .addClass( 'pull-' + self.model.get( 'pull' ) )\n                                         .attr( 'role', 'menu' );\n                this.$el.append( this.$menu );\n            }\n            this.collection.each( function( submodel ) {\n                var suboptions = submodel.attributes;\n                if ( suboptions.visible ) {\n                    var $link = $( '<a/>' ).addClass( 'dropdown-item' )\n                                           .attr( { href : suboptions.href, target : suboptions.target } )\n                                           .append( $( '<i/>' ).addClass( 'fa' )\n                                                               .addClass( suboptions.icon )\n                                                               .css( 'display', suboptions.icon ? 'inline-block' : 'none' ) )\n                                           .append( suboptions.title )\n                                           .on( 'click', function( e ) {\n                                                if ( suboptions.onclick ) {\n                                                    e.preventDefault();\n                                                    suboptions.onclick();\n                                                }\n                                           } );\n                    self.$menu.append( $( '<li/>' ).append( $link ) );\n                    suboptions.divider && self.$menu.append( $( '<li/>' ).addClass( 'divider' ) );\n                }\n            });\n        },\n\n        /** Add a new menu item */\n        addMenu: function ( options ) {\n            this.collection.add( Utils.merge( options, {\n                title       : '',\n                target      : '',\n                href        : '',\n                onclick     : null,\n                divider     : false,\n                visible     : true,\n                icon        : null,\n                cls         : 'button-menu btn-group'\n            }));\n        }\n    });\n\n    return {\n        ButtonDefault   : ButtonDefault,\n        ButtonLink      : ButtonLink,\n        ButtonIcon      : ButtonIcon,\n        ButtonCheck     : ButtonCheck,\n        ButtonMenu      : ButtonMenu\n    }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-buttons.js","// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n// not appended to the identifier of a nested array.\njQuery.ajaxSettings.traditional = true;\n\n// dependencies\ndefine([\n    'utils/utils',\n    'mvc/grid/grid-model',\n    'mvc/grid/grid-template',\n    'mvc/ui/popup-menu'\n], function(Utils, GridModel, Templates, PopupMenu) {\n\n// grid view\nreturn Backbone.View.extend({\n\n    // model\n    grid: null,\n\n    // Initialize\n    initialize: function(grid_config) {\n        this.grid = new GridModel();\n        this.dict_format = grid_config.dict_format;\n        var self = this;\n        window.add_tag_to_grid_filter = function( tag_name, tag_value ){\n            // Put tag name and value together.\n            var tag = tag_name + ( tag_value !== undefined && tag_value !== \"\" ? \":\" + tag_value : \"\" );\n            var advanced_search = $( '#advanced-search').is(\":visible\" );\n            if( !advanced_search ){\n                $('#standard-search').slideToggle('fast');\n                $('#advanced-search').slideToggle('fast');\n            }\n            self.add_filter_condition( \"tags\", tag );\n        };\n\n        // set element\n        if ( this.dict_format ) {\n            this.setElement('<div/>');\n            if ( grid_config.url_base && !grid_config.items ) {\n                var url_data = grid_config.url_data || {};\n                _.each(grid_config.filters, function(v, k) {\n                    url_data['f-' + k] = v;\n                });\n                $.ajax({\n                    url     : grid_config.url_base + '?' + $.param( url_data ),\n                    success : function( response ) {\n                        response.embedded = grid_config.embedded;\n                        response.filters  = grid_config.filters || {};\n                        self.init_grid( response );\n                    }\n                });\n            } else {\n                this.init_grid(grid_config);\n            }\n        } else {\n            this.setElement('#grid-container');\n            this.init_grid(grid_config);\n        }\n\n        // fix padding\n        if (grid_config.use_panels) {\n            $('#center').css ({\n                padding     : '10px',\n                overflow    : 'auto'\n            });\n        }\n    },\n\n    // refresh frames\n    handle_refresh: function (refresh_frames) {\n        if (refresh_frames) {\n            if ($.inArray('history', refresh_frames) > -1) {\n                if( top.Galaxy && top.Galaxy.currHistoryPanel ){\n                    top.Galaxy.currHistoryPanel.loadCurrentHistory();\n                }\n            }\n        }\n    },\n\n    // Initialize\n    init_grid: function(grid_config) {\n        this.grid.set( grid_config );\n\n        // get options\n        var options = this.grid.attributes;\n\n        // handle refresh requests\n        this.handle_refresh(options.refresh_frames);\n\n        // strip protocol and domain\n        var url = this.grid.get('url_base');\n        url = url.replace(/^.*\\/\\/[^\\/]+/, '');\n        this.grid.set('url_base', url);\n\n        // append main template\n        this.$el.html(Templates.grid(options));\n\n        // update div contents\n        this.$el.find('#grid-table-header').html(Templates.header(options));\n        this.$el.find('#grid-table-body').html(Templates.body(options));\n        this.$el.find('#grid-table-footer').html(Templates.footer(options));\n\n        // update message\n        if (options.message) {\n            this.$el.find('#grid-message').html(Templates.message(options));\n            var self = this;\n            if (options.use_hide_message) {\n                setTimeout( function() { self.$el.find('#grid-message').html(''); }, 5000);\n            }\n        }\n\n        // configure elements\n        this.init_grid_elements();\n        this.init_grid_controls();\n\n        // attach global event handler\n        // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n        init_refresh_on_change();\n    },\n\n    // Initialize grid controls\n    init_grid_controls: function() {\n\n        // link\n        var self = this;\n\n        // Initialize grid operation button.\n        this.$el.find('.operation-button').each(function() {\n            $(this).off();\n            $(this).click(function() {\n                self.submit_operation(this);\n                return false;\n            });\n        });\n\n        // Initialize text filters to select text on click and use normal font when user is typing.\n        this.$el.find('input[type=text]').each(function() {\n            $(this).off();\n            $(this).click(function() { $(this).select(); } )\n                   .keyup(function () { $(this).css('font-style', 'normal'); });\n        });\n\n        // Initialize sort links.\n        this.$el.find('.sort-link').each( function() {\n            $(this).off();\n            $(this).click( function() {\n               self.set_sort_condition( $(this).attr('sort_key') );\n               return false;\n            });\n        });\n\n        // Initialize text filters.\n        this.$el.find('.text-filter-form').each( function() {\n            $(this).off();\n            $(this).submit( function() {\n                var column_key = $(this).attr('column_key');\n                var text_input_obj = $('#input-' + column_key + '-filter');\n                var text_input = text_input_obj.val();\n                text_input_obj.val('');\n                self.add_filter_condition(column_key, text_input);\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find('.text-filter-val > a').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                // Remove visible element.\n                $(this).parent().remove();\n\n                // Remove filter condition.\n                self.remove_filter_condition ($(this).attr('filter_key'), $(this).attr('filter_val'));\n\n                // Return\n                return false;\n            });\n        });\n\n        // Initialize categorical filters.\n        this.$el.find('.categorical-filter > a').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                self.set_categorical_filter( $(this).attr('filter_key'), $(this).attr('filter_val') );\n                return false;\n            });\n        });\n\n        // Initialize standard, advanced search toggles.\n        this.$el.find('.advanced-search-toggle').each( function() {\n            $(this).off();\n            $(this).click( function() {\n                self.$el.find('#standard-search').slideToggle('fast');\n                self.$el.find('#advanced-search').slideToggle('fast');\n                return false;\n            });\n        });\n\n        // Add event to check all box\n        this.$el.find('#check_all').off();\n        this.$el.find('#check_all').on('click', function() {\n            self.check_all_items();\n        });\n    },\n\n    // Initialize grid elements.\n    init_grid_elements : function() {\n        // Initialize grid selection checkboxes.\n        this.$el.find('.grid').each( function() {\n            var checkboxes = $(this).find(\"input.grid-row-select-checkbox\");\n            var check_count = $(this).find(\"span.grid-selected-count\");\n            var update_checked = function() {\n                check_count.text( $(checkboxes).filter(\":checked\").length );\n            };\n\n            $(checkboxes).each( function() {\n                $(this).change(update_checked);\n            });\n            update_checked();\n        });\n\n        // Initialize ratings.\n        if (this.$el.find('.community_rating_star').length !== 0)\n            this.$el.find('.community_rating_star').rating({});\n\n        // get options\n        var options = this.grid.attributes;\n        var self = this;\n\n        //\n        // add page click events\n        //\n        this.$el.find('.page-link > a').each( function() {\n            $(this).click( function() {\n               self.set_page( $(this).attr('page_num') );\n               return false;\n            });\n        });\n\n        //\n        // add inbound/outbound events\n        //\n        this.$el.find('.use-target').each( function() {\n            $(this).click( function(e) {\n                self.execute({\n                    href : $(this).attr('href'),\n                    target : $(this).attr('target')\n                });\n                return false;\n\n            });\n        });\n\n        // empty grid?\n        var items_length = options.items.length;\n        if (items_length == 0) {\n            return;\n        }\n\n        // add operation popup menus\n        _.each( options.items, function( item, index ) {\n            var button = self.$( '#grid-' + index + '-popup' ).off();\n            var popup = new PopupMenu( button );\n            _.each( options[ 'operations' ], function( operation ) {\n                self._add_operation( popup, operation, item );\n            });\n        });\n    },\n\n    /** Add an operation to the items menu */\n    _add_operation: function( popup, operation, item ) {\n        var self = this;\n        var settings = item.operation_config[ operation.label ];\n        if ( settings.allowed && operation.allow_popup ) {\n            popup.addItem({\n                html                : operation.label,\n                href                : settings.url_args,\n                target              : settings.target,\n                confirmation_text   : operation.confirm,\n                func                : function( e ) {\n                    e.preventDefault();\n                    var label = $( e.target ).html();\n                    if ( operation.onclick ) {\n                        operation.onclick( item.encode_id );\n                    } else {\n                        self.execute( this.findItemByHtml( label ) );\n                    }\n                }\n            });\n        }\n    },\n\n    // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n    add_filter_condition: function (name, value) {\n        // Do nothing is value is empty.\n        if (value === \"\") {\n            return false;\n        }\n\n        // Add condition to grid.\n        this.grid.add_filter(name, value, true);\n\n        // Add button that displays filter and provides a button to delete it.\n        var t = $(Templates.filter_element(name, value));\n        var self = this;\n        t.click(function() {\n            // Remove visible element.\n            $(this).remove();\n\n            // Remove filter condition.\n            self.remove_filter_condition(name, value);\n        });\n\n        // append to container\n        var container = this.$el.find('#' + name + '-filtering-criteria');\n        container.append(t);\n\n        // execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n    remove_filter_condition: function (name, value) {\n        // Remove filter condition.\n        this.grid.remove_filter(name, value);\n\n        // Execute\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set sort condition for grid.\n    set_sort_condition: function (col_key) {\n        // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n        // currently sorted column, sort is reversed.\n        var cur_sort = this.grid.get('sort_key');\n        var new_sort = col_key;\n        if (cur_sort.indexOf(col_key) !== -1) {\n            // Reverse sort.\n            if (cur_sort.substring(0, 1) !== '-') {\n                new_sort = '-' + col_key;\n            }\n        }\n\n        // Remove sort arrows elements.\n        this.$el.find('.sort-arrow').remove();\n\n        // Add sort arrow element to new sort column.\n        var sort_arrow = (new_sort.substring(0,1) == '-') ? '&uarr;' : '&darr;';\n        var t = $('<span>' + sort_arrow + '</span>').addClass('sort-arrow');\n\n        // Add to header\n        this.$el.find('#' + col_key + '-header').append(t);\n\n        // Update grid.\n        this.grid.set('sort_key', new_sort);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set new value for categorical filter.\n    set_categorical_filter: function (name, new_value) {\n        // Update filter hyperlinks to reflect new filter value.\n        var category_filter = this.grid.get('categorical_filters')[name],\n            cur_value = this.grid.get('filters')[name];\n        var self = this;\n        this.$el.find('.' + name + '-filter').each( function() {\n            var text = $.trim( $(this).text() );\n            var filter = category_filter[text];\n            var filter_value = filter[name];\n            if (filter_value == new_value) {\n                // Remove filter link since grid will be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                $(this).empty();\n                $(this).addClass('current-filter');\n                $(this).append(text);\n            } else if (filter_value == cur_value) {\n                // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                $(this).empty();\n                var t = $('<a href=\"#\">' + text + '</a>');\n                t.click(function() {\n                    self.set_categorical_filter( name, filter_value );\n                });\n                $(this).removeClass('current-filter');\n                $(this).append(t);\n            }\n        });\n\n        // Update grid.\n        this.grid.add_filter(name, new_value);\n        this.go_page_one();\n        this.execute();\n    },\n\n    // Set page to view.\n    set_page: function (new_page) {\n        // Update page hyperlink to reflect new page.\n        var self = this;\n        this.$el.find('.page-link').each( function() {\n            var id = $(this).attr('id'),\n                page_num = parseInt( id.split('-')[2], 10 ), // Id has form 'page-link-<page_num>\n                cur_page = self.grid.get('cur_page'),\n                text;\n            if (page_num === new_page) {\n                // Remove link to page since grid will be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor with text.\n                text = $(this).children().text();\n                $(this).empty();\n                $(this).addClass('inactive-link');\n                $(this).text(text);\n            }\n            else if (page_num === cur_page) {\n                // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n                // this element has a single child, a hyperlink/anchor.\n                text = $(this).text();\n                $(this).empty();\n                $(this).removeClass('inactive-link');\n                var t = $('<a href=\"#\">' + text + '</a>');\n                t.click(function() {\n                    self.set_page(page_num);\n                });\n                $(this).append(t);\n            }\n        });\n\n        if (new_page === 'all') {\n            this.grid.set('cur_page', new_page);\n        } else {\n            this.grid.set('cur_page', parseInt(new_page, 10));\n        }\n        this.execute();\n    },\n\n    // confirmation/submission of operation request\n    submit_operation: function (operation_button, confirmation_text) {\n        // identify operation\n        var operation_name = $(operation_button).val();\n\n        // verify in any item is selected\n        var number_of_checked_ids = this.$el.find('input[name=\"id\"]:checked').length;\n        if (!number_of_checked_ids > 0) {\n            return false;\n        }\n\n        // Check to see if there's grid confirmation text for this operation\n        var operation = _.findWhere(this.grid.attributes.operations, {label: operation_name});\n        if (operation && !confirmation_text){\n            confirmation_text = operation.confirm || '';\n        }\n\n        // collect ids\n        var item_ids = [];\n        this.$el.find('input[name=id]:checked').each(function() {\n            item_ids.push( $(this).val() );\n        });\n\n        // execute operation\n        var options = {\n            operation           : operation_name,\n            id                  : item_ids,\n            confirmation_text   : confirmation_text\n        };\n        if ( operation.target == 'top' ) {\n            options = _.extend( options, {\n                href   : operation.href,\n                target : operation.target\n            });\n        }\n        this.execute( options );\n        return true;\n    },\n\n    check_all_items: function () {\n        var check = this.$('.grid-row-select-checkbox');\n        var state = this.$( '#check_all' ).prop( 'checked' );\n        _.each( check, function( c ) {\n            $( c ).prop( 'checked', state );\n        });\n        this.init_grid_elements();\n    },\n\n    // Go back to page one; this is useful when a filter is applied.\n    go_page_one: function () {\n        // Need to go back to page 1 if not showing all.\n        var cur_page = this.grid.get('cur_page');\n        if (cur_page !== null && cur_page !== undefined && cur_page !== 'all') {\n            this.grid.set('cur_page', 1);\n        }\n    },\n\n    //\n    // execute operations and hyperlink requests\n    //\n    execute: function (options) {\n        // get url\n        var id = null;\n        var href = null;\n        var operation = null;\n        var confirmation_text = null;\n        var target = null;\n\n        // check for options\n        if (options) {\n            // get options\n            href = options.href;\n            operation = options.operation;\n            id = options.id;\n            confirmation_text = options.confirmation_text;\n            target = options.target;\n\n            // check if input contains the operation tag\n            if (href !== undefined && href.indexOf('operation=') != -1) {\n                // Get operation, id in hyperlink's href.\n                var href_parts = href.split(\"?\");\n                if (href_parts.length > 1) {\n                    var href_parms_str = href_parts[1];\n                    var href_parms = href_parms_str.split(\"&\");\n                    for (var index = 0; index < href_parms.length; index++) {\n                        if (href_parms[index].indexOf('operation') != -1) {\n                            // Found operation parm; get operation value.\n                            operation = href_parms[index].split('=')[1];\n                            operation = operation.replace (/\\+/g, ' ');\n                        } else if (href_parms[index].indexOf('id') != -1) {\n                            // Found id parm; get id value.\n                            id = href_parms[index].split('=')[1];\n                        }\n                    }\n                }\n            }\n        }\n\n        // check for operation details\n        if (operation && id) {\n            // show confirmation box\n            if (confirmation_text && confirmation_text != '' && confirmation_text != 'None' && confirmation_text != 'null')\n                if(!confirm(confirmation_text))\n                    return false;\n\n            // use small characters for operation?!\n            operation = operation.toLowerCase();\n\n            // Update grid.\n            this.grid.set({\n                operation: operation,\n                item_ids: id\n            });\n\n            // Do operation. If operation cannot be performed asynchronously, redirect to location.\n            if ( target == 'top' ) {\n                window.top.location = href + '?' + $.param( this.grid.get_url_data() );\n            } else if ( this.grid.can_async_op(operation) || this.dict_format ) {\n                this.update_grid();\n            } else {\n                this.go_to(target, href);\n            }\n\n            // done\n            return false;\n        }\n\n        // refresh grid\n        if (href) {\n            this.go_to(target, href);\n            return false;\n        }\n\n        // refresh grid\n        if (this.grid.get('async') || this.dict_format) {\n            this.update_grid();\n        } else {\n            this.go_to(target, href);\n        }\n\n        // done\n        return false;\n    },\n\n    // go to url\n    go_to: function (target, href) {\n        // get aysnc status\n        var async = this.grid.get('async');\n        this.grid.set('async', false);\n\n        // get slide status\n        var advanced_search = this.$el.find('#advanced-search').is(':visible');\n        this.grid.set('advanced_search', advanced_search);\n\n        // get default url\n        if(!href) {\n            href = this.grid.get('url_base') + '?' + $.param(this.grid.get_url_data());\n        }\n\n        // clear grid of transient request attributes.\n        this.grid.set({\n            operation: undefined,\n            item_ids: undefined,\n            async: async\n        });\n        switch (target) {\n            case 'inbound':\n                // this currently assumes that there is only a single grid shown at a time\n                var $div = $('.grid-header').closest('.inbound');\n                if ($div.length !== 0) {\n                    $div.load(href);\n                    return;\n                }\n                break;\n            case 'top':\n                window.top.location = href;\n                break;\n            default:\n                window.location = href;\n        }\n    },\n\n    // Update grid.\n    update_grid: function () {\n        // If there's an operation, do POST; otherwise, do GET.\n        var method = (this.grid.get('operation') ? 'POST' : 'GET' );\n\n        // Show overlay to indicate loading and prevent user actions.\n        this.$el.find('.loading-elt-overlay').show();\n        var self = this;\n        $.ajax({\n            type: method,\n            url: self.grid.get('url_base'),\n            data: self.grid.get_url_data(),\n            error: function(response) { alert( 'Grid refresh failed' );},\n            success: function(response_text) {\n\n                // backup\n                var embedded = self.grid.get('embedded');\n                var insert = self.grid.get('insert');\n                var advanced_search = self.$el.find('#advanced-search').is(':visible');\n\n                // request new configuration\n                var json = self.dict_format ? response_text : $.parseJSON(response_text);\n\n                // update\n                json.embedded = embedded;\n                json.insert = insert;\n                json.advanced_search = advanced_search;\n\n                // Initialize new grid config\n                self.init_grid(json);\n\n                // Hide loading overlay.\n                self.$el.find('.loading-elt-overlay').hide();\n            },\n            complete: function() {\n                // Clear grid of transient request attributes.\n                self.grid.set({\n                    operation: undefined,\n                    item_ids: undefined\n                });\n            }\n        });\n    }\n});\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-view.js","// dependencies\ndefine(['utils/utils', 'mvc/ui/ui-portlet', 'mvc/ui/ui-misc'], function(Utils, Portlet, Ui) {\n\n// ui list element\nvar View = Backbone.View.extend({\n    // create portlet to keep track of selected list elements\n    initialize : function(options) {\n        // link this\n        var self = this;\n\n        // initialize options\n        this.options = options;\n        this.name = options.name || 'element';\n        this.multiple = options.multiple || false;\n\n        // create message handler\n        this.message = new Ui.Message();\n\n        // create portlet\n        this.portlet = new Portlet.View({ cls: 'ui-portlet-section' });\n\n        // create select field containing the options which can be inserted into the list\n        this.select = new Ui.Select.View({ optional : options.optional });\n\n        // create insert new list element button\n        this.button = new Ui.ButtonIcon({\n            icon        : 'fa fa-sign-in',\n            tooltip     : 'Insert new ' + this.name,\n            onclick     : function() {\n                self.add({\n                    id      : self.select.value(),\n                    name    : self.select.text()\n                });\n            }\n        });\n\n        // build main element\n        this.setElement(this._template(options));\n        this.$('.ui-list-message').append(this.message.$el);\n        this.$('.ui-list-portlet').append(this.portlet.$el);\n        this.$('.ui-list-button').append(this.button.$el);\n        this.$('.ui-list-select').append(this.select.$el);\n    },\n\n    /** Return/Set currently selected list elements */\n    value: function(val) {\n        // set new value\n        if (val !== undefined) {\n            this.portlet.empty();\n            if ($.isArray(val)) {\n                for (var i in val) {\n                    var v = val[i];\n                    var v_id = null;\n                    var v_name = null;\n                    if ($.type(v) != 'string') {\n                        v_id = v.id;\n                        v_name = v.name;\n                    } else {\n                        v_id = v_name = v;\n                    }\n                    if (v_id != null) {\n                        this.add({\n                            id      : v_id,\n                            name    : v_name\n                        });\n                    }\n                }\n            }\n            this._refresh();\n        }\n        // get current value\n        var lst = [];\n        this.$('.ui-list-id').each(function() {\n            lst.push({\n                id      : $(this).prop('id'),\n                name    : $(this).find('.ui-list-name').html()\n            });\n        });\n        if (lst.length == 0) {\n            return null;\n        }\n        return lst;\n    },\n\n    /** Add row */\n    add: function(options) {\n        var self = this;\n        if (this.$('[id=\"' + options.id + '\"]').length === 0) {\n            if (!Utils.isEmpty(options.id)) {\n                var $el = $(this._templateRow({\n                    id      : options.id,\n                    name    : options.name\n                }));\n                $el.on('click', function() {\n                    $el.remove();\n                    self._refresh();\n                });\n                $el.on('mouseover', function() {\n                    $el.addClass('portlet-highlight');\n                });\n                $el.on('mouseout', function() {\n                    $el.removeClass('portlet-highlight');\n                });\n                this.portlet.append($el);\n                this._refresh();\n            } else {\n                this.message.update({ message: 'Please select a valid ' + this.name + '.', status: 'danger' });\n            }\n        } else {\n            this.message.update({ message: 'This ' + this.name + ' is already in the list.' });\n        }\n    },\n\n    /** Update available options */\n    update: function(options) {\n        this.select.update(options);\n    },\n\n    /** Refresh view */\n    _refresh: function() {\n        if (this.$('.ui-list-id').length > 0) {\n            !this.multiple && this.button.disable();\n            this.$('.ui-list-portlet').show();\n        } else {\n            this.button.enable();\n            this.$('.ui-list-portlet').hide();\n        }\n        this.options.onchange && this.options.onchange();\n    },\n\n    /** Main Template */\n    _template: function(options) {\n        return  '<div class=\"ui-list\">' +\n                    '<div class=\"ui-margin-top\">' +\n                        '<span class=\"ui-list-button\"/>' +\n                        '<span class=\"ui-list-select\"/>' +\n                    '</div>' +\n                    '<div class=\"ui-list-message\"/>' +\n                    '<div class=\"ui-list-portlet\"/>' +\n                '</div>';\n    },\n\n    /** Row Template */\n    _templateRow: function(options) {\n        return  '<div id=\"' + options.id + '\" class=\"ui-list-id\">' +\n                    '<span class=\"ui-list-delete fa fa-trash\"/>' +\n                    '<span class=\"ui-list-name\">' + options.name + '</span>' +\n                '</div>';\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-list.js","/** Base class for options based ui elements **/\ndefine([ 'utils/utils', 'mvc/ui/ui-buttons' ], function( Utils, Buttons ) {\nvar Base = Backbone.View.extend({\n    initialize: function( options ) {\n        var self = this;\n        this.model = options && options.model || new Backbone.Model({\n            visible     : true,\n            data        : [],\n            id          : Utils.uid(),\n            error_text  : 'No options available.',\n            wait_text   : 'Please wait...',\n            multiple    : false,\n            optional    : false,\n            onchange    : function(){}\n        }).set( options );\n        this.listenTo( this.model, 'change:value', this._changeValue, this );\n        this.listenTo( this.model, 'change:wait', this._changeWait, this );\n        this.listenTo( this.model, 'change:data', this._changeData, this );\n        this.listenTo( this.model, 'change:visible', this._changeVisible, this );\n        this.on( 'change', function() { self.model.get( 'onchange' )( self.value() ) } );\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        this.$el.empty()\n                .removeClass()\n                .addClass( 'ui-options' )\n                .append( this.$message   = $( '<div/>' ) )\n                .append( this.$menu      = $( '<div/>' ).addClass( 'ui-options-menu' ) )\n                .append( this.$options   = $( this._template() ) );\n\n        // add select/unselect all button\n        this.all_button = null;\n        if ( this.model.get( 'multiple' ) ) {\n            this.all_button = new Buttons.ButtonCheck({\n                onclick: function() {\n                    self.$( 'input' ).prop( 'checked', self.all_button.value() !== 0 );\n                    self.value( self._getValue() );\n                    self.trigger( 'change' );\n                }\n            });\n            this.$menu.append( this.all_button.$el );\n        }\n\n        // finalize dom\n        this._changeData();\n        this._changeWait();\n        this._changeVisible();\n    },\n\n    /** Update available options */\n    update: function( options ) {\n        this.model.set( 'data', options );\n    },\n\n    _changeData: function() {\n        var self = this;\n        this.$options.empty();\n        if ( this._templateOptions ) {\n            this.$options.append( this._templateOptions( this.model.get( 'data' ) ) );\n        } else {\n            _.each( this.model.get( 'data' ), function( option ) {\n                self.$options.append( $( self._templateOption( option ) )\n                                        .addClass( 'ui-option' )\n                                        .tooltip( { title: option.tooltip, placement: 'bottom' } ) );\n            });\n        }\n        var self = this;\n        this.$( 'input' ).on( 'change', function() {\n            self.value( self._getValue() );\n            self.trigger( 'change' );\n        });\n        this._changeValue();\n        this._changeWait();\n    },\n\n    _changeVisible: function() {\n        this.$el[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n    },\n\n    _changeWait: function() {\n        if ( this.model.get( 'wait' ) ) {\n            if ( this.length() === 0 ) {\n                this._messageShow( this.model.get( 'wait_text' ), 'info' );\n                this.$options.hide();\n                this.$menu.hide();\n            }\n        } else {\n            if ( this.length() === 0 ) {\n                this._messageShow( this.model.get( 'error_text' ), 'danger' );\n                this.$options.hide();\n                this.$menu.hide();\n            } else {\n                this.$message.hide();\n                this.$options.css( 'display', 'inline-block' );\n                this.$menu.show();\n            }\n        }\n    },\n\n    _changeValue: function() {\n        this._setValue( this.model.get( 'value' ) );\n        if ( this._getValue() === null && !this.model.get( 'multiple' ) && !this.model.get( 'optional' ) ) {\n            this._setValue( this.first() );\n        }\n        this.all_button && this.all_button.value( $.isArray( this._getValue() ) ? this._getValue().length : 0, this.length() );\n    },\n\n    /** Return/Set current selection */\n    value: function ( new_value ) {\n        new_value !== undefined && this.model.set( 'value', new_value );\n        return this._getValue();\n    },\n\n    /** Return first available option */\n    first: function() {\n        var options = this.$( 'input' ).first();\n        return options.length > 0 ? options.val() : null;\n    },\n\n    /** Show a spinner indicating that the select options are currently loaded */\n    wait: function() {\n        this.model.set( 'wait', true );\n    },\n\n    /** Hide spinner indicating that the request has been completed */\n    unwait: function() {\n        this.model.set( 'wait', false );\n    },\n\n    /** Returns the number of options */\n    length: function() {\n        return this.$( '.ui-option' ).length;\n    },\n\n    /** Set value to dom */\n    _setValue: function( new_value ) {\n        var self = this;\n        if ( new_value !== undefined ) {\n            this.$( 'input' ).prop( 'checked', false );\n            if ( new_value !== null ) {\n                var values = $.isArray( new_value ) ? new_value : [ new_value ];\n                _.each( values, function( v ) {\n                    self.$( 'input[value=\"' + v + '\"]' ).first().prop( 'checked', true );\n                });\n            }\n        }\n    },\n\n    /** Return current selection */\n    _getValue: function() {\n        var selected = [];\n        this.$( ':checked' ).each( function() {\n            selected.push( $( this ).val() );\n        });\n        if ( Utils.isEmpty( selected ) ) {\n            return null;\n        }\n        return this.model.get( 'multiple' ) ? selected : selected[ 0 ];\n    },\n\n    /** Show message instead if options */\n    _messageShow: function( text, status ) {\n        this.$message.show()\n                     .removeClass()\n                     .addClass( 'ui-message alert alert-' + status )\n                     .html( text );\n    },\n\n    /** Main template function */\n    _template: function() {\n        return $( '<div/>' ).addClass( 'ui-options-list' );\n    }\n});\n\n/** Iconized **/\nvar BaseIcons = Base.extend({\n    _templateOption: function( pair ) {\n        var id = Utils.uid();\n        return  $( '<div/>' ).addClass( 'ui-option' )\n                    .append( $( '<input/>' ).attr( {\n                        id      : id,\n                        type    : this.model.get( 'type' ),\n                        name    : this.model.id,\n                        value   : pair.value } ) )\n                    .append( $( '<label/>' ).addClass( 'ui-options-label' )\n                                            .attr( 'for', id )\n                                            .html( pair.label ) );\n    }\n});\n\n/** Radio button field **/\nvar Radio = {};\nRadio.View = BaseIcons.extend({\n    initialize: function( options ) {\n        options.type = 'radio';\n        BaseIcons.prototype.initialize.call( this, options );\n    }\n});\n\n/** Checkbox options field **/\nvar Checkbox = {};\nCheckbox.View = BaseIcons.extend({\n    initialize: function( options ) {\n        options.type = 'checkbox';\n        options.multiple = true;\n        BaseIcons.prototype.initialize.call( this, options );\n    }\n});\n\n/** Radio button options field styled as classic buttons **/\nvar RadioButton = {};\nRadioButton.View = Base.extend({\n    initialize: function( options ) {\n        Base.prototype.initialize.call( this, options );\n    },\n\n    /** Set current value */\n    _setValue: function ( new_value ) {\n        if ( new_value !== undefined ) {\n            this.$( 'input' ).prop( 'checked', false );\n            this.$( 'label' ).removeClass( 'active' );\n            this.$( '[value=\"' + new_value + '\"]' ).prop( 'checked', true ).closest( 'label' ).addClass( 'active' );\n        }\n    },\n\n    /** Template for a single option */\n    _templateOption: function( pair ) {\n        var $el =  $( '<label/>' ).addClass( 'btn btn-default' );\n        pair.icon && $el.append( $( '<i/>' ).addClass( 'fa' ).addClass( pair.icon ).addClass( !pair.label && 'no-padding' ) );\n        $el.append( $( '<input/>' ).attr( { type: 'radio', name: this.model.id, value: pair.value } ) );\n        pair.label && $el.append( pair.label );\n        return $el;\n    },\n\n    /** Main template function */\n    _template: function() {\n        return $( '<div/>' ).addClass( 'btn-group ui-radiobutton' ).attr( 'data-toggle', 'buttons' );\n    }\n});\n\nreturn {\n    Base        : Base,\n    BaseIcons   : BaseIcons,\n    Radio       : Radio,\n    RadioButton : RadioButton,\n    Checkbox    : Checkbox\n};\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-options.js","/**\n *  This class creates/wraps a default html select field as backbone class.\n */\ndefine([ 'utils/utils', 'mvc/ui/ui-buttons' ], function( Utils, Buttons ) {\nvar View = Backbone.View.extend({\n    initialize: function( options ) {\n        var self = this;\n        this.data  = [];\n        this.data2 = [];\n        this.model = options && options.model || new Backbone.Model({\n            id          : Utils.uid(),\n            cls         : 'ui-select',\n            error_text  : 'No options available',\n            empty_text  : 'Nothing selected',\n            visible     : true,\n            wait        : false,\n            multiple    : false,\n            searchable  : true,\n            optional    : false,\n            disabled    : false,\n            onchange    : function(){},\n            value       : null,\n            individual  : false,\n            pagesize    : 20\n        }).set( options );\n        this.on( 'change', function() { self.model.get( 'onchange' ) && self.model.get( 'onchange' )( self.value() ) } );\n        this.listenTo( this.model, 'change:data', this._changeData, this );\n        this.listenTo( this.model, 'change:disabled', this._changeDisabled, this );\n        this.listenTo( this.model, 'change:wait', this._changeWait, this );\n        this.listenTo( this.model, 'change:visible', this._changeVisible, this );\n        this.listenTo( this.model, 'change:value', this._changeValue, this );\n        this.listenTo( this.model, 'change:multiple change:searchable change:cls change:id', this.render, this );\n        this.render();\n    },\n\n    render: function() {\n        var self = this;\n        this.model.get( 'searchable' ) ? this._renderSearchable() : this._renderClassic();\n        this.$el.addClass( this.model.get( 'cls' ) )\n                .attr( 'id', this.model.get( 'id' ) );\n        this.$select.empty().addClass( 'select' )\n                    .attr( 'id', this.model.get( 'id' ) + '_select' )\n                    .prop( 'multiple', this.model.get( 'multiple' ) )\n                    .on( 'change', function() {\n                        self.value( self._getValue() );\n                        self.trigger( 'change' );\n                    });\n        this._changeData();\n        this._changeWait();\n        this._changeVisible();\n        this._changeDisabled();\n    },\n\n    /** Renders the classic selection field */\n    _renderClassic: function() {\n        var self = this;\n        this.$el.addClass( this.model.get( 'multiple' ) ? 'ui-select-multiple' : 'ui-select' )\n                .append( this.$select      = $( '<select/>' ) )\n                .append( this.$dropdown    = $( '<div/>' ) )\n                .append( this.$resize      = $( '<div/>' )\n                .append( this.$resize_icon = $( '<i/>' ) ) );\n        if ( this.model.get( 'multiple' ) ) {\n            this.$dropdown.hide();\n            this.$resize_icon.addClass( 'fa fa-angle-double-right fa-rotate-45' ).show();\n            this.$resize.removeClass()\n                        .addClass( 'icon-resize' )\n                        .show()\n                        .off( 'mousedown' ).on( 'mousedown', function( event ) {\n                            var currentY = event.pageY;\n                            var currentHeight = self.$select.height();\n                            self.minHeight = self.minHeight || currentHeight;\n                            $( '#dd-helper' ).show().on( 'mousemove', function( event ) {\n                                self.$select.height( Math.max( currentHeight + ( event.pageY - currentY ), self.minHeight ) );\n                            }).on( 'mouseup mouseleave', function() {\n                                $( '#dd-helper' ).hide().off();\n                            });\n                        });\n        } else {\n            this.$dropdown.show();\n            this.$resize.hide();\n            this.$resize_icon.hide();\n        }\n    },\n\n    /** Renders the default select2 field */\n    _renderSearchable: function() {\n        var self = this;\n        this.$el.append( this.$select   = $( '<div/>' ) )\n                .append( this.$dropdown = $( '<div/>' ) );\n        this.$dropdown.hide();\n        if ( !this.model.get( 'multiple' ) ) {\n            this.$dropdown.show().on( 'click', function() {\n                self.$select.select2 && self.$select.select2( 'open' );\n            });\n        }\n        this.all_button = null;\n        if ( this.model.get( 'multiple' ) && !this.model.get( 'individual' ) ) {\n            this.all_button = new Buttons.ButtonCheck({\n                onclick: function() {\n                    var new_value = [];\n                    self.all_button.value() !== 0 && _.each( self.model.get( 'data' ), function( option ) {\n                        new_value.push( option.value );\n                    });\n                    self.value( new_value );\n                    self.trigger( 'change' );\n                }\n            });\n            this.$el.prepend( this.all_button.$el );\n        }\n    },\n\n    /** Matches a search term with a given text */\n    _match: function( term, text ) {\n        return !term || term == '' || String( text ).toUpperCase().indexOf( term.toUpperCase() ) >= 0\n    },\n\n    /** Updates the selection options */\n    _changeData: function() {\n        var self = this;\n        this.data = [];\n        if ( !this.model.get( 'multiple' ) && this.model.get( 'optional' ) ) {\n            this.data.push( { value: '__null__', label: self.model.get( 'empty_text' ) } );\n        }\n        _.each( this.model.get( 'data' ), function( option ) {\n            self.data.push( option );\n        });\n        if ( this.length() == 0 ) {\n            this.data.push( { value: '__null__', label: this.model.get( 'error_text' ) } );\n        }\n        if ( this.model.get( 'searchable' ) ) {\n            this.data2 = [];\n            _.each( this.data, function( option, index ) {\n                self.data2.push( { order: index, id: option.value, text: option.label, tags: option.tags } );\n            });\n            this.$select.data( 'select2' ) && this.$select.select2( 'destroy' );\n            this.matched_tags = {};\n            this.$select.select2({\n                data            : self.data2,\n                closeOnSelect   : !this.model.get( 'multiple' ),\n                multiple        : this.model.get( 'multiple' ),\n                query           : function( q ) {\n                    self.matched_tags = {};\n                    var pagesize = self.model.get( 'pagesize' );\n                    var results = _.filter( self.data2, function ( e ) {\n                        var found = false;\n                        _.each( e.tags, function( tag ) {\n                            if ( self._match( q.term, tag ) ) {\n                                found = self.matched_tags[ tag ] = true;\n                            }\n                        });\n                        return found || self._match( q.term, e.text );\n                    });\n                    q.callback({\n                        results: results.slice( ( q.page - 1 ) * pagesize, q.page * pagesize ),\n                        more   : results.length >= q.page * pagesize\n                    });\n                },\n                formatResult    : function( result ) {\n                    return _.escape( result.text ) +\n                        '<div class=\"ui-tags\">' +\n                            _.reduce( result.tags, function( memo, tag ) {\n                                if ( self.matched_tags[ tag ] ) {\n                                    return memo + '&nbsp;' +\n                                        '<div class=\"label label-info\">' +\n                                            _.escape( tag ) +\n                                        '</div>'\n                                }\n                                return memo;\n                            }, '' ) +\n                        '</div>';\n                }\n            });\n            this.$( '.select2-container .select2-search input' ).off( 'blur' );\n        } else {\n            this.$select.find( 'option' ).remove();\n            _.each( this.data, function( option ) {\n                self.$select.append( $( '<option/>' ).attr( 'value', option.value ).html( _.escape( option.label ) ) );\n            });\n        }\n        this.model.set( 'disabled', this.length() == 0 );\n        this._changeValue();\n    },\n\n    /** Handles field enabling/disabling, usually used when no options are available */\n    _changeDisabled: function() {\n        if ( this.model.get( 'searchable' ) ) {\n            this.$select.select2( this.model.get( 'disabled' ) ? 'disable' : 'enable' );\n        } else {\n            this.$select.prop( 'disabled', this.model.get( 'disabled' ) );\n        }\n    },\n\n    /** Searchable fields may display a spinner e.g. while waiting for a server response */\n    _changeWait: function() {\n        this.$dropdown.removeClass()\n                      .addClass( 'icon-dropdown fa' )\n                      .addClass( this.model.get( 'wait' ) ? 'fa-spinner fa-spin' : 'fa-caret-down' );\n    },\n\n    /** Handles field visibility */\n    _changeVisible: function() {\n        this.$el[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n        this.$select[ this.model.get( 'visible' ) ? 'show' : 'hide' ]();\n    },\n\n    /** Synchronizes the model value with the actually selected field value */\n    _changeValue: function() {\n        this._setValue( this.model.get( 'value' ) );\n        if ( this.model.get( 'multiple' ) ) {\n            if ( this.all_button ) {\n                var value = this._getValue();\n                this.all_button.value( $.isArray( value ) ? value.length : 0, this.length() );\n            }\n        } else if ( this._getValue() === null && !this.model.get( 'optional' ) ) {\n            this._setValue( this.first() );\n        }\n    },\n\n    /** Return/Set current selection */\n    value: function ( new_value ) {\n        new_value !== undefined && this.model.set( 'value', new_value );\n        return this._getValue();\n    },\n\n    /** Return the first select option */\n    first: function() {\n        return this.data.length > 0 ? this.data[ 0 ].value : null;\n    },\n\n    /** Check if a value is an existing option */\n    exists: function( value ) {\n        return _.findWhere( this.data, { value: value } );\n    },\n\n    /** Return the label/text of the current selection */\n    text: function () {\n        var v = this._getValue();\n        var d = this.exists( $.isArray( v ) ? v[ 0 ] : v );\n        return d ? d.label : '';\n    },\n\n    /** Show the select field */\n    show: function() {\n        this.model.set( 'visible', true );\n    },\n\n    /** Hide the select field */\n    hide: function() {\n        this.model.set( 'visible', false );\n    },\n\n    /** Show a spinner indicating that the select options are currently loaded */\n    wait: function() {\n        this.model.set( 'wait', true );\n    },\n\n    /** Hide spinner indicating that the request has been completed */\n    unwait: function() {\n        this.model.set( 'wait', false );\n    },\n\n    /** Returns true if the field is disabled */\n    disabled: function() {\n        return this.model.get( 'disabled' );\n    },\n\n    /** Enable the select field */\n    enable: function() {\n        this.model.set( 'disabled', false );\n    },\n\n    /** Disable the select field */\n    disable: function() {\n        this.model.set( 'disabled', true );\n    },\n\n    /** Update all available options at once */\n    add: function( options, sorter ) {\n        _.each( this.model.get( 'data' ), function( v ) {\n            v.keep && !_.findWhere( options, { value: v.value } ) && options.push( v );\n        });\n        sorter && options && options.sort( sorter );\n        this.model.set( 'data', options );\n    },\n\n    /** Update available options */\n    update: function( options ) {\n        this.model.set( 'data', options );\n    },\n\n    /** Set the custom onchange callback function */\n    setOnChange: function( callback ) {\n        this.model.set( 'onchange', callback );\n    },\n\n    /** Number of available options */\n    length: function() {\n        return $.isArray( this.model.get( 'data' ) ) ? this.model.get( 'data' ).length : 0;\n    },\n\n    /** Set value to dom */\n    _setValue: function( new_value ) {\n        var self = this;\n        if( new_value === null || new_value === undefined ) {\n            new_value = '__null__';\n        }\n        if ( this.model.get( 'multiple' ) ) {\n            new_value = $.isArray( new_value ) ? new_value : [ new_value ];\n        } else if ( $.isArray( new_value ) ) {\n            if ( new_value.length > 0 ) {\n                new_value = new_value[ 0 ];\n            } else {\n                new_value = '__null__';\n            }\n        }\n        if ( this.model.get( 'searchable' ) ) {\n            if ( $.isArray( new_value ) ) {\n                var val = [];\n                _.each( new_value, function( v ) {\n                    var d = _.findWhere( self.data2, { id: v } );\n                    d && val.push( d );\n                });\n                new_value = val;\n            } else {\n                var d = _.findWhere( this.data2, { id: new_value } );\n                new_value = d;\n            }\n            this.$select.select2( 'data', new_value );\n        } else {\n            this.$select.val( new_value );\n        }\n    },\n\n    /** Get value from dom */\n    _getValue: function() {\n        var val = null;\n        if ( this.model.get( 'searchable' ) ) {\n            var selected = this.$select.select2( 'data' );\n            if ( selected ) {\n                if ( $.isArray( selected ) ) {\n                    val = [];\n                    selected.sort( function( a, b ) { return a.order - b.order } );\n                    _.each( selected, function( v ) { val.push( v.id ) } );\n                } else {\n                    val = selected.id;\n                }\n            }\n        } else {\n            val = this.$select.val();\n        }\n        return Utils.isEmpty( val ) ? null : val;\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-default.js","define([\n    //jquery\n    //backbone\n], function(){\n// =============================================================================\n/**\n * view for a popup menu\n */\nvar PopupMenu = Backbone.View.extend({\n//TODO: maybe better as singleton off the Galaxy obj\n    /** Cache the desired button element and options, set up the button click handler\n     *  NOTE: attaches this view as HTML/jQ data on the button for later use.\n     */\n    initialize: function( $button, options ){\n        // default settings\n        this.$button = $button;\n        if( !this.$button.length ){\n            this.$button = $( '<div/>' );\n        }\n        this.options = options || [];\n        this.$button.data( 'popupmenu', this );\n\n        // set up button click -> open menu behavior\n        var menu = this;\n        this.$button.click( function( event ){\n            // if there's already a menu open, remove it\n            $( '.popmenu-wrapper' ).remove();\n            menu._renderAndShow( event );\n            return false;\n        });\n    },\n\n    // render the menu, append to the page body at the click position, and set up the 'click-away' handlers, show\n    _renderAndShow: function( clickEvent ){\n        this.render();\n        this.$el.appendTo( 'body' ).css( this._getShownPosition( clickEvent )).show();\n        this._setUpCloseBehavior();\n    },\n\n    // render the menu\n    // this menu doesn't attach itself to the DOM ( see _renderAndShow )\n    render: function(){\n        // render the menu body absolute and hidden, fill with template\n        this.$el.addClass( 'popmenu-wrapper' ).hide()\n            .css({ position : 'absolute' })\n            .html( this.template( this.$button.attr( 'id' ), this.options ));\n\n        // set up behavior on each link/anchor elem\n        if( this.options.length ){\n            var menu = this;\n            //precondition: there should be one option per li\n            this.$el.find( 'li' ).each( function( i, li ){\n                var option = menu.options[i];\n\n                // if the option has 'func', call that function when the anchor is clicked\n                if( option.func ){\n                    $( this ).children( 'a.popupmenu-option' ).click( function( event ){\n                        option.func.call( menu, event, option );\n                        // We must preventDefault otherwise clicking \"cancel\"\n                        // on a purge or something still navigates and causes\n                        // the action.\n                        event.preventDefault();\n                        // bubble up so that an option click will call the close behavior\n                    });\n                }\n            });\n        }\n        return this;\n    },\n\n    template : function( id, options ){\n        return [\n            '<ul id=\"', id, '-menu\" class=\"dropdown-menu\">', this._templateOptions( options ), '</ul>'\n        ].join( '' );\n    },\n\n    _templateOptions : function( options ){\n        if( !options.length ){\n            return '<li>(no options)</li>';\n        }\n        return _.map( options, function( option ){\n            if( option.divider ){\n                return '<li class=\"divider\"></li>';\n            } else if( option.header ){\n                return [ '<li class=\"head\"><a href=\"javascript:void(0);\">', option.html, '</a></li>' ].join( '' );\n            }\n            var href   = option.href || 'javascript:void(0);',\n                target = ( option.target  )?( ' target=\"' + option.target + '\"' ):( '' ),\n                check  = ( option.checked )?( '<span class=\"fa fa-check\"></span>' ):( '' );\n            return [\n                '<li><a class=\"popupmenu-option\" href=\"', href, '\"', target, '>',\n                    check, option.html,\n                '</a></li>'\n            ].join( '' );\n        }).join( '' );\n    },\n\n    // get the absolute position/offset for the menu\n    _getShownPosition : function( clickEvent ){\n\n        // display menu horiz. centered on click...\n        var menuWidth = this.$el.width();\n        var x = clickEvent.pageX - menuWidth / 2 ;\n\n        // adjust to handle horiz. scroll and window dimensions ( draw entirely on visible screen area )\n        x = Math.min( x, $( document ).scrollLeft() + $( window ).width() - menuWidth - 5 );\n        x = Math.max( x, $( document ).scrollLeft() + 5 );\n        return {\n            top: clickEvent.pageY,\n            left: x\n        };\n    },\n\n    // bind an event handler to all available frames so that when anything is clicked\n    // the menu is removed from the DOM and the event handler unbinds itself\n    _setUpCloseBehavior: function(){\n        var menu = this;\n//TODO: alternately: focus hack, blocking overlay, jquery.blockui\n\n        // function to close popup and unbind itself\n        function closePopup( event ){\n            $( document ).off( 'click.close_popup' );\n            if( window && window.parent !== window ){\n                try {\n                    $( window.parent.document ).off( \"click.close_popup\" );\n                } catch( err ){}\n            } else {\n                try {\n                    $( 'iframe#galaxy_main' ).contents().off( \"click.close_popup\" );\n                } catch( err ){}\n            }\n            menu.remove();\n        }\n\n        $( 'html' ).one( \"click.close_popup\", closePopup );\n        if( window && window.parent !== window ){\n            try {\n                $( window.parent.document ).find( 'html' ).one( \"click.close_popup\", closePopup );\n            } catch( err ){}\n        } else {\n            try {\n                $( 'iframe#galaxy_main' ).contents().one( \"click.close_popup\", closePopup );\n            } catch( err ){}\n        }\n    },\n\n    // add a menu option/item at the given index\n    addItem: function( item, index ){\n        // append to end if no index\n        index = ( index >= 0 ) ? index : this.options.length;\n        this.options.splice( index, 0, item );\n        return this;\n    },\n\n    // remove a menu option/item at the given index\n    removeItem: function( index ){\n        if( index >=0 ){\n            this.options.splice( index, 1 );\n        }\n        return this;\n    },\n\n    // search for a menu option by its html\n    findIndexByHtml: function( html ){\n        for( var i = 0; i < this.options.length; i++ ){\n            if( _.has( this.options[i], 'html' ) && ( this.options[i].html === html )){\n                return i;\n            }\n        }\n        return null;\n    },\n\n    // search for a menu option by its html\n    findItemByHtml: function( html ){\n        return this.options[( this.findIndexByHtml( html ))];\n    },\n\n    // string representation\n    toString: function(){\n        return 'PopupMenu';\n    }\n});\n/** shortcut to new for when you don't need to preserve the ref */\nPopupMenu.create = function _create( $button, options ){\n    return new PopupMenu( $button, options );\n};\n\n// -----------------------------------------------------------------------------\n// the following class functions are bridges from the original make_popupmenu and make_popup_menus\n// to the newer backbone.js PopupMenu\n\n/** Create a PopupMenu from simple map initial_options activated by clicking button_element.\n *      Converts initial_options to object array used by PopupMenu.\n *  @param {jQuery|DOMElement} button_element element which, when clicked, activates menu\n *  @param {Object} initial_options map of key -> values, where\n *      key is option text, value is fn to call when option is clicked\n *  @returns {PopupMenu} the PopupMenu created\n */\nPopupMenu.make_popupmenu = function( button_element, initial_options ){\n    var convertedOptions = [];\n    _.each( initial_options, function( optionVal, optionKey ){\n        var newOption = { html: optionKey };\n\n        // keys with null values indicate: header\n        if( optionVal === null ){ // !optionVal? (null only?)\n            newOption.header = true;\n\n        // keys with function values indicate: a menu option\n        } else if( jQuery.type( optionVal ) === 'function' ){\n            newOption.func = optionVal;\n        }\n        //TODO:?? any other special optionVals?\n        // there was no divider option originally\n        convertedOptions.push( newOption );\n    });\n    return new PopupMenu( $( button_element ), convertedOptions );\n};\n\n/** Find all anchors in $parent (using selector) and covert anchors into a PopupMenu options map.\n *  @param {jQuery} $parent the element that contains the links to convert to options\n *  @param {String} selector jq selector string to find links\n *  @returns {Object[]} the options array to initialize a PopupMenu\n */\n//TODO: lose parent and selector, pass in array of links, use map to return options\nPopupMenu.convertLinksToOptions = function( $parent, selector ){\n    $parent = $( $parent );\n    selector = selector || 'a';\n    var options = [];\n    $parent.find( selector ).each( function( elem, i ){\n        var option = {}, $link = $( elem );\n\n        // convert link text to the option text (html) and the href into the option func\n        option.html = $link.text();\n        if( $link.attr( 'href' ) ){\n            var linkHref    = $link.attr( 'href' ),\n                linkTarget  = $link.attr( 'target' ),\n                confirmText = $link.attr( 'confirm' );\n\n            option.func = function(){\n                // if there's a \"confirm\" attribute, throw up a confirmation dialog, and\n                //  if the user cancels - do nothing\n                if( ( confirmText ) && ( !confirm( confirmText ) ) ){ return; }\n\n                // if there's no confirm attribute, or the user accepted the confirm dialog:\n                switch( linkTarget ){\n                    // relocate the center panel\n                    case '_parent':\n                        window.parent.location = linkHref;\n                        break;\n\n                    // relocate the entire window\n                    case '_top':\n                        window.top.location = linkHref;\n                        break;\n\n                    // relocate this panel\n                    default:\n                        window.location = linkHref;\n                }\n            };\n        }\n        options.push( option );\n    });\n    return options;\n};\n\n/** Create a single popupmenu from existing DOM button and anchor elements\n *  @param {jQuery} $buttonElement the element that when clicked will open the menu\n *  @param {jQuery} $menuElement the element that contains the anchors to convert into a menu\n *  @param {String} menuElementLinkSelector jq selector string used to find anchors to be made into menu options\n *  @returns {PopupMenu} the PopupMenu (Backbone View) that can render, control the menu\n */\nPopupMenu.fromExistingDom = function( $buttonElement, $menuElement, menuElementLinkSelector ){\n    $buttonElement = $( $buttonElement );\n    $menuElement = $( $menuElement );\n    var options = PopupMenu.convertLinksToOptions( $menuElement, menuElementLinkSelector );\n    // we're done with the menu (having converted it to an options map)\n    $menuElement.remove();\n    return new PopupMenu( $buttonElement, options );\n};\n\n/** Create all popupmenus within a document or a more specific element\n *  @param {DOMElement} parent the DOM element in which to search for popupmenus to build (defaults to document)\n *  @param {String} menuSelector jq selector string to find popupmenu menu elements (defaults to \"div[popupmenu]\")\n *  @param {Function} buttonSelectorBuildFn the function to build the jq button selector.\n *      Will be passed $menuElement, parent.\n *      (Defaults to return '#' + $menuElement.attr( 'popupmenu' ); )\n *  @returns {PopupMenu[]} array of popupmenus created\n */\nPopupMenu.make_popup_menus = function( parent, menuSelector, buttonSelectorBuildFn ){\n    parent = parent || document;\n    // orig. Glx popupmenu menus have a (non-std) attribute 'popupmenu'\n    //  which contains the id of the button that activates the menu\n    menuSelector = menuSelector || 'div[popupmenu]';\n    // default to (orig. Glx) matching button to menu by using the popupmenu attr of the menu as the id of the button\n    buttonSelectorBuildFn = buttonSelectorBuildFn || function( $menuElement, parent ){\n        return '#' + $menuElement.attr( 'popupmenu' );\n    };\n\n    // aggregate and return all PopupMenus\n    var popupMenusCreated = [];\n    $( parent ).find( menuSelector ).each( function(){\n        var $menuElement    = $( this ),\n            $buttonElement  = $( parent ).find( buttonSelectorBuildFn( $menuElement, parent ) );\n        popupMenusCreated.push( PopupMenu.fromDom( $buttonElement, $menuElement ) );\n        $buttonElement.addClass( 'popup' );\n    });\n    return popupMenusCreated;\n};\n\n\n// =============================================================================\n    return PopupMenu;\n});\n\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/popup-menu.js","/* This class maps the form dom to an api compatible javascript dictionary. */\ndefine([ 'utils/utils' ], function( Utils ) {\n    var Manager = Backbone.Model.extend({\n        initialize: function( app ) {\n            this.app = app;\n        },\n\n        /** Creates a checksum. */\n        checksum: function() {\n            var sum = '';\n            var self = this;\n            this.app.section.$el.find( '.section-row' ).each( function() {\n                var id = $(this).attr( 'id' );\n                var field = self.app.field_list[ id ];\n                if ( field ) {\n                    sum += id + ':' + JSON.stringify( field.value && field.value() ) + ':' + field.collapsed + ';';\n                }\n            });\n            return sum;\n        },\n\n        /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission. */\n        create: function() {\n            var self = this;\n\n            // get raw dictionary from dom\n            var dict = {};\n            this._iterate( this.app.section.$el, dict );\n\n            // add to result dictionary, label elements\n            var result_dict = {};\n            this.flat_dict = {};\n            function add( flat_id, input_id, input_value ) {\n                self.flat_dict[ flat_id ] = input_id;\n                result_dict[ flat_id ] = input_value;\n                self.app.element_list[ input_id ] && self.app.element_list[ input_id ].$el.attr( 'tour_id', flat_id );\n            }\n            // converter between raw dictionary and job dictionary\n            function convert( identifier, head ) {\n                for ( var index in head ) {\n                    var node = head[ index ];\n                    if ( node.input ) {\n                        var input = node.input;\n                        var flat_id = identifier;\n                        if ( identifier != '' ) {\n                            flat_id += '|';\n                        }\n                        flat_id += input.name;\n                        switch ( input.type ) {\n                            case 'repeat':\n                                var section_label = 'section-';\n                                var block_indices = [];\n                                var block_prefix = null;\n                                for ( var block_label in node ) {\n                                    var pos = block_label.indexOf( section_label );\n                                    if ( pos != -1 ) {\n                                        pos += section_label.length;\n                                        block_indices.push( parseInt( block_label.substr( pos ) ));\n                                        if ( !block_prefix ) {\n                                            block_prefix = block_label.substr( 0, pos );\n                                        }\n                                    }\n                                }\n                                block_indices.sort( function( a, b ) { return a - b; });\n                                var index = 0;\n                                for ( var i in block_indices ) {\n                                    convert( flat_id + '_' + index++, node[ block_prefix + block_indices[ i ] ]);\n                                }\n                                break;\n                            case 'conditional':\n                                var value = self.app.field_list[ input.id ].value();\n                                add( flat_id + '|' + input.test_param.name, input.id, value );\n                                var selectedCase = matchCase( input, value );\n                                if ( selectedCase != -1 ) {\n                                    convert( flat_id, head[ input.id + '-section-' + selectedCase ] );\n                                }\n                                break;\n                            case 'section':\n                                convert( !input.flat && flat_id || '', node );\n                                break;\n                            default:\n                                var field = self.app.field_list[ input.id ];\n                                if ( field && field.value ) {\n                                    var value = field.value();\n                                    if ( input.ignore === undefined || input.ignore != value ) {\n                                        if ( field.collapsed && input.collapsible_value ) {\n                                            value = input.collapsible_value;\n                                        }\n                                        add( flat_id, input.id, value );\n                                        if ( input.payload ) {\n                                            for ( var p_id in input.payload ) {\n                                                add( p_id, input.id, input.payload[ p_id ] );\n                                            }\n                                        }\n                                    }\n                                }\n                        }\n                    }\n                }\n            }\n            convert( '', dict );\n            return result_dict;\n        },\n\n        /** Matches flat ids to corresponding input element\n         * @param{string} flat_id - Flat input id to be looked up.\n         */\n        match: function ( flat_id ) {\n            return this.flat_dict && this.flat_dict[ flat_id ];\n        },\n\n        /** Match conditional values to selected cases\n        */\n        matchCase: function( input, value ) {\n            return matchCase( input, value );\n        },\n\n        /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n        */\n        matchModel: function( model, callback ) {\n            var self = this;\n            visitInputs( model.inputs, function( input, name ) {\n                self.flat_dict[ name ] && callback ( input, self.flat_dict[ name ] );\n            });\n        },\n\n        /** Matches identifier from api response to input elements e.g. used to display validation errors\n        */\n        matchResponse: function( response ) {\n            var result = {};\n            var self = this;\n            function search ( id, head ) {\n                if ( typeof head === 'string' ) {\n                    var input_id = self.flat_dict[ id ];\n                    input_id && ( result[ input_id ] = head );\n                } else {\n                    for ( var i in head ) {\n                        var new_id = i;\n                        if ( id !== '' ) {\n                            var separator = '|';\n                            if ( head instanceof Array ) {\n                                separator = '_';\n                            }\n                            new_id = id + separator + new_id;\n                        }\n                        search ( new_id, head[ i ] );\n                    }\n                }\n            }\n            search( '', response );\n            return result;\n        },\n\n        /** Map dom tree to dictionary tree with input elements.\n        */\n        _iterate: function( parent, dict ) {\n            var self = this;\n            var children = $( parent ).children();\n            children.each( function() {\n                var child = this;\n                var id = $( child ).attr( 'id' );\n                if ( $( child ).hasClass( 'section-row' ) ) {\n                    var input = self.app.input_list[ id ];\n                    dict[ id ] = ( input && { input : input } ) || {};\n                    self._iterate( child, dict[ id ] );\n                } else {\n                    self._iterate( child, dict );\n                }\n            });\n        }\n    });\n\n    /** Match conditional values to selected cases\n     * @param{dict}   input     - Definition of conditional input parameter\n     * @param{dict}   value     - Current value\n     */\n    var matchCase = function( input, value ) {\n        if ( input.test_param.type == 'boolean' ) {\n            if ( value == 'true' ) {\n                value = input.test_param.truevalue || 'true';\n            } else {\n                value = input.test_param.falsevalue || 'false';\n            }\n        }\n        for ( var i in input.cases ) {\n            if ( input.cases[ i ].value == value ) {\n                return i;\n            }\n        }\n        return -1;\n    };\n\n    /** Visits tool inputs\n     * @param{dict}   inputs    - Nested dictionary of input elements\n     * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n     */\n    var visitInputs = function( inputs, callback, prefix, context ) {\n        context = $.extend( true, {}, context );\n        _.each( inputs, function ( input ) {\n            if ( input && input.type && input.name ) {\n                context[ input.name ] = input;\n            }\n        });\n        for ( var key in inputs ) {\n            var node = inputs[ key ];\n            node.name = node.name || key;\n            var name = prefix ? prefix + '|' + node.name : node.name;\n            switch ( node.type ) {\n                case 'repeat':\n                    _.each( node.cache, function( cache, j ) {\n                        visitInputs( cache, callback, name + '_' + j, context );\n                    });\n                    break;\n                case 'conditional':\n                    if ( node.test_param ) {\n                        callback( node.test_param, name + '|' + node.test_param.name, context );\n                        var selectedCase = matchCase( node, node.test_param.value );\n                        if ( selectedCase != -1 ) {\n                            visitInputs( node.cases[ selectedCase ].inputs, callback, name, context );\n                        } else {\n                            Galaxy.emit.debug( 'form-data::visitInputs() - Invalid case for ' + name + '.' );\n                        }\n                    } else {\n                        Galaxy.emit.debug( 'form-data::visitInputs() - Conditional test parameter missing for ' + name  + '.' );\n                    }\n                    break;\n                case 'section':\n                    visitInputs( node.inputs, callback, name, context )\n                    break;\n                default:\n                    callback( node, name, context );\n            }\n        }\n    };\n\n    return {\n        Manager         : Manager,\n        visitInputs     : visitInputs\n    }\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-data.js","/** This class creates a ui table element. */\ndefine( [ 'utils/utils' ], function( Utils ) {\n    var View = Backbone.View.extend({\n        initialize : function(options) {\n            this.options = Utils.merge(options, {\n                content     : 'No content available.',\n                onchange    : null,\n                ondblclick  : null,\n                onconfirm   : null,\n                cls         : 'ui-table',\n                selectable  : true,\n                cls_tr      : ''\n            });\n            this.setElement( this._template() );\n            this.$thead     = this.$('thead');\n            this.$tbody     = this.$('tbody');\n            this.$tmessage  = this.$('tmessage');\n            this.row = this._row();\n            this.row_count = 0;\n        },\n\n        events : {\n            'click'     : '_onclick',\n            'dblclick'  : '_ondblclick'\n        },\n\n        /** Add cell to header row */\n        addHeader: function( $el ) {\n            this.row.append( $( '<th/>' ).append( $el ) );\n        },\n\n        /** Append header row to table */\n        appendHeader: function() {\n            this.$thead.append( this.row );\n            this.row = $( '<tr/>' );\n        },\n\n        /** Add cell to row */\n        add: function($el, width, align) {\n            var wrapper = $( '<td/>' );\n            if ( width ) {\n                wrapper.css( 'width', width );\n            }\n            if ( align ) {\n                wrapper.css( 'text-align', align );\n            }\n            this.row.append( wrapper.append( $el ) );\n        },\n        \n        /** Append row to table */\n        append: function( id, fade ) {\n            this._commit( id, fade, false );\n        },\n        \n        /** Prepend row to table */\n        prepend: function( id, fade ) {\n            this._commit( id, fade, true );\n        },\n        \n        /** Helper to get row element */\n        get: function( id ) {\n            return this.$( '#' + id );\n        },\n\n        /** Delete row by id */\n        del: function( id ) {\n            var item = this.$tbody.find( '#' + id );\n            if ( item.length > 0 ) {\n                item.remove();\n                this.row_count--;\n                this._refresh();\n            }\n        },\n\n        /** Delete all rows */\n        delAll: function() {\n            this.$tbody.empty();\n            this.row_count = 0;\n            this._refresh();\n        },\n\n        /** Set a value i.e. selects/highlights a particular row by id */\n        value: function( new_value ) {\n            if ( this.options.selectable ) {\n                this.before = this.$tbody.find( '.current' ).attr( 'id' );\n                if ( new_value !== undefined ) {\n                    this.$tbody.find( 'tr' ).removeClass( 'current' );\n                    if ( new_value ) {\n                        this.$tbody.find( '#' + new_value ).addClass( 'current' );\n                    }\n                }\n                var after = this.$tbody.find( '.current' ).attr( 'id' );\n                if ( after === undefined ) {\n                    return null;\n                } else {\n                    if ( after != this.before && this.options.onchange ) {\n                        this.options.onchange( new_value );\n                    }\n                    return after;\n                }\n            }\n        },\n\n        /** Return the number of rows */\n        size: function() {\n            return this.$tbody.find( 'tr' ).length;\n        },\n\n        /** Helper to append rows */\n        _commit: function( id, fade, prepend ) {\n            this.del( id );\n            this.row.attr( 'id', id );\n            if ( prepend ) {\n                this.$tbody.prepend( this.row );\n            } else {\n                this.$tbody.append( this.row );\n            }\n            if ( fade ) {\n                this.row.hide();\n                this.row.fadeIn();\n            }\n            this.row = this._row();\n            this.row_count++;\n            this._refresh();\n        },\n\n        /** Helper to create new row */\n        _row: function() {\n            return $( '<tr class=\"' + this.options.cls_tr + '\"></tr>' );\n        },\n\n        /** Handles onclick events */\n        _onclick: function(e) {\n            var old_value = this.value();\n            var new_value = $( e.target ).closest( 'tr' ).attr( 'id' );\n            if ( new_value != '' ){\n                if ( new_value && old_value != new_value ) {\n                    if ( this.options.onconfirm ) {\n                        this.options.onconfirm( new_value );\n                    } else {\n                        this.value( new_value );\n                    }\n                }\n            }\n        },\n\n        /** Handles ondblclick events */\n        _ondblclick: function( e ) {\n            var value = this.value();\n            if ( value && this.options.ondblclick ) {\n                this.options.ondblclick( value );\n            }\n        },\n\n        /** Refresh helper */\n        _refresh: function() {\n            if ( this.row_count == 0 ) {\n                this.$tmessage.show();\n            } else {\n                this.$tmessage.hide();\n            }\n        },\n\n        /** Template */\n        _template: function() {\n            return  '<div>' +\n                        '<table class=\"' + this.options.cls + '\">' +\n                            '<thead/>' +\n                            '<tbody/>' +\n                        '</table>' +\n                        '<tmessage>' + this.options.content + '</tmessage>' +\n                    '<div>';\n        }\n    });\n\n    return {\n        View: View\n    }\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-table.js","/**\n    This class creates a form input element wrapper\n*/\ndefine([], function() {\n    return Backbone.View.extend({\n        initialize: function( app, options ) {\n            this.app = app;\n            this.app_options = app.model ? app.model.attributes : {};\n            this.field = options && options.field || new Backbone.View();\n            this.model = options && options.model || new Backbone.Model({\n                text_enable     : this.app_options.text_enable   || 'Enable',\n                text_disable    : this.app_options.text_disable  || 'Disable',\n                cls_enable      : this.app_options.cls_enable    || 'fa fa-caret-square-o-down',\n                cls_disable     : this.app_options.cls_disable   || 'fa fa-caret-square-o-up',\n                always_refresh  : this.app_options.always_refresh\n            }).set( options );\n\n            // set element and link components\n            this.setElement( this._template() );\n            this.$field             = this.$( '.ui-form-field' );\n            this.$info              = this.$( '.ui-form-info' );\n            this.$preview           = this.$( '.ui-form-preview' );\n            this.$collapsible       = this.$( '.ui-form-collapsible' );\n            this.$collapsible_text  = this.$( '.ui-form-collapsible-text' );\n            this.$collapsible_icon  = this.$( '.ui-form-collapsible-icon' );\n            this.$title             = this.$( '.ui-form-title' );\n            this.$title_text        = this.$( '.ui-form-title-text' );\n            this.$error_text        = this.$( '.ui-form-error-text' );\n            this.$error             = this.$( '.ui-form-error' );\n            this.$backdrop          = this.$( '.ui-form-backdrop' );\n\n            // add field element\n            this.$field.prepend( this.field.$el );\n\n            // decide wether to expand or collapse fields\n            var collapsible_value = this.model.get( 'collapsible_value' );\n            this.field.collapsed = collapsible_value !== undefined && JSON.stringify( this.model.get( 'value' ) ) == JSON.stringify( collapsible_value );\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n\n            // add click handler\n            var self = this;\n            this.$collapsible.on( 'click', function() {\n                self.field.collapsed = !self.field.collapsed;\n                app.trigger && app.trigger( 'change' );\n                self.render();\n            });\n\n            // hide error on value change\n            if ( this.field.model && !this.model.get( 'always_refresh' ) ) {\n                this.listenTo( this.field.model, 'change:value', function() { self.reset() } );\n            }\n        },\n\n        /** Set backdrop for input element */\n        backdrop: function() {\n            this.model.set( 'backdrop', true );\n        },\n\n        /** Set error text */\n        error: function( text ) {\n            this.model.set( 'error_text', text );\n        },\n\n        /** Reset this view */\n        reset: function() {\n            !this.model.get( 'fixed' ) && this.model.set( 'error_text', null );\n        },\n\n        render: function() {\n            // render help\n            $( '.tooltip' ).hide();\n            var help_text = this.model.get( 'help', '' );\n            var help_argument = this.model.get( 'argument' );\n            if ( help_argument && help_text.indexOf( '(' + help_argument + ')' ) == -1 ) {\n                help_text += ' (' + help_argument + ')';\n            }\n            this.$info.html( help_text );\n            // render visibility\n            this.$el[ this.model.get( 'hidden' ) ? 'hide' : 'show' ]();\n            // render preview view for collapsed fields\n            this.$preview[ ( this.field.collapsed && this.model.get( 'collapsible_preview' ) || this.model.get( 'disabled' ) ) ? 'show' : 'hide' ]()\n                         .html( _.escape( this.model.get( 'text_value' ) ) );\n            // render error messages\n            var error_text = this.model.get( 'error_text' );\n            this.$error[ error_text ? 'show' : 'hide' ]();\n            this.$el[ error_text ? 'addClass' : 'removeClass' ]( 'ui-error' );\n            this.$error_text.html( error_text );\n            // render backdrop\n            this.$backdrop[ this.model.get( 'backdrop' ) ? 'show' : 'hide' ]();\n            // render input field\n            this.field.collapsed || this.model.get( 'disabled' ) ? this.$field.hide() : this.$field.show();\n            // render input field color and style\n            this.field.model && this.field.model.set( { 'color': this.model.get( 'color' ), 'style': this.model.get( 'style' ) } );\n            // render collapsible options\n            if ( !this.model.get( 'disabled' ) && this.model.get( 'collapsible_value' ) !== undefined ) {\n                var collapsible_state = this.field.collapsed ? 'enable' : 'disable';\n                this.$title_text.hide();\n                this.$collapsible.show();\n                this.$collapsible_text.text( this.model.get( 'label' ) );\n                this.$collapsible_icon.removeClass().addClass( 'icon' )\n                                      .addClass( this.model.get( 'cls_' +  collapsible_state ) )\n                                      .attr( 'data-original-title', this.model.get( 'text_' + collapsible_state ) )\n                                      .tooltip( { placement: 'bottom' } );\n            } else {\n                this.$title_text.show().text( this.model.get( 'label' ) );\n                this.$collapsible.hide();\n            }\n        },\n\n        _template: function() {\n            return  $( '<div/>' ).addClass( 'ui-form-element' )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-error ui-error' )\n                                    .append( $( '<span/>' ).addClass( 'fa fa-arrow-down' ) )\n                                    .append( $( '<span/>' ).addClass( 'ui-form-error-text' ) )\n                                 )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-title' )\n                                    .append( $( '<div/>' ).addClass( 'ui-form-collapsible' )\n                                        .append( $( '<i/>' ).addClass( 'ui-form-collapsible-icon' ) )\n                                        .append( $( '<span/>' ).addClass( 'ui-form-collapsible-text' ) )\n                                    )\n                                    .append( $( '<span/>' ).addClass( 'ui-form-title-text' ) )\n                                 )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-field' )\n                                    .append( $( '<span/>' ).addClass( 'ui-form-info' ) )\n                                    .append( $( '<div/>' ).addClass( 'ui-form-backdrop' ) )\n                                 )\n                                 .append( $( '<div/>' ).addClass( 'ui-form-preview' ) );\n        }\n    });\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-input.js","/**\n    This class creates input elements. New input parameter types should be added to the types dictionary.\n*/\ndefine(['utils/utils',\n        'mvc/ui/ui-misc',\n        'mvc/ui/ui-select-content',\n        'mvc/ui/ui-select-library',\n        'mvc/ui/ui-select-ftp',\n        'mvc/ui/ui-select-genomespace',\n        'mvc/ui/ui-color-picker'],\n    function( Utils, Ui, SelectContent, SelectLibrary, SelectFtp, SelectGenomeSpace, ColorPicker ) {\n\n    // create form view\n    return Backbone.Model.extend({\n        /** Available parameter types */\n        types: {\n            'text'              : '_fieldText',\n            'password'          : '_fieldText',\n            'select'            : '_fieldSelect',\n            'data_column'       : '_fieldSelect',\n            'genomebuild'       : '_fieldSelect',\n            'data'              : '_fieldData',\n            'data_collection'   : '_fieldData',\n            'integer'           : '_fieldSlider',\n            'float'             : '_fieldSlider',\n            'boolean'           : '_fieldBoolean',\n            'drill_down'        : '_fieldDrilldown',\n            'color'             : '_fieldColor',\n            'hidden'            : '_fieldHidden',\n            'hidden_data'       : '_fieldHidden',\n            'baseurl'           : '_fieldHidden',\n            'library_data'      : '_fieldLibrary',\n            'ftpfile'           : '_fieldFtp',\n            'upload'            : '_fieldUpload',\n            'genomespacefile'   : '_fieldGenomeSpace'\n        },\n\n        /** Returns an input field for a given field type */\n        create: function( input_def ) {\n            var fieldClass = this.types[ input_def.type ];\n            var field = typeof( this[ fieldClass ] ) === 'function' ? this[ fieldClass ].call( this, input_def ) : null;\n            if ( !field ) {\n                field = input_def.options ? this._fieldSelect( input_def ) : this._fieldText( input_def );\n                Galaxy.emit.debug('form-parameters::_addRow()', 'Auto matched field type (' + input_def.type + ').');\n            }\n            input_def.value === undefined && ( input_def.value = null );\n            field.value( input_def.value );\n            return field;\n        },\n\n        /** Data input field */\n        _fieldData: function( input_def ) {\n            return new SelectContent.View({\n                id          : 'field-' + input_def.id,\n                extensions  : input_def.extensions,\n                optional    : input_def.optional,\n                multiple    : input_def.multiple,\n                type        : input_def.type,\n                flavor      : input_def.flavor,\n                data        : input_def.options,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Select/Checkbox/Radio options field */\n        _fieldSelect: function ( input_def ) {\n            // show text field e.g. in workflow editor\n            if( input_def.is_workflow ) {\n                return this._fieldText( input_def );\n            }\n\n            // customize properties\n            if ( input_def.type == 'data_column' ) {\n                input_def.error_text = 'Missing columns in referenced dataset.'\n            }\n\n            // identify available options\n            var data = input_def.data;\n            if( !data ) {\n                data = [];\n                _.each( input_def.options, function( option ) {\n                    data.push( { label: option[ 0 ], value: option[ 1 ] } );\n                });\n            }\n\n            // identify display type\n            var SelectClass = Ui.Select;\n            switch ( input_def.display ) {\n                case 'checkboxes':\n                    SelectClass = Ui.Checkbox;\n                    break;\n                case 'radio':\n                    SelectClass = Ui.Radio;\n                    break;\n                case 'radiobutton':\n                    SelectClass = Ui.RadioButton;\n                    break;\n            }\n\n            // create select field\n            return new SelectClass.View({\n                id          : 'field-' + input_def.id,\n                data        : data,\n                error_text  : input_def.error_text || 'No options available',\n                multiple    : input_def.multiple,\n                optional    : input_def.optional,\n                onchange    : input_def.onchange,\n                individual  : input_def.individual,\n                searchable  : input_def.flavor !== 'workflow'\n            });\n        },\n\n        /** Drill down options field */\n        _fieldDrilldown: function ( input_def ) {\n            // show text field e.g. in workflow editor\n            if( input_def.is_workflow ) {\n                return this._fieldText( input_def );\n            }\n\n            // create drill down field\n            return new Ui.Drilldown.View({\n                id          : 'field-' + input_def.id,\n                data        : input_def.options,\n                display     : input_def.display,\n                optional    : input_def.optional,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Text input field */\n        _fieldText: function( input_def ) {\n            // field replaces e.g. a select field\n            if ( input_def.options && input_def.data ) {\n                input_def.area = input_def.multiple;\n                if ( Utils.isEmpty( input_def.value ) ) {\n                    input_def.value = null;\n                } else {\n                    if ( $.isArray( input_def.value ) ) {\n                        var str_value = '';\n                        for ( var i in input_def.value ) {\n                            str_value += String( input_def.value[ i ] );\n                            if ( !input_def.multiple ) {\n                                break;\n                            }\n                            str_value += '\\n';\n                        }\n                        input_def.value = str_value;\n                    }\n                }\n            }\n            // create input element\n            return new Ui.Input({\n                id          : 'field-' + input_def.id,\n                type        : input_def.type,\n                area        : input_def.area,\n                readonly    : input_def.readonly,\n                placeholder : input_def.placeholder,\n                datalist    : input_def.datalist,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Slider field */\n        _fieldSlider: function( input_def ) {\n            return new Ui.Slider.View({\n                id          : 'field-' + input_def.id,\n                precise     : input_def.type == 'float',\n                is_workflow : input_def.is_workflow,\n                min         : input_def.min,\n                max         : input_def.max,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Hidden field */\n        _fieldHidden: function( input_def ) {\n            return new Ui.Hidden({\n                id          : 'field-' + input_def.id,\n                info        : input_def.info\n            });\n        },\n\n        /** Boolean field */\n        _fieldBoolean: function( input_def ) {\n            return new Ui.RadioButton.View({\n                id          : 'field-' + input_def.id,\n                data        : [ { label : 'Yes', value : 'true'  },\n                                { label : 'No',  value : 'false' }],\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Color picker field */\n        _fieldColor: function( input_def ) {\n            return new ColorPicker({\n                id          : 'field-' + input_def.id,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** Library dataset field */\n        _fieldLibrary: function( input_def ) {\n            return new SelectLibrary.View({\n                id          : 'field-' + input_def.id,\n                optional    : input_def.optional,\n                multiple    : input_def.multiple,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** FTP file field */\n        _fieldFtp: function( input_def ) {\n            return new SelectFtp.View({\n                id          : 'field-' + input_def.id,\n                optional    : input_def.optional,\n                multiple    : input_def.multiple,\n                onchange    : input_def.onchange\n            });\n        },\n\n        /** GenomeSpace file select field\n         */\n        _fieldGenomeSpace: function( input_def ) {\n             var self = this;\n             return new SelectGenomeSpace.View({\n                 id          : 'field-' + input_def.id,\n                 onchange    : function() {\n                     self.app.trigger( 'change' );\n                 }\n             });\n         },\n\n        /** Upload file field */\n        _fieldUpload: function( input_def ) {\n            return new Ui.Upload({\n                id          : 'field-' + input_def.id,\n                onchange    : input_def.onchange\n            });\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-parameters.js","/** This class creates a ui component which enables the dynamic creation of portlets */\ndefine( [ 'utils/utils', 'mvc/ui/ui-portlet', 'mvc/ui/ui-misc' ],\nfunction( Utils, Portlet, Ui ) {\n    var View = Backbone.View.extend({\n        initialize: function( options ) {\n            this.list = {};\n            this.options = Utils.merge( options, {\n                title       : 'Repeat',\n                empty_text  : 'Not available.',\n                max         : null,\n                min         : null\n            });\n            this.button_new = new Ui.ButtonIcon({\n                icon    : 'fa-plus',\n                title   : 'Insert ' + this.options.title,\n                tooltip : 'Add new ' + this.options.title + ' block',\n                cls     : 'ui-button-icon ui-clear-float form-repeat-add',\n                onclick : function() { options.onnew && options.onnew() }\n            });\n            this.setElement( $( '<div/>' ).append( this.$list = $( '<div/>' ) )\n                                          .append( $( '<div/>' ).append( this.button_new.$el ) ) );\n        },\n\n        /** Number of repeat blocks */\n        size: function() {\n            return _.size( this.list );\n        },\n\n        /** Add new repeat block */\n        add: function( options ) {\n            if ( !options.id || this.list[ options.id ] ) {\n                Galaxy.emit.debug( 'form-repeat::add()', 'Duplicate or invalid repeat block id.' );\n                return;\n            }\n            var button_delete = new Ui.ButtonIcon({\n                icon    : 'fa-trash-o',\n                tooltip : 'Delete this repeat block',\n                cls     : 'ui-button-icon-plain form-repeat-delete',\n                onclick : function() { options.ondel && options.ondel() }\n            });\n            var portlet = new Portlet.View({\n                id              : options.id,\n                title           : 'placeholder',\n                cls             : options.cls || 'ui-portlet-repeat',\n                operations      : { button_delete: button_delete }\n            });\n            portlet.append( options.$el );\n            portlet.$el.addClass( 'section-row' ).hide();\n            this.list[ options.id ] = portlet;\n            this.$list.append( portlet.$el.fadeIn( 'fast' ) );\n            this.options.max > 0 && this.size() >= this.options.max && this.button_new.disable();\n            this._refresh();\n        },\n\n        /** Delete repeat block */\n        del: function( id ) {\n            if ( !this.list[ id ] ) {\n                Galaxy.emit.debug( 'form-repeat::del()', 'Invalid repeat block id.' );\n                return;\n            }\n            this.$list.find( '#' + id ).remove();\n            delete this.list[ id ];\n            this.button_new.enable();\n            this._refresh();\n        },\n\n        /** Remove all */\n        delAll: function() {\n            for( var id in this.list ) {\n                this.del( id );\n            }\n        },\n\n        /** Hides add/del options */\n        hideOptions: function() {\n            this.button_new.$el.hide();\n            _.each( this.list, function( portlet ) { portlet.hideOperation( 'button_delete' ) } );\n            _.isEmpty( this.list ) && this.$el.append( $( '<div/>' ).addClass( 'ui-form-info' ).html( this.options.empty_text ) );\n        },\n\n        /** Refresh view */\n        _refresh: function() {\n            var index = 0;\n            for ( var id in this.list ) {\n                var portlet = this.list[ id ];\n                portlet.title( ++index + ': ' + this.options.title );\n                portlet[ this.size() > this.options.min ? 'showOperation' : 'hideOperation' ]( 'button_delete' );\n            }\n        }\n    });\n\n    return {\n        View : View\n    }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-repeat.js","/**\n    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n*/\ndefine([ 'utils/utils', 'mvc/ui/ui-misc', 'mvc/ui/ui-portlet', 'mvc/form/form-repeat', 'mvc/form/form-input', 'mvc/form/form-parameters' ],\nfunction( Utils, Ui, Portlet, Repeat, InputElement, Parameters ) {\n    var View = Backbone.View.extend({\n        initialize: function( app, options ) {\n            this.app = app;\n            this.inputs = options.inputs;\n            this.parameters = new Parameters();\n            this.setElement( $( '<div/>' ) );\n            this.render();\n        },\n\n        /** Render section view */\n        render: function() {\n            var self = this;\n            this.$el.empty();\n            _.each( this.inputs, function( input ) { self.add( input ) } );\n        },\n\n        /** Add a new input element */\n        add: function( input ) {\n            var input_def = jQuery.extend( true, {}, input );\n            input_def.id = input.id = Utils.uid();\n            this.app.input_list[ input_def.id ] = input_def;\n            switch( input_def.type ) {\n                case 'conditional':\n                    this._addConditional( input_def );\n                    break;\n                case 'repeat':\n                    this._addRepeat( input_def );\n                    break;\n                case 'section':\n                    this._addSection( input_def );\n                    break;\n                default:\n                    this._addRow( input_def );\n            }\n        },\n\n        /** Add a conditional block */\n        _addConditional: function( input_def ) {\n            var self = this;\n            input_def.test_param.id = input_def.id;\n            this.app.model.get( 'sustain_conditionals' ) && ( input_def.test_param.disabled = true );\n            var field = this._addRow( input_def.test_param );\n\n            // set onchange event for test parameter\n            field.model && field.model.set( 'onchange', function( value ) {\n                var selectedCase = self.app.data.matchCase( input_def, value );\n                for ( var i in input_def.cases ) {\n                    var case_def = input_def.cases[ i ];\n                    var section_row = self.$( '#' + input_def.id + '-section-' + i );\n                    var nonhidden = false;\n                    for ( var j in case_def.inputs ) {\n                        if ( !case_def.inputs[ j ].hidden ) {\n                            nonhidden = true;\n                            break;\n                        }\n                    }\n                    if ( i == selectedCase && nonhidden ) {\n                        section_row.fadeIn( 'fast' );\n                    } else {\n                        section_row.hide();\n                    }\n                }\n                self.app.trigger( 'change' );\n            });\n\n            // add conditional sub sections\n            for ( var i in input_def.cases ) {\n                var sub_section = new View( this.app, { inputs: input_def.cases[ i ].inputs } );\n                this._append( sub_section.$el.addClass( 'ui-form-section' ), input_def.id + '-section-' + i );\n            }\n\n            // trigger refresh on conditional input field after all input elements have been created\n            field.trigger( 'change' );\n        },\n\n        /** Add a repeat block */\n        _addRepeat: function( input_def ) {\n            var self = this;\n            var block_index = 0;\n\n            // create repeat block element\n            var repeat = new Repeat.View({\n                title           : input_def.title || 'Repeat',\n                min             : input_def.min,\n                max             : input_def.max,\n                onnew           : function() { create( input_def.inputs ); self.app.trigger( 'change' ); }\n            });\n\n            // helper function to create new repeat blocks\n            function create ( inputs ) {\n                var sub_section_id = input_def.id + '-section-' + ( block_index++ );\n                var sub_section = new View( self.app, { inputs: inputs } );\n                repeat.add( { id      : sub_section_id,\n                              $el     : sub_section.$el,\n                              ondel   : function() { repeat.del( sub_section_id ); self.app.trigger( 'change' ); } } );\n            }\n\n            //\n            // add parsed/minimum number of repeat blocks\n            //\n            var n_cache = _.size( input_def.cache );\n            for ( var i = 0; i < Math.max( Math.max( n_cache, input_def.min || 0 ), input_def.default || 0 ); i++ ) {\n                create( i < n_cache ? input_def.cache[ i ] : input_def.inputs );\n            }\n\n            // hide options\n            this.app.model.get( 'sustain_repeats' ) && repeat.hideOptions();\n\n            // create input field wrapper\n            var input_element = new InputElement( this.app, {\n                label   : input_def.title || input_def.name,\n                help    : input_def.help,\n                field   : repeat\n            });\n            this._append( input_element.$el, input_def.id );\n        },\n\n        /** Add a customized section */\n        _addSection: function( input_def ) {\n            var portlet = new Portlet.View({\n                title               : input_def.title || input_def.name,\n                cls                 : 'ui-portlet-section',\n                collapsible         : true,\n                collapsible_button  : true,\n                collapsed           : !input_def.expanded\n            });\n            portlet.append( new View( this.app, { inputs: input_def.inputs } ).$el );\n            portlet.append( $( '<div/>' ).addClass( 'ui-form-info' ).html( input_def.help ) );\n            this.app.on( 'expand', function( input_id ) { ( portlet.$( '#' + input_id ).length > 0 ) && portlet.expand(); } );\n            this._append( portlet.$el, input_def.id );\n        },\n\n        /** Add a single input field element */\n        _addRow: function( input_def ) {\n            var self = this;\n            var id = input_def.id;\n            input_def.onchange = input_def.onchange || function() { self.app.trigger( 'change', id ) };\n            var field = this.parameters.create( input_def );\n            this.app.field_list[ id ] = field;\n            var input_element = new InputElement( this.app, {\n                name                : input_def.name,\n                label               : input_def.hide_label ? '' : input_def.label || input_def.name,\n                value               : input_def.value,\n                text_value          : input_def.text_value,\n                collapsible_value   : input_def.collapsible_value,\n                collapsible_preview : input_def.collapsible_preview,\n                help                : input_def.help,\n                argument            : input_def.argument,\n                disabled            : input_def.disabled,\n                color               : input_def.color,\n                style               : input_def.style,\n                backdrop            : input_def.backdrop,\n                hidden              : input_def.hidden,\n                fixed               : input_def.fixed,\n                field               : field\n            });\n            this.app.element_list[ id ] = input_element;\n            this._append( input_element.$el, input_def.id );\n            return field;\n        },\n\n        /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n        _append: function( $el, id ) {\n            this.$el.append( $el.addClass( 'section-row' ).attr( 'id', id ) );\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-section.js","// dependencies\ndefine([], function() {\n\n// grid model\nreturn Backbone.Model.extend({\n    defaults: {\n        url_base: '',\n        async: false,\n        async_ops: [],\n        categorical_filters: [],\n        filters: {},\n        sort_key: null,\n        show_item_checkboxes: false,\n        advanced_search: false,\n        cur_page: 1,\n        num_pages: 1,\n        operation: undefined,\n        item_ids: undefined\n    },\n\n    /**\n     * Return true if operation can be done asynchronously.\n     */\n    can_async_op: function(op) {\n        return _.indexOf(this.attributes.async_ops, op) !== -1;\n    },\n\n    /**\n     * Add filtering criterion.\n     */\n    add_filter: function(key, value, append) {\n        // Update URL arg with new condition.            \n        if (append) {\n            // Update or append value.\n            var cur_val = this.attributes.filters[key],\n                new_val;\n            if (cur_val === null || cur_val === undefined) {\n                new_val = value;\n            } else if (typeof(cur_val) == 'string') {\n                if (cur_val == 'All' || cur_val == value) {\n                    new_val = value;\n                } else {\n                    // Replace string with array.\n                    var values = [];\n                    values[0] = cur_val;\n                    values[1] = value;\n                    new_val = values;\n                }\n            } else {\n                // Current value is an array.\n                new_val = cur_val;\n                if ( new_val.indexOf( value ) === -1 ) {\n                    new_val.push(value);\n                }\n            }\n            this.attributes.filters[key] = new_val;\n        } \n        else {\n            // Replace value.\n            this.attributes.filters[key] = value;\n        }\n    },\n\n    /**\n     * Remove filtering criterion.\n     */\n    remove_filter: function(key, condition) {\n        var cur_val = this.attributes.filters[key];\n        if (cur_val === null || cur_val === undefined) {\n            return false;            \n        }\n\n        if (typeof(cur_val) === 'string') {\n            // overwrite/remove condition.\n            this.attributes.filters[key] = '';\n        } else {\n            // filter contains an array of conditions.\n            var condition_index = _.indexOf(cur_val, condition);\n            if (condition_index !== -1) {\n                cur_val[condition_index] = '';\n            }\n        }\n    },\n\n    /**\n     * Returns URL data for obtaining a new grid.\n     */\n    get_url_data: function() {\n        var url_data = {\n            async: this.attributes.async,\n            sort: this.attributes.sort_key,\n            page: this.attributes.cur_page,\n            show_item_checkboxes: this.attributes.show_item_checkboxes,\n            advanced_search: this.attributes.advanced_search\n        };\n\n        // Add operation, item_ids only if they have values.\n        if (this.attributes.operation) {\n            url_data.operation = this.attributes.operation;\n        }\n        if (this.attributes.item_ids) {\n            url_data.id = this.attributes.item_ids;\n        }\n\n        // Add filter arguments to data, placing \"f-\" in front of all arguments.\n        var self = this;\n        _.each(_.pairs(self.attributes.filters), function(k) {\n            url_data['f-' + k[0]] = k[1];\n        });\n        return url_data;\n    },\n    \n    // Return URL for obtaining a new grid\n    get_url: function (args) {\n        return this.get('url_base') + '?' + $.param(this.get_url_data()) + '&' + $.param(args);\n    }\n    \n});\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-model.js","// dependencies\ndefine(['utils/utils'], function(Utils) {\n\n// grid view templates\nreturn {\n    // template\n    grid: function(options) {\n        var tmpl = '';\n        if (options.embedded) {\n            tmpl = this.grid_header(options) + this.grid_table(options);\n        } else {\n            tmpl = '<div class=\"loading-elt-overlay\"></div>' +\n                    '<table>' +\n                        '<tr>' +\n                            '<td width=\"75%\">' +\n                                this.grid_header(options) +\n                            '</td>' +\n                            '<td></td>' +\n                            '<td></td>' +\n                        '</tr>' +\n                        '<tr>' +\n                            '<td width=\"100%\" id=\"grid-message\" valign=\"top\"></td>' +\n                            '<td></td>' +\n                            '<td></td>' +\n                        '</tr>' +\n                    '</table>' +\n                    this.grid_table(options);\n        }\n       \n        // add info text\n        if (options.info_text) {\n            tmpl += '<br><div class=\"toolParamHelp\" style=\"clear: both;\">' + options.info_text + '</div>';\n        }\n       \n        // return\n        return tmpl;\n    },\n    \n    // template\n    grid_table: function(options) {\n        return  '<form method=\"post\" onsubmit=\"return false;\">' +\n                    '<table id=\"grid-table\" class=\"grid\">' +\n                        '<thead id=\"grid-table-header\"></thead>' +\n                        '<tbody id=\"grid-table-body\"></tbody>' +\n                        '<tfoot id=\"grid-table-footer\"></tfoot>' +\n                    '</table>' +\n                '</form>';\n    },\n    \n    // template\n    grid_header: function(options) {\n        var tmpl =  '<div class=\"grid-header\">';\n        if (!options.embedded) {\n            tmpl +=     '<h2>' + options.title + '</h2>';\n        }\n        if (options.global_actions) {\n            tmpl +=     '<ul class=\"manage-table-actions\">';\n            var show_popup = (options.global_actions.length >= 3);\n            if (show_popup) {\n                tmpl +=     '<li><a class=\"action-button\" id=\"popup-global-actions\" class=\"menubutton\">Actions</a></li>' +\n                            '<div popupmenu=\"popup-global-actions\">';\n            }\n            for (var i in options.global_actions) {\n                var action = options.global_actions[i];\n                tmpl +=         '<li>' +\n                                    '<a class=\"action-button use-target\" target=\"' + action.target + '\" href=\"' + action.url_args + '\" onclick=\"return false;\" >' + action.label + '</a>' +\n                                '</li>';\n            }\n            if (show_popup) {\n                tmpl +=     '</div>';\n            }\n            tmpl +=     '</ul>';\n        }\n        if (options.insert) {\n            tmpl +=     options.insert;\n        }\n       \n        // add grid filters\n        tmpl +=     this.grid_filters(options);\n        tmpl += '</div>'\n        \n        // return template\n        return tmpl;\n    },\n\n    // template\n    header: function(options) {\n        \n        // start\n        var tmpl =      '<tr>';\n        \n        // add checkbox\n        if (options.show_item_checkboxes) {\n            tmpl +=         '<th>';\n            if (options.items.length > 0) {\n                tmpl +=         '<input type=\"checkbox\" id=\"check_all\" name=select_all_checkbox value=\"true\">' +\n                                '<input type=\"hidden\" name=select_all_checkbox value=\"true\">';\n            }\n            tmpl +=         '</th>';\n        }\n        \n        // create header elements\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.visible) {\n                tmpl +=     '<th id=\"' + column.key + '-header\">';\n                if (column.href) {\n                    tmpl +=     '<a href=\"' + column.href + '\" class=\"sort-link\" sort_key=\"' + column.key + '\">' + column.label + '</a>';\n                } else {\n                    tmpl +=     column.label;\n                }\n                tmpl +=         '<span class=\"sort-arrow\">' + column.extra + '</span>' +\n                            '</th>';\n            }\n        }\n        \n        // finalize\n        tmpl +=        '</tr>';\n        \n        // return template\n        return tmpl;\n    },\n    \n    // template\n    body: function(options) {\n        // initialize\n        var tmpl = '';\n        var num_rows_rendered = 0;\n        var items_length = options.items.length;\n        \n        // empty grid?\n        if (items_length == 0) {\n            // No results.\n            tmpl += '<tr><td colspan=\"100\"><em>No Items</em></td></tr>';\n            num_rows_rendered = 1;\n        }\n        \n        // create rows\n        for (var i in options.items) {\n        \n            // encode ids\n            var item = options.items[i];\n            var encoded_id = item.encode_id;\n            var popupmenu_id = 'grid-' + i + '-popup';\n            \n            // Tag current\n            tmpl += '<tr ';\n            if (options.current_item_id == item.id) {\n                tmpl += 'class=\"current\"';\n            }\n            tmpl += '>';\n            \n            // Item selection column\n            if (options.show_item_checkboxes) {\n                tmpl += '<td style=\"width: 1.5em;\">' +\n                            '<input type=\"checkbox\" name=\"id\" value=\"' + encoded_id + '\" id=\"' + encoded_id + '\" class=\"grid-row-select-checkbox\" />' +\n                        '</td>';\n            }\n            \n            // Data columns\n            for (var j in options.columns) {\n                var column = options.columns[j];\n                if (column.visible) {\n                    // Nowrap\n                    var nowrap = '';\n                    if (column.nowrap) {\n                        nowrap = 'style=\"white-space:nowrap;\"';\n                    }\n                    \n                    // get column settings\n                    var column_settings = item.column_config[column.label];\n                    \n                    // load attributes\n                    var link = column_settings.link;\n                    var value = column_settings.value;\n                    var target = column_settings.target;\n                        \n                    // unescape value\n                    if (jQuery.type( value ) === 'string') {\n                        value = value.replace(/\\/\\//g, '/');\n                    }\n                    \n                    // Attach popup menu?\n                    var id = '';\n                    var cls = '';\n                    if (column.attach_popup) {\n                        id = 'grid-' + i + '-popup';\n                        cls = 'menubutton';\n                        if (link != '') {\n                            cls += ' split';\n                        }\n                        cls += ' popup';\n                    }\n                    \n                    // Check for row wrapping\n                    tmpl += '<td ' + nowrap + '>';\n                \n                    // Link\n                    if (link) {\n                        if (options.operations.length != 0) {\n                            tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\" style=\"float: left;\">';\n                        }\n                        tmpl += '<a class=\"menubutton-label use-target\" target=\"' + target + '\" href=\"' + link + '\" onclick=\"return false;\">' + value + '</a>';\n                        if (options.operations.length != 0) {\n                            tmpl += '</div>';\n                        }\n                    } else {\n                        tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\"><label id=\"' + column.label_id_prefix + encoded_id + '\" for=\"' + encoded_id + '\">' + (value || '') + '</label></div>';\n                    }\n                    tmpl += '</td>';\n                }\n            }\n            tmpl += '</tr>';\n            num_rows_rendered++;\n        }\n        return tmpl;\n    },\n\n    // template\n    footer: function(options) {\n    \n        // create template string\n        var tmpl = '';\n        \n        // paging\n        if (options.use_paging && options.num_pages > 1) {\n            // get configuration\n            var num_page_links      = options.num_page_links;\n            var cur_page_num        = options.cur_page_num;\n            var num_pages           = options.num_pages;\n            \n            // First pass on min page.\n            var page_link_range     = num_page_links / 2;\n            var min_page            = cur_page_num - page_link_range\n            var min_offset          = 0;\n            if (min_page <= 0) {\n                // Min page is too low.\n                min_page = 1;\n                min_offset = page_link_range - ( cur_page_num - min_page );\n            }\n            \n            // Set max page.\n            var max_range = page_link_range + min_offset;\n            var max_page = cur_page_num + max_range;\n            var max_offset;\n            if (max_page <= num_pages) {\n                // Max page is fine.\n                max_offset = 0;\n            } else {\n                // Max page is too high.\n                max_page = num_pages;\n                // +1 to account for the +1 in the loop below.\n                max_offset = max_range - ( max_page + 1 - cur_page_num );\n            }\n            \n            // Second and final pass on min page to add any unused\n            // offset from max to min.\n            if (max_offset != 0) {\n                min_page -= max_offset\n                if (min_page < 1) {\n                    min_page = 1\n                }\n            }\n            \n            // template header\n            tmpl += '<tr id=\"page-links-row\">';\n            if (options.show_item_checkboxes) {\n                tmpl += '<td></td>';\n            }\n            tmpl +=     '<td colspan=\"100\">' +\n                            '<span id=\"page-link-container\">' +\n                                'Page:';\n            \n            if (min_page > 1) {\n                tmpl +=         '<span class=\"page-link\" id=\"page-link-1\"><a href=\"javascript:void(0);\" page_num=\"1\" onclick=\"return false;\">1</a></span> ...';\n            }\n            \n            // create page urls\n            for (var page_index = min_page; page_index < max_page + 1; page_index++) {\n                \n                if (page_index == options.cur_page_num) {\n                    tmpl +=     '<span class=\"page-link inactive-link\" id=\"page-link-' + page_index + '\">' + page_index + '</span>';\n                } else {\n                    tmpl +=     '<span class=\"page-link\" id=\"page-link-' + page_index + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + page_index + '\">' + page_index + '</a></span>';\n                }\n            }\n            \n            // show last page\n            if (max_page < num_pages) {\n                    tmpl +=     '...' +\n                                '<span class=\"page-link\" id=\"page-link-' + num_pages + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + num_pages + '\">' + num_pages + '</a></span>';\n            }\n            tmpl +=         '</span>';\n            \n            // Show all link\n            tmpl +=         '<span class=\"page-link\" id=\"show-all-link-span\"> | <a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"all\">Show All</a></span>' +\n                        '</td>' +\n                    '</tr>';\n        }\n        \n        // Grid operations for multiple items.\n        if (options.show_item_checkboxes) {\n            // start template\n            tmpl += '<tr>' +\n                        '<input type=\"hidden\" id=\"operation\" name=\"operation\" value=\"\">' +\n                        '<td></td>' +\n                        '<td colspan=\"100\">' +\n                            'For <span class=\"grid-selected-count\"></span> selected items: ';\n            \n            // configure buttons for operations\n            for (var i in options.operations) {\n                var operation = options.operations[i];\n                if (operation.allow_multiple) {\n                    tmpl += '<input type=\"button\" value=\"' + operation.label + '\" class=\"operation-button action-button\">&nbsp;';\n                }\n            }\n            \n            // finalize template\n            tmpl +=     '</td>' +\n                    '</tr>';\n        }\n    \n        // count global operations\n        var found_global = false;\n        for (i in options.operations) {\n            if (options.operations[i].global_operation) {\n                found_global = true;\n                break;\n            }\n        }\n    \n        // add global operations\n        if (found_global) {\n            tmpl += '<tr>' +\n                        '<td colspan=\"100\">';\n            for (i in options.operations) {\n                var operation = options.operations[i];\n                if (operation.global_operation) {\n                    tmpl += '<a class=\"action-button\" href=\"' + operation.global_operation + '\">' + operation.label + '</a>';\n                }\n            }\n            tmpl +=     '</td>' +\n                    '</tr>';\n        }\n        \n        // add legend\n        if (options.legend) {\n            tmpl += '<tr>' +\n                        '<td colspan=\"100\">' + options.legend + '</td>' +\n                    '</tr>';\n        }\n        \n        // return\n        return tmpl;\n    },\n        \n    // template\n    message: function(options) {\n        var status = options.status == 'success' ? 'done' : options.status;\n        return  '<p>' +\n                    '<div class=\"' + status + 'message transient-message\">' + _.escape( options.message ) + '</div>' +\n                    '<div style=\"clear: both\"></div>' +\n                '</p>';\n    },\n    \n    // template\n    grid_filters: function (options) {\n    \n        // get filters\n        var default_filter_dict = options.default_filter_dict;\n        var filters = options.filters;\n\n        // show advanced search if flag set or if there are filters for advanced search fields\n        var advanced_search_display = 'none';\n        if (options.advanced_search) {\n            advanced_search_display = 'block';\n        }\n        \n        // identify columns with advanced filtering\n        var show_advanced_search_link = false;\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == 'advanced') {\n                var column_key = column.key;\n                var f_key = filters[column_key];\n                var d_key = default_filter_dict[column_key];\n                if (f_key && d_key && f_key != d_key) {\n                    advanced_search_display = 'block';\n                }\n                show_advanced_search_link = true;\n            }\n        }\n        \n        // hide standard search if advanced is shown\n        var standard_search_display = 'block';\n        if (advanced_search_display == 'block') {\n            standard_search_display = 'none';\n        }\n\n        //\n        // standard search\n        //\n        var tmpl =  '<div id=\"standard-search\" style=\"display: ' + standard_search_display + ';\">' +\n                        '<table>' +\n                            '<tr>' +\n                                '<td style=\"padding: 0;\">' +\n                                    '<table>';\n        \n        // add standard filters\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == 'standard') {\n                tmpl +=             this.grid_column_filter(options, column);\n            }\n        }\n        \n        // finalize standard search\n        tmpl +=                     '</table>' +\n                                '</td>' +\n                            '</tr>' +\n                            '<tr>' +\n                                '<td>';\n                \n        // show advanced search link in standard display\n        if (show_advanced_search_link) {\n            tmpl +=                 '<a href=\"\" class=\"advanced-search-toggle\">Advanced Search</a>';\n        }\n        \n        // finalize standard search display\n        tmpl +=                 '</td>' +\n                            '</tr>' +\n                        '</table>' +\n                    '</div>';\n    \n        //\n        // advanced search\n        //\n        tmpl +=     '<div id=\"advanced-search\" style=\"display: ' + advanced_search_display + '; margin-top: 5px; border: 1px solid #ccc;\">' +\n                        '<table>' +\n                            '<tr>' +\n                                '<td style=\"text-align: left\" colspan=\"100\">' +\n                                    '<a href=\"\" class=\"advanced-search-toggle\">Close Advanced Search</a>' +\n                                '</td>' +\n                            '</tr>';\n        \n        // add advanced filters\n        for (var i in options.columns) {\n            var column = options.columns[i];\n            if (column.filterable == 'advanced') {\n                tmpl +=             this.grid_column_filter(options, column);\n            }\n        }\n        \n        // finalize advanced search template\n        tmpl +=         '</table>' +\n                    '</div>';\n\n        // return template\n        return tmpl;\n    },\n    \n    // template\n    grid_column_filter: function(options, column) {\n        \n        // collect parameters\n        var default_filter_dict = options.default_filter_dict;\n        var filters = options.filters;\n        var column_label = column.label;\n        var column_key = column.key;\n        if (column.filterable == 'advanced') {\n            column_label = column_label.toLowerCase();\n        }\n        \n        // start\n        var tmpl =      '<tr>';\n        \n        if (column.filterable == 'advanced') {\n            tmpl +=         '<td align=\"left\" style=\"padding-left: 10px\">' + column_label + ':</td>';\n        }\n        tmpl +=             '<td style=\"padding-bottom: 1px;\">';\n        if (column.is_text) {\n            tmpl +=             '<form class=\"text-filter-form\" column_key=\"' + column_key + '\" action=\"' + options.url + '\" method=\"get\" >';\n            // Carry forward filtering criteria with hidden inputs.\n            for (i in options.columns) {\n                var temp_column = options.columns[i];\n                var filter_value = filters[temp_column.key];\n                if (filter_value) {\n                    if (filter_value != 'All') {\n                        if (temp_column.is_text) {\n                            filter_value = JSON.stringify( filter_value )\n                        }\n                        tmpl +=     '<input type=\"hidden\" id=\"' + temp_column.key + '\" name=\"f-' + temp_column.key + '\" value=\"' + filter_value + '\"/>';\n                    }\n                }\n            }\n            // Print current filtering criteria and links to delete.\n            tmpl +=                 '<span id=\"' + column_key + '-filtering-criteria\">';\n            \n            // add filters\n            var column_filter = filters[column_key];\n            if (column_filter) {\n                // identify type\n                var type = jQuery.type(column_filter);\n                \n                // single filter value\n                if (type == 'string') {\n                    if (column_filter != 'All') {\n                        // append template\n                        tmpl +=         this.filter_element(column_key, column_filter);\n                    }\n                }\n                \n                // multiple filter values\n                if (type == 'array') {\n                    for (var i in column_filter ) {\n                        // get filter\n                        var filter = column_filter[i];\n                        \n                        // copy filters and remove entry\n                        var params = column_filter;\n                        params = params.slice(i);\n\n                        // append template\n                        tmpl +=         this.filter_element(column_key, filter);\n                    }\n                }\n            }\n            \n            // close span\n            tmpl +=                 '</span>';\n            \n            // Set value, size of search input field. Minimum size is 20 characters.\n            var value = '';\n            if (column.filterable == 'standard') {\n                value = column.label.toLowerCase();\n                var size = value.length;\n                if (size < 20) {\n                    size = 20;\n                }\n                // +4 to account for space after placeholder\n                size = size + 4;\n            }\n            \n            // print input field for column\n            tmpl +=                 '<span class=\"search-box\">' +\n                                        '<input class=\"search-box-input\" id=\"input-' + column_key + '-filter\" name=\"f-' + column_key + '\" type=\"text\" placeholder=\"' + value + '\" size=\"' + size + '\"/>' +\n                                        '<button type=\"submit\" style=\"background: transparent; border: none; padding: 4px; margin: 0px;\">' +\n                                            '<i class=\"fa fa-search\"></i>' +\n                                        '</button>' +\n                                    '</span>' +\n                                '</form>';\n        } else {\n            // filter criteria\n            tmpl +=             '<span id=\"' + column_key + '-filtering-criteria\">';\n            \n            // add category filters\n            var seperator = false;\n            for (var cf_label in options.categorical_filters[column_key]) {\n                // get category filter\n                var cf = options.categorical_filters[column_key][cf_label];\n                \n                // each filter will have only a single argument, so get that single argument\n                var cf_key = '';\n                var cf_arg = '';\n                for (var key in cf) {\n                    cf_key = key;\n                    cf_arg = cf[key];\n                }\n                \n                // add seperator\n                if (seperator) {\n                    tmpl += ' | ';\n                }\n                seperator = true;\n                \n                // add category\n                var filter = filters[column_key];\n                if (filter && cf[column_key] && filter == cf_arg) {\n                    tmpl +=         '<span class=\"categorical-filter ' + column_key + '-filter current-filter\">' + cf_label + '</span>';\n                } else {\n                    tmpl +=         '<span class=\"categorical-filter ' + column_key + '-filter\">' +\n                                        '<a href=\"javascript:void(0);\" filter_key=\"' + cf_key + '\" filter_val=\"' + cf_arg + '\">' + cf_label + '</a>' +\n                                    '</span>';\n                }\n            }\n            tmpl +=             '</span>';\n        }\n        tmpl +=             '</td>' +\n                        '</tr>';\n        \n        // return template\n        return tmpl;\n    },\n    \n    // template for filter items\n    filter_element: function(filter_key, filter_value) {\n        filter_value = Utils.sanitize(filter_value);\n        return  '<span class=\"text-filter-val\">' + filter_value +\n                    '<a href=\"javascript:void(0);\" filter_key=\"' + filter_key + '\" filter_val=\"' + filter_value + '\">' +\n                        '<i class=\"fa fa-times\" style=\"padding-left: 5px; padding-bottom: 6px;\"/>' +\n                    '</a>' +\n                '</span>';\n\n    }\n};\n\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-template.js","// Provides support for interacting with the GenomeSpace File Browser popup dialogue\ndefine([], function() {\n\n// tool form templates\nreturn {\n    openFileBrowser: function( options ) {\n        var GS_UI_URL = window.Galaxy.config.genomespace_ui_url;\n        var GS_UPLOAD_URL = GS_UI_URL + 'upload/loadUrlToGenomespace.html?getLocation=true'\n\n        var newWin = window.open(GS_UPLOAD_URL, \"GenomeSpace File Browser\", \"height=360px,width=600px\");\n         \n        successCalBack = options['successCallback'];\n        window.addEventListener( \"message\", function (e) {\n             successCalBack(e.data);    \n          }, false);\n      \n        newWin.focus();\n       \n        if (options['errorCallback'] != null) newWin.setCallbackOnGSUploadError = config['errorCallback'];  \n    }\n\n};\n\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/tool/tool-genomespace.js","/** Renders the color picker used e.g. in the tool form **/\ndefine(['utils/utils'], function( Utils ) {\n    return Backbone.View.extend({\n        colors: {\n            standard: ['c00000','ff0000','ffc000','ffff00','92d050','00b050','00b0f0','0070c0','002060','7030a0'],\n            base    : ['ffffff','000000','eeece1','1f497d','4f81bd','c0504d','9bbb59','8064a2','4bacc6','f79646'],\n            theme   :[['f2f2f2','7f7f7f','ddd9c3','c6d9f0','dbe5f1','f2dcdb','ebf1dd','e5e0ec','dbeef3','fdeada'],\n                      ['d8d8d8','595959','c4bd97','8db3e2','b8cce4','e5b9b7','d7e3bc','ccc1d9','b7dde8','fbd5b5'],\n                      ['bfbfbf','3f3f3f','938953','548dd4','95b3d7','d99694','c3d69b','b2a2c7','92cddc','fac08f'],\n                      ['a5a5a5','262626','494429','17365d','366092','953734','76923c','5f497a','31859b','e36c09'],\n                      ['7f7f7e','0c0c0c','1d1b10','0f243e','244061','632423','4f6128','3f3151','205867','974806']]\n        },\n\n        initialize : function( options ) {\n            this.options = Utils.merge( options, {} );\n            this.setElement( this._template() );\n            this.$panel = this.$( '.ui-color-picker-panel' );\n            this.$view = this.$( '.ui-color-picker-view' );\n            this.$value = this.$( '.ui-color-picker-value' );\n            this.$header = this.$( '.ui-color-picker-header' );\n            this._build();\n            this.visible = false;\n            this.value( this.options.value );\n            this.$boxes = this.$( '.ui-color-picker-box' );\n            var self = this;\n            this.$boxes.on( 'click', function() {\n                self.value( $( this ).css( 'background-color' ) );\n                self.$header.trigger( 'click' );\n            } );\n            this.$header.on( 'click', function() {\n                self.visible = !self.visible;\n                if ( self.visible ) {\n                    self.$view.fadeIn( 'fast' );\n                } else {\n                    self.$view.fadeOut( 'fast' );\n                }\n            } );\n        },\n\n        /** Get/set value */\n        value : function ( new_val ) {\n            if ( new_val !== undefined && new_val !== null ) {\n                this.$value.css( 'background-color', new_val );\n                this.$( '.ui-color-picker-box' ).empty();\n                this.$( this._getValue() ).html( this._templateCheck() );\n                this.options.onchange && this.options.onchange( new_val );\n            }\n            return this._getValue();\n        },\n\n        /** Get value from dom */\n        _getValue: function() {\n            var rgb = this.$value.css( 'background-color' );\n            rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n            if ( rgb ) {\n                function hex( x ) {\n                    return ( '0' + parseInt( x ).toString( 16 ) ).slice( -2 );\n                }\n                return '#' + hex( rgb[ 1] ) + hex( rgb[ 2 ] ) + hex( rgb[ 3 ] );\n            } else {\n                return null;\n            }\n        },\n\n        /** Build color panel */\n        _build: function() {\n            this._content( { colors : this.colors.base } );\n            for ( var i in this.colors.theme ) {\n                var line_def = {};\n                if ( i == 0 ) {\n                    line_def[ 'bottom' ] = true;\n                } else if ( i != this.colors.theme.length - 1 ) {\n                    line_def[ 'top' ]     = true;\n                    line_def[ 'bottom' ]  = true;\n                } else {\n                    line_def[ 'top' ]     = true;\n                }\n                line_def[ 'colors' ] = this.colors.theme[ i ];\n                this._content( line_def );\n            }\n            this._content( { colors : this.colors.standard } );\n        },\n\n        /** Create content */\n        _content: function( options ) {\n            var colors   = options.colors;\n            var $content = $( this._templateContent() );\n            var $line = $content.find( '.line' );\n            this.$panel.append( $content );\n            for ( var i in colors ) {\n                var $box = $( this._templateBox( colors[ i ] ) );\n                if ( options.top ) {\n                    $box.css( 'border-top', 'none' );\n                    $box.css( 'border-top-left-radius', '0px' );\n                    $box.css( 'border-top-right-radius', '0px' );\n                }\n                if ( options.bottom ) {\n                    $box.css( 'border-bottom', 'none' );\n                    $box.css( 'border-bottom-left-radius', '0px' );\n                    $box.css( 'border-bottom-right-radius', '0px' );\n                }\n                $line.append( $box );\n            }\n            return $content;\n        },\n\n        /** Check icon */\n        _templateCheck: function() {\n            return  '<div class=\"ui-color-picker-check fa fa-check\"/>';\n        },\n\n        /** Content template */\n        _templateContent: function() {\n            return  '<div class=\"ui-color-picker-content\">' +\n                        '<div class=\"line\"/>' +\n                    '</div>';\n        },\n\n        /** Box template */\n        _templateBox: function( color ) {\n            return '<div id=\"' + color + '\" class=\"ui-color-picker-box\" style=\"background-color: #' + color + ';\"/>';\n        },\n\n        /** Main template */\n        _template: function() {\n            return  '<div class=\"ui-color-picker\">' +\n                        '<div class=\"ui-color-picker-header\">' +\n                            '<div class=\"ui-color-picker-value\"/>' +\n                            '<div class=\"ui-color-picker-label\">Select a color</div>' +\n                        '</div>' +\n                        '<div class=\"ui-color-picker-view ui-input\">' +\n                            '<div class=\"ui-color-picker-panel\"/>' +\n                        '</div>'\n                    '</div>';\n        }\n    });\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-color-picker.js","/** This class creates/wraps a drill down element. */\ndefine([ 'utils/utils', 'mvc/ui/ui-options' ], function( Utils, Options ) {\n\nvar View = Options.BaseIcons.extend({\n    initialize: function( options ) {\n        options.type     = options.display || 'checkbox';\n        options.multiple = ( options.type == 'checkbox' );\n        Options.BaseIcons.prototype.initialize.call( this, options );\n    },\n\n    /** Set states for selected values */\n    _setValue: function ( new_value ) {\n        Options.BaseIcons.prototype._setValue.call( this, new_value );\n        if ( new_value !== undefined && new_value !== null && this.header_index ) {\n            var self = this;\n            var values = $.isArray( new_value ) ? new_value : [ new_value ];\n            _.each( values, function( v ) {\n                var list = self.header_index[ v ];\n                _.each( list, function( element ) {\n                    self._setState( element, true );\n                });\n            });\n        }\n    },\n\n    /** Expand/collapse a sub group */\n    _setState: function ( header_id, is_expanded ) {\n        var $button = this.$( '.button-' + header_id );\n        var $subgroup = this.$( '.subgroup-' + header_id );\n        $button.data( 'is_expanded', is_expanded );\n        if ( is_expanded ) {\n            $subgroup.show();\n            $button.removeClass( 'fa-plus-square' ).addClass( 'fa-minus-square' );\n        } else {\n            $subgroup.hide();\n            $button.removeClass( 'fa-minus-square' ).addClass( 'fa-plus-square' );\n        }\n    },\n\n    /** Template to create options tree */\n    _templateOptions: function() {\n        var self = this;\n        this.header_index = {};\n\n        // attach event handler\n        function attach( $el, header_id ) {\n            var $button = $el.find( '.button-' + header_id );\n            $button.on( 'click', function() {\n                self._setState( header_id, !$button.data( 'is_expanded' ) );\n            });\n        }\n\n        // recursive function which iterates through options\n        function iterate ( $tmpl, options, header ) {\n            header = header || [];\n            for (var i in options ) {\n                var level = options[ i ];\n                var has_options = level.options && level.options.length > 0;\n                var new_header = header.slice( 0 );\n                self.header_index[ level.value ] = new_header.slice( 0 );\n                var $group = $( '<div/>' );\n                if ( has_options ) {\n                    var header_id = Utils.uid();\n                    var $button = $( '<span/>' ).addClass( 'button-' + header_id ).addClass( 'ui-drilldown-button fa fa-plus-square' );\n                    var $subgroup = $( '<div/>' ).addClass( 'subgroup-' + header_id ).addClass( 'ui-drilldown-subgroup' );\n                    $group.append( $( '<div/>' )\n                                        .append( $button )\n                                        .append( self._templateOption( { label: level.name, value: level.value } ) ) );\n                    new_header.push( header_id );\n                    iterate ( $subgroup, level.options, new_header );\n                    $group.append( $subgroup );\n                    attach( $group, header_id );\n                } else {\n                    $group.append( self._templateOption( { label: level.name, value: level.value } ) );\n                }\n                $tmpl.append( $group );\n            }\n        }\n\n        // iterate through options and create dom\n        var $tmpl = $( '<div/>' );\n        iterate( $tmpl, this.model.get( 'data' ) );\n        return $tmpl;\n    },\n\n    /** Template for drill down view */\n    _template: function() {\n        return $( '<div/>' ).addClass( 'ui-options-list drilldown-container' ).attr( 'id', this.model.id );\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-drilldown.js","define([ 'utils/utils', 'mvc/ui/ui-misc', 'mvc/ui/ui-select-default' ], function( Utils, Ui, Select ) {\n\n/** Batch mode variations */\nvar Batch = { DISABLED: 'disabled', ENABLED: 'enabled', LINKED: 'linked' };\n\n/** List of available content selectors options */\nvar Configurations = {\n    data: [\n        { src: 'hda',  icon: 'fa-file-o',   tooltip: 'Single dataset',       multiple: false,   batch: Batch.DISABLED   },\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.LINKED     },\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.LINKED     } ],\n    data_multiple: [\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.DISABLED   },\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collections',  multiple: true,    batch: Batch.DISABLED   } ],\n    data_collection: [\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.DISABLED   } ],\n    workflow_data: [\n        { src: 'hda',  icon: 'fa-file-o',   tooltip: 'Single dataset',       multiple: false,   batch: Batch.DISABLED   } ],\n    workflow_data_multiple: [\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.DISABLED   } ],\n    workflow_data_collection: [\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.DISABLED   } ],\n    module_data: [\n        { src: 'hda',  icon: 'fa-file-o',   tooltip: 'Single dataset',       multiple: false,   batch: Batch.DISABLED   },\n        { src: 'hda',  icon: 'fa-files-o',  tooltip: 'Multiple datasets',    multiple: true,    batch: Batch.ENABLED    } ],\n    module_data_collection: [\n        { src: 'hdca', icon: 'fa-folder-o', tooltip: 'Dataset collection',   multiple: false,   batch: Batch.DISABLED   },\n        { src: 'hdca', icon: 'fa-folder',   tooltip: 'Multiple collections', multiple: true,    batch: Batch.ENABLED    } ]\n};\n\n/** View for hda and hdca content selector ui elements */\nvar View = Backbone.View.extend({\n    initialize : function( options ) {\n        var self = this;\n        this.model = options && options.model || new Backbone.Model({\n            src_labels  : { 'hda' : 'dataset', 'hdca': 'dataset collection' },\n            pagelimit   : 100,\n            statustimer : 1000\n        }).set( options );\n        this.setElement( $( '<div/>' ).addClass( 'ui-select-content' ) );\n        this.button_product = new Ui.RadioButton.View( {\n            value       : 'false',\n            data        : [ { icon: 'fa fa-chain', value: 'false',\n                              tooltip: 'Linked inputs will be run in matched order with other datasets e.g. use this for matching forward and reverse reads.' },\n                            { icon: 'fa fa-chain-broken',  value: 'true',\n                              tooltip: 'Unlinked dataset inputs will be run against *all* other inputs.' } ] } );\n        var $batch_div = $( '<div/>' ).addClass( 'ui-form-info' )\n                            .append( $( '<i/>' ).addClass( 'fa fa-sitemap' ) )\n                            .append( $( '<span/>' ).html( 'This is a batch mode input field. Separate jobs will be triggered for each dataset selection.' ) );\n        this.$batch = {\n            linked  : $batch_div.clone(),\n            enabled : $batch_div.clone().append( $( '<div/>' )\n                                                    .append( $( '<div/>' ).addClass( 'ui-form-title' ).html( 'Batch options:' ) )\n                                                    .append( this.button_product.$el ) )\n                                                    .append( $( '<div/>' ).css( 'clear', 'both' ) )\n        };\n\n        // add drag-drop event handlers\n        this.$el.on( 'dragenter', function( e ) { this.lastenter = e.target; self.$el.addClass( 'ui-dragover' ); } )\n                .on( 'dragover',  function( e ) { e.preventDefault(); } )\n                .on( 'dragleave', function( e ) { this.lastenter === e.target && self.$el.removeClass( 'ui-dragover' ); } )\n                .on( 'drop',      function( e ) { self._handleDrop( e ); } );\n\n        // track current history elements\n        this.history = {};\n\n        // add listeners\n        this.listenTo( this.model, 'change:data', this._changeData, this );\n        this.listenTo( this.model, 'change:wait', this._changeWait, this );\n        this.listenTo( this.model, 'change:current', this._changeCurrent, this );\n        this.listenTo( this.model, 'change:value', this._changeValue, this );\n        this.listenTo( this.model, 'change:type change:optional change:multiple change:extensions', this._changeType, this );\n        this.render();\n\n        // add change event\n        this.on( 'change', function() { options.onchange && options.onchange( self.value() ) } );\n    },\n\n    render: function() {\n        this._changeType();\n        this._changeValue();\n        this._changeWait();\n    },\n\n    /** Indicate that select fields are being updated */\n    wait: function() {\n        this.model.set( 'wait', true );\n    },\n\n    /** Indicate that the options update has been completed */\n    unwait: function() {\n        this.model.set( 'wait', false );\n    },\n\n    /** Update data representing selectable options */\n    update: function( options ) {\n        this.model.set( 'data', options );\n    },\n\n    /** Return the currently selected dataset values */\n    value: function ( new_value ) {\n        new_value !== undefined && this.model.set( 'value', new_value );\n        var current = this.model.get( 'current' );\n        if ( this.config[ current ] ) {\n            var id_list = this.fields[ current ].value();\n            if (id_list !== null) {\n                id_list = $.isArray( id_list ) ? id_list : [ id_list ];\n                if ( id_list.length > 0 ) {\n                    var result = this._batch( { values: [] } );\n                    for ( var i in id_list ) {\n                        var details = this.history[ id_list[ i ] + '_' + this.config[ current ].src ];\n                        if ( details ) {\n                            result.values.push( details );\n                        } else {\n                            Galaxy.emit.debug( 'ui-select-content::value()', 'Requested details not found for \\'' + id_list[ i ] + '\\'.'  );\n                            return null;\n                        }\n                    }\n                    result.values.sort( function( a, b ) { return a.hid - b.hid } );\n                    return result;\n                }\n            }\n        } else {\n            Galaxy.emit.debug( 'ui-select-content::value()', 'Invalid value/source \\'' + new_value + '\\'.'  );\n        }\n        return null;\n    },\n\n    /** Change of current select field */\n    _changeCurrent: function() {\n        var self = this;\n        _.each( this.fields, function( field, i ) {\n            if ( self.model.get( 'current' ) == i ) {\n                field.$el.show();\n                _.each( self.$batch, function( $batchfield, batchmode ) {\n                    $batchfield[ self.config[ i ].batch == batchmode ? 'show' : 'hide' ]();\n                });\n                self.button_type.value( i );\n            } else {\n                field.$el.hide();\n            }\n        });\n    },\n\n    /** Change of type */\n    _changeType: function() {\n        var self = this;\n\n        // identify selector type identifier i.e. [ flavor ]_[ type ]_[ multiple ]\n        var config_id = ( this.model.get( 'flavor' ) ? this.model.get( 'flavor' ) + '_' : '' ) +\n                        String( this.model.get( 'type' ) ) + ( this.model.get( 'multiple' ) ? '_multiple' : '' );\n        if ( Configurations[ config_id ] ) {\n            this.config = Configurations[ config_id ];\n        } else {\n            this.config = Configurations[ 'data' ];\n            Galaxy.emit.debug( 'ui-select-content::_changeType()', 'Invalid configuration/type id \\'' + config_id + '\\'.'  );\n        }\n\n        // prepare extension component of error message\n        var data = self.model.get( 'data' );\n        var extensions = Utils.textify( this.model.get( 'extensions' ) );\n        var src_labels = this.model.get( 'src_labels' );\n\n        // build views\n        this.fields = [];\n        this.button_data = [];\n        _.each( this.config, function( c, i ) {\n            self.button_data.push({\n                value   : i,\n                icon    : c.icon,\n                tooltip : c.tooltip\n            });\n            self.fields.push(\n                new Select.View({\n                    optional    : self.model.get( 'optional' ),\n                    multiple    : c.multiple,\n                    searchable  : !c.multiple || ( data && data[ c.src ] && data[ c.src ].length > self.model.get( 'pagelimit' ) ),\n                    individual  : true,\n                    error_text  : 'No ' + ( extensions ? extensions + ' ' : '' ) + ( src_labels[ c.src ] || 'content' ) + ' available.',\n                    onchange    : function() {\n                        self.trigger( 'change' );\n                    }\n                })\n            );\n        });\n        this.button_type = new Ui.RadioButton.View({\n            value   : this.model.get( 'current' ),\n            data    : this.button_data,\n            onchange: function( value ) {\n                self.model.set( 'current', value );\n                self.trigger( 'change' );\n            }\n        });\n\n        // append views\n        this.$el.empty();\n        var button_width = 0;\n        if ( this.fields.length > 1 ) {\n            this.$el.append( this.button_type.$el );\n            button_width = Math.max( 0, this.fields.length * 36 ) + 'px';\n        }\n        _.each( this.fields, function( field ) {\n            self.$el.append( field.$el.css( { 'margin-left': button_width } ) );\n        });\n        _.each( this.$batch, function( $batchfield, batchmode ) {\n            self.$el.append( $batchfield.css( { 'margin-left': button_width } ) );\n        });\n        this.model.set( 'current', 0 );\n        this._changeCurrent();\n        this._changeData();\n    },\n\n    /** Change of wait flag */\n    _changeWait: function() {\n        var self = this;\n        _.each( this.fields, function( field ) { field[ self.model.get( 'wait' ) ? 'wait' : 'unwait' ]() } );\n    },\n\n    /** Change of available options */\n    _changeData: function() {\n        var options = this.model.get( 'data' );\n        var self = this;\n        var select_options = {};\n        _.each( options, function( items, src ) {\n            select_options[ src ] = [];\n            _.each( items, function( item ) {\n                select_options[ src ].push({\n                    hid  : item.hid,\n                    keep : item.keep,\n                    label: item.hid + ': ' + item.name,\n                    value: item.id,\n                    tags : item.tags\n                });\n                self.history[ item.id + '_' + src ] = item;\n            });\n        });\n        _.each( this.config, function( c, i ) {\n            select_options[ c.src ] && self.fields[ i ].add( select_options[ c.src ], function( a, b ) { return b.hid - a.hid } );\n        });\n    },\n\n    /** Change of incoming value */\n    _changeValue: function () {\n        var new_value = this.model.get( 'value' );\n        if ( new_value && new_value.values && new_value.values.length > 0 ) {\n            // create list with content ids\n            var list = [];\n            _.each( new_value.values, function( value ) {\n                list.push( value.id );\n            });\n            // sniff first suitable field type from config list\n            var src = new_value.values[ 0 ].src;\n            var multiple = new_value.values.length > 1;\n            for( var i = 0; i < this.config.length; i++ ) {\n                var field = this.fields[ i ];\n                var c = this.config[ i ];\n                if ( c.src == src && [ multiple, true ].indexOf( c.multiple ) !== -1 ) {\n                    this.model.set( 'current', i );\n                    field.value( list );\n                    break;\n                }\n            }\n        } else {\n            _.each( this.fields, function( field ) {\n                field.value( null );\n            });\n        }\n    },\n\n    /** Handles drop events e.g. from history panel */\n    _handleDrop: function( ev ) {\n        try {\n            var data      = this.model.get( 'data' );\n            var current   = this.model.get( 'current' );\n            var config    = this.config[ current ];\n            var field     = this.fields[ current ];\n            var drop_data = JSON.parse( ev.originalEvent.dataTransfer.getData( 'text' ) )[ 0 ];\n            var new_id    = drop_data.id;\n            var new_src   = drop_data.history_content_type == 'dataset' ? 'hda' : 'hdca';\n            var new_value = { id: new_id, src: new_src };\n            if ( data && _.findWhere( data[ new_src ], new_value ) ) {\n                if ( config.src == new_src ) {\n                    var current_value = field.value();\n                    if ( current_value && config.multiple ) {\n                        if ( current_value.indexOf( new_id ) == -1 ) {\n                            current_value.push( new_id );\n                        }\n                    } else {\n                        current_value = new_id;\n                    }\n                    field.value( current_value );\n                } else {\n                    this.model.set( 'value', { values: [ new_value ] } );\n                    this.model.trigger( 'change:value' );\n                }\n                this.trigger( 'change' );\n                this._handleDropStatus( 'success' );\n            } else {\n                this._handleDropStatus( 'danger' );\n            }\n        } catch( e ) {\n            this._handleDropStatus( 'danger' );\n        }\n    },\n\n    /** Highlight drag result */\n    _handleDropStatus: function( status ) {\n        var self = this;\n        this.$el.removeClass( 'ui-dragover' ).addClass( 'ui-dragover-' + status );\n        setTimeout( function() { self.$el.removeClass( 'ui-dragover-' + status ) }, this.model.get( 'statustimer' ) );\n    },\n\n    /** Assists in identifying the batch mode */\n    _batch: function( result ) {\n        result[ 'batch' ] = false;\n        var current = this.model.get( 'current' );\n        var config = this.config[ current ];\n        if ( config.src == 'hdca' && !config.multiple ) {\n            var hdca = this.history[ this.fields[ current ].value() + '_hdca' ];\n            if ( hdca && hdca.map_over_type ) {\n                result[ 'batch' ] = true;\n            }\n        }\n        if ( config.batch == Batch.LINKED || config.batch == Batch.ENABLED ) {\n            result[ 'batch' ] = true;\n            if ( config.batch == Batch.ENABLED && this.button_product.value() === 'true' ) {\n                result[ 'product' ] = true;\n            }\n        }\n        return result;\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-content.js","// dependencies\ndefine(['utils/utils', 'mvc/ui/ui-list'],\n        function(Utils, List) {\n\n/**\n * FTP file selector\n */\nvar View = Backbone.View.extend({\n    // initialize\n    initialize : function(options) {\n        // link this\n        var self = this;\n\n        // create ui-list view to keep track of selected ftp files\n        this.ftpfile_list = new List.View({\n            name        : 'file',\n            optional    : options.optional,\n            multiple    : options.multiple,\n            onchange    : function() {\n                options.onchange && options.onchange(self.value());\n            }\n        });\n\n        // create elements\n        this.setElement(this.ftpfile_list.$el);\n\n        // initial fetch of ftps\n        Utils.get({\n            url     : Galaxy.root + 'api/remote_files',\n            success : function(response) {\n                var data = [];\n                for (var i in response) {\n                    data.push({\n                        value   : response[i]['path'],\n                        label   : response[i]['path']\n                    });\n                }\n                self.ftpfile_list.update(data);\n            }\n        });\n    },\n\n    /** Return/Set currently selected ftp datasets */\n    value: function(val) {\n        return this.ftpfile_list.value(val);\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-ftp.js","// dependencies\ndefine(['utils/utils', 'mvc/ui/ui-misc', 'mvc/tool/tool-genomespace'],\n        function(Utils, Ui, GenomespaceBrowser) {\n\n/**\n * GenomeSpace file selector\n */\nvar View = Backbone.View.extend({\n    // initialize\n    initialize : function(options) {\n\n        // link this\n        var self = this;\n\n        // create insert new list element button\n        this.browse_button = new Ui.ButtonIcon({\n            title       : 'Browse',\n            icon        : 'fa fa-sign-in',\n            tooltip     : 'Browse GenomeSpace',\n            onclick     : function() {\n                self.browseGenomeSpace();\n            }\n        });\n\n        // create genomespace filepath textbox\n        this.filename_textbox = new Ui.Input();\n\n        // create genomespace token textbox\n        this.token_textbox = new Ui.Input({\n          type       : 'password'        \n        });\n\n        // create elements\n        this.setElement(this._template(options));\n        this.$('.ui-gs-browse-button').append(this.browse_button.$el);\n        this.$('.ui-gs-filename-textbox').append(this.filename_textbox.$el);\n        this.$('.ui-gs-token-textbox').append(this.token_textbox.$el);\n    },\n\n    /** Browse GenomeSpace */\n    browseGenomeSpace: function(options) {\n        var self = this;\n        GenomespaceBrowser.openFileBrowser({\n            successCallback: function(data) {\n                self.value(data.destination + \"^\" + data.token);\n            }\n        });\n    },\n    \n    /** Main Template */\n    _template: function(options) {\n        return  '<div class=\"ui-gs-select-file\">' +\n                    '<div class=\"ui-gs-browse-field\">' +\n                        '<span class=\"ui-gs-browse-button\" />' +\n                        '<span class=\"ui-gs-filename-textbox\" />' +\n                    '</div>' +\n                    '<div class=\"ui-gs-token-field\">' +\n                        '<span class=ui-gs-label\"><div class=\"ui-gs-token-label\">Token</div></span>' +\n                        '<span class=\"ui-gs-token-textbox\" />' +\n                    '</div>' +\n                '</div>';\n    },\n    \n    /** Return/Set currently selected genomespace filename/token */\n    value : function (new_value) {\n        // check if new_value is defined\n        if (new_value !== undefined) {\n            this._setValue(new_value);\n        }\n        else {\n          return this._getValue();\n        }\n    },\n    \n    // get value\n    _getValue: function() {\n        return this.filename_textbox.value() +\n            \"^\" + this.token_textbox.value();\n    },\n    \n    // set value\n    _setValue: function(new_value) {\n        if (new_value) {\n          values = new_value.split(\"^\");\n          this.filename_textbox.value(values[0]);\n          this.token_textbox.value(values[1]);\n        }\n    },\n    \n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-genomespace.js","// dependencies\ndefine(['utils/utils', 'mvc/ui/ui-misc', 'mvc/ui/ui-table', 'mvc/ui/ui-list'],\n        function(Utils, Ui, Table, List) {\n\n// collection of libraries\nvar Libraries = Backbone.Collection.extend({\n    url: Galaxy.root + 'api/libraries?deleted=false'\n});\n\n// collection of dataset\nvar LibraryDatasets = Backbone.Collection.extend({\n    initialize: function() {\n        var self = this;\n        this.config = new Backbone.Model({ library_id: null });\n        this.config.on('change', function() {\n            self.fetch({ reset: true });\n        });\n    },\n    url: function() {\n        return Galaxy.root + 'api/libraries/' + this.config.get('library_id') + '/contents';\n    }\n});\n\n// hda/hdca content selector ui element\nvar View = Backbone.View.extend({\n    // initialize\n    initialize : function(options) {\n        // link this\n        var self = this;\n\n        // collections\n        this.libraries  = new Libraries();\n        this.datasets   = new LibraryDatasets();\n\n        // link app and options\n        this.options = options;\n\n        // select field for the library\n        // TODO: Remove this once the library API supports searching for library datasets\n        this.library_select = new Ui.Select.View({\n            onchange    : function(value) {\n                self.datasets.config.set('library_id', value);\n            }\n        });\n\n        // create ui-list view to keep track of selected data libraries\n        this.dataset_list = new List.View({\n            name        : 'dataset',\n            optional    : options.optional,\n            multiple    : options.multiple,\n            onchange    : function() {\n                self.trigger('change');\n            }\n        });\n\n        // add reset handler for fetched libraries\n        this.libraries.on('reset', function() {\n            var data = [];\n            self.libraries.each(function(model) {\n                data.push({\n                    value   : model.id,\n                    label   : model.get('name')\n                });\n            });\n            self.library_select.update(data);\n        });\n\n        // add reset handler for fetched library datasets\n        this.datasets.on('reset', function() {\n            var data = [];\n            var library_current = self.library_select.text();\n            if (library_current !== null) {\n                self.datasets.each(function(model) {\n                    if (model.get('type') === 'file') {\n                        data.push({\n                            value   : model.id,\n                            label   : model.get('name')\n                        });\n                    }\n                });\n            }\n            self.dataset_list.update(data);\n        });\n\n        // add change event. fires on trigger\n        this.on('change', function() {\n            options.onchange && options.onchange(self.value());\n        });\n\n        // create elements\n        this.setElement(this._template());\n        this.$('.library-select').append(this.library_select.$el);\n        this.$el.append(this.dataset_list.$el);\n\n        // initial fetch of libraries\n        this.libraries.fetch({\n            reset: true,\n            success: function() {\n                self.library_select.trigger('change');\n                if (self.options.value !== undefined) {\n                    self.value(self.options.value);\n                }\n            }\n        });\n    },\n\n    /** Return/Set currently selected library datasets */\n    value: function(val) {\n        return this.dataset_list.value(val);\n    },\n\n    /** Template */\n    _template: function() {\n        return  '<div class=\"ui-select-library\">' +\n                    '<div class=\"library ui-margin-bottom\">' +\n                        '<span class=\"library-title\">Select Library</span>' +\n                        '<span class=\"library-select\"/>' +\n                    '</div>' +\n                '</div>';\n    }\n});\n\nreturn {\n    View: View\n}\n\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-library.js","define([ 'utils/utils' ], function( Utils ) {\n    var View = Backbone.View.extend({\n        initialize : function( options ) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model({\n                id       : Utils.uid(),\n                min      : null,\n                max      : null,\n                step     : null,\n                precise  : false,\n                split    : 10000,\n                value    : null,\n                onchange : function(){}\n            }).set( options );\n\n            // create new element\n            this.setElement( this._template() );\n            this.$el.attr( 'id', this.model.id );\n            this.$text   = this.$( '.ui-form-slider-text' );\n            this.$slider = this.$( '.ui-form-slider-element' );\n\n            // add text field event\n            var pressed = [];\n            this.$text.on( 'change', function () {\n                self.value( $( this ).val() );\n            }).on( 'keyup', function( e ) {\n                pressed[e.which] = false;\n            }).on( 'keydown', function ( e ) {\n                var v = e.which;\n                pressed[ v ] = true;\n                if ( self.model.get( 'is_workflow' ) && pressed[ 16 ] && v == 52 ) {\n                    self.value( '$' );\n                    event.preventDefault();\n                } else if (!( v == 8 || v == 9 || v == 13 || v == 37 || v == 39 || ( v >= 48 && v <= 57 && !pressed[ 16 ] ) || ( v >= 96 && v <= 105 )\n                    || ( ( v == 190 || v == 110 ) && $( this ).val().indexOf( '.' ) == -1 && self.model.get( 'precise' ) )\n                    || ( ( v == 189 || v == 109 ) && $( this ).val().indexOf( '-' ) == -1 )\n                    || self._isParameter( $( this ).val() )\n                    || pressed[ 91 ] || pressed[ 17 ] ) ) {\n                    event.preventDefault();\n                }\n            });\n\n            // build slider, cannot be rebuild in render\n            var opts = this.model.attributes;\n            this.has_slider = opts.max !== null && opts.min !== null && opts.max > opts.min;\n            var step = opts.step;\n            if ( !step ) {\n                if ( opts.precise && this.has_slider ) {\n                    step = ( opts.max - opts.min ) / opts.split;\n                } else {\n                    step = 1.0;\n                }\n            }\n            if ( this.has_slider ) {\n                this.$text.addClass( 'ui-form-slider-left' );\n                this.$slider.slider( { min: opts.min, max: opts.max, step: step } )\n                            .on( 'slide', function ( event, ui ) { self.value( ui.value ) } );\n            } else {\n                this.$slider.hide();\n            }\n\n            // add listeners\n            this.listenTo( this.model, 'change', this.render, this );\n            this.render();\n        },\n\n        render: function() {\n            var value = this.model.get( 'value' );\n            this.has_slider && this.$slider.slider( 'value', value );\n            value !== this.$text.val() && this.$text.val( value );\n        },\n\n        /** Set and return the current value */\n        value : function ( new_val ) {\n            var options = this.model.attributes;\n            if ( new_val !== undefined ) {\n                if ( new_val !== null && new_val !== '' && !this._isParameter( new_val ) ) {\n                    isNaN( new_val ) && ( new_val = 0 );\n                    !options.precise && ( new_val = Math.round( new_val ) );\n                    options.max !== null && ( new_val = Math.min( new_val, options.max ) );\n                    options.min !== null && ( new_val = Math.max( new_val, options.min ) );\n                }\n                this.model.set( 'value', new_val );\n                this.model.trigger( 'change' );\n                options.onchange( new_val );\n            }\n            return this.model.get( 'value' );\n        },\n\n        /** Return true if the field contains a workflow parameter i.e. $('name') */\n        _isParameter: function( value ) {\n            return this.model.get( 'is_workflow' ) && String( value ).substring( 0, 1 ) === '$';\n        },\n\n        /** Slider template */\n        _template: function() {\n            return  '<div class=\"ui-form-slider\">' +\n                        '<input class=\"ui-form-slider-text\" type=\"text\"/>' +\n                        '<div class=\"ui-form-slider-element\"/>' +\n                    '</div>';\n        }\n    });\n\n    return {\n        View : View\n    };\n});\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-slider.js","var jQuery = require( 'jquery' ),\n    $ = jQuery,\n    QUERY_STRING = require( 'utils/query-string-parsing' ),\n    Ui = require( 'mvc/ui/ui-misc' );\n\nvar Router = Backbone.Router.extend({\n    // TODO: not many client routes at this point - fill and remove from server.\n    // since we're at root here, this may be the last to be routed entirely on the client.\n    initialize : function( page, options ){\n        this.page = page;\n        this.options = options;\n    },\n\n    /** helper to push a new navigation state */\n    push: function( url, data ) {\n        data = data || {};\n        data.__identifer = Math.random().toString( 36 ).substr( 2 );\n        if ( !$.isEmptyObject( data ) ) {\n            url += url.indexOf( '?' ) == -1 ? '?' : '&';\n            url += $.param( data , true );\n        }\n        Galaxy.params = {};\n        this.navigate( url, { 'trigger': true } );\n    },\n\n    /** override to parse query string into obj and send to each route */\n    execute: function( callback, args, name ){\n        Galaxy.debug( 'router execute:', callback, args, name );\n        var queryObj = QUERY_STRING.parse( args.pop() );\n        args.push( queryObj );\n        if( callback ){\n            if ( this.authenticate( args, name ) ) {\n                callback.apply( this, args );\n            } else {\n                this.access_denied();\n            }\n        }\n    },\n\n    authenticate: function( args, name ) {\n        return true;\n    },\n\n    access_denied: function() {\n        this.page.display( new Ui.Message( { status: 'danger', message: 'You must be logged in with proper credentials to make this request.', persistent: true } ) );\n    }\n});\n\nmodule.exports = Router\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/layout/router.js","/** Generic form view */\ndefine( [ 'mvc/form/form-view', 'mvc/ui/ui-misc' ], function( Form, Ui ) {\n\n    var View = Backbone.View.extend({\n\n        initialize: function( options ) {\n            this.model = new Backbone.Model( options );\n            this.url = this.model.get( 'url' );\n            this.redirect = this.model.get( 'redirect' );\n            this.setElement( '<div/>' );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            $.ajax({\n                url     : Galaxy.root + this.url,\n                type    : 'GET'\n            }).done( function( response ) {\n                var options = $.extend( {}, self.model.attributes, response );\n                var form = new Form({\n                    title  : options.title,\n                    message: options.message,\n                    status : options.status || 'warning',\n                    icon   : options.icon,\n                    inputs : options.inputs,\n                    buttons: {\n                        'submit': new Ui.Button({\n                            tooltip  : options.submit_tooltip,\n                            title    : options.submit_title || 'Save',\n                            icon     : options.submit_icon || 'fa-save',\n                            cls      : 'btn btn-primary ui-clear-float',\n                            onclick  : function() { self._submit( form ) }\n                        })\n                    }\n                });\n                self.$el.empty().append( form.$el );\n            }).fail( function( response ) {\n                self.$el.empty().append( new Ui.Message({\n                    message     : 'Failed to load resource ' + self.url + '.',\n                    status      : 'danger',\n                    persistent  : true\n                }).$el );\n            });\n        },\n\n        _submit: function( form ) {\n            var self = this;\n            $.ajax( {\n                url         : Galaxy.root + self.url,\n                data        : JSON.stringify( form.data.create() ),\n                type        : 'PUT',\n                contentType : 'application/json'\n            }).done( function( response ) {\n                var success_message = { message: response.message, status: 'success', persistent: false };\n                if ( self.redirect ) {\n                    window.location = Galaxy.root + self.redirect + '?' + $.param( success_message );\n                } else {\n                    form.data.matchModel( response, function ( input, input_id ) {\n                        form.field_list[ input_id ].value( input.value );\n                    });\n                    self._showMessage( form, success_message );\n                }\n            }).fail( function( response ) {\n                self._showMessage( form, { message: response.responseJSON.err_msg, status: 'danger', persistent: false } );\n            });\n        },\n\n        _showMessage: function( form, options ) {\n            var $panel = form.$el.parents().filter(function() {\n                return [ 'auto', 'scroll' ].indexOf( $( this ).css( 'overflow' ) ) != -1;\n            }).first();\n            $panel.animate( { scrollTop : 0 }, 500 );\n            form.message.update( options );\n        }\n    });\n\n    return {\n        View  : View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-wrapper.js","var _l = require( 'utils/localization' );\n\nvar AdminPanel = Backbone.View.extend({\n    initialize: function( page, options ) {\n        var self = this;\n        this.page       = page;\n        this.root       = options.root;\n        this.config     = options.config;\n        this.settings   = options.settings;\n        this.message    = options.message;\n        this.status     = options.status;\n        this.model = new Backbone.Model({\n            title   : _l( 'Administration' )\n        });\n        this.categories = new Backbone.Collection([{\n            title : 'Server',\n            items : [ {\n                title   : 'Data types registry',\n                url     : 'admin/view_datatypes_registry'\n            },{\n                title   : 'Data tables registry',\n                url     : 'admin/view_tool_data_tables'\n            },{\n                title   : 'Display applications',\n                url     : 'admin/display_applications'\n            },{\n                title   : 'Manage jobs',\n                url     : 'admin/jobs'\n            },{\n                title   : 'Local data',\n                url     : 'data_manager'\n            } ]\n        },{\n            title : 'User Management',\n            items : [ {\n                title   : 'Users',\n                url     : 'admin/users',\n                target  : '__use_router__'\n            },{\n                title   : 'Quotas',\n                url     : 'admin/quotas',\n                target  : '__use_router__',\n                enabled : self.config.enable_quotas\n            },{\n                title   : 'Groups',\n                url     : 'admin/groups',\n                target  : '__use_router__'\n            },{\n                title   : 'Roles',\n                url     : 'admin/roles',\n                target  : '__use_router__'\n            },{\n                title   : 'Forms',\n                url     : 'admin/forms',\n                target  : '__use_router__'\n            },{\n                title   : 'API keys',\n                url     : 'userskeys/all_users'\n            },{\n                title   : 'Impersonate a user',\n                url     : 'admin/impersonate',\n                enabled : self.config.allow_user_impersonation\n            }]\n        },{\n            title : 'Tools and Tool Shed',\n            items : [ {\n                title   : 'Search Tool Shed',\n                url     : 'admin_toolshed/browse_tool_sheds',\n                enabled : self.settings.is_tool_shed_installed\n            },{\n                title   : 'Search Tool Shed (Beta)',\n                url     : 'admin_toolshed/browse_toolsheds',\n                enabled : self.settings.is_tool_shed_installed && self.config.enable_beta_ts_api_install\n            },{\n                title   : 'Monitor installing repositories',\n                url     : 'admin_toolshed/monitor_repository_installation?installing_repository_ids=' + self.settings.installing_repository_ids,\n                enabled : self.settings.installing_repository_ids\n            },{\n                title   : 'Manage installed tools',\n                url     : 'admin_toolshed/browse_repositories',\n                enabled : self.settings.is_repo_installed\n            },{\n                title   : 'Reset metadata',\n                url     : 'admin_toolshed/reset_metadata_on_selected_installed_repositories',\n                enabled : self.settings.is_repo_installed\n            },{\n                title   : 'Download local tool',\n                url     : 'admin/package_tool'\n            },{\n                title   : 'Tool lineage',\n                url     : 'admin/tool_versions',\n                target  : '__use_router__'\n            },{\n                title   : 'Reload a tool\\'s configuration',\n                url     : 'admin/reload_tool'\n            },{\n                title   : 'Review tool migration stages',\n                url     : 'admin/review_tool_migration_stages'\n            },{\n                title   : 'View Tool Error Logs',\n                url     : 'admin/tool_errors'\n            },{\n                title   : 'Manage Display Whitelist',\n                url     : 'admin/sanitize_whitelist'\n            },{\n                title   : 'Manage Tool Dependencies',\n                url     : 'admin/manage_tool_dependencies'\n            } ]\n        }]);\n        this.setElement( this._template() );\n    },\n\n    render : function() {\n        var self = this;\n        this.$el.empty();\n        this.categories.each( function( category ) {\n            var $section = $( self._templateSection( category.attributes ) );\n            var $entries = $section.find( '.ui-side-section-body' );\n            _.each( category.get( 'items' ), function( item ) {\n                if ( item.enabled === undefined || item.enabled ) {\n                    var $link = $( '<a/>' ).attr( { href : self.root + item.url } ).text( _l( item.title ) );\n                    if ( item.target == '__use_router__' ) {\n                        $link.on( 'click', function( e ) { e.preventDefault(); self.page.router.push( item.url ); } );\n                    } else {\n                        $link.attr( 'target', 'galaxy_main' );\n                    }\n                    $entries.append( $( '<div/>' ).addClass( 'ui-side-section-body-title' ).append( $link ) );\n                }\n            });\n            self.$el.append( $section );\n        });\n        this.page.$( '#galaxy_main' ).prop( 'src', this.root + 'admin/center?message=' + this.message + '&status=' + this.status );\n    },\n\n    _templateSection : function( options ) {\n        return [\n            '<div>',\n                '<div class=\"ui-side-section-title\">' + _l( options.title ) + '</div>',\n                '<div class=\"ui-side-section-body\"/>',\n            '</div>'\n        ].join('');\n    },\n\n    _template : function() {\n        return '<div class=\"ui-side-panel\"/>';\n    },\n\n    toString : function() { return 'adminPanel' }\n});\n\nmodule.exports = AdminPanel;\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/apps/panels/admin-panel.js"],"sourceRoot":""}
=======
{"version":3,"sources":["webpack:///admin.bundled.js","webpack:///./galaxy/scripts/mvc/ui/ui-buttons.js","webpack:///./galaxy/scripts/apps/admin.js","webpack:///./galaxy/scripts/apps/panels/admin-panel.js","webpack:///./galaxy/scripts/mvc/grid/grid-view.js","webpack:///./galaxy/scripts/mvc/ui/ui-select-default.js","webpack:///./galaxy/scripts/mvc/ui/ui-options.js","webpack:///./galaxy/scripts/mvc/ui/ui-list.js","webpack:///./galaxy/scripts/mvc/ui/popup-menu.js","webpack:///./galaxy/scripts/mvc/ui/ui-table.js","webpack:///./galaxy/scripts/mvc/form/form-data.js","webpack:///./galaxy/scripts/mvc/grid/grid-model.js","webpack:///./galaxy/scripts/mvc/grid/grid-template.js","webpack:///./galaxy/scripts/mvc/ui/ui-slider.js","webpack:///./galaxy/scripts/mvc/ui/ui-drilldown.js","webpack:///./galaxy/scripts/mvc/form/form-section.js","webpack:///./galaxy/scripts/mvc/form/form-repeat.js","webpack:///./galaxy/scripts/mvc/form/form-input.js","webpack:///./galaxy/scripts/mvc/form/form-parameters.js","webpack:///./galaxy/scripts/mvc/ui/ui-select-content.js","webpack:///./galaxy/scripts/mvc/ui/ui-select-library.js","webpack:///./galaxy/scripts/mvc/ui/ui-select-ftp.js","webpack:///./galaxy/scripts/mvc/ui/ui-select-genomespace.js","webpack:///./galaxy/scripts/mvc/tool/tool-genomespace.js","webpack:///./galaxy/scripts/mvc/ui/ui-color-picker.js","webpack:///./galaxy/scripts/layout/router.js","webpack:///./galaxy/scripts/mvc/ui/ui-misc.js","webpack:///./galaxy/scripts/mvc/form/form-wrapper.js","webpack:///./galaxy/scripts/mvc/ui/ui-portlet.js","webpack:///./galaxy/scripts/mvc/form/form-view.js"],"names":["webpackJsonp","10","module","exports","__webpack_require__","Backbone","$","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","Utils","ButtonDefault","View","extend","initialize","options","this","model","Model","id","uid","title","icon","cls","wait","wait_text","wait_cls","disabled","percentage","set","setElement","attr","append","$icon","$title","$progress","$progress_bar","listenTo","render","self","attributes","$el","removeClass","addClass","off","on","hide","onclick","tooltip","placement","css","width","prop","html","show","disable","enable","unwait","setIcon","ButtonLink","href","target","ButtonCheck","icons","value","onchange","get","new_val","total","ButtonIcon","$button","ButtonMenu","$menu","pull","onunload","visible","tag","collection","Collection","$root","display","where","length","e","preventDefault","remove","each","submodel","suboptions","$link","divider","addMenu","add","merge","apply","call","158","_","jQuery","GalaxyApp","AdminPanel","FormWrapper","GridView","QueryStringParsing","Router","Page","window","app","bootstrapped","Galaxy","debug","AdminRouter","routes","(/)admin(/)users","(/)admin(/)roles","(/)admin(/)groups","(/)admin(/)tool_versions","(/)admin(/)quotas","(/)admin(/)repositories","(/)admin(/)forms","(/)admin(/)form(/)(:form_id)","authenticate","args","name","user","show_users","page","url_base","root","url_data","params","dict_format","show_roles","show_groups","show_repositories","show_tool_versions","show_quotas","show_forms","show_form","form_id","form_defs","reset_user_password","url","submit_title","redirect","manage_roles_and_groups_for_user","manage_users_and_groups_for_role","manage_users_and_roles_for_group","manage_users_and_groups_for_quota","create_role","create_group","create_quota","rename_role","rename_group","rename_quota","edit_quota","set_quota_default","create_form","edit_form","config","active_view","setWindowTitle","Left","159","_l","settings","message","status","categories","items","enabled","enable_quotas","allow_user_impersonation","is_tool_shed_installed","enable_beta_ts_api_install","installing_repository_ids","is_repo_installed","_template","empty","category","$section","_templateSection","$entries","find","item","text","router","push","join","toString","16","ajaxSettings","traditional","GridModel","Templates","PopupMenu","grid","grid_config","add_tag_to_grid_filter","tag_name","tag_value","is","slideToggle","add_filter_condition","filters","v","k","ajax","param","success","response","embedded","init_grid","use_panels","padding","overflow","handle_refresh","refresh_frames","inArray","top","currHistoryPanel","loadCurrentHistory","allow_title_display","replace","header","body","footer","use_hide_message","setTimeout","init_grid_elements","init_grid_controls","init_refresh_on_change","click","submit_operation","select","keyup","set_sort_condition","submit","column_key","text_input_obj","text_input","val","parent","remove_filter_condition","set_categorical_filter","check_all_items","checkboxes","check_count","update_checked","filter","change","rating","set_page","execute","index","button","popup","operation","_add_operation","operation_config","label","allowed","allow_popup","addItem","url_args","confirmation_text","confirm","func","encode_id","findItemByHtml","add_filter","t","filter_element","go_page_one","remove_filter","col_key","cur_sort","new_sort","indexOf","substring","sort_arrow","new_value","category_filter","cur_value","trim","filter_value","new_page","page_num","parseInt","split","cur_page","children","operation_button","operation_name","findWhere","operations","item_ids","check","state","c","href_parts","href_parms_str","href_parms","toLowerCase","location","get_url_data","can_async_op","update_grid","go_to","async","advanced_search","method","type","data","error","alert","response_text","insert","json","parseJSON","complete","17","Buttons","data2","error_text","empty_text","multiple","searchable","optional","readonly","individual","pagesize","_changeData","_changeDisabled","_changeWait","_changeVisible","_changeValue","_renderSearchable","_renderClassic","$select","_getValue","trigger","$dropdown","$resize","$resize_icon","event","currentY","pageY","currentHeight","height","minHeight","Math","max","select2","all_button","option","prepend","_match","term","String","toUpperCase","order","tags","matched_tags","closeOnSelect","query","q","results","found","callback","slice","more","formatResult","result","escape","reduce","memo","_setValue","isArray","first","exists","d","sorter","keep","sort","update","setOnChange","selected","a","b","isEmpty","18","Base","$message","$options","_templateOptions","_templateOption","_messageShow","values","BaseIcons","pair","Radio","prototype","Checkbox","RadioButton","closest","19","Portlet","Ui","Message","portlet","Select","i","v_id","v_name","_refresh","lst","_templateRow","20","menu","_renderAndShow","clickEvent","appendTo","_getShownPosition","_setUpCloseBehavior","position","template","li","map","checked","menuWidth","x","pageX","min","document","scrollLeft","left","closePopup","err","contents","one","splice","removeItem","findIndexByHtml","has","create","make_popupmenu","button_element","initial_options","convertedOptions","optionVal","optionKey","newOption","convertLinksToOptions","$parent","selector","elem","linkHref","linkTarget","confirmText","fromExistingDom","$buttonElement","$menuElement","menuElementLinkSelector","make_popup_menus","menuSelector","buttonSelectorBuildFn","popupMenusCreated","fromDom","22","content","ondblclick","onconfirm","selectable","cls_tr","$thead","$tbody","$tmessage","row","_row","row_count","events","dblclick","addHeader","appendHeader","align","wrapper","fade","_commit","del","delAll","before","after","size","fadeIn","_onclick","old_value","_ondblclick","23","Manager","checksum","sum","section","field","field_list","JSON","stringify","collapsed","flat_id","input_id","input_value","flat_dict","result_dict","element_list","convert","identifier","head","node","input","block_indices","block_prefix","block_label","pos","substr","test_param","selectedCase","matchCase","flat","ignore","collapsible_value","payload","p_id","dict","_iterate","match","matchModel","visitInputs","inputs","matchResponse","search","new_id","separator","Array","child","hasClass","input_list","truevalue","falsevalue","cases","prefix","context","key","cache","j","emit","27","defaults","async_ops","categorical_filters","sort_key","show_item_checkboxes","num_pages","op","cur_val","condition","condition_index","pairs","get_url","28","tmpl","grid_header","grid_table","info_text","global_actions","show_popup","action","grid_filters","columns","column","extra","num_rows_rendered","encoded_id","current_item_id","nowrap","column_settings","column_config","link","attach_popup","label_id_prefix","use_paging","num_page_links","cur_page_num","page_link_range","min_page","min_offset","max_offset","max_range","max_page","page_index","allow_multiple","found_global","global_operation","legend","default_filter_dict","advanced_search_display","show_advanced_search_link","filterable","f_key","d_key","standard_search_display","grid_column_filter","column_label","is_text","temp_column","column_filter","seperator","cf_label","cf","cf_key","cf_arg","filter_key","sanitize","29","step","precise","$text","$slider","pressed","which","_isParameter","opts","has_slider","slider","ui","isNaN","round","30","Options","header_index","list","element","_setState","header_id","is_expanded","$subgroup","attach","iterate","$tmpl","level","has_options","new_header","$group","31","Repeat","InputElement","Parameters","parameters","input_def","_addConditional","_addRepeat","_addSection","_addRow","case_def","section_row","nonhidden","hidden","sub_section","_append","sub_section_id","block_index","repeat","ondel","onnew","n_cache","default","hideOptions","input_element","help","collapsible","collapsible_button","expanded","expand","hide_label","text_value","collapsible_preview","argument","color","style","backdrop","fixed","32","button_new","$list","button_delete","hideOperation","33","app_options","text_enable","text_disable","cls_enable","cls_disable","always_refresh","$field","$info","$preview","$collapsible","$collapsible_text","$collapsible_icon","$title_text","$error_text","$error","$backdrop","reset","help_text","help_argument","collapsible_state","34","SelectContent","SelectLibrary","SelectFtp","SelectGenomeSpace","ColorPicker","types","password","data_column","genomebuild","data_collection","integer","float","boolean","drill_down","hidden_data","baseurl","library_data","ftpfile","upload","genomespacefile","fieldClass","_fieldSelect","_fieldText","_fieldData","extensions","flavor","is_workflow","SelectClass","_fieldDrilldown","Drilldown","area","str_value","Input","placeholder","datalist","_fieldSlider","Slider","_fieldHidden","Hidden","info","_fieldBoolean","_fieldColor","_fieldLibrary","_fieldFtp","_fieldGenomeSpace","_fieldUpload","Upload","35","Batch","DISABLED","ENABLED","LINKED","Configurations","src","batch","data_multiple","workflow_data","workflow_data_multiple","workflow_data_collection","module_data","module_data_collection","src_labels","hda","hdca","pagelimit","statustimer","button_product","$batch_div","$batch","linked","clone","lastenter","_handleDrop","history","_changeCurrent","_changeType","current","id_list","fields","_batch","details","hid","$batchfield","batchmode","button_type","config_id","textify","button_data","button_width","margin-left","select_options","ev","drop_data","parse","originalEvent","dataTransfer","getData","new_src","history_content_type","current_value","_handleDropStatus","map_over_type","36","Table","List","Libraries","LibraryDatasets","library_id","fetch","libraries","datasets","library_select","dataset_list","37","ftpfile_list","38","GenomespaceBrowser","browse_button","browseGenomeSpace","filename_textbox","token_textbox","openFileBrowser","successCallback","destination","token","39","GS_UI_URL","genomespace_ui_url","GS_UPLOAD_URL","newWin","open","successCalBack","addEventListener","focus","setCallbackOnGSUploadError","40","colors","standard","base","theme","$panel","$view","$value","$header","_build","$boxes","fadeOut","_templateCheck","rgb","hex","_content","line_def","$content","_templateContent","$line","$box","_templateBox","bottom","44","QUERY_STRING","__identifer","random","isEmptyObject","navigate","queryObj","pop","access_denied","persistent","5","Modal","Label","tagName","new_title","messageForDisplay","timeout","clearTimeout","UnescapedMessage","autocomplete","source","request","_onchange","attr_name","removeAttr","$hidden","$file","$wait","_readFile","file","files","reader","FileReader","onload","readAsText","Button","58","Form","done","form","buttons","submit_tooltip","submit_icon","_submit","fail","contentType","success_message","_showMessage","responseJSON","err_msg","parents","animate","scrollTop","8","scrollable","nopadding","onchange_title","$body","$title_icon","$buttons","$operations","collapse","make_text_editable","on_finish","enableButton","disableButton","showOperation","setOperation","9","FormSection","FormData","initial_errors","hide_operations","new_model","isEqual","new_options","opt","active","is_dynamic","highlight","silent","offset","errors","error_messages","_renderForm","current_check","refresh_on_change","new_check"],"mappings":"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","file":"admin.bundled.js","sourcesContent":["webpackJsonp([3],{\n\n/***/ 10:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** This module contains all button views. */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n    /** This renders the default button which is used e.g. at the bottom of the upload modal. */\n    var ButtonDefault = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                title: \"\",\n                icon: \"\",\n                cls: \"btn btn-default\",\n                wait: false,\n                wait_text: \"Sending...\",\n                wait_cls: \"btn btn-info\",\n                disabled: false,\n                percentage: -1\n            }).set(options);\n            this.setElement($(\"<button/>\").attr(\"type\", \"button\").append(this.$icon = $(\"<i/>\")).append(this.$title = $(\"<span/>\")).append(this.$progress = $(\"<div/>\").append(this.$progress_bar = $(\"<div/>\"))));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass().addClass(\"ui-button-default\").addClass(options.disabled && \"disabled\").attr(\"id\", options.id).attr(\"disabled\", options.disabled).off(\"click\").on(\"click\", function () {\n                $(\".tooltip\").hide();\n                options.onclick && !self.disabled && options.onclick();\n            }).tooltip({ title: options.tooltip, placement: \"bottom\" });\n            this.$progress.addClass(\"progress\").css(\"display\", options.percentage !== -1 ? \"block\" : \"none\");\n            this.$progress_bar.addClass(\"progress-bar\").css({ width: options.percentage + \"%\" });\n            this.$icon.removeClass().addClass(\"icon fa\");\n            this.$title.removeClass().addClass(\"title\");\n            if (options.wait) {\n                this.$el.addClass(options.wait_cls).prop(\"disabled\", true);\n                this.$icon.addClass(\"fa-spinner fa-spin ui-margin-right\");\n                this.$title.html(options.wait_text);\n            } else {\n                this.$el.addClass(options.cls);\n                this.$icon.addClass(options.icon);\n                this.$title.html(options.title);\n                options.icon && options.title && this.$icon.addClass(\"ui-margin-right\");\n            }\n        },\n\n        /** Show button */\n        show: function show() {\n            this.$el.show();\n        },\n\n        /** Hide button */\n        hide: function hide() {\n            this.$el.hide();\n        },\n\n        /** Disable button */\n        disable: function disable() {\n            this.model.set(\"disabled\", true);\n        },\n\n        /** Enable button */\n        enable: function enable() {\n            this.model.set(\"disabled\", false);\n        },\n\n        /** Show spinner to indicate that the button is not ready to be clicked */\n        wait: function wait() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner to indicate that the button is ready to be clicked */\n        unwait: function unwait() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Change icon */\n        setIcon: function setIcon(icon) {\n            this.model.set(\"icon\", icon);\n        }\n    });\n\n    /** This button allows the right-click/open-in-new-tab feature, its used e.g. for panel buttons. */\n    var ButtonLink = ButtonDefault.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                title: \"\",\n                icon: \"\",\n                cls: \"\"\n            }).set(options);\n            this.setElement($(\"<a/>\").append(this.$icon = $(\"<span/>\")));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function render() {\n            var options = this.model.attributes;\n            this.$el.removeClass().addClass(options.cls).attr({\n                id: options.id,\n                href: options.href || \"javascript:void(0)\",\n                title: options.title,\n                target: options.target || \"_top\",\n                disabled: options.disabled\n            }).tooltip({ placement: \"bottom\" }).off(\"click\").on(\"click\", function () {\n                options.onclick && !options.disabled && options.onclick();\n            });\n            this.$icon.removeClass().addClass(options.icon);\n        }\n    });\n\n    /** The check button is used in the tool form and allows to distinguish between multiple states e.g. all, partially and nothing selected. */\n    var ButtonCheck = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                title: \"Select/Unselect all\",\n                icons: [\"fa-square-o\", \"fa-minus-square-o\", \"fa-check-square-o\"],\n                value: 0,\n                onchange: function onchange() {}\n            }).set(options);\n            this.setElement($(\"<div/>\").append(this.$icon = $(\"<span/>\")).append(this.$title = $(\"<span/>\")));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function render(options) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.addClass(\"ui-button-check\").off(\"click\").on(\"click\", function () {\n                self.model.set(\"value\", self.model.get(\"value\") === 0 && 2 || 0);\n                options.onclick && options.onclick();\n            });\n            this.$title.html(options.title);\n            this.$icon.removeClass().addClass(\"icon fa ui-margin-right\").addClass(options.icons[options.value]);\n        },\n\n        /* Sets a new value and/or returns the value.\n        * @param{Integer}   new_val - Set a new value 0=unchecked, 1=partial and 2=checked.\n        * OR:\n        * @param{Integer}   new_val - Number of selected options.\n        * @param{Integer}   total   - Total number of available options.\n        */\n        value: function value(new_val, total) {\n            if (new_val !== undefined) {\n                if (total && new_val !== 0) {\n                    new_val = new_val !== total && 1 || 2;\n                }\n                this.model.set(\"value\", new_val);\n                this.model.get(\"onchange\")(this.model.get(\"value\"));\n            }\n            return this.model.get(\"value\");\n        }\n    });\n\n    /** This renders a differently styled, more compact button version. */\n    var ButtonIcon = ButtonDefault.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                title: \"\",\n                icon: \"\",\n                cls: \"ui-button-icon\",\n                disabled: false\n            }).set(options);\n            this.setElement($(\"<div/>\").append(this.$button = $(\"<div/>\").append(this.$icon = $(\"<i/>\")).append(this.$title = $(\"<span/>\"))));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function render(options) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass().addClass(options.cls).addClass(options.disabled && \"disabled\").attr(\"disabled\", options.disabled).attr(\"id\", options.id).off(\"click\").on(\"click\", function () {\n                $(\".tooltip\").hide();\n                !options.disabled && options.onclick && options.onclick();\n            });\n            this.$button.addClass(\"button\").tooltip({ title: options.tooltip, placement: \"bottom\" });\n            this.$icon.removeClass().addClass(\"icon fa\").addClass(options.icon);\n            this.$title.addClass(\"title\").html(options.title);\n            options.icon && options.title && this.$icon.addClass(\"ui-margin-right\");\n        }\n    });\n\n    /** This class creates a button with dropdown menu. */\n    var ButtonMenu = ButtonDefault.extend({\n        $menu: null,\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                id: \"\",\n                title: \"\",\n                pull: \"right\",\n                icon: null,\n                onclick: null,\n                cls: \"ui-button-icon ui-button-menu\",\n                tooltip: \"\",\n                target: \"\",\n                href: \"\",\n                onunload: null,\n                visible: true,\n                tag: \"\"\n            }).set(options);\n            this.collection = new Backbone.Collection();\n            this.setElement($(\"<div/>\").append(this.$root = $(\"<div/>\").append(this.$icon = $(\"<i/>\")).append(this.$title = $(\"<span/>\"))));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.listenTo(this.collection, \"change add remove reset\", this.render, this);\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass().addClass(\"dropdown\").addClass(options.cls).attr(\"id\", options.id).css({\n                display: options.visible && this.collection.where({ visible: true }).length > 0 ? \"block\" : \"none\"\n            });\n            this.$root.addClass(\"root button dropdown-toggle\").attr(\"data-toggle\", \"dropdown\").tooltip({ title: options.tooltip, placement: \"bottom\" }).off(\"click\").on(\"click\", function (e) {\n                $(\".tooltip\").hide();\n                e.preventDefault();\n                options.onclick && options.onclick();\n            });\n            this.$icon.removeClass().addClass(\"icon fa\").addClass(options.icon);\n            this.$title.removeClass().addClass(\"title\").html(options.title);\n            options.icon && options.title && this.$icon.addClass(\"ui-margin-right\");\n            this.$menu && this.$menu.remove();\n            if (this.collection.length > 0) {\n                this.$menu = $(\"<ul/>\").addClass(\"menu dropdown-menu\").addClass(\"pull-\" + self.model.get(\"pull\")).attr(\"role\", \"menu\");\n                this.$el.append(this.$menu);\n            }\n            this.collection.each(function (submodel) {\n                var suboptions = submodel.attributes;\n                if (suboptions.visible) {\n                    var $link = $(\"<a/>\").addClass(\"dropdown-item\").attr({\n                        href: suboptions.href,\n                        target: suboptions.target\n                    }).append($(\"<i/>\").addClass(\"fa\").addClass(suboptions.icon).css(\"display\", suboptions.icon ? \"inline-block\" : \"none\")).append(suboptions.title).on(\"click\", function (e) {\n                        if (suboptions.onclick) {\n                            e.preventDefault();\n                            suboptions.onclick();\n                        }\n                    });\n                    self.$menu.append($(\"<li/>\").append($link));\n                    suboptions.divider && self.$menu.append($(\"<li/>\").addClass(\"divider\"));\n                }\n            });\n        },\n\n        /** Add a new menu item */\n        addMenu: function addMenu(options) {\n            this.collection.add(Utils.merge(options, {\n                title: \"\",\n                target: \"\",\n                href: \"\",\n                onclick: null,\n                divider: false,\n                visible: true,\n                icon: null,\n                cls: \"button-menu btn-group\"\n            }));\n        }\n    });\n\n    return {\n        ButtonDefault: ButtonDefault,\n        ButtonLink: ButtonLink,\n        ButtonIcon: ButtonIcon,\n        ButtonCheck: ButtonCheck,\n        ButtonMenu: ButtonMenu\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 158:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(_) {\n\nvar jQuery = __webpack_require__(0),\n    $ = jQuery,\n    GalaxyApp = __webpack_require__(42).GalaxyApp,\n    AdminPanel = __webpack_require__(159),\n    FormWrapper = __webpack_require__(58),\n    GridView = __webpack_require__(16),\n    Ui = __webpack_require__(5),\n    QueryStringParsing = __webpack_require__(11),\n    Router = __webpack_require__(44),\n    Utils = __webpack_require__(3),\n    Page = __webpack_require__(43);\n\nwindow.app = function app(options, bootstrapped) {\n    window.Galaxy = new GalaxyApp(options, bootstrapped);\n    Galaxy.debug(\"admin app\");\n\n    /** Routes */\n    var AdminRouter = Router.extend({\n        routes: {\n            \"(/)admin(/)users\": \"show_users\",\n            \"(/)admin(/)roles\": \"show_roles\",\n            \"(/)admin(/)groups\": \"show_groups\",\n            \"(/)admin(/)tool_versions\": \"show_tool_versions\",\n            \"(/)admin(/)quotas\": \"show_quotas\",\n            \"(/)admin(/)repositories\": \"show_repositories\",\n            \"(/)admin(/)forms\": \"show_forms\",\n            \"(/)admin(/)form(/)(:form_id)\": \"show_form\"\n        },\n\n        authenticate: function authenticate(args, name) {\n            return Galaxy.user && Galaxy.user.id && Galaxy.user.get(\"is_admin\");\n        },\n\n        show_users: function show_users() {\n            this.page.display(new GridView({\n                url_base: Galaxy.root + \"admin/users_list\",\n                url_data: Galaxy.params,\n                dict_format: true\n            }));\n        },\n\n        show_roles: function show_roles() {\n            this.page.display(new GridView({\n                url_base: Galaxy.root + \"admin/roles_list\",\n                url_data: Galaxy.params,\n                dict_format: true\n            }));\n        },\n\n        show_groups: function show_groups() {\n            this.page.display(new GridView({\n                url_base: Galaxy.root + \"admin/groups_list\",\n                url_data: Galaxy.params,\n                dict_format: true\n            }));\n        },\n\n        show_repositories: function show_repositories() {\n            this.page.display(new GridView({\n                url_base: Galaxy.root + \"admin_toolshed/browse_repositories\",\n                url_data: Galaxy.params,\n                dict_format: true\n            }));\n        },\n\n        show_tool_versions: function show_tool_versions() {\n            this.page.display(new GridView({\n                url_base: Galaxy.root + \"admin/tool_versions_list\",\n                url_data: Galaxy.params,\n                dict_format: true\n            }));\n        },\n\n        show_quotas: function show_quotas() {\n            this.page.display(new GridView({\n                url_base: Galaxy.root + \"admin/quotas_list\",\n                url_data: Galaxy.params,\n                dict_format: true\n            }));\n        },\n\n        show_forms: function show_forms() {\n            this.page.display(new GridView({\n                url_base: Galaxy.root + \"forms/forms_list\",\n                url_data: Galaxy.params,\n                dict_format: true\n            }));\n        },\n\n        show_form: function show_form(form_id) {\n            var id = \"?id=\" + QueryStringParsing.get(\"id\");\n            var form_defs = {\n                reset_user_password: {\n                    title: \"Reset passwords\",\n                    url: \"admin/reset_user_password\" + id,\n                    icon: \"fa-user\",\n                    submit_title: \"Save new password\",\n                    redirect: \"admin/users\"\n                },\n                manage_roles_and_groups_for_user: {\n                    url: \"admin/manage_roles_and_groups_for_user\" + id,\n                    icon: \"fa-users\",\n                    redirect: \"admin/users\"\n                },\n                manage_users_and_groups_for_role: {\n                    url: \"admin/manage_users_and_groups_for_role\" + id,\n                    redirect: \"admin/roles\"\n                },\n                manage_users_and_roles_for_group: {\n                    url: \"admin/manage_users_and_roles_for_group\" + id,\n                    redirect: \"admin/groups\"\n                },\n                manage_users_and_groups_for_quota: {\n                    url: \"admin/manage_users_and_groups_for_quota\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                create_role: {\n                    url: \"admin/create_role\",\n                    redirect: \"admin/roles\"\n                },\n                create_group: {\n                    url: \"admin/create_group\",\n                    redirect: \"admin/groups\"\n                },\n                create_quota: {\n                    url: \"admin/create_quota\",\n                    redirect: \"admin/quotas\"\n                },\n                rename_role: {\n                    url: \"admin/rename_role\" + id,\n                    redirect: \"admin/roles\"\n                },\n                rename_group: {\n                    url: \"admin/rename_group\" + id,\n                    redirect: \"admin/groups\"\n                },\n                rename_quota: {\n                    url: \"admin/rename_quota\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                edit_quota: {\n                    url: \"admin/edit_quota\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                set_quota_default: {\n                    url: \"admin/set_quota_default\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                create_form: {\n                    url: \"forms/create_form\",\n                    redirect: \"admin/forms\"\n                },\n                edit_form: {\n                    url: \"forms/edit_form\" + id,\n                    redirect: \"admin/forms\"\n                }\n            };\n            this.page.display(new FormWrapper.View(form_defs[form_id]));\n        }\n    });\n\n    $(function () {\n        _.extend(options.config, { active_view: \"admin\" });\n        Utils.setWindowTitle(\"Administration\");\n        Galaxy.page = new Page.View(_.extend(options, {\n            Left: AdminPanel,\n            Router: AdminRouter\n        }));\n    });\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 159:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {\n\nvar _l = __webpack_require__(4);\n\nvar AdminPanel = Backbone.View.extend({\n    initialize: function initialize(page, options) {\n        var self = this;\n        this.page = page;\n        this.root = options.root;\n        this.config = options.config;\n        this.settings = options.settings;\n        this.message = options.message;\n        this.status = options.status;\n        this.model = new Backbone.Model({\n            title: _l(\"Administration\")\n        });\n        this.categories = new Backbone.Collection([{\n            title: \"Server\",\n            items: [{\n                title: \"Data types registry\",\n                url: \"admin/view_datatypes_registry\"\n            }, {\n                title: \"Data tables registry\",\n                url: \"admin/view_tool_data_tables\"\n            }, {\n                title: \"Data libraries\",\n                url: \"library_admin/browse_libraries\"\n            }, {\n                title: \"Display applications\",\n                url: \"admin/display_applications\"\n            }, {\n                title: \"Manage jobs\",\n                url: \"admin/jobs\"\n            }, {\n                title: \"Local data\",\n                url: \"data_manager\"\n            }]\n        }, {\n            title: \"User Management\",\n            items: [{\n                title: \"Users\",\n                url: \"admin/users\",\n                target: \"__use_router__\"\n            }, {\n                title: \"Quotas\",\n                url: \"admin/quotas\",\n                target: \"__use_router__\",\n                enabled: self.config.enable_quotas\n            }, {\n                title: \"Groups\",\n                url: \"admin/groups\",\n                target: \"__use_router__\"\n            }, {\n                title: \"Roles\",\n                url: \"admin/roles\",\n                target: \"__use_router__\"\n            }, {\n                title: \"Forms\",\n                url: \"admin/forms\",\n                target: \"__use_router__\"\n            }, {\n                title: \"API keys\",\n                url: \"userskeys/all_users\"\n            }, {\n                title: \"Impersonate a user\",\n                url: \"admin/impersonate\",\n                enabled: self.config.allow_user_impersonation\n            }]\n        }, {\n            title: \"Tools and Tool Shed\",\n            items: [{\n                title: \"Search Tool Shed\",\n                url: \"admin_toolshed/browse_tool_sheds\",\n                enabled: self.settings.is_tool_shed_installed\n            }, {\n                title: \"Search Tool Shed (Beta)\",\n                url: \"admin_toolshed/browse_toolsheds\",\n                enabled: self.settings.is_tool_shed_installed && self.config.enable_beta_ts_api_install\n            }, {\n                title: \"Monitor installing repositories\",\n                url: \"admin_toolshed/monitor_repository_installation?installing_repository_ids=\" + self.settings.installing_repository_ids,\n                enabled: self.settings.installing_repository_ids\n            }, {\n                title: \"Manage installed tools\",\n                url: \"admin/repositories\",\n                enabled: self.settings.is_repo_installed,\n                target: \"__use_router__\"\n            }, {\n                title: \"Reset metadata\",\n                url: \"admin_toolshed/reset_metadata_on_selected_installed_repositories\",\n                enabled: self.settings.is_repo_installed\n            }, {\n                title: \"Download local tool\",\n                url: \"admin/package_tool\"\n            }, {\n                title: \"Tool lineage\",\n                url: \"admin/tool_versions\",\n                target: \"__use_router__\"\n            }, {\n                title: \"Reload a tool\\\"s configuration\",\n                url: \"admin/reload_tool\"\n            }, {\n                title: \"Review tool migration stages\",\n                url: \"admin/review_tool_migration_stages\"\n            }, {\n                title: \"View Tool Error Logs\",\n                url: \"admin/tool_errors\"\n            }, {\n                title: \"Manage Display Whitelist\",\n                url: \"admin/sanitize_whitelist\"\n            }, {\n                title: \"Manage Tool Dependencies\",\n                url: \"admin/manage_tool_dependencies\"\n            }]\n        }]);\n        this.setElement(this._template());\n    },\n\n    render: function render() {\n        var self = this;\n        this.$el.empty();\n        this.categories.each(function (category) {\n            var $section = $(self._templateSection(category.attributes));\n            var $entries = $section.find(\".ui-side-section-body\");\n            _.each(category.get(\"items\"), function (item) {\n                if (item.enabled === undefined || item.enabled) {\n                    var $link = $(\"<a/>\").attr({ href: self.root + item.url }).text(_l(item.title));\n                    if (item.target == \"__use_router__\") {\n                        $link.on(\"click\", function (e) {\n                            e.preventDefault();\n                            self.page.router.push(item.url);\n                        });\n                    } else {\n                        $link.attr(\"target\", \"galaxy_main\");\n                    }\n                    $entries.append($(\"<div/>\").addClass(\"ui-side-section-body-title\").append($link));\n                }\n            });\n            self.$el.append($section);\n        });\n        this.page.$(\"#galaxy_main\").prop(\"src\", this.root + \"admin/center?message=\" + this.message + \"&status=\" + this.status);\n    },\n\n    _templateSection: function _templateSection(options) {\n        return [\"<div>\", '<div class=\"ui-side-section-title\">' + _l(options.title) + \"</div>\", '<div class=\"ui-side-section-body\"/>', \"</div>\"].join(\"\");\n    },\n\n    _template: function _template() {\n        return '<div class=\"ui-side-panel\"/>';\n    },\n\n    toString: function toString() {\n        return \"adminPanel\";\n    }\n});\n\nmodule.exports = AdminPanel;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 16:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(jQuery, Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n// not appended to the identifier of a nested array.\njQuery.ajaxSettings.traditional = true;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(27), __webpack_require__(28), __webpack_require__(20)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, GridModel, Templates, PopupMenu) {\n    // grid view\n    return Backbone.View.extend({\n        // model\n        grid: null,\n\n        // Initialize\n        initialize: function initialize(grid_config) {\n            this.grid = new GridModel();\n            this.dict_format = grid_config.dict_format;\n            this.title = grid_config.title;\n            var self = this;\n            window.add_tag_to_grid_filter = function (tag_name, tag_value) {\n                // Put tag name and value together.\n                var tag = tag_name + (tag_value !== undefined && tag_value !== \"\" ? \":\" + tag_value : \"\");\n                var advanced_search = $(\"#advanced-search\").is(\":visible\");\n                if (!advanced_search) {\n                    $(\"#standard-search\").slideToggle(\"fast\");\n                    $(\"#advanced-search\").slideToggle(\"fast\");\n                }\n                self.add_filter_condition(\"tags\", tag);\n            };\n\n            // set element\n            if (this.dict_format) {\n                this.setElement(\"<div/>\");\n                if (grid_config.url_base && !grid_config.items) {\n                    var url_data = grid_config.url_data || {};\n                    _.each(grid_config.filters, function (v, k) {\n                        url_data[\"f-\" + k] = v;\n                    });\n                    $.ajax({\n                        url: grid_config.url_base + \"?\" + $.param(url_data),\n                        success: function success(response) {\n                            response.embedded = grid_config.embedded;\n                            response.filters = grid_config.filters || {};\n                            self.init_grid(response);\n                        }\n                    });\n                } else {\n                    this.init_grid(grid_config);\n                }\n            } else {\n                this.setElement(\"#grid-container\");\n                this.init_grid(grid_config);\n            }\n\n            // fix padding\n            if (grid_config.use_panels) {\n                $(\"#center\").css({\n                    padding: \"10px\",\n                    overflow: \"auto\"\n                });\n            }\n        },\n\n        // refresh frames\n        handle_refresh: function handle_refresh(refresh_frames) {\n            if (refresh_frames) {\n                if ($.inArray(\"history\", refresh_frames) > -1) {\n                    if (top.Galaxy && top.Galaxy.currHistoryPanel) {\n                        top.Galaxy.currHistoryPanel.loadCurrentHistory();\n                    }\n                }\n            }\n        },\n\n        // Initialize\n        init_grid: function init_grid(grid_config) {\n            this.grid.set(grid_config);\n\n            // get options\n            var options = this.grid.attributes;\n\n            if (this.allow_title_display && options.title) {\n                Utils.setWindowTitle(options.title);\n            }\n            // handle refresh requests\n            this.handle_refresh(options.refresh_frames);\n\n            // strip protocol and domain\n            var url = this.grid.get(\"url_base\");\n            url = url.replace(/^.*\\/\\/[^\\/]+/, \"\");\n            this.grid.set(\"url_base\", url);\n\n            // append main template\n            this.$el.html(Templates.grid(options));\n\n            // update div contents\n            this.$el.find(\"#grid-table-header\").html(Templates.header(options));\n            this.$el.find(\"#grid-table-body\").html(Templates.body(options));\n            this.$el.find(\"#grid-table-footer\").html(Templates.footer(options));\n\n            // update message\n            if (options.message) {\n                this.$el.find(\"#grid-message\").html(Templates.message(options));\n                var self = this;\n                if (options.use_hide_message) {\n                    setTimeout(function () {\n                        self.$el.find(\"#grid-message\").html(\"\");\n                    }, 5000);\n                }\n            }\n\n            // configure elements\n            this.init_grid_elements();\n            this.init_grid_controls();\n\n            // attach global event handler\n            // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n            init_refresh_on_change();\n        },\n\n        // Initialize grid controls\n        init_grid_controls: function init_grid_controls() {\n            // link\n            var self = this;\n\n            // Initialize grid operation button.\n            this.$el.find(\".operation-button\").each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    self.submit_operation(this);\n                    return false;\n                });\n            });\n\n            // Initialize text filters to select text on click and use normal font when user is typing.\n            this.$el.find(\"input[type=text]\").each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    $(this).select();\n                }).keyup(function () {\n                    $(this).css(\"font-style\", \"normal\");\n                });\n            });\n\n            // Initialize sort links.\n            this.$el.find(\".sort-link\").each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    self.set_sort_condition($(this).attr(\"sort_key\"));\n                    return false;\n                });\n            });\n\n            // Initialize text filters.\n            this.$el.find(\".text-filter-form\").each(function () {\n                $(this).off();\n                $(this).submit(function () {\n                    var column_key = $(this).attr(\"column_key\");\n                    var text_input_obj = $(\"#input-\" + column_key + \"-filter\");\n                    var text_input = text_input_obj.val();\n                    text_input_obj.val(\"\");\n                    self.add_filter_condition(column_key, text_input);\n                    return false;\n                });\n            });\n\n            // Initialize categorical filters.\n            this.$el.find(\".text-filter-val > a\").each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    // Remove visible element.\n                    $(this).parent().remove();\n\n                    // Remove filter condition.\n                    self.remove_filter_condition($(this).attr(\"filter_key\"), $(this).attr(\"filter_val\"));\n\n                    // Return\n                    return false;\n                });\n            });\n\n            // Initialize categorical filters.\n            this.$el.find(\".categorical-filter > a\").each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    self.set_categorical_filter($(this).attr(\"filter_key\"), $(this).attr(\"filter_val\"));\n                    return false;\n                });\n            });\n\n            // Initialize standard, advanced search toggles.\n            this.$el.find(\".advanced-search-toggle\").each(function () {\n                $(this).off();\n                $(this).click(function () {\n                    self.$el.find(\"#standard-search\").slideToggle(\"fast\");\n                    self.$el.find(\"#advanced-search\").slideToggle(\"fast\");\n                    return false;\n                });\n            });\n\n            // Add event to check all box\n            this.$el.find(\"#check_all\").off();\n            this.$el.find(\"#check_all\").on(\"click\", function () {\n                self.check_all_items();\n            });\n        },\n\n        // Initialize grid elements.\n        init_grid_elements: function init_grid_elements() {\n            // Initialize grid selection checkboxes.\n            this.$el.find(\".grid\").each(function () {\n                var checkboxes = $(this).find(\"input.grid-row-select-checkbox\");\n                var check_count = $(this).find(\"span.grid-selected-count\");\n                var update_checked = function update_checked() {\n                    check_count.text($(checkboxes).filter(\":checked\").length);\n                };\n\n                $(checkboxes).each(function () {\n                    $(this).change(update_checked);\n                });\n                update_checked();\n            });\n\n            // Initialize ratings.\n            if (this.$el.find(\".community_rating_star\").length !== 0) this.$el.find(\".community_rating_star\").rating({});\n\n            // get options\n            var options = this.grid.attributes;\n            var self = this;\n\n            //\n            // add page click events\n            //\n            this.$el.find(\".page-link > a\").each(function () {\n                $(this).click(function () {\n                    self.set_page($(this).attr(\"page_num\"));\n                    return false;\n                });\n            });\n\n            //\n            // add inbound/outbound events\n            //\n            this.$el.find(\".use-target\").each(function () {\n                $(this).click(function (e) {\n                    self.execute({\n                        href: $(this).attr(\"href\"),\n                        target: $(this).attr(\"target\")\n                    });\n                    return false;\n                });\n            });\n\n            // empty grid?\n            var items_length = options.items.length;\n            if (items_length == 0) {\n                return;\n            }\n\n            // add operation popup menus\n            _.each(options.items, function (item, index) {\n                var button = self.$(\"#grid-\" + index + \"-popup\").off();\n                var popup = new PopupMenu(button);\n                _.each(options[\"operations\"], function (operation) {\n                    self._add_operation(popup, operation, item);\n                });\n            });\n        },\n\n        /** Add an operation to the items menu */\n        _add_operation: function _add_operation(popup, operation, item) {\n            var self = this;\n            var settings = item.operation_config[operation.label];\n            if (settings.allowed && operation.allow_popup) {\n                popup.addItem({\n                    html: operation.label,\n                    href: settings.url_args,\n                    target: settings.target,\n                    confirmation_text: operation.confirm,\n                    func: function func(e) {\n                        e.preventDefault();\n                        var label = $(e.target).html();\n                        if (operation.onclick) {\n                            operation.onclick(item.encode_id);\n                        } else {\n                            self.execute(this.findItemByHtml(label));\n                        }\n                    }\n                });\n            }\n        },\n\n        // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n        add_filter_condition: function add_filter_condition(name, value) {\n            // Do nothing is value is empty.\n            if (value === \"\") {\n                return false;\n            }\n\n            // Add condition to grid.\n            this.grid.add_filter(name, value, true);\n\n            // Add button that displays filter and provides a button to delete it.\n            var t = $(Templates.filter_element(name, value));\n            var self = this;\n            t.click(function () {\n                // Remove visible element.\n                $(this).remove();\n\n                // Remove filter condition.\n                self.remove_filter_condition(name, value);\n            });\n\n            // append to container\n            var container = this.$el.find(\"#\" + name + \"-filtering-criteria\");\n            container.append(t);\n\n            // execute\n            this.go_page_one();\n            this.execute();\n        },\n\n        // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n        remove_filter_condition: function remove_filter_condition(name, value) {\n            // Remove filter condition.\n            this.grid.remove_filter(name, value);\n\n            // Execute\n            this.go_page_one();\n            this.execute();\n        },\n\n        // Set sort condition for grid.\n        set_sort_condition: function set_sort_condition(col_key) {\n            // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n            // currently sorted column, sort is reversed.\n            var cur_sort = this.grid.get(\"sort_key\");\n            var new_sort = col_key;\n            if (cur_sort.indexOf(col_key) !== -1) {\n                // Reverse sort.\n                if (cur_sort.substring(0, 1) !== \"-\") {\n                    new_sort = \"-\" + col_key;\n                }\n            }\n\n            // Remove sort arrows elements.\n            this.$el.find(\".sort-arrow\").remove();\n\n            // Add sort arrow element to new sort column.\n            var sort_arrow = new_sort.substring(0, 1) == \"-\" ? \"&uarr;\" : \"&darr;\";\n            var t = $(\"<span>\" + sort_arrow + \"</span>\").addClass(\"sort-arrow\");\n\n            // Add to header\n            this.$el.find(\"#\" + col_key + \"-header\").append(t);\n\n            // Update grid.\n            this.grid.set(\"sort_key\", new_sort);\n            this.go_page_one();\n            this.execute();\n        },\n\n        // Set new value for categorical filter.\n        set_categorical_filter: function set_categorical_filter(name, new_value) {\n            // Update filter hyperlinks to reflect new filter value.\n            var category_filter = this.grid.get(\"categorical_filters\")[name],\n                cur_value = this.grid.get(\"filters\")[name];\n            var self = this;\n            this.$el.find(\".\" + name + \"-filter\").each(function () {\n                var text = $.trim($(this).text());\n                var filter = category_filter[text];\n                var filter_value = filter[name];\n                if (filter_value == new_value) {\n                    // Remove filter link since grid will be using this filter. It is assumed that\n                    // this element has a single child, a hyperlink/anchor with text.\n                    $(this).empty();\n                    $(this).addClass(\"current-filter\");\n                    $(this).append(text);\n                } else if (filter_value == cur_value) {\n                    // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n                    // this element has a single child, a hyperlink/anchor.\n                    $(this).empty();\n                    var t = $('<a href=\"#\">' + text + \"</a>\");\n                    t.click(function () {\n                        self.set_categorical_filter(name, filter_value);\n                    });\n                    $(this).removeClass(\"current-filter\");\n                    $(this).append(t);\n                }\n            });\n\n            // Update grid.\n            this.grid.add_filter(name, new_value);\n            this.go_page_one();\n            this.execute();\n        },\n\n        // Set page to view.\n        set_page: function set_page(new_page) {\n            // Update page hyperlink to reflect new page.\n            var self = this;\n            this.$el.find(\".page-link\").each(function () {\n                var id = $(this).attr(\"id\"),\n                    page_num = parseInt(id.split(\"-\")[2], 10),\n                    // Id has form 'page-link-<page_num>\n                cur_page = self.grid.get(\"cur_page\"),\n                    text;\n                if (page_num === new_page) {\n                    // Remove link to page since grid will be on this page. It is assumed that\n                    // this element has a single child, a hyperlink/anchor with text.\n                    text = $(this).children().text();\n                    $(this).empty();\n                    $(this).addClass(\"inactive-link\");\n                    $(this).text(text);\n                } else if (page_num === cur_page) {\n                    // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n                    // this element has a single child, a hyperlink/anchor.\n                    text = $(this).text();\n                    $(this).empty();\n                    $(this).removeClass(\"inactive-link\");\n                    var t = $('<a href=\"#\">' + text + \"</a>\");\n                    t.click(function () {\n                        self.set_page(page_num);\n                    });\n                    $(this).append(t);\n                }\n            });\n\n            if (new_page === \"all\") {\n                this.grid.set(\"cur_page\", new_page);\n            } else {\n                this.grid.set(\"cur_page\", parseInt(new_page, 10));\n            }\n            this.execute();\n        },\n\n        // confirmation/submission of operation request\n        submit_operation: function submit_operation(operation_button, confirmation_text) {\n            // identify operation\n            var operation_name = $(operation_button).val();\n\n            // verify in any item is selected\n            var number_of_checked_ids = this.$el.find('input[name=\"id\"]:checked').length;\n            if (!number_of_checked_ids > 0) {\n                return false;\n            }\n\n            // Check to see if there's grid confirmation text for this operation\n            var operation = _.findWhere(this.grid.attributes.operations, {\n                label: operation_name\n            });\n            if (operation && !confirmation_text) {\n                confirmation_text = operation.confirm || \"\";\n            }\n\n            // collect ids\n            var item_ids = [];\n            this.$el.find(\"input[name=id]:checked\").each(function () {\n                item_ids.push($(this).val());\n            });\n\n            // execute operation\n            var options = {\n                operation: operation_name,\n                id: item_ids,\n                confirmation_text: confirmation_text\n            };\n            if (operation.target == \"top\") {\n                options = _.extend(options, {\n                    href: operation.href,\n                    target: operation.target\n                });\n            }\n            this.execute(options);\n            return true;\n        },\n\n        check_all_items: function check_all_items() {\n            var check = this.$(\".grid-row-select-checkbox\");\n            var state = this.$(\"#check_all\").prop(\"checked\");\n            _.each(check, function (c) {\n                $(c).prop(\"checked\", state);\n            });\n            this.init_grid_elements();\n        },\n\n        // Go back to page one; this is useful when a filter is applied.\n        go_page_one: function go_page_one() {\n            // Need to go back to page 1 if not showing all.\n            var cur_page = this.grid.get(\"cur_page\");\n            if (cur_page !== null && cur_page !== undefined && cur_page !== \"all\") {\n                this.grid.set(\"cur_page\", 1);\n            }\n        },\n\n        //\n        // execute operations and hyperlink requests\n        //\n        execute: function execute(options) {\n            // get url\n            var id = null;\n            var href = null;\n            var operation = null;\n            var confirmation_text = null;\n            var target = null;\n\n            // check for options\n            if (options) {\n                // get options\n                href = options.href;\n                operation = options.operation;\n                id = options.id;\n                confirmation_text = options.confirmation_text;\n                target = options.target;\n\n                // check if input contains the operation tag\n                if (href !== undefined && href.indexOf(\"operation=\") != -1) {\n                    // Get operation, id in hyperlink's href.\n                    var href_parts = href.split(\"?\");\n                    if (href_parts.length > 1) {\n                        var href_parms_str = href_parts[1];\n                        var href_parms = href_parms_str.split(\"&\");\n                        for (var index = 0; index < href_parms.length; index++) {\n                            if (href_parms[index].indexOf(\"operation\") != -1) {\n                                // Found operation parm; get operation value.\n                                operation = href_parms[index].split(\"=\")[1];\n                                operation = operation.replace(/\\+/g, \" \");\n                            } else if (href_parms[index].indexOf(\"id\") != -1) {\n                                // Found id parm; get id value.\n                                id = href_parms[index].split(\"=\")[1];\n                            }\n                        }\n                    }\n                }\n            }\n\n            // check for operation details\n            if (operation && id) {\n                // show confirmation box\n                if (confirmation_text && confirmation_text != \"\" && confirmation_text != \"None\" && confirmation_text != \"null\") if (!confirm(confirmation_text)) return false;\n\n                // use small characters for operation?!\n                operation = operation.toLowerCase();\n\n                // Update grid.\n                this.grid.set({\n                    operation: operation,\n                    item_ids: id\n                });\n\n                // Do operation. If operation cannot be performed asynchronously, redirect to location.\n                if (target == \"top\") {\n                    window.top.location = href + \"?\" + $.param(this.grid.get_url_data());\n                } else if (this.grid.can_async_op(operation) || this.dict_format) {\n                    this.update_grid();\n                } else {\n                    this.go_to(target, href);\n                }\n\n                // done\n                return false;\n            }\n\n            // refresh grid\n            if (href) {\n                this.go_to(target, href);\n                return false;\n            }\n\n            // refresh grid\n            if (this.grid.get(\"async\") || this.dict_format) {\n                this.update_grid();\n            } else {\n                this.go_to(target, href);\n            }\n\n            // done\n            return false;\n        },\n\n        // go to url\n        go_to: function go_to(target, href) {\n            // get aysnc status\n            var async = this.grid.get(\"async\");\n            this.grid.set(\"async\", false);\n\n            // get slide status\n            var advanced_search = this.$el.find(\"#advanced-search\").is(\":visible\");\n            this.grid.set(\"advanced_search\", advanced_search);\n\n            // get default url\n            if (!href) {\n                href = this.grid.get(\"url_base\") + \"?\" + $.param(this.grid.get_url_data());\n            }\n\n            // clear grid of transient request attributes.\n            this.grid.set({\n                operation: undefined,\n                item_ids: undefined,\n                async: async\n            });\n            switch (target) {\n                case \"center\":\n                    $(\"#galaxy_main\").attr(\"src\", href);\n                    break;\n                case \"top\":\n                    window.top.location = href;\n                    break;\n                default:\n                    window.location = href;\n            }\n        },\n\n        // Update grid.\n        update_grid: function update_grid() {\n            // If there's an operation, do POST; otherwise, do GET.\n            var method = this.grid.get(\"operation\") ? \"POST\" : \"GET\";\n\n            // Show overlay to indicate loading and prevent user actions.\n            this.$el.find(\".loading-elt-overlay\").show();\n            var self = this;\n            $.ajax({\n                type: method,\n                url: self.grid.get(\"url_base\"),\n                data: self.grid.get_url_data(),\n                error: function error(response) {\n                    alert(\"Grid refresh failed\");\n                },\n                success: function success(response_text) {\n                    // backup\n                    var embedded = self.grid.get(\"embedded\");\n                    var insert = self.grid.get(\"insert\");\n                    var advanced_search = self.$el.find(\"#advanced-search\").is(\":visible\");\n\n                    // request new configuration\n                    var json = self.dict_format ? response_text : $.parseJSON(response_text);\n\n                    // update\n                    json.embedded = embedded;\n                    json.insert = insert;\n                    json.advanced_search = advanced_search;\n\n                    // Initialize new grid config\n                    self.init_grid(json);\n\n                    // Hide loading overlay.\n                    self.$el.find(\".loading-elt-overlay\").hide();\n                },\n                complete: function complete() {\n                    // Clear grid of transient request attributes.\n                    self.grid.set({\n                        operation: undefined,\n                        item_ids: undefined\n                    });\n                }\n            });\n        }\n    });\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 17:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n *  This class creates/wraps a default html select field as backbone class.\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(10)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Buttons) {\n    var View = Backbone.View.extend({\n        initialize: function initialize(options) {\n            var self = this;\n            this.data = [];\n            this.data2 = [];\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                cls: \"ui-select\",\n                error_text: \"No options available\",\n                empty_text: \"Nothing selected\",\n                visible: true,\n                wait: false,\n                multiple: false,\n                searchable: true,\n                optional: false,\n                disabled: false,\n                readonly: false,\n                onchange: function onchange() {},\n                value: null,\n                individual: false,\n                pagesize: 20\n            }).set(options);\n            this.on(\"change\", function () {\n                self.model.get(\"onchange\") && self.model.get(\"onchange\")(self.value());\n            });\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(this.model, \"change:disabled\", this._changeDisabled, this);\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(this.model, \"change:visible\", this._changeVisible, this);\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(this.model, \"change:multiple change:searchable change:cls change:id\", this.render, this);\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            this.model.get(\"searchable\") ? this._renderSearchable() : this._renderClassic();\n            this.$el.addClass(this.model.get(\"cls\")).attr(\"id\", this.model.get(\"id\"));\n            this.$select.empty().addClass(\"select\").attr(\"id\", this.model.get(\"id\") + \"_select\").prop(\"multiple\", this.model.get(\"multiple\")).on(\"change\", function () {\n                self.value(self._getValue());\n                self.trigger(\"change\");\n            });\n            this._changeData();\n            this._changeWait();\n            this._changeVisible();\n            this._changeDisabled();\n        },\n\n        /** Renders the classic selection field */\n        _renderClassic: function _renderClassic() {\n            var self = this;\n            this.$el.addClass(this.model.get(\"multiple\") ? \"ui-select-multiple\" : \"ui-select\").append(this.$select = $(\"<select/>\")).append(this.$dropdown = $(\"<div/>\")).append(this.$resize = $(\"<div/>\").append(this.$resize_icon = $(\"<i/>\")));\n            if (this.model.get(\"multiple\")) {\n                this.$dropdown.hide();\n                this.$resize_icon.addClass(\"fa fa-angle-double-right fa-rotate-45\").show();\n                this.$resize.removeClass().addClass(\"icon-resize\").show().off(\"mousedown\").on(\"mousedown\", function (event) {\n                    var currentY = event.pageY;\n                    var currentHeight = self.$select.height();\n                    self.minHeight = self.minHeight || currentHeight;\n                    $(\"#dd-helper\").show().on(\"mousemove\", function (event) {\n                        self.$select.height(Math.max(currentHeight + (event.pageY - currentY), self.minHeight));\n                    }).on(\"mouseup mouseleave\", function () {\n                        $(\"#dd-helper\").hide().off();\n                    });\n                });\n            } else {\n                this.$dropdown.show();\n                this.$resize.hide();\n                this.$resize_icon.hide();\n            }\n        },\n\n        /** Renders the default select2 field */\n        _renderSearchable: function _renderSearchable() {\n            var self = this;\n            this.$el.append(this.$select = $(\"<div/>\")).append(this.$dropdown = $(\"<div/>\"));\n            this.$dropdown.hide();\n            if (!this.model.get(\"multiple\")) {\n                this.$dropdown.show().on(\"click\", function () {\n                    self.$select.select2 && self.$select.select2(\"open\");\n                });\n            }\n            this.all_button = null;\n            if (this.model.get(\"multiple\") && !this.model.get(\"individual\") && !this.model.get(\"readonly\")) {\n                this.all_button = new Buttons.ButtonCheck({\n                    onclick: function onclick() {\n                        var new_value = [];\n                        self.all_button.value() !== 0 && _.each(self.model.get(\"data\"), function (option) {\n                            new_value.push(option.value);\n                        });\n                        self.value(new_value);\n                        self.trigger(\"change\");\n                    }\n                });\n                this.$el.prepend(this.all_button.$el);\n            }\n        },\n\n        /** Matches a search term with a given text */\n        _match: function _match(term, text) {\n            return !term || term == \"\" || String(text).toUpperCase().indexOf(term.toUpperCase()) >= 0;\n        },\n\n        /** Updates the selection options */\n        _changeData: function _changeData() {\n            var self = this;\n            this.data = [];\n            if (!this.model.get(\"multiple\") && this.model.get(\"optional\")) {\n                this.data.push({\n                    value: \"__null__\",\n                    label: self.model.get(\"empty_text\")\n                });\n            }\n            _.each(this.model.get(\"data\"), function (option) {\n                self.data.push(option);\n            });\n            if (this.length() == 0) {\n                this.data.push({\n                    value: \"__null__\",\n                    label: this.model.get(\"error_text\")\n                });\n            }\n            if (this.model.get(\"searchable\")) {\n                this.data2 = [];\n                _.each(this.data, function (option, index) {\n                    self.data2.push({\n                        order: index,\n                        id: option.value,\n                        text: option.label,\n                        tags: option.tags\n                    });\n                });\n                this.$select.data(\"select2\") && this.$select.select2(\"destroy\");\n                this.matched_tags = {};\n                this.$select.select2({\n                    data: self.data2,\n                    closeOnSelect: !this.model.get(\"multiple\"),\n                    multiple: this.model.get(\"multiple\"),\n                    query: function query(q) {\n                        self.matched_tags = {};\n                        var pagesize = self.model.get(\"pagesize\");\n                        var results = _.filter(self.data2, function (e) {\n                            var found = false;\n                            _.each(e.tags, function (tag) {\n                                if (self._match(q.term, tag)) {\n                                    found = self.matched_tags[tag] = true;\n                                }\n                            });\n                            return found || self._match(q.term, e.text);\n                        });\n                        q.callback({\n                            results: results.slice((q.page - 1) * pagesize, q.page * pagesize),\n                            more: results.length >= q.page * pagesize\n                        });\n                    },\n                    formatResult: function formatResult(result) {\n                        return _.escape(result.text) + '<div class=\"ui-tags\">' + _.reduce(result.tags, function (memo, tag) {\n                            if (self.matched_tags[tag]) {\n                                return memo + \"&nbsp;\" + '<div class=\"label label-info\">' + _.escape(tag) + \"</div>\";\n                            }\n                            return memo;\n                        }, \"\") + \"</div>\";\n                    }\n                });\n                this.$(\".select2-container .select2-search input\").off(\"blur\");\n            } else {\n                this.$select.find(\"option\").remove();\n                _.each(this.data, function (option) {\n                    self.$select.append($(\"<option/>\").attr(\"value\", option.value).html(_.escape(option.label)));\n                });\n            }\n            this.model.set(\"disabled\", this.model.get(\"readonly\") || this.length() == 0);\n            this._changeValue();\n        },\n\n        /** Handles field enabling/disabling, usually used when no options are available */\n        _changeDisabled: function _changeDisabled() {\n            if (this.model.get(\"searchable\")) {\n                this.$select.select2(this.model.get(\"disabled\") ? \"disable\" : \"enable\");\n            } else {\n                this.$select.prop(\"disabled\", this.model.get(\"disabled\"));\n            }\n        },\n\n        /** Searchable fields may display a spinner e.g. while waiting for a server response */\n        _changeWait: function _changeWait() {\n            this.$dropdown.removeClass().addClass(\"icon-dropdown fa\").addClass(this.model.get(\"wait\") ? \"fa-spinner fa-spin\" : \"fa-caret-down\");\n        },\n\n        /** Handles field visibility */\n        _changeVisible: function _changeVisible() {\n            this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n            this.$select[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n        },\n\n        /** Synchronizes the model value with the actually selected field value */\n        _changeValue: function _changeValue() {\n            this._setValue(this.model.get(\"value\"));\n            if (this.model.get(\"multiple\")) {\n                if (this.all_button) {\n                    var value = this._getValue();\n                    this.all_button.value($.isArray(value) ? value.length : 0, this.length());\n                }\n            } else if (this._getValue() === null && !this.model.get(\"optional\")) {\n                this._setValue(this.first());\n            }\n        },\n\n        /** Return/Set current selection */\n        value: function value(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            return this._getValue();\n        },\n\n        /** Return the first select option */\n        first: function first() {\n            return this.data.length > 0 ? this.data[0].value : null;\n        },\n\n        /** Check if a value is an existing option */\n        exists: function exists(value) {\n            return _.findWhere(this.data, { value: value });\n        },\n\n        /** Return the label/text of the current selection */\n        text: function text() {\n            var v = this._getValue();\n            var d = this.exists($.isArray(v) ? v[0] : v);\n            return d ? d.label : \"\";\n        },\n\n        /** Show the select field */\n        show: function show() {\n            this.model.set(\"visible\", true);\n        },\n\n        /** Hide the select field */\n        hide: function hide() {\n            this.model.set(\"visible\", false);\n        },\n\n        /** Show a spinner indicating that the select options are currently loaded */\n        wait: function wait() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner indicating that the request has been completed */\n        unwait: function unwait() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Returns true if the field is disabled */\n        disabled: function disabled() {\n            return this.model.get(\"disabled\");\n        },\n\n        /** Enable the select field */\n        enable: function enable() {\n            this.model.set(\"disabled\", false);\n        },\n\n        /** Disable the select field */\n        disable: function disable() {\n            this.model.set(\"disabled\", true);\n        },\n\n        /** Update all available options at once */\n        add: function add(options, sorter) {\n            _.each(this.model.get(\"data\"), function (v) {\n                v.keep && !_.findWhere(options, { value: v.value }) && options.push(v);\n            });\n            sorter && options && options.sort(sorter);\n            this.model.set(\"data\", options);\n        },\n\n        /** Update available options */\n        update: function update(options) {\n            this.model.set(\"data\", options);\n        },\n\n        /** Set the custom onchange callback function */\n        setOnChange: function setOnChange(callback) {\n            this.model.set(\"onchange\", callback);\n        },\n\n        /** Number of available options */\n        length: function length() {\n            return $.isArray(this.model.get(\"data\")) ? this.model.get(\"data\").length : 0;\n        },\n\n        /** Set value to dom */\n        _setValue: function _setValue(new_value) {\n            var self = this;\n            if (new_value === null || new_value === undefined) {\n                new_value = \"__null__\";\n            }\n            if (this.model.get(\"multiple\")) {\n                new_value = $.isArray(new_value) ? new_value : [new_value];\n            } else if ($.isArray(new_value)) {\n                if (new_value.length > 0) {\n                    new_value = new_value[0];\n                } else {\n                    new_value = \"__null__\";\n                }\n            }\n            if (this.model.get(\"searchable\")) {\n                if ($.isArray(new_value)) {\n                    var val = [];\n                    _.each(new_value, function (v) {\n                        var d = _.findWhere(self.data2, { id: v });\n                        d && val.push(d);\n                    });\n                    new_value = val;\n                } else {\n                    var d = _.findWhere(this.data2, { id: new_value });\n                    new_value = d;\n                }\n                this.$select.select2(\"data\", new_value);\n            } else {\n                this.$select.val(new_value);\n            }\n        },\n\n        /** Get value from dom */\n        _getValue: function _getValue() {\n            var val = null;\n            if (this.model.get(\"searchable\")) {\n                var selected = this.$select.select2(\"data\");\n                if (selected) {\n                    if ($.isArray(selected)) {\n                        val = [];\n                        selected.sort(function (a, b) {\n                            return a.order - b.order;\n                        });\n                        _.each(selected, function (v) {\n                            val.push(v.id);\n                        });\n                    } else {\n                        val = selected.id;\n                    }\n                }\n            } else {\n                val = this.$select.val();\n            }\n            return Utils.isEmpty(val) ? null : val;\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 18:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** Base class for options based ui elements **/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(10)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Buttons) {\n    var Base = Backbone.View.extend({\n        initialize: function initialize(options) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model({\n                visible: true,\n                data: [],\n                id: Utils.uid(),\n                error_text: \"No options available.\",\n                wait_text: \"Please wait...\",\n                multiple: false,\n                optional: false,\n                onchange: function onchange() {}\n            }).set(options);\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(this.model, \"change:visible\", this._changeVisible, this);\n            this.on(\"change\", function () {\n                self.model.get(\"onchange\")(self.value());\n            });\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            this.$el.empty().removeClass().addClass(\"ui-options\").append(this.$message = $(\"<div/>\")).append(this.$menu = $(\"<div/>\").addClass(\"ui-options-menu\")).append(this.$options = $(this._template()));\n\n            // add select/unselect all button\n            this.all_button = null;\n            if (this.model.get(\"multiple\")) {\n                this.all_button = new Buttons.ButtonCheck({\n                    onclick: function onclick() {\n                        self.$(\"input\").prop(\"checked\", self.all_button.value() !== 0);\n                        self.value(self._getValue());\n                        self.trigger(\"change\");\n                    }\n                });\n                this.$menu.append(this.all_button.$el);\n            }\n\n            // finalize dom\n            this._changeData();\n            this._changeWait();\n            this._changeVisible();\n        },\n\n        /** Update available options */\n        update: function update(options) {\n            this.model.set(\"data\", options);\n        },\n\n        _changeData: function _changeData() {\n            var self = this;\n            this.$options.empty();\n            if (this._templateOptions) {\n                this.$options.append(this._templateOptions(this.model.get(\"data\")));\n            } else {\n                _.each(this.model.get(\"data\"), function (option) {\n                    self.$options.append($(self._templateOption(option)).addClass(\"ui-option\").tooltip({\n                        title: option.tooltip,\n                        placement: \"bottom\"\n                    }));\n                });\n            }\n            var self = this;\n            this.$(\"input\").on(\"change\", function () {\n                self.value(self._getValue());\n                self.trigger(\"change\");\n            });\n            this._changeValue();\n            this._changeWait();\n        },\n\n        _changeVisible: function _changeVisible() {\n            this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n        },\n\n        _changeWait: function _changeWait() {\n            if (this.model.get(\"wait\")) {\n                if (this.length() === 0) {\n                    this._messageShow(this.model.get(\"wait_text\"), \"info\");\n                    this.$options.hide();\n                    this.$menu.hide();\n                }\n            } else {\n                if (this.length() === 0) {\n                    this._messageShow(this.model.get(\"error_text\"), \"danger\");\n                    this.$options.hide();\n                    this.$menu.hide();\n                } else {\n                    this.$message.hide();\n                    this.$options.css(\"display\", \"inline-block\");\n                    this.$menu.show();\n                }\n            }\n        },\n\n        _changeValue: function _changeValue() {\n            this._setValue(this.model.get(\"value\"));\n            if (this._getValue() === null && !this.model.get(\"multiple\") && !this.model.get(\"optional\")) {\n                this._setValue(this.first());\n            }\n            this.all_button && this.all_button.value($.isArray(this._getValue()) ? this._getValue().length : 0, this.length());\n        },\n\n        /** Return/Set current selection */\n        value: function value(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            return this._getValue();\n        },\n\n        /** Return first available option */\n        first: function first() {\n            var options = this.$(\"input\").first();\n            return options.length > 0 ? options.val() : null;\n        },\n\n        /** Show a spinner indicating that the select options are currently loaded */\n        wait: function wait() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner indicating that the request has been completed */\n        unwait: function unwait() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Returns the number of options */\n        length: function length() {\n            return this.$(\".ui-option\").length;\n        },\n\n        /** Set value to dom */\n        _setValue: function _setValue(new_value) {\n            var self = this;\n            if (new_value !== undefined) {\n                this.$(\"input\").prop(\"checked\", false);\n                if (new_value !== null) {\n                    var values = $.isArray(new_value) ? new_value : [new_value];\n                    _.each(values, function (v) {\n                        self.$('input[value=\"' + v + '\"]').first().prop(\"checked\", true);\n                    });\n                }\n            }\n        },\n\n        /** Return current selection */\n        _getValue: function _getValue() {\n            var selected = [];\n            this.$(\":checked\").each(function () {\n                selected.push($(this).val());\n            });\n            if (Utils.isEmpty(selected)) {\n                return null;\n            }\n            return this.model.get(\"multiple\") ? selected : selected[0];\n        },\n\n        /** Show message instead if options */\n        _messageShow: function _messageShow(text, status) {\n            this.$message.show().removeClass().addClass(\"ui-message alert alert-\" + status).html(text);\n        },\n\n        /** Main template function */\n        _template: function _template() {\n            return $(\"<div/>\").addClass(\"ui-options-list\");\n        }\n    });\n\n    /** Iconized **/\n    var BaseIcons = Base.extend({\n        _templateOption: function _templateOption(pair) {\n            var id = Utils.uid();\n            return $(\"<div/>\").addClass(\"ui-option\").append($(\"<input/>\").attr({\n                id: id,\n                type: this.model.get(\"type\"),\n                name: this.model.id,\n                value: pair.value\n            })).append($(\"<label/>\").addClass(\"ui-options-label\").attr(\"for\", id).html(pair.label));\n        }\n    });\n\n    /** Radio button field **/\n    var Radio = {};\n    Radio.View = BaseIcons.extend({\n        initialize: function initialize(options) {\n            options.type = \"radio\";\n            BaseIcons.prototype.initialize.call(this, options);\n        }\n    });\n\n    /** Checkbox options field **/\n    var Checkbox = {};\n    Checkbox.View = BaseIcons.extend({\n        initialize: function initialize(options) {\n            options.type = \"checkbox\";\n            options.multiple = true;\n            BaseIcons.prototype.initialize.call(this, options);\n        }\n    });\n\n    /** Radio button options field styled as classic buttons **/\n    var RadioButton = {};\n    RadioButton.View = Base.extend({\n        initialize: function initialize(options) {\n            Base.prototype.initialize.call(this, options);\n        },\n\n        /** Set current value */\n        _setValue: function _setValue(new_value) {\n            if (new_value !== undefined) {\n                this.$(\"input\").prop(\"checked\", false);\n                this.$(\"label\").removeClass(\"active\");\n                this.$('[value=\"' + new_value + '\"]').prop(\"checked\", true).closest(\"label\").addClass(\"active\");\n            }\n        },\n\n        /** Template for a single option */\n        _templateOption: function _templateOption(pair) {\n            var $el = $(\"<label/>\").addClass(\"btn btn-default\");\n            pair.icon && $el.append($(\"<i/>\").addClass(\"fa\").addClass(pair.icon).addClass(!pair.label && \"no-padding\"));\n            $el.append($(\"<input/>\").attr({\n                type: \"radio\",\n                name: this.model.id,\n                value: pair.value\n            }));\n            pair.label && $el.append(pair.label);\n            return $el;\n        },\n\n        /** Main template function */\n        _template: function _template() {\n            return $(\"<div/>\").addClass(\"btn-group ui-radiobutton\").attr(\"data-toggle\", \"buttons\");\n        }\n    });\n\n    return {\n        Base: Base,\n        BaseIcons: BaseIcons,\n        Radio: Radio,\n        RadioButton: RadioButton,\n        Checkbox: Checkbox\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 19:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(8), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Portlet, Ui) {\n    // ui list element\n    var View = Backbone.View.extend({\n        // create portlet to keep track of selected list elements\n        initialize: function initialize(options) {\n            // link this\n            var self = this;\n\n            // initialize options\n            this.options = options;\n            this.name = options.name || \"element\";\n            this.multiple = options.multiple || false;\n\n            // create message handler\n            this.message = new Ui.Message();\n\n            // create portlet\n            this.portlet = new Portlet.View({ cls: \"ui-portlet-section\" });\n\n            // create select field containing the options which can be inserted into the list\n            this.select = new Ui.Select.View({ optional: options.optional });\n\n            // create insert new list element button\n            this.button = new Ui.ButtonIcon({\n                icon: \"fa fa-sign-in\",\n                tooltip: \"Insert new \" + this.name,\n                onclick: function onclick() {\n                    self.add({\n                        id: self.select.value(),\n                        name: self.select.text()\n                    });\n                }\n            });\n\n            // build main element\n            this.setElement(this._template(options));\n            this.$(\".ui-list-message\").append(this.message.$el);\n            this.$(\".ui-list-portlet\").append(this.portlet.$el);\n            this.$(\".ui-list-button\").append(this.button.$el);\n            this.$(\".ui-list-select\").append(this.select.$el);\n        },\n\n        /** Return/Set currently selected list elements */\n        value: function value(val) {\n            // set new value\n            if (val !== undefined) {\n                this.portlet.empty();\n                if ($.isArray(val)) {\n                    for (var i in val) {\n                        var v = val[i];\n                        var v_id = null;\n                        var v_name = null;\n                        if ($.type(v) != \"string\") {\n                            v_id = v.id;\n                            v_name = v.name;\n                        } else {\n                            v_id = v_name = v;\n                        }\n                        if (v_id != null) {\n                            this.add({\n                                id: v_id,\n                                name: v_name\n                            });\n                        }\n                    }\n                }\n                this._refresh();\n            }\n            // get current value\n            var lst = [];\n            this.$(\".ui-list-id\").each(function () {\n                lst.push({\n                    id: $(this).prop(\"id\"),\n                    name: $(this).find(\".ui-list-name\").html()\n                });\n            });\n            if (lst.length == 0) {\n                return null;\n            }\n            return lst;\n        },\n\n        /** Add row */\n        add: function add(options) {\n            var self = this;\n            if (this.$('[id=\"' + options.id + '\"]').length === 0) {\n                if (!Utils.isEmpty(options.id)) {\n                    var $el = $(this._templateRow({\n                        id: options.id,\n                        name: options.name\n                    }));\n                    $el.on(\"click\", function () {\n                        $el.remove();\n                        self._refresh();\n                    });\n                    $el.on(\"mouseover\", function () {\n                        $el.addClass(\"portlet-highlight\");\n                    });\n                    $el.on(\"mouseout\", function () {\n                        $el.removeClass(\"portlet-highlight\");\n                    });\n                    this.portlet.append($el);\n                    this._refresh();\n                } else {\n                    this.message.update({\n                        message: \"Please select a valid \" + this.name + \".\",\n                        status: \"danger\"\n                    });\n                }\n            } else {\n                this.message.update({\n                    message: \"This \" + this.name + \" is already in the list.\"\n                });\n            }\n        },\n\n        /** Update available options */\n        update: function update(options) {\n            this.select.update(options);\n        },\n\n        /** Refresh view */\n        _refresh: function _refresh() {\n            if (this.$(\".ui-list-id\").length > 0) {\n                !this.multiple && this.button.disable();\n                this.$(\".ui-list-portlet\").show();\n            } else {\n                this.button.enable();\n                this.$(\".ui-list-portlet\").hide();\n            }\n            this.options.onchange && this.options.onchange();\n        },\n\n        /** Main Template */\n        _template: function _template(options) {\n            return '<div class=\"ui-list\">' + '<div class=\"ui-margin-top\">' + '<span class=\"ui-list-button\"/>' + '<span class=\"ui-list-select\"/>' + \"</div>\" + '<div class=\"ui-list-message\"/>' + '<div class=\"ui-list-portlet\"/>' + \"</div>\";\n        },\n\n        /** Row Template */\n        _templateRow: function _templateRow(options) {\n            return '<div id=\"' + options.id + '\" class=\"ui-list-id\">' + '<span class=\"ui-list-delete fa fa-trash\"/>' + '<span class=\"ui-list-name\">' + options.name + \"</span>\" + \"</div>\";\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 20:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _, jQuery) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    //jquery\n    //backbone\n], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    // =============================================================================\n    /**\n    * view for a popup menu\n    */\n    var PopupMenu = Backbone.View.extend({\n        //TODO: maybe better as singleton off the Galaxy obj\n        /** Cache the desired button element and options, set up the button click handler\n        *  NOTE: attaches this view as HTML/jQ data on the button for later use.\n        */\n        initialize: function initialize($button, options) {\n            // default settings\n            this.$button = $button;\n            if (!this.$button.length) {\n                this.$button = $(\"<div/>\");\n            }\n            this.options = options || [];\n            this.$button.data(\"popupmenu\", this);\n\n            // set up button click -> open menu behavior\n            var menu = this;\n            this.$button.click(function (event) {\n                // if there's already a menu open, remove it\n                $(\".popmenu-wrapper\").remove();\n                menu._renderAndShow(event);\n                return false;\n            });\n        },\n\n        // render the menu, append to the page body at the click position, and set up the 'click-away' handlers, show\n        _renderAndShow: function _renderAndShow(clickEvent) {\n            this.render();\n            this.$el.appendTo(\"body\").css(this._getShownPosition(clickEvent)).show();\n            this._setUpCloseBehavior();\n        },\n\n        // render the menu\n        // this menu doesn't attach itself to the DOM ( see _renderAndShow )\n        render: function render() {\n            // render the menu body absolute and hidden, fill with template\n            this.$el.addClass(\"popmenu-wrapper\").hide().css({ position: \"absolute\" }).html(this.template(this.$button.attr(\"id\"), this.options));\n\n            // set up behavior on each link/anchor elem\n            if (this.options.length) {\n                var menu = this;\n                //precondition: there should be one option per li\n                this.$el.find(\"li\").each(function (i, li) {\n                    var option = menu.options[i];\n\n                    // if the option has 'func', call that function when the anchor is clicked\n                    if (option.func) {\n                        $(this).children(\"a.popupmenu-option\").click(function (event) {\n                            option.func.call(menu, event, option);\n                            // We must preventDefault otherwise clicking \"cancel\"\n                            // on a purge or something still navigates and causes\n                            // the action.\n                            event.preventDefault();\n                            // bubble up so that an option click will call the close behavior\n                        });\n                    }\n                });\n            }\n            return this;\n        },\n\n        template: function template(id, options) {\n            return ['<ul id=\"', id, '-menu\" class=\"dropdown-menu\">', this._templateOptions(options), \"</ul>\"].join(\"\");\n        },\n\n        _templateOptions: function _templateOptions(options) {\n            if (!options.length) {\n                return \"<li>(no options)</li>\";\n            }\n            return _.map(options, function (option) {\n                if (option.divider) {\n                    return '<li class=\"divider\"></li>';\n                } else if (option.header) {\n                    return ['<li class=\"head\"><a href=\"javascript:void(0);\">', option.html, \"</a></li>\"].join(\"\");\n                }\n                var href = option.href || \"javascript:void(0);\",\n                    target = option.target ? ' target=\"' + option.target + '\"' : \"\",\n                    check = option.checked ? '<span class=\"fa fa-check\"></span>' : \"\";\n                return ['<li><a class=\"popupmenu-option\" href=\"', href, '\"', target, \">\", check, option.html, \"</a></li>\"].join(\"\");\n            }).join(\"\");\n        },\n\n        // get the absolute position/offset for the menu\n        _getShownPosition: function _getShownPosition(clickEvent) {\n            // display menu horiz. centered on click...\n            var menuWidth = this.$el.width();\n            var x = clickEvent.pageX - menuWidth / 2;\n\n            // adjust to handle horiz. scroll and window dimensions ( draw entirely on visible screen area )\n            x = Math.min(x, $(document).scrollLeft() + $(window).width() - menuWidth - 5);\n            x = Math.max(x, $(document).scrollLeft() + 5);\n            return {\n                top: clickEvent.pageY,\n                left: x\n            };\n        },\n\n        // bind an event handler to all available frames so that when anything is clicked\n        // the menu is removed from the DOM and the event handler unbinds itself\n        _setUpCloseBehavior: function _setUpCloseBehavior() {\n            var menu = this;\n            //TODO: alternately: focus hack, blocking overlay, jquery.blockui\n\n            // function to close popup and unbind itself\n            function closePopup(event) {\n                $(document).off(\"click.close_popup\");\n                if (window && window.parent !== window) {\n                    try {\n                        $(window.parent.document).off(\"click.close_popup\");\n                    } catch (err) {}\n                } else {\n                    try {\n                        $(\"iframe#galaxy_main\").contents().off(\"click.close_popup\");\n                    } catch (err) {}\n                }\n                menu.remove();\n            }\n\n            $(\"html\").one(\"click.close_popup\", closePopup);\n            if (window && window.parent !== window) {\n                try {\n                    $(window.parent.document).find(\"html\").one(\"click.close_popup\", closePopup);\n                } catch (err) {}\n            } else {\n                try {\n                    $(\"iframe#galaxy_main\").contents().one(\"click.close_popup\", closePopup);\n                } catch (err) {}\n            }\n        },\n\n        // add a menu option/item at the given index\n        addItem: function addItem(item, index) {\n            // append to end if no index\n            index = index >= 0 ? index : this.options.length;\n            this.options.splice(index, 0, item);\n            return this;\n        },\n\n        // remove a menu option/item at the given index\n        removeItem: function removeItem(index) {\n            if (index >= 0) {\n                this.options.splice(index, 1);\n            }\n            return this;\n        },\n\n        // search for a menu option by its html\n        findIndexByHtml: function findIndexByHtml(html) {\n            for (var i = 0; i < this.options.length; i++) {\n                if (_.has(this.options[i], \"html\") && this.options[i].html === html) {\n                    return i;\n                }\n            }\n            return null;\n        },\n\n        // search for a menu option by its html\n        findItemByHtml: function findItemByHtml(html) {\n            return this.options[this.findIndexByHtml(html)];\n        },\n\n        // string representation\n        toString: function toString() {\n            return \"PopupMenu\";\n        }\n    });\n    /** shortcut to new for when you don't need to preserve the ref */\n    PopupMenu.create = function _create($button, options) {\n        return new PopupMenu($button, options);\n    };\n\n    // -----------------------------------------------------------------------------\n    // the following class functions are bridges from the original make_popupmenu and make_popup_menus\n    // to the newer backbone.js PopupMenu\n\n    /** Create a PopupMenu from simple map initial_options activated by clicking button_element.\n    *      Converts initial_options to object array used by PopupMenu.\n    *  @param {jQuery|DOMElement} button_element element which, when clicked, activates menu\n    *  @param {Object} initial_options map of key -> values, where\n    *      key is option text, value is fn to call when option is clicked\n    *  @returns {PopupMenu} the PopupMenu created\n    */\n    PopupMenu.make_popupmenu = function (button_element, initial_options) {\n        var convertedOptions = [];\n        _.each(initial_options, function (optionVal, optionKey) {\n            var newOption = { html: optionKey };\n\n            // keys with null values indicate: header\n            if (optionVal === null) {\n                // !optionVal? (null only?)\n                newOption.header = true;\n\n                // keys with function values indicate: a menu option\n            } else if (jQuery.type(optionVal) === \"function\") {\n                newOption.func = optionVal;\n            }\n            //TODO:?? any other special optionVals?\n            // there was no divider option originally\n            convertedOptions.push(newOption);\n        });\n        return new PopupMenu($(button_element), convertedOptions);\n    };\n\n    /** Find all anchors in $parent (using selector) and covert anchors into a PopupMenu options map.\n    *  @param {jQuery} $parent the element that contains the links to convert to options\n    *  @param {String} selector jq selector string to find links\n    *  @returns {Object[]} the options array to initialize a PopupMenu\n    */\n    //TODO: lose parent and selector, pass in array of links, use map to return options\n    PopupMenu.convertLinksToOptions = function ($parent, selector) {\n        $parent = $($parent);\n        selector = selector || \"a\";\n        var options = [];\n        $parent.find(selector).each(function (elem, i) {\n            var option = {},\n                $link = $(elem);\n\n            // convert link text to the option text (html) and the href into the option func\n            option.html = $link.text();\n            if ($link.attr(\"href\")) {\n                var linkHref = $link.attr(\"href\"),\n                    linkTarget = $link.attr(\"target\"),\n                    confirmText = $link.attr(\"confirm\");\n\n                option.func = function () {\n                    // if there's a \"confirm\" attribute, throw up a confirmation dialog, and\n                    //  if the user cancels - do nothing\n                    if (confirmText && !confirm(confirmText)) {\n                        return;\n                    }\n\n                    // if there's no confirm attribute, or the user accepted the confirm dialog:\n                    switch (linkTarget) {\n                        // relocate the center panel\n                        case \"_parent\":\n                            window.parent.location = linkHref;\n                            break;\n\n                        // relocate the entire window\n                        case \"_top\":\n                            window.top.location = linkHref;\n                            break;\n\n                        // relocate this panel\n                        default:\n                            window.location = linkHref;\n                    }\n                };\n            }\n            options.push(option);\n        });\n        return options;\n    };\n\n    /** Create a single popupmenu from existing DOM button and anchor elements\n    *  @param {jQuery} $buttonElement the element that when clicked will open the menu\n    *  @param {jQuery} $menuElement the element that contains the anchors to convert into a menu\n    *  @param {String} menuElementLinkSelector jq selector string used to find anchors to be made into menu options\n    *  @returns {PopupMenu} the PopupMenu (Backbone View) that can render, control the menu\n    */\n    PopupMenu.fromExistingDom = function ($buttonElement, $menuElement, menuElementLinkSelector) {\n        $buttonElement = $($buttonElement);\n        $menuElement = $($menuElement);\n        var options = PopupMenu.convertLinksToOptions($menuElement, menuElementLinkSelector);\n        // we're done with the menu (having converted it to an options map)\n        $menuElement.remove();\n        return new PopupMenu($buttonElement, options);\n    };\n\n    /** Create all popupmenus within a document or a more specific element\n    *  @param {DOMElement} parent the DOM element in which to search for popupmenus to build (defaults to document)\n    *  @param {String} menuSelector jq selector string to find popupmenu menu elements (defaults to \"div[popupmenu]\")\n    *  @param {Function} buttonSelectorBuildFn the function to build the jq button selector.\n    *      Will be passed $menuElement, parent.\n    *      (Defaults to return '#' + $menuElement.attr( 'popupmenu' ); )\n    *  @returns {PopupMenu[]} array of popupmenus created\n    */\n    PopupMenu.make_popup_menus = function (parent, menuSelector, buttonSelectorBuildFn) {\n        parent = parent || document;\n        // orig. Glx popupmenu menus have a (non-std) attribute 'popupmenu'\n        //  which contains the id of the button that activates the menu\n        menuSelector = menuSelector || \"div[popupmenu]\";\n        // default to (orig. Glx) matching button to menu by using the popupmenu attr of the menu as the id of the button\n        buttonSelectorBuildFn = buttonSelectorBuildFn || function ($menuElement, parent) {\n            return \"#\" + $menuElement.attr(\"popupmenu\");\n        };\n\n        // aggregate and return all PopupMenus\n        var popupMenusCreated = [];\n        $(parent).find(menuSelector).each(function () {\n            var $menuElement = $(this),\n                $buttonElement = $(parent).find(buttonSelectorBuildFn($menuElement, parent));\n            popupMenusCreated.push(PopupMenu.fromDom($buttonElement, $menuElement));\n            $buttonElement.addClass(\"popup\");\n        });\n        return popupMenusCreated;\n    };\n\n    // =============================================================================\n    return PopupMenu;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 22:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** This class creates a ui table element. */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n    var View = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.options = Utils.merge(options, {\n                content: \"No content available.\",\n                onchange: null,\n                ondblclick: null,\n                onconfirm: null,\n                cls: \"ui-table\",\n                selectable: true,\n                cls_tr: \"\"\n            });\n            this.setElement(this._template());\n            this.$thead = this.$(\"thead\");\n            this.$tbody = this.$(\"tbody\");\n            this.$tmessage = this.$(\"tmessage\");\n            this.row = this._row();\n            this.row_count = 0;\n        },\n\n        events: {\n            click: \"_onclick\",\n            dblclick: \"_ondblclick\"\n        },\n\n        /** Add cell to header row */\n        addHeader: function addHeader($el) {\n            this.row.append($(\"<th/>\").append($el));\n        },\n\n        /** Append header row to table */\n        appendHeader: function appendHeader() {\n            this.$thead.append(this.row);\n            this.row = $(\"<tr/>\");\n        },\n\n        /** Add cell to row */\n        add: function add($el, width, align) {\n            var wrapper = $(\"<td/>\");\n            if (width) {\n                wrapper.css(\"width\", width);\n            }\n            if (align) {\n                wrapper.css(\"text-align\", align);\n            }\n            this.row.append(wrapper.append($el));\n        },\n\n        /** Append row to table */\n        append: function append(id, fade) {\n            this._commit(id, fade, false);\n        },\n\n        /** Prepend row to table */\n        prepend: function prepend(id, fade) {\n            this._commit(id, fade, true);\n        },\n\n        /** Helper to get row element */\n        get: function get(id) {\n            return this.$(\"#\" + id);\n        },\n\n        /** Delete row by id */\n        del: function del(id) {\n            var item = this.$tbody.find(\"#\" + id);\n            if (item.length > 0) {\n                item.remove();\n                this.row_count--;\n                this._refresh();\n            }\n        },\n\n        /** Delete all rows */\n        delAll: function delAll() {\n            this.$tbody.empty();\n            this.row_count = 0;\n            this._refresh();\n        },\n\n        /** Set a value i.e. selects/highlights a particular row by id */\n        value: function value(new_value) {\n            if (this.options.selectable) {\n                this.before = this.$tbody.find(\".current\").attr(\"id\");\n                if (new_value !== undefined) {\n                    this.$tbody.find(\"tr\").removeClass(\"current\");\n                    if (new_value) {\n                        this.$tbody.find(\"#\" + new_value).addClass(\"current\");\n                    }\n                }\n                var after = this.$tbody.find(\".current\").attr(\"id\");\n                if (after === undefined) {\n                    return null;\n                } else {\n                    if (after != this.before && this.options.onchange) {\n                        this.options.onchange(new_value);\n                    }\n                    return after;\n                }\n            }\n        },\n\n        /** Return the number of rows */\n        size: function size() {\n            return this.$tbody.find(\"tr\").length;\n        },\n\n        /** Helper to append rows */\n        _commit: function _commit(id, fade, prepend) {\n            this.del(id);\n            this.row.attr(\"id\", id);\n            if (prepend) {\n                this.$tbody.prepend(this.row);\n            } else {\n                this.$tbody.append(this.row);\n            }\n            if (fade) {\n                this.row.hide();\n                this.row.fadeIn();\n            }\n            this.row = this._row();\n            this.row_count++;\n            this._refresh();\n        },\n\n        /** Helper to create new row */\n        _row: function _row() {\n            return $('<tr class=\"' + this.options.cls_tr + '\"></tr>');\n        },\n\n        /** Handles onclick events */\n        _onclick: function _onclick(e) {\n            var old_value = this.value();\n            var new_value = $(e.target).closest(\"tr\").attr(\"id\");\n            if (new_value != \"\") {\n                if (new_value && old_value != new_value) {\n                    if (this.options.onconfirm) {\n                        this.options.onconfirm(new_value);\n                    } else {\n                        this.value(new_value);\n                    }\n                }\n            }\n        },\n\n        /** Handles ondblclick events */\n        _ondblclick: function _ondblclick(e) {\n            var value = this.value();\n            if (value && this.options.ondblclick) {\n                this.options.ondblclick(value);\n            }\n        },\n\n        /** Refresh helper */\n        _refresh: function _refresh() {\n            if (this.row_count == 0) {\n                this.$tmessage.show();\n            } else {\n                this.$tmessage.hide();\n            }\n        },\n\n        /** Template */\n        _template: function _template() {\n            return \"<div>\" + '<table class=\"' + this.options.cls + '\">' + \"<thead/>\" + \"<tbody/>\" + \"</table>\" + \"<tmessage>\" + this.options.content + \"</tmessage>\" + \"<div>\";\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 23:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/* This class maps the form dom to an api compatible javascript dictionary. */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n    var Manager = Backbone.Model.extend({\n        initialize: function initialize(app) {\n            this.app = app;\n        },\n\n        /** Creates a checksum. */\n        checksum: function checksum() {\n            var sum = \"\";\n            var self = this;\n            this.app.section.$el.find(\".section-row\").each(function () {\n                var id = $(this).attr(\"id\");\n                var field = self.app.field_list[id];\n                if (field) {\n                    sum += id + \":\" + JSON.stringify(field.value && field.value()) + \":\" + field.collapsed + \";\";\n                }\n            });\n            return sum;\n        },\n\n        /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission. */\n        create: function create() {\n            var self = this;\n\n            // get raw dictionary from dom\n            var dict = {};\n            this._iterate(this.app.section.$el, dict);\n\n            // add to result dictionary, label elements\n            var result_dict = {};\n            this.flat_dict = {};\n            function add(flat_id, input_id, input_value) {\n                self.flat_dict[flat_id] = input_id;\n                result_dict[flat_id] = input_value;\n                self.app.element_list[input_id] && self.app.element_list[input_id].$el.attr(\"tour_id\", flat_id);\n            }\n            // converter between raw dictionary and job dictionary\n            function convert(identifier, head) {\n                for (var index in head) {\n                    var node = head[index];\n                    if (node.input) {\n                        var input = node.input;\n                        var flat_id = identifier;\n                        if (identifier != \"\") {\n                            flat_id += \"|\";\n                        }\n                        flat_id += input.name;\n                        switch (input.type) {\n                            case \"repeat\":\n                                var section_label = \"section-\";\n                                var block_indices = [];\n                                var block_prefix = null;\n                                for (var block_label in node) {\n                                    var pos = block_label.indexOf(section_label);\n                                    if (pos != -1) {\n                                        pos += section_label.length;\n                                        block_indices.push(parseInt(block_label.substr(pos)));\n                                        if (!block_prefix) {\n                                            block_prefix = block_label.substr(0, pos);\n                                        }\n                                    }\n                                }\n                                block_indices.sort(function (a, b) {\n                                    return a - b;\n                                });\n                                var index = 0;\n                                for (var i in block_indices) {\n                                    convert(flat_id + \"_\" + index++, node[block_prefix + block_indices[i]]);\n                                }\n                                break;\n                            case \"conditional\":\n                                var value = self.app.field_list[input.id].value();\n                                add(flat_id + \"|\" + input.test_param.name, input.id, value);\n                                var selectedCase = _matchCase(input, value);\n                                if (selectedCase != -1) {\n                                    convert(flat_id, head[input.id + \"-section-\" + selectedCase]);\n                                }\n                                break;\n                            case \"section\":\n                                convert(!input.flat && flat_id || \"\", node);\n                                break;\n                            default:\n                                var field = self.app.field_list[input.id];\n                                if (field && field.value) {\n                                    var value = field.value();\n                                    if (input.ignore === undefined || input.ignore != value) {\n                                        if (field.collapsed && input.collapsible_value) {\n                                            value = input.collapsible_value;\n                                        }\n                                        add(flat_id, input.id, value);\n                                        if (input.payload) {\n                                            for (var p_id in input.payload) {\n                                                add(p_id, input.id, input.payload[p_id]);\n                                            }\n                                        }\n                                    }\n                                }\n                        }\n                    }\n                }\n            }\n            convert(\"\", dict);\n            return result_dict;\n        },\n\n        /** Matches flat ids to corresponding input element\n         * @param{string} flat_id - Flat input id to be looked up.\n         */\n        match: function match(flat_id) {\n            return this.flat_dict && this.flat_dict[flat_id];\n        },\n\n        /** Match conditional values to selected cases\n        */\n        matchCase: function matchCase(input, value) {\n            return _matchCase(input, value);\n        },\n\n        /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n        */\n        matchModel: function matchModel(model, callback) {\n            var self = this;\n            visitInputs(model.inputs, function (input, name) {\n                self.flat_dict[name] && callback(input, self.flat_dict[name]);\n            });\n        },\n\n        /** Matches identifier from api response to input elements e.g. used to display validation errors\n        */\n        matchResponse: function matchResponse(response) {\n            var result = {};\n            var self = this;\n            function search(id, head) {\n                if (typeof head === \"string\") {\n                    var input_id = self.flat_dict[id];\n                    input_id && (result[input_id] = head);\n                } else {\n                    for (var i in head) {\n                        var new_id = i;\n                        if (id !== \"\") {\n                            var separator = \"|\";\n                            if (head instanceof Array) {\n                                separator = \"_\";\n                            }\n                            new_id = id + separator + new_id;\n                        }\n                        search(new_id, head[i]);\n                    }\n                }\n            }\n            search(\"\", response);\n            return result;\n        },\n\n        /** Map dom tree to dictionary tree with input elements.\n        */\n        _iterate: function _iterate(parent, dict) {\n            var self = this;\n            var children = $(parent).children();\n            children.each(function () {\n                var child = this;\n                var id = $(child).attr(\"id\");\n                if ($(child).hasClass(\"section-row\")) {\n                    var input = self.app.input_list[id];\n                    dict[id] = input && { input: input } || {};\n                    self._iterate(child, dict[id]);\n                } else {\n                    self._iterate(child, dict);\n                }\n            });\n        }\n    });\n\n    /** Match conditional values to selected cases\n     * @param{dict}   input     - Definition of conditional input parameter\n     * @param{dict}   value     - Current value\n     */\n    var _matchCase = function _matchCase(input, value) {\n        if (input.test_param.type == \"boolean\") {\n            if (value == \"true\") {\n                value = input.test_param.truevalue || \"true\";\n            } else {\n                value = input.test_param.falsevalue || \"false\";\n            }\n        }\n        for (var i in input.cases) {\n            if (input.cases[i].value == value) {\n                return i;\n            }\n        }\n        return -1;\n    };\n\n    /** Visits tool inputs\n     * @param{dict}   inputs    - Nested dictionary of input elements\n     * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n     */\n    var visitInputs = function visitInputs(inputs, callback, prefix, context) {\n        context = $.extend(true, {}, context);\n        _.each(inputs, function (input) {\n            if (input && input.type && input.name) {\n                context[input.name] = input;\n            }\n        });\n        for (var key in inputs) {\n            var node = inputs[key];\n            node.name = node.name || key;\n            var name = prefix ? prefix + \"|\" + node.name : node.name;\n            switch (node.type) {\n                case \"repeat\":\n                    _.each(node.cache, function (cache, j) {\n                        visitInputs(cache, callback, name + \"_\" + j, context);\n                    });\n                    break;\n                case \"conditional\":\n                    if (node.test_param) {\n                        callback(node.test_param, name + \"|\" + node.test_param.name, context);\n                        var selectedCase = _matchCase(node, node.test_param.value);\n                        if (selectedCase != -1) {\n                            visitInputs(node.cases[selectedCase].inputs, callback, name, context);\n                        } else {\n                            Galaxy.emit.debug(\"form-data::visitInputs() - Invalid case for \" + name + \".\");\n                        }\n                    } else {\n                        Galaxy.emit.debug(\"form-data::visitInputs() - Conditional test parameter missing for \" + name + \".\");\n                    }\n                    break;\n                case \"section\":\n                    visitInputs(node.inputs, callback, name, context);\n                    break;\n                default:\n                    callback(node, name, context);\n            }\n        }\n    };\n\n    return {\n        Manager: Manager,\n        visitInputs: visitInputs\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 27:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    // grid model\n    return Backbone.Model.extend({\n        defaults: {\n            url_base: \"\",\n            async: false,\n            async_ops: [],\n            categorical_filters: [],\n            filters: {},\n            sort_key: null,\n            show_item_checkboxes: false,\n            advanced_search: false,\n            cur_page: 1,\n            num_pages: 1,\n            operation: undefined,\n            item_ids: undefined\n        },\n\n        /**\n        * Return true if operation can be done asynchronously.\n        */\n        can_async_op: function can_async_op(op) {\n            return _.indexOf(this.attributes.async_ops, op) !== -1;\n        },\n\n        /**\n        * Add filtering criterion.\n        */\n        add_filter: function add_filter(key, value, append) {\n            // Update URL arg with new condition.\n            if (append) {\n                // Update or append value.\n                var cur_val = this.attributes.filters[key],\n                    new_val;\n                if (cur_val === null || cur_val === undefined) {\n                    new_val = value;\n                } else if (typeof cur_val == \"string\") {\n                    if (cur_val == \"All\" || cur_val == value) {\n                        new_val = value;\n                    } else {\n                        // Replace string with array.\n                        var values = [];\n                        values[0] = cur_val;\n                        values[1] = value;\n                        new_val = values;\n                    }\n                } else {\n                    // Current value is an array.\n                    new_val = cur_val;\n                    if (new_val.indexOf(value) === -1) {\n                        new_val.push(value);\n                    }\n                }\n                this.attributes.filters[key] = new_val;\n            } else {\n                // Replace value.\n                this.attributes.filters[key] = value;\n            }\n        },\n\n        /**\n        * Remove filtering criterion.\n        */\n        remove_filter: function remove_filter(key, condition) {\n            var cur_val = this.attributes.filters[key];\n            if (cur_val === null || cur_val === undefined) {\n                return false;\n            }\n\n            if (typeof cur_val === \"string\") {\n                // overwrite/remove condition.\n                this.attributes.filters[key] = \"\";\n            } else {\n                // filter contains an array of conditions.\n                var condition_index = _.indexOf(cur_val, condition);\n                if (condition_index !== -1) {\n                    cur_val[condition_index] = \"\";\n                }\n            }\n        },\n\n        /**\n        * Returns URL data for obtaining a new grid.\n        */\n        get_url_data: function get_url_data() {\n            var url_data = {\n                async: this.attributes.async,\n                sort: this.attributes.sort_key,\n                page: this.attributes.cur_page,\n                show_item_checkboxes: this.attributes.show_item_checkboxes,\n                advanced_search: this.attributes.advanced_search\n            };\n\n            // Add operation, item_ids only if they have values.\n            if (this.attributes.operation) {\n                url_data.operation = this.attributes.operation;\n            }\n            if (this.attributes.item_ids) {\n                url_data.id = this.attributes.item_ids;\n            }\n\n            // Add filter arguments to data, placing \"f-\" in front of all arguments.\n            var self = this;\n            _.each(_.pairs(self.attributes.filters), function (k) {\n                url_data[\"f-\" + k[0]] = k[1];\n            });\n            return url_data;\n        },\n\n        // Return URL for obtaining a new grid\n        get_url: function get_url(args) {\n            return this.get(\"url_base\") + \"?\" + $.param(this.get_url_data()) + \"&\" + $.param(args);\n        }\n    });\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 28:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(jQuery, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n    // grid view templates\n    return {\n        // template\n        grid: function grid(options) {\n            var tmpl = \"\";\n            if (options.embedded) {\n                tmpl = this.grid_header(options) + this.grid_table(options);\n            } else {\n                tmpl = '<div class=\"loading-elt-overlay\"></div>' + \"<table>\" + \"<tr>\" + '<td width=\"75%\">' + this.grid_header(options) + \"</td>\" + \"<td></td>\" + \"<td></td>\" + \"</tr>\" + \"<tr>\" + '<td width=\"100%\" id=\"grid-message\" valign=\"top\"></td>' + \"<td></td>\" + \"<td></td>\" + \"</tr>\" + \"</table>\" + this.grid_table(options);\n            }\n\n            // add info text\n            if (options.info_text) {\n                tmpl += '<br><div class=\"toolParamHelp\" style=\"clear: both;\">' + options.info_text + \"</div>\";\n            }\n\n            // return\n            return tmpl;\n        },\n\n        // template\n        grid_table: function grid_table(options) {\n            return '<form method=\"post\" onsubmit=\"return false;\">' + '<table id=\"grid-table\" class=\"grid\">' + '<thead id=\"grid-table-header\"></thead>' + '<tbody id=\"grid-table-body\"></tbody>' + '<tfoot id=\"grid-table-footer\"></tfoot>' + \"</table>\" + \"</form>\";\n        },\n\n        // template\n        grid_header: function grid_header(options) {\n            var tmpl = '<div class=\"grid-header\">';\n            if (!options.embedded) {\n                tmpl += \"<h2>\" + options.title + \"</h2>\";\n            }\n            if (options.global_actions) {\n                tmpl += '<ul class=\"manage-table-actions\">';\n                var show_popup = options.global_actions.length >= 3;\n                if (show_popup) {\n                    tmpl += '<li><a class=\"action-button\" id=\"popup-global-actions\" class=\"menubutton\">Actions</a></li>' + '<div popupmenu=\"popup-global-actions\">';\n                }\n                for (var i in options.global_actions) {\n                    var action = options.global_actions[i];\n                    tmpl += \"<li>\" + '<a class=\"action-button use-target\" target=\"' + action.target + '\" href=\"' + action.url_args + '\" onclick=\"return false;\" >' + action.label + \"</a>\" + \"</li>\";\n                }\n                if (show_popup) {\n                    tmpl += \"</div>\";\n                }\n                tmpl += \"</ul>\";\n            }\n            if (options.insert) {\n                tmpl += options.insert;\n            }\n\n            // add grid filters\n            tmpl += this.grid_filters(options);\n            tmpl += \"</div>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template\n        header: function header(options) {\n            // start\n            var tmpl = \"<tr>\";\n\n            // add checkbox\n            if (options.show_item_checkboxes) {\n                tmpl += \"<th>\";\n                if (options.items.length > 0) {\n                    tmpl += '<input type=\"checkbox\" id=\"check_all\" name=select_all_checkbox value=\"true\">' + '<input type=\"hidden\" name=select_all_checkbox value=\"true\">';\n                }\n                tmpl += \"</th>\";\n            }\n\n            // create header elements\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.visible) {\n                    tmpl += '<th id=\"' + column.key + '-header\">';\n                    if (column.href) {\n                        tmpl += '<a href=\"' + column.href + '\" class=\"sort-link\" sort_key=\"' + column.key + '\">' + column.label + \"</a>\";\n                    } else {\n                        tmpl += column.label;\n                    }\n                    tmpl += '<span class=\"sort-arrow\">' + column.extra + \"</span>\" + \"</th>\";\n                }\n            }\n\n            // finalize\n            tmpl += \"</tr>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template\n        body: function body(options) {\n            // initialize\n            var tmpl = \"\";\n            var num_rows_rendered = 0;\n            var items_length = options.items.length;\n\n            // empty grid?\n            if (items_length == 0) {\n                // No results.\n                tmpl += '<tr><td colspan=\"100\"><em>No Items</em></td></tr>';\n                num_rows_rendered = 1;\n            }\n\n            // create rows\n            for (var i in options.items) {\n                // encode ids\n                var item = options.items[i];\n                var encoded_id = item.encode_id;\n                var popupmenu_id = \"grid-\" + i + \"-popup\";\n\n                // Tag current\n                tmpl += \"<tr \";\n                if (options.current_item_id == item.id) {\n                    tmpl += 'class=\"current\"';\n                }\n                tmpl += \">\";\n\n                // Item selection column\n                if (options.show_item_checkboxes) {\n                    tmpl += '<td style=\"width: 1.5em;\">' + '<input type=\"checkbox\" name=\"id\" value=\"' + encoded_id + '\" id=\"' + encoded_id + '\" class=\"grid-row-select-checkbox\" />' + \"</td>\";\n                }\n\n                // Data columns\n                for (var j in options.columns) {\n                    var column = options.columns[j];\n                    if (column.visible) {\n                        // Nowrap\n                        var nowrap = \"\";\n                        if (column.nowrap) {\n                            nowrap = 'style=\"white-space:nowrap;\"';\n                        }\n\n                        // get column settings\n                        var column_settings = item.column_config[column.label];\n\n                        // load attributes\n                        var link = column_settings.link;\n                        var value = column_settings.value;\n                        var target = column_settings.target;\n\n                        // unescape value\n                        if (jQuery.type(value) === \"string\") {\n                            value = value.replace(/\\/\\//g, \"/\");\n                        }\n\n                        // Attach popup menu?\n                        var id = \"\";\n                        var cls = \"\";\n                        if (column.attach_popup) {\n                            id = \"grid-\" + i + \"-popup\";\n                            cls = \"menubutton\";\n                            if (link != \"\") {\n                                cls += \" split\";\n                            }\n                            cls += \" popup\";\n                        }\n\n                        // Check for row wrapping\n                        tmpl += \"<td \" + nowrap + \">\";\n\n                        // Link\n                        if (link) {\n                            if (options.operations.length != 0) {\n                                tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\" style=\"float: left;\">';\n                            }\n                            tmpl += '<a class=\"menubutton-label use-target\" target=\"' + target + '\" href=\"' + link + '\" onclick=\"return false;\">' + value + \"</a>\";\n                            if (options.operations.length != 0) {\n                                tmpl += \"</div>\";\n                            }\n                        } else {\n                            tmpl += '<div id=\"' + id + '\" class=\"' + cls + '\"><label id=\"' + column.label_id_prefix + encoded_id + '\" for=\"' + encoded_id + '\">' + (value || \"\") + \"</label></div>\";\n                        }\n                        tmpl += \"</td>\";\n                    }\n                }\n                tmpl += \"</tr>\";\n                num_rows_rendered++;\n            }\n            return tmpl;\n        },\n\n        // template\n        footer: function footer(options) {\n            // create template string\n            var tmpl = \"\";\n\n            // paging\n            if (options.use_paging && options.num_pages > 1) {\n                // get configuration\n                var num_page_links = options.num_page_links;\n                var cur_page_num = options.cur_page_num;\n                var num_pages = options.num_pages;\n\n                // First pass on min page.\n                var page_link_range = num_page_links / 2;\n                var min_page = cur_page_num - page_link_range;\n                var min_offset = 0;\n                if (min_page <= 0) {\n                    // Min page is too low.\n                    min_page = 1;\n                    min_offset = page_link_range - (cur_page_num - min_page);\n                }\n\n                // Set max page.\n                var max_range = page_link_range + min_offset;\n                var max_page = cur_page_num + max_range;\n                var max_offset;\n                if (max_page <= num_pages) {\n                    // Max page is fine.\n                    max_offset = 0;\n                } else {\n                    // Max page is too high.\n                    max_page = num_pages;\n                    // +1 to account for the +1 in the loop below.\n                    max_offset = max_range - (max_page + 1 - cur_page_num);\n                }\n\n                // Second and final pass on min page to add any unused\n                // offset from max to min.\n                if (max_offset != 0) {\n                    min_page -= max_offset;\n                    if (min_page < 1) {\n                        min_page = 1;\n                    }\n                }\n\n                // template header\n                tmpl += '<tr id=\"page-links-row\">';\n                if (options.show_item_checkboxes) {\n                    tmpl += \"<td></td>\";\n                }\n                tmpl += '<td colspan=\"100\">' + '<span id=\"page-link-container\">' + \"Page:\";\n\n                if (min_page > 1) {\n                    tmpl += '<span class=\"page-link\" id=\"page-link-1\"><a href=\"javascript:void(0);\" page_num=\"1\" onclick=\"return false;\">1</a></span> ...';\n                }\n\n                // create page urls\n                for (var page_index = min_page; page_index < max_page + 1; page_index++) {\n                    if (page_index == options.cur_page_num) {\n                        tmpl += '<span class=\"page-link inactive-link\" id=\"page-link-' + page_index + '\">' + page_index + \"</span>\";\n                    } else {\n                        tmpl += '<span class=\"page-link\" id=\"page-link-' + page_index + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + page_index + '\">' + page_index + \"</a></span>\";\n                    }\n                }\n\n                // show last page\n                if (max_page < num_pages) {\n                    tmpl += \"...\" + '<span class=\"page-link\" id=\"page-link-' + num_pages + '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' + num_pages + '\">' + num_pages + \"</a></span>\";\n                }\n                tmpl += \"</span>\";\n\n                // Show all link\n                tmpl += '<span class=\"page-link\" id=\"show-all-link-span\"> | <a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"all\">Show All</a></span>' + \"</td>\" + \"</tr>\";\n            }\n\n            // Grid operations for multiple items.\n            if (options.show_item_checkboxes) {\n                // start template\n                tmpl += \"<tr>\" + '<input type=\"hidden\" id=\"operation\" name=\"operation\" value=\"\">' + \"<td></td>\" + '<td colspan=\"100\">' + 'For <span class=\"grid-selected-count\"></span> selected items: ';\n\n                // configure buttons for operations\n                for (var i in options.operations) {\n                    var operation = options.operations[i];\n                    if (operation.allow_multiple) {\n                        tmpl += '<input type=\"button\" value=\"' + operation.label + '\" class=\"operation-button action-button\">&nbsp;';\n                    }\n                }\n\n                // finalize template\n                tmpl += \"</td>\" + \"</tr>\";\n            }\n\n            // count global operations\n            var found_global = false;\n            for (i in options.operations) {\n                if (options.operations[i].global_operation) {\n                    found_global = true;\n                    break;\n                }\n            }\n\n            // add global operations\n            if (found_global) {\n                tmpl += \"<tr>\" + '<td colspan=\"100\">';\n                for (i in options.operations) {\n                    var operation = options.operations[i];\n                    if (operation.global_operation) {\n                        tmpl += '<a class=\"action-button\" href=\"' + operation.global_operation + '\">' + operation.label + \"</a>\";\n                    }\n                }\n                tmpl += \"</td>\" + \"</tr>\";\n            }\n\n            // add legend\n            if (options.legend) {\n                tmpl += \"<tr>\" + '<td colspan=\"100\">' + options.legend + \"</td>\" + \"</tr>\";\n            }\n\n            // return\n            return tmpl;\n        },\n\n        // template\n        message: function message(options) {\n            var status = options.status == \"success\" ? \"done\" : options.status;\n            return \"<p>\" + '<div class=\"' + status + 'message transient-message\">' + _.escape(options.message) + \"</div>\" + '<div style=\"clear: both\"></div>' + \"</p>\";\n        },\n\n        // template\n        grid_filters: function grid_filters(options) {\n            // get filters\n            var default_filter_dict = options.default_filter_dict;\n            var filters = options.filters;\n\n            // show advanced search if flag set or if there are filters for advanced search fields\n            var advanced_search_display = \"none\";\n            if (options.advanced_search) {\n                advanced_search_display = \"block\";\n            }\n\n            // identify columns with advanced filtering\n            var show_advanced_search_link = false;\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.filterable == \"advanced\") {\n                    var column_key = column.key;\n                    var f_key = filters[column_key];\n                    var d_key = default_filter_dict[column_key];\n                    if (f_key && d_key && f_key != d_key) {\n                        advanced_search_display = \"block\";\n                    }\n                    show_advanced_search_link = true;\n                }\n            }\n\n            // hide standard search if advanced is shown\n            var standard_search_display = \"block\";\n            if (advanced_search_display == \"block\") {\n                standard_search_display = \"none\";\n            }\n\n            //\n            // standard search\n            //\n            var tmpl = '<div id=\"standard-search\" style=\"display: ' + standard_search_display + ';\">' + \"<table>\" + \"<tr>\" + '<td style=\"padding: 0;\">' + \"<table>\";\n\n            // add standard filters\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.filterable == \"standard\") {\n                    tmpl += this.grid_column_filter(options, column);\n                }\n            }\n\n            // finalize standard search\n            tmpl += \"</table>\" + \"</td>\" + \"</tr>\" + \"<tr>\" + \"<td>\";\n\n            // show advanced search link in standard display\n            if (show_advanced_search_link) {\n                tmpl += '<a href=\"\" class=\"advanced-search-toggle\">Advanced Search</a>';\n            }\n\n            // finalize standard search display\n            tmpl += \"</td>\" + \"</tr>\" + \"</table>\" + \"</div>\";\n\n            //\n            // advanced search\n            //\n            tmpl += '<div id=\"advanced-search\" style=\"display: ' + advanced_search_display + '; margin-top: 5px; border: 1px solid #ccc;\">' + \"<table>\" + \"<tr>\" + '<td style=\"text-align: left\" colspan=\"100\">' + '<a href=\"\" class=\"advanced-search-toggle\">Close Advanced Search</a>' + \"</td>\" + \"</tr>\";\n\n            // add advanced filters\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.filterable == \"advanced\") {\n                    tmpl += this.grid_column_filter(options, column);\n                }\n            }\n\n            // finalize advanced search template\n            tmpl += \"</table>\" + \"</div>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template\n        grid_column_filter: function grid_column_filter(options, column) {\n            // collect parameters\n            var default_filter_dict = options.default_filter_dict;\n            var filters = options.filters;\n            var column_label = column.label;\n            var column_key = column.key;\n            if (column.filterable == \"advanced\") {\n                column_label = column_label.toLowerCase();\n            }\n\n            // start\n            var tmpl = \"<tr>\";\n\n            if (column.filterable == \"advanced\") {\n                tmpl += '<td align=\"left\" style=\"padding-left: 10px\">' + column_label + \":</td>\";\n            }\n            tmpl += '<td style=\"padding-bottom: 1px;\">';\n            if (column.is_text) {\n                tmpl += '<form class=\"text-filter-form\" column_key=\"' + column_key + '\" action=\"' + options.url + '\" method=\"get\" >';\n                // Carry forward filtering criteria with hidden inputs.\n                for (i in options.columns) {\n                    var temp_column = options.columns[i];\n                    var filter_value = filters[temp_column.key];\n                    if (filter_value) {\n                        if (filter_value != \"All\") {\n                            if (temp_column.is_text) {\n                                filter_value = JSON.stringify(filter_value);\n                            }\n                            tmpl += '<input type=\"hidden\" id=\"' + temp_column.key + '\" name=\"f-' + temp_column.key + '\" value=\"' + filter_value + '\"/>';\n                        }\n                    }\n                }\n                // Print current filtering criteria and links to delete.\n                tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\n                // add filters\n                var column_filter = filters[column_key];\n                if (column_filter) {\n                    // identify type\n                    var type = jQuery.type(column_filter);\n\n                    // single filter value\n                    if (type == \"string\") {\n                        if (column_filter != \"All\") {\n                            // append template\n                            tmpl += this.filter_element(column_key, column_filter);\n                        }\n                    }\n\n                    // multiple filter values\n                    if (type == \"array\") {\n                        for (var i in column_filter) {\n                            // get filter\n                            var filter = column_filter[i];\n\n                            // copy filters and remove entry\n                            var params = column_filter;\n                            params = params.slice(i);\n\n                            // append template\n                            tmpl += this.filter_element(column_key, filter);\n                        }\n                    }\n                }\n\n                // close span\n                tmpl += \"</span>\";\n\n                // Set value, size of search input field. Minimum size is 20 characters.\n                var value = \"\";\n                if (column.filterable == \"standard\") {\n                    value = column.label.toLowerCase();\n                    var size = value.length;\n                    if (size < 20) {\n                        size = 20;\n                    }\n                    // +4 to account for space after placeholder\n                    size = size + 4;\n                }\n\n                // print input field for column\n                tmpl += '<span class=\"search-box\">' + '<input class=\"search-box-input\" id=\"input-' + column_key + '-filter\" name=\"f-' + column_key + '\" type=\"text\" placeholder=\"' + value + '\" size=\"' + size + '\"/>' + '<button type=\"submit\" style=\"background: transparent; border: none; padding: 4px; margin: 0px;\">' + '<i class=\"fa fa-search\"></i>' + \"</button>\" + \"</span>\" + \"</form>\";\n            } else {\n                // filter criteria\n                tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\n                // add category filters\n                var seperator = false;\n                for (var cf_label in options.categorical_filters[column_key]) {\n                    // get category filter\n                    var cf = options.categorical_filters[column_key][cf_label];\n\n                    // each filter will have only a single argument, so get that single argument\n                    var cf_key = \"\";\n                    var cf_arg = \"\";\n                    for (var key in cf) {\n                        cf_key = key;\n                        cf_arg = cf[key];\n                    }\n\n                    // add seperator\n                    if (seperator) {\n                        tmpl += \" | \";\n                    }\n                    seperator = true;\n\n                    // add category\n                    var filter = filters[column_key];\n                    if (filter && cf[column_key] && filter == cf_arg) {\n                        tmpl += '<span class=\"categorical-filter ' + column_key + '-filter current-filter\">' + cf_label + \"</span>\";\n                    } else {\n                        tmpl += '<span class=\"categorical-filter ' + column_key + '-filter\">' + '<a href=\"javascript:void(0);\" filter_key=\"' + cf_key + '\" filter_val=\"' + cf_arg + '\">' + cf_label + \"</a>\" + \"</span>\";\n                    }\n                }\n                tmpl += \"</span>\";\n            }\n            tmpl += \"</td>\" + \"</tr>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template for filter items\n        filter_element: function filter_element(filter_key, filter_value) {\n            filter_value = Utils.sanitize(filter_value);\n            return '<span class=\"text-filter-val\">' + filter_value + '<a href=\"javascript:void(0);\" filter_key=\"' + filter_key + '\" filter_val=\"' + filter_value + '\">' + '<i class=\"fa fa-times\" style=\"padding-left: 5px; padding-bottom: 6px;\"/>' + \"</a>\" + \"</span>\";\n        }\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 29:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n    var View = Backbone.View.extend({\n        initialize: function initialize(options) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                min: null,\n                max: null,\n                step: null,\n                precise: false,\n                split: 10000,\n                value: null,\n                onchange: function onchange() {}\n            }).set(options);\n\n            // create new element\n            this.setElement(this._template());\n            this.$el.attr(\"id\", this.model.id);\n            this.$text = this.$(\".ui-form-slider-text\");\n            this.$slider = this.$(\".ui-form-slider-element\");\n\n            // add text field event\n            var pressed = [];\n            this.$text.on(\"change\", function () {\n                self.value($(this).val());\n            }).on(\"keyup\", function (e) {\n                pressed[e.which] = false;\n            }).on(\"keydown\", function (e) {\n                var v = e.which;\n                pressed[v] = true;\n                if (self.model.get(\"is_workflow\") && pressed[16] && v == 52) {\n                    self.value(\"$\");\n                    event.preventDefault();\n                } else if (!(v == 8 || v == 9 || v == 13 || v == 37 || v == 39 || v >= 48 && v <= 57 && !pressed[16] || v >= 96 && v <= 105 || (v == 190 || v == 110) && $(this).val().indexOf(\".\") == -1 && self.model.get(\"precise\") || (v == 189 || v == 109) && $(this).val().indexOf(\"-\") == -1 || self._isParameter($(this).val()) || pressed[91] || pressed[17])) {\n                    event.preventDefault();\n                }\n            });\n\n            // build slider, cannot be rebuild in render\n            var opts = this.model.attributes;\n            this.has_slider = opts.max !== null && opts.min !== null && opts.max > opts.min;\n            var step = opts.step;\n            if (!step) {\n                if (opts.precise && this.has_slider) {\n                    step = (opts.max - opts.min) / opts.split;\n                } else {\n                    step = 1.0;\n                }\n            }\n            if (this.has_slider) {\n                this.$text.addClass(\"ui-form-slider-left\");\n                this.$slider.slider({ min: opts.min, max: opts.max, step: step }).on(\"slide\", function (event, ui) {\n                    self.value(ui.value);\n                });\n            } else {\n                this.$slider.hide();\n            }\n\n            // add listeners\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function render() {\n            var value = this.model.get(\"value\");\n            this.has_slider && this.$slider.slider(\"value\", value);\n            value !== this.$text.val() && this.$text.val(value);\n        },\n\n        /** Set and return the current value */\n        value: function value(new_val) {\n            var options = this.model.attributes;\n            if (new_val !== undefined) {\n                if (new_val !== null && new_val !== \"\" && !this._isParameter(new_val)) {\n                    isNaN(new_val) && (new_val = 0);\n                    !options.precise && (new_val = Math.round(new_val));\n                    options.max !== null && (new_val = Math.min(new_val, options.max));\n                    options.min !== null && (new_val = Math.max(new_val, options.min));\n                }\n                this.model.set(\"value\", new_val);\n                this.model.trigger(\"change\");\n                options.onchange(new_val);\n            }\n            return this.model.get(\"value\");\n        },\n\n        /** Return true if the field contains a workflow parameter i.e. $('name') */\n        _isParameter: function _isParameter(value) {\n            return this.model.get(\"is_workflow\") && String(value).substring(0, 1) === \"$\";\n        },\n\n        /** Slider template */\n        _template: function _template() {\n            return '<div class=\"ui-form-slider\">' + '<input class=\"ui-form-slider-text\" type=\"text\"/>' + '<div class=\"ui-form-slider-element\"/>' + \"</div>\";\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 30:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function($, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** This class creates/wraps a drill down element. */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(18)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Options) {\n    var View = Options.BaseIcons.extend({\n        initialize: function initialize(options) {\n            options.type = options.display || \"checkbox\";\n            options.multiple = options.type == \"checkbox\";\n            Options.BaseIcons.prototype.initialize.call(this, options);\n        },\n\n        /** Set states for selected values */\n        _setValue: function _setValue(new_value) {\n            Options.BaseIcons.prototype._setValue.call(this, new_value);\n            if (new_value !== undefined && new_value !== null && this.header_index) {\n                var self = this;\n                var values = $.isArray(new_value) ? new_value : [new_value];\n                _.each(values, function (v) {\n                    var list = self.header_index[v];\n                    _.each(list, function (element) {\n                        self._setState(element, true);\n                    });\n                });\n            }\n        },\n\n        /** Expand/collapse a sub group */\n        _setState: function _setState(header_id, is_expanded) {\n            var $button = this.$(\".button-\" + header_id);\n            var $subgroup = this.$(\".subgroup-\" + header_id);\n            $button.data(\"is_expanded\", is_expanded);\n            if (is_expanded) {\n                $subgroup.show();\n                $button.removeClass(\"fa-plus-square\").addClass(\"fa-minus-square\");\n            } else {\n                $subgroup.hide();\n                $button.removeClass(\"fa-minus-square\").addClass(\"fa-plus-square\");\n            }\n        },\n\n        /** Template to create options tree */\n        _templateOptions: function _templateOptions() {\n            var self = this;\n            this.header_index = {};\n\n            // attach event handler\n            function attach($el, header_id) {\n                var $button = $el.find(\".button-\" + header_id);\n                $button.on(\"click\", function () {\n                    self._setState(header_id, !$button.data(\"is_expanded\"));\n                });\n            }\n\n            // recursive function which iterates through options\n            function iterate($tmpl, options, header) {\n                header = header || [];\n                for (var i in options) {\n                    var level = options[i];\n                    var has_options = level.options && level.options.length > 0;\n                    var new_header = header.slice(0);\n                    self.header_index[level.value] = new_header.slice(0);\n                    var $group = $(\"<div/>\");\n                    if (has_options) {\n                        var header_id = Utils.uid();\n                        var $button = $(\"<span/>\").addClass(\"button-\" + header_id).addClass(\"ui-drilldown-button fa fa-plus-square\");\n                        var $subgroup = $(\"<div/>\").addClass(\"subgroup-\" + header_id).addClass(\"ui-drilldown-subgroup\");\n                        $group.append($(\"<div/>\").append($button).append(self._templateOption({\n                            label: level.name,\n                            value: level.value\n                        })));\n                        new_header.push(header_id);\n                        iterate($subgroup, level.options, new_header);\n                        $group.append($subgroup);\n                        attach($group, header_id);\n                    } else {\n                        $group.append(self._templateOption({\n                            label: level.name,\n                            value: level.value\n                        }));\n                    }\n                    $tmpl.append($group);\n                }\n            }\n\n            // iterate through options and create dom\n            var $tmpl = $(\"<div/>\");\n            iterate($tmpl, this.model.get(\"data\"));\n            return $tmpl;\n        },\n\n        /** Template for drill down view */\n        _template: function _template() {\n            return $(\"<div/>\").addClass(\"ui-options-list drilldown-container\").attr(\"id\", this.model.id);\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 31:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _, jQuery) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5), __webpack_require__(8), __webpack_require__(32), __webpack_require__(33), __webpack_require__(34)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, Portlet, Repeat, InputElement, Parameters) {\n    var View = Backbone.View.extend({\n        initialize: function initialize(app, options) {\n            this.app = app;\n            this.inputs = options.inputs;\n            this.parameters = new Parameters();\n            this.setElement($(\"<div/>\"));\n            this.render();\n        },\n\n        /** Render section view */\n        render: function render() {\n            var self = this;\n            this.$el.empty();\n            _.each(this.inputs, function (input) {\n                self.add(input);\n            });\n        },\n\n        /** Add a new input element */\n        add: function add(input) {\n            var input_def = jQuery.extend(true, {}, input);\n            input_def.id = input.id = Utils.uid();\n            this.app.input_list[input_def.id] = input_def;\n            switch (input_def.type) {\n                case \"conditional\":\n                    this._addConditional(input_def);\n                    break;\n                case \"repeat\":\n                    this._addRepeat(input_def);\n                    break;\n                case \"section\":\n                    this._addSection(input_def);\n                    break;\n                default:\n                    this._addRow(input_def);\n            }\n        },\n\n        /** Add a conditional block */\n        _addConditional: function _addConditional(input_def) {\n            var self = this;\n            input_def.test_param.id = input_def.id;\n            this.app.model.get(\"sustain_conditionals\") && (input_def.test_param.disabled = true);\n            var field = this._addRow(input_def.test_param);\n\n            // set onchange event for test parameter\n            field.model && field.model.set(\"onchange\", function (value) {\n                var selectedCase = self.app.data.matchCase(input_def, value);\n                for (var i in input_def.cases) {\n                    var case_def = input_def.cases[i];\n                    var section_row = self.$(\"#\" + input_def.id + \"-section-\" + i);\n                    var nonhidden = false;\n                    for (var j in case_def.inputs) {\n                        if (!case_def.inputs[j].hidden) {\n                            nonhidden = true;\n                            break;\n                        }\n                    }\n                    if (i == selectedCase && nonhidden) {\n                        section_row.fadeIn(\"fast\");\n                    } else {\n                        section_row.hide();\n                    }\n                }\n                self.app.trigger(\"change\");\n            });\n\n            // add conditional sub sections\n            for (var i in input_def.cases) {\n                var sub_section = new View(this.app, {\n                    inputs: input_def.cases[i].inputs\n                });\n                this._append(sub_section.$el.addClass(\"ui-form-section\"), input_def.id + \"-section-\" + i);\n            }\n\n            // trigger refresh on conditional input field after all input elements have been created\n            field.trigger(\"change\");\n        },\n\n        /** Add a repeat block */\n        _addRepeat: function _addRepeat(input_def) {\n            var self = this;\n            var block_index = 0;\n\n            // create repeat block element\n            var repeat = new Repeat.View({\n                title: input_def.title || \"Repeat\",\n                min: input_def.min,\n                max: input_def.max,\n                onnew: function onnew() {\n                    create(input_def.inputs);\n                    self.app.trigger(\"change\");\n                }\n            });\n\n            // helper function to create new repeat blocks\n            function create(inputs) {\n                var sub_section_id = input_def.id + \"-section-\" + block_index++;\n                var sub_section = new View(self.app, { inputs: inputs });\n                repeat.add({\n                    id: sub_section_id,\n                    $el: sub_section.$el,\n                    ondel: function ondel() {\n                        repeat.del(sub_section_id);\n                        self.app.trigger(\"change\");\n                    }\n                });\n            }\n\n            //\n            // add parsed/minimum number of repeat blocks\n            //\n            var n_cache = _.size(input_def.cache);\n            for (var i = 0; i < Math.max(Math.max(n_cache, input_def.min || 0), input_def.default || 0); i++) {\n                create(i < n_cache ? input_def.cache[i] : input_def.inputs);\n            }\n\n            // hide options\n            this.app.model.get(\"sustain_repeats\") && repeat.hideOptions();\n\n            // create input field wrapper\n            var input_element = new InputElement(this.app, {\n                label: input_def.title || input_def.name,\n                help: input_def.help,\n                field: repeat\n            });\n            this._append(input_element.$el, input_def.id);\n        },\n\n        /** Add a customized section */\n        _addSection: function _addSection(input_def) {\n            var portlet = new Portlet.View({\n                title: input_def.title || input_def.name,\n                cls: \"ui-portlet-section\",\n                collapsible: true,\n                collapsible_button: true,\n                collapsed: !input_def.expanded\n            });\n            portlet.append(new View(this.app, { inputs: input_def.inputs }).$el);\n            portlet.append($(\"<div/>\").addClass(\"ui-form-info\").html(input_def.help));\n            this.app.on(\"expand\", function (input_id) {\n                portlet.$(\"#\" + input_id).length > 0 && portlet.expand();\n            });\n            this._append(portlet.$el, input_def.id);\n        },\n\n        /** Add a single input field element */\n        _addRow: function _addRow(input_def) {\n            var self = this;\n            var id = input_def.id;\n            input_def.onchange = input_def.onchange || function () {\n                self.app.trigger(\"change\", id);\n            };\n            var field = this.parameters.create(input_def);\n            this.app.field_list[id] = field;\n            var input_element = new InputElement(this.app, {\n                name: input_def.name,\n                label: input_def.hide_label ? \"\" : input_def.label || input_def.name,\n                value: input_def.value,\n                text_value: input_def.text_value,\n                collapsible_value: input_def.collapsible_value,\n                collapsible_preview: input_def.collapsible_preview,\n                help: input_def.help,\n                argument: input_def.argument,\n                disabled: input_def.disabled,\n                color: input_def.color,\n                style: input_def.style,\n                backdrop: input_def.backdrop,\n                hidden: input_def.hidden,\n                fixed: input_def.fixed,\n                field: field\n            });\n            this.app.element_list[id] = input_element;\n            this._append(input_element.$el, input_def.id);\n            return field;\n        },\n\n        /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n        _append: function _append($el, id) {\n            this.$el.append($el.addClass(\"section-row\").attr(\"id\", id));\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 32:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** This class creates a ui component which enables the dynamic creation of portlets */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(8), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Portlet, Ui) {\n    var View = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.list = {};\n            this.options = Utils.merge(options, {\n                title: \"Repeat\",\n                empty_text: \"Not available.\",\n                max: null,\n                min: null\n            });\n            this.button_new = new Ui.ButtonIcon({\n                icon: \"fa-plus\",\n                title: \"Insert \" + this.options.title,\n                tooltip: \"Add new \" + this.options.title + \" block\",\n                cls: \"ui-button-icon ui-clear-float form-repeat-add\",\n                onclick: function onclick() {\n                    options.onnew && options.onnew();\n                }\n            });\n            this.setElement($(\"<div/>\").append(this.$list = $(\"<div/>\")).append($(\"<div/>\").append(this.button_new.$el)));\n        },\n\n        /** Number of repeat blocks */\n        size: function size() {\n            return _.size(this.list);\n        },\n\n        /** Add new repeat block */\n        add: function add(options) {\n            if (!options.id || this.list[options.id]) {\n                Galaxy.emit.debug(\"form-repeat::add()\", \"Duplicate or invalid repeat block id.\");\n                return;\n            }\n            var button_delete = new Ui.ButtonIcon({\n                icon: \"fa-trash-o\",\n                tooltip: \"Delete this repeat block\",\n                cls: \"ui-button-icon-plain form-repeat-delete\",\n                onclick: function onclick() {\n                    options.ondel && options.ondel();\n                }\n            });\n            var portlet = new Portlet.View({\n                id: options.id,\n                title: \"placeholder\",\n                cls: options.cls || \"ui-portlet-repeat\",\n                operations: { button_delete: button_delete }\n            });\n            portlet.append(options.$el);\n            portlet.$el.addClass(\"section-row\").hide();\n            this.list[options.id] = portlet;\n            this.$list.append(portlet.$el.fadeIn(\"fast\"));\n            this.options.max > 0 && this.size() >= this.options.max && this.button_new.disable();\n            this._refresh();\n        },\n\n        /** Delete repeat block */\n        del: function del(id) {\n            if (!this.list[id]) {\n                Galaxy.emit.debug(\"form-repeat::del()\", \"Invalid repeat block id.\");\n                return;\n            }\n            this.$list.find(\"#\" + id).remove();\n            delete this.list[id];\n            this.button_new.enable();\n            this._refresh();\n        },\n\n        /** Remove all */\n        delAll: function delAll() {\n            for (var id in this.list) {\n                this.del(id);\n            }\n        },\n\n        /** Hides add/del options */\n        hideOptions: function hideOptions() {\n            this.button_new.$el.hide();\n            _.each(this.list, function (portlet) {\n                portlet.hideOperation(\"button_delete\");\n            });\n            _.isEmpty(this.list) && this.$el.append($(\"<div/>\").addClass(\"ui-form-info\").html(this.options.empty_text));\n        },\n\n        /** Refresh view */\n        _refresh: function _refresh() {\n            var index = 0;\n            for (var id in this.list) {\n                var portlet = this.list[id];\n                portlet.title(++index + \": \" + this.options.title);\n                portlet[this.size() > this.options.min ? \"showOperation\" : \"hideOperation\"](\"button_delete\");\n            }\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 33:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n    This class creates a form input element wrapper\n*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    return Backbone.View.extend({\n        initialize: function initialize(app, options) {\n            this.app = app;\n            this.app_options = app.model ? app.model.attributes : {};\n            this.field = options && options.field || new Backbone.View();\n            this.model = options && options.model || new Backbone.Model({\n                text_enable: this.app_options.text_enable || \"Enable\",\n                text_disable: this.app_options.text_disable || \"Disable\",\n                cls_enable: this.app_options.cls_enable || \"fa fa-caret-square-o-down\",\n                cls_disable: this.app_options.cls_disable || \"fa fa-caret-square-o-up\",\n                always_refresh: this.app_options.always_refresh\n            }).set(options);\n\n            // set element and link components\n            this.setElement(this._template());\n            this.$field = this.$(\".ui-form-field\");\n            this.$info = this.$(\".ui-form-info\");\n            this.$preview = this.$(\".ui-form-preview\");\n            this.$collapsible = this.$(\".ui-form-collapsible\");\n            this.$collapsible_text = this.$(\".ui-form-collapsible-text\");\n            this.$collapsible_icon = this.$(\".ui-form-collapsible-icon\");\n            this.$title = this.$(\".ui-form-title\");\n            this.$title_text = this.$(\".ui-form-title-text\");\n            this.$error_text = this.$(\".ui-form-error-text\");\n            this.$error = this.$(\".ui-form-error\");\n            this.$backdrop = this.$(\".ui-form-backdrop\");\n\n            // add field element\n            this.$field.prepend(this.field.$el);\n\n            // decide wether to expand or collapse fields\n            var collapsible_value = this.model.get(\"collapsible_value\");\n            this.field.collapsed = collapsible_value !== undefined && JSON.stringify(this.model.get(\"value\")) == JSON.stringify(collapsible_value);\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n\n            // add click handler\n            var self = this;\n            this.$collapsible.on(\"click\", function () {\n                self.field.collapsed = !self.field.collapsed;\n                app.trigger && app.trigger(\"change\");\n                self.render();\n            });\n\n            // hide error on value change\n            if (this.field.model && !this.model.get(\"always_refresh\")) {\n                this.listenTo(this.field.model, \"change:value\", function () {\n                    self.reset();\n                });\n            }\n        },\n\n        /** Set backdrop for input element */\n        backdrop: function backdrop() {\n            this.model.set(\"backdrop\", true);\n        },\n\n        /** Set error text */\n        error: function error(text) {\n            this.model.set(\"error_text\", text);\n        },\n\n        /** Reset this view */\n        reset: function reset() {\n            !this.model.get(\"fixed\") && this.model.set(\"error_text\", null);\n        },\n\n        render: function render() {\n            // render help\n            $(\".tooltip\").hide();\n            var help_text = this.model.get(\"help\", \"\");\n            var help_argument = this.model.get(\"argument\");\n            if (help_argument && help_text.indexOf(\"(\" + help_argument + \")\") == -1) {\n                help_text += \" (\" + help_argument + \")\";\n            }\n            this.$info.html(help_text);\n            // render visibility\n            this.$el[this.model.get(\"hidden\") ? \"hide\" : \"show\"]();\n            // render preview view for collapsed fields\n            this.$preview[this.field.collapsed && this.model.get(\"collapsible_preview\") || this.model.get(\"disabled\") ? \"show\" : \"hide\"]().html(_.escape(this.model.get(\"text_value\")));\n            // render error messages\n            var error_text = this.model.get(\"error_text\");\n            this.$error[error_text ? \"show\" : \"hide\"]();\n            this.$el[error_text ? \"addClass\" : \"removeClass\"](\"ui-error\");\n            this.$error_text.html(error_text);\n            // render backdrop\n            this.$backdrop[this.model.get(\"backdrop\") ? \"show\" : \"hide\"]();\n            // render input field\n            this.field.collapsed || this.model.get(\"disabled\") ? this.$field.hide() : this.$field.show();\n            // render input field color and style\n            this.field.model && this.field.model.set({\n                color: this.model.get(\"color\"),\n                style: this.model.get(\"style\")\n            });\n            // render collapsible options\n            if (!this.model.get(\"disabled\") && this.model.get(\"collapsible_value\") !== undefined) {\n                var collapsible_state = this.field.collapsed ? \"enable\" : \"disable\";\n                this.$title_text.hide();\n                this.$collapsible.show();\n                this.$collapsible_text.text(this.model.get(\"label\"));\n                this.$collapsible_icon.removeClass().addClass(\"icon\").addClass(this.model.get(\"cls_\" + collapsible_state)).attr(\"data-original-title\", this.model.get(\"text_\" + collapsible_state)).tooltip({ placement: \"bottom\" });\n            } else {\n                this.$title_text.show().text(this.model.get(\"label\"));\n                this.$collapsible.hide();\n            }\n        },\n\n        _template: function _template() {\n            return $(\"<div/>\").addClass(\"ui-form-element\").append($(\"<div/>\").addClass(\"ui-form-error ui-error\").append($(\"<span/>\").addClass(\"fa fa-arrow-down\")).append($(\"<span/>\").addClass(\"ui-form-error-text\"))).append($(\"<div/>\").addClass(\"ui-form-title\").append($(\"<div/>\").addClass(\"ui-form-collapsible\").append($(\"<i/>\").addClass(\"ui-form-collapsible-icon\")).append($(\"<span/>\").addClass(\"ui-form-collapsible-text\"))).append($(\"<span/>\").addClass(\"ui-form-title-text\"))).append($(\"<div/>\").addClass(\"ui-form-field\").append($(\"<span/>\").addClass(\"ui-form-info\")).append($(\"<div/>\").addClass(\"ui-form-backdrop\"))).append($(\"<div/>\").addClass(\"ui-form-preview\"));\n        }\n    });\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 34:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n    This class creates input elements. New input parameter types should be added to the types dictionary.\n*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5), __webpack_require__(35), __webpack_require__(36), __webpack_require__(37), __webpack_require__(38), __webpack_require__(40)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, SelectContent, SelectLibrary, SelectFtp, SelectGenomeSpace, ColorPicker) {\n    // create form view\n    return Backbone.Model.extend({\n        /** Available parameter types */\n        types: {\n            text: \"_fieldText\",\n            password: \"_fieldText\",\n            select: \"_fieldSelect\",\n            data_column: \"_fieldSelect\",\n            genomebuild: \"_fieldSelect\",\n            data: \"_fieldData\",\n            data_collection: \"_fieldData\",\n            integer: \"_fieldSlider\",\n            float: \"_fieldSlider\",\n            boolean: \"_fieldBoolean\",\n            drill_down: \"_fieldDrilldown\",\n            color: \"_fieldColor\",\n            hidden: \"_fieldHidden\",\n            hidden_data: \"_fieldHidden\",\n            baseurl: \"_fieldHidden\",\n            library_data: \"_fieldLibrary\",\n            ftpfile: \"_fieldFtp\",\n            upload: \"_fieldUpload\",\n            genomespacefile: \"_fieldGenomeSpace\"\n        },\n\n        /** Returns an input field for a given field type */\n        create: function create(input_def) {\n            var fieldClass = this.types[input_def.type];\n            var field = typeof this[fieldClass] === \"function\" ? this[fieldClass].call(this, input_def) : null;\n            if (!field) {\n                field = input_def.options ? this._fieldSelect(input_def) : this._fieldText(input_def);\n                Galaxy.emit.debug(\"form-parameters::_addRow()\", \"Auto matched field type (\" + input_def.type + \").\");\n            }\n            input_def.value === undefined && (input_def.value = null);\n            field.value(input_def.value);\n            return field;\n        },\n\n        /** Data input field */\n        _fieldData: function _fieldData(input_def) {\n            return new SelectContent.View({\n                id: \"field-\" + input_def.id,\n                extensions: input_def.extensions,\n                optional: input_def.optional,\n                multiple: input_def.multiple,\n                type: input_def.type,\n                flavor: input_def.flavor,\n                data: input_def.options,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Select/Checkbox/Radio options field */\n        _fieldSelect: function _fieldSelect(input_def) {\n            // show text field e.g. in workflow editor\n            if (input_def.is_workflow) {\n                return this._fieldText(input_def);\n            }\n\n            // customize properties\n            if (input_def.type == \"data_column\") {\n                input_def.error_text = \"Missing columns in referenced dataset.\";\n            }\n\n            // identify available options\n            var data = input_def.data;\n            if (!data) {\n                data = [];\n                _.each(input_def.options, function (option) {\n                    data.push({ label: option[0], value: option[1] });\n                });\n            }\n\n            // identify display type\n            var SelectClass = Ui.Select;\n            switch (input_def.display) {\n                case \"checkboxes\":\n                    SelectClass = Ui.Checkbox;\n                    break;\n                case \"radio\":\n                    SelectClass = Ui.Radio;\n                    break;\n                case \"radiobutton\":\n                    SelectClass = Ui.RadioButton;\n                    break;\n            }\n\n            // create select field\n            return new SelectClass.View({\n                id: \"field-\" + input_def.id,\n                data: data,\n                error_text: input_def.error_text || \"No options available\",\n                readonly: input_def.readonly,\n                multiple: input_def.multiple,\n                optional: input_def.optional,\n                onchange: input_def.onchange,\n                individual: input_def.individual,\n                searchable: input_def.flavor !== \"workflow\"\n            });\n        },\n\n        /** Drill down options field */\n        _fieldDrilldown: function _fieldDrilldown(input_def) {\n            // show text field e.g. in workflow editor\n            if (input_def.is_workflow) {\n                return this._fieldText(input_def);\n            }\n\n            // create drill down field\n            return new Ui.Drilldown.View({\n                id: \"field-\" + input_def.id,\n                data: input_def.options,\n                display: input_def.display,\n                optional: input_def.optional,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Text input field */\n        _fieldText: function _fieldText(input_def) {\n            // field replaces e.g. a select field\n            if (input_def.options && input_def.data) {\n                input_def.area = input_def.multiple;\n                if (Utils.isEmpty(input_def.value)) {\n                    input_def.value = null;\n                } else {\n                    if ($.isArray(input_def.value)) {\n                        var str_value = \"\";\n                        for (var i in input_def.value) {\n                            str_value += String(input_def.value[i]);\n                            if (!input_def.multiple) {\n                                break;\n                            }\n                            str_value += \"\\n\";\n                        }\n                        input_def.value = str_value;\n                    }\n                }\n            }\n            // create input element\n            return new Ui.Input({\n                id: \"field-\" + input_def.id,\n                type: input_def.type,\n                area: input_def.area,\n                readonly: input_def.readonly,\n                placeholder: input_def.placeholder,\n                datalist: input_def.datalist,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Slider field */\n        _fieldSlider: function _fieldSlider(input_def) {\n            return new Ui.Slider.View({\n                id: \"field-\" + input_def.id,\n                precise: input_def.type == \"float\",\n                is_workflow: input_def.is_workflow,\n                min: input_def.min,\n                max: input_def.max,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Hidden field */\n        _fieldHidden: function _fieldHidden(input_def) {\n            return new Ui.Hidden({\n                id: \"field-\" + input_def.id,\n                info: input_def.info\n            });\n        },\n\n        /** Boolean field */\n        _fieldBoolean: function _fieldBoolean(input_def) {\n            return new Ui.RadioButton.View({\n                id: \"field-\" + input_def.id,\n                data: [{ label: \"Yes\", value: \"true\" }, { label: \"No\", value: \"false\" }],\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Color picker field */\n        _fieldColor: function _fieldColor(input_def) {\n            return new ColorPicker({\n                id: \"field-\" + input_def.id,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** Library dataset field */\n        _fieldLibrary: function _fieldLibrary(input_def) {\n            return new SelectLibrary.View({\n                id: \"field-\" + input_def.id,\n                optional: input_def.optional,\n                multiple: input_def.multiple,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** FTP file field */\n        _fieldFtp: function _fieldFtp(input_def) {\n            return new SelectFtp.View({\n                id: \"field-\" + input_def.id,\n                optional: input_def.optional,\n                multiple: input_def.multiple,\n                onchange: input_def.onchange\n            });\n        },\n\n        /** GenomeSpace file select field\n        */\n        _fieldGenomeSpace: function _fieldGenomeSpace(input_def) {\n            var self = this;\n            return new SelectGenomeSpace.View({\n                id: \"field-\" + input_def.id,\n                onchange: function onchange() {\n                    self.app.trigger(\"change\");\n                }\n            });\n        },\n\n        /** Upload file field */\n        _fieldUpload: function _fieldUpload(input_def) {\n            return new Ui.Upload({\n                id: \"field-\" + input_def.id,\n                onchange: input_def.onchange\n            });\n        }\n    });\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 35:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5), __webpack_require__(17)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, Select) {\n    /** Batch mode variations */\n    var Batch = { DISABLED: \"disabled\", ENABLED: \"enabled\", LINKED: \"linked\" };\n\n    /** List of available content selectors options */\n    var Configurations = {\n        data: [{\n            src: \"hda\",\n            icon: \"fa-file-o\",\n            tooltip: \"Single dataset\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }, {\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.LINKED\n        }, {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.LINKED\n        }],\n        data_multiple: [{\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.DISABLED\n        }, {\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collections\",\n            multiple: true,\n            batch: Batch.DISABLED\n        }],\n        data_collection: [{\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }],\n        workflow_data: [{\n            src: \"hda\",\n            icon: \"fa-file-o\",\n            tooltip: \"Single dataset\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }],\n        workflow_data_multiple: [{\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.DISABLED\n        }],\n        workflow_data_collection: [{\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }],\n        module_data: [{\n            src: \"hda\",\n            icon: \"fa-file-o\",\n            tooltip: \"Single dataset\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }, {\n            src: \"hda\",\n            icon: \"fa-files-o\",\n            tooltip: \"Multiple datasets\",\n            multiple: true,\n            batch: Batch.ENABLED\n        }],\n        module_data_collection: [{\n            src: \"hdca\",\n            icon: \"fa-folder-o\",\n            tooltip: \"Dataset collection\",\n            multiple: false,\n            batch: Batch.DISABLED\n        }, {\n            src: \"hdca\",\n            icon: \"fa-folder\",\n            tooltip: \"Multiple collections\",\n            multiple: true,\n            batch: Batch.ENABLED\n        }]\n    };\n\n    /** View for hda and hdca content selector ui elements */\n    var View = Backbone.View.extend({\n        initialize: function initialize(options) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model({\n                src_labels: { hda: \"dataset\", hdca: \"dataset collection\" },\n                pagelimit: 100,\n                statustimer: 1000\n            }).set(options);\n            this.setElement($(\"<div/>\").addClass(\"ui-select-content\"));\n            this.button_product = new Ui.RadioButton.View({\n                value: \"false\",\n                data: [{\n                    icon: \"fa fa-chain\",\n                    value: \"false\",\n                    tooltip: \"Linked inputs will be run in matched order with other datasets e.g. use this for matching forward and reverse reads.\"\n                }, {\n                    icon: \"fa fa-chain-broken\",\n                    value: \"true\",\n                    tooltip: \"Unlinked dataset inputs will be run against *all* other inputs.\"\n                }]\n            });\n            var $batch_div = $(\"<div/>\").addClass(\"ui-form-info\").append($(\"<i/>\").addClass(\"fa fa-sitemap\")).append($(\"<span/>\").html(\"This is a batch mode input field. Separate jobs will be triggered for each dataset selection.\"));\n            this.$batch = {\n                linked: $batch_div.clone(),\n                enabled: $batch_div.clone().append($(\"<div/>\").append($(\"<div/>\").addClass(\"ui-form-title\").html(\"Batch options:\")).append(this.button_product.$el)).append($(\"<div/>\").css(\"clear\", \"both\"))\n            };\n\n            // add drag-drop event handlers\n            this.$el.on(\"dragenter\", function (e) {\n                this.lastenter = e.target;\n                self.$el.addClass(\"ui-dragover\");\n            }).on(\"dragover\", function (e) {\n                e.preventDefault();\n            }).on(\"dragleave\", function (e) {\n                this.lastenter === e.target && self.$el.removeClass(\"ui-dragover\");\n            }).on(\"drop\", function (e) {\n                self._handleDrop(e);\n            });\n\n            // track current history elements\n            this.history = {};\n\n            // add listeners\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(this.model, \"change:current\", this._changeCurrent, this);\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(this.model, \"change:type change:optional change:multiple change:extensions\", this._changeType, this);\n            this.render();\n\n            // add change event\n            this.on(\"change\", function () {\n                options.onchange && options.onchange(self.value());\n            });\n        },\n\n        render: function render() {\n            this._changeType();\n            this._changeValue();\n            this._changeWait();\n        },\n\n        /** Indicate that select fields are being updated */\n        wait: function wait() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Indicate that the options update has been completed */\n        unwait: function unwait() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Update data representing selectable options */\n        update: function update(options) {\n            this.model.set(\"data\", options);\n        },\n\n        /** Return the currently selected dataset values */\n        value: function value(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            var current = this.model.get(\"current\");\n            if (this.config[current]) {\n                var id_list = this.fields[current].value();\n                if (id_list !== null) {\n                    id_list = $.isArray(id_list) ? id_list : [id_list];\n                    if (id_list.length > 0) {\n                        var result = this._batch({ values: [] });\n                        for (var i in id_list) {\n                            var details = this.history[id_list[i] + \"_\" + this.config[current].src];\n                            if (details) {\n                                result.values.push(details);\n                            } else {\n                                Galaxy.emit.debug(\"ui-select-content::value()\", \"Requested details not found for '\" + id_list[i] + \"'.\");\n                                return null;\n                            }\n                        }\n                        result.values.sort(function (a, b) {\n                            return a.hid - b.hid;\n                        });\n                        return result;\n                    }\n                }\n            } else {\n                Galaxy.emit.debug(\"ui-select-content::value()\", \"Invalid value/source '\" + new_value + \"'.\");\n            }\n            return null;\n        },\n\n        /** Change of current select field */\n        _changeCurrent: function _changeCurrent() {\n            var self = this;\n            _.each(this.fields, function (field, i) {\n                if (self.model.get(\"current\") == i) {\n                    field.$el.show();\n                    _.each(self.$batch, function ($batchfield, batchmode) {\n                        $batchfield[self.config[i].batch == batchmode ? \"show\" : \"hide\"]();\n                    });\n                    self.button_type.value(i);\n                } else {\n                    field.$el.hide();\n                }\n            });\n        },\n\n        /** Change of type */\n        _changeType: function _changeType() {\n            var self = this;\n\n            // identify selector type identifier i.e. [ flavor ]_[ type ]_[ multiple ]\n            var config_id = (this.model.get(\"flavor\") ? this.model.get(\"flavor\") + \"_\" : \"\") + String(this.model.get(\"type\")) + (this.model.get(\"multiple\") ? \"_multiple\" : \"\");\n            if (Configurations[config_id]) {\n                this.config = Configurations[config_id];\n            } else {\n                this.config = Configurations[\"data\"];\n                Galaxy.emit.debug(\"ui-select-content::_changeType()\", \"Invalid configuration/type id '\" + config_id + \"'.\");\n            }\n\n            // prepare extension component of error message\n            var data = self.model.get(\"data\");\n            var extensions = Utils.textify(this.model.get(\"extensions\"));\n            var src_labels = this.model.get(\"src_labels\");\n\n            // build views\n            this.fields = [];\n            this.button_data = [];\n            _.each(this.config, function (c, i) {\n                self.button_data.push({\n                    value: i,\n                    icon: c.icon,\n                    tooltip: c.tooltip\n                });\n                self.fields.push(new Select.View({\n                    optional: self.model.get(\"optional\"),\n                    multiple: c.multiple,\n                    searchable: !c.multiple || data && data[c.src] && data[c.src].length > self.model.get(\"pagelimit\"),\n                    individual: true,\n                    error_text: \"No \" + (extensions ? extensions + \" \" : \"\") + (src_labels[c.src] || \"content\") + \" available.\",\n                    onchange: function onchange() {\n                        self.trigger(\"change\");\n                    }\n                }));\n            });\n            this.button_type = new Ui.RadioButton.View({\n                value: this.model.get(\"current\"),\n                data: this.button_data,\n                onchange: function onchange(value) {\n                    self.model.set(\"current\", value);\n                    self.trigger(\"change\");\n                }\n            });\n\n            // append views\n            this.$el.empty();\n            var button_width = 0;\n            if (this.fields.length > 1) {\n                this.$el.append(this.button_type.$el);\n                button_width = Math.max(0, this.fields.length * 36) + \"px\";\n            }\n            _.each(this.fields, function (field) {\n                self.$el.append(field.$el.css({ \"margin-left\": button_width }));\n            });\n            _.each(this.$batch, function ($batchfield, batchmode) {\n                self.$el.append($batchfield.css({ \"margin-left\": button_width }));\n            });\n            this.model.set(\"current\", 0);\n            this._changeCurrent();\n            this._changeData();\n        },\n\n        /** Change of wait flag */\n        _changeWait: function _changeWait() {\n            var self = this;\n            _.each(this.fields, function (field) {\n                field[self.model.get(\"wait\") ? \"wait\" : \"unwait\"]();\n            });\n        },\n\n        /** Change of available options */\n        _changeData: function _changeData() {\n            var options = this.model.get(\"data\");\n            var self = this;\n            var select_options = {};\n            _.each(options, function (items, src) {\n                select_options[src] = [];\n                _.each(items, function (item) {\n                    select_options[src].push({\n                        hid: item.hid,\n                        keep: item.keep,\n                        label: item.hid + \": \" + item.name,\n                        value: item.id,\n                        tags: item.tags\n                    });\n                    self.history[item.id + \"_\" + src] = item;\n                });\n            });\n            _.each(this.config, function (c, i) {\n                select_options[c.src] && self.fields[i].add(select_options[c.src], function (a, b) {\n                    return b.hid - a.hid;\n                });\n            });\n        },\n\n        /** Change of incoming value */\n        _changeValue: function _changeValue() {\n            var new_value = this.model.get(\"value\");\n            if (new_value && new_value.values && new_value.values.length > 0) {\n                // create list with content ids\n                var list = [];\n                _.each(new_value.values, function (value) {\n                    list.push(value.id);\n                });\n                // sniff first suitable field type from config list\n                var src = new_value.values[0].src;\n                var multiple = new_value.values.length > 1;\n                for (var i = 0; i < this.config.length; i++) {\n                    var field = this.fields[i];\n                    var c = this.config[i];\n                    if (c.src == src && [multiple, true].indexOf(c.multiple) !== -1) {\n                        this.model.set(\"current\", i);\n                        field.value(list);\n                        break;\n                    }\n                }\n            } else {\n                _.each(this.fields, function (field) {\n                    field.value(null);\n                });\n            }\n        },\n\n        /** Handles drop events e.g. from history panel */\n        _handleDrop: function _handleDrop(ev) {\n            try {\n                var data = this.model.get(\"data\");\n                var current = this.model.get(\"current\");\n                var config = this.config[current];\n                var field = this.fields[current];\n                var drop_data = JSON.parse(ev.originalEvent.dataTransfer.getData(\"text\"))[0];\n                var new_id = drop_data.id;\n                var new_src = drop_data.history_content_type == \"dataset\" ? \"hda\" : \"hdca\";\n                var new_value = { id: new_id, src: new_src };\n                if (data && _.findWhere(data[new_src], new_value)) {\n                    if (config.src == new_src) {\n                        var current_value = field.value();\n                        if (current_value && config.multiple) {\n                            if (current_value.indexOf(new_id) == -1) {\n                                current_value.push(new_id);\n                            }\n                        } else {\n                            current_value = new_id;\n                        }\n                        field.value(current_value);\n                    } else {\n                        this.model.set(\"value\", { values: [new_value] });\n                        this.model.trigger(\"change:value\");\n                    }\n                    this.trigger(\"change\");\n                    this._handleDropStatus(\"success\");\n                } else {\n                    this._handleDropStatus(\"danger\");\n                }\n            } catch (e) {\n                this._handleDropStatus(\"danger\");\n            }\n            ev.preventDefault();\n        },\n\n        /** Highlight drag result */\n        _handleDropStatus: function _handleDropStatus(status) {\n            var self = this;\n            this.$el.removeClass(\"ui-dragover\").addClass(\"ui-dragover-\" + status);\n            setTimeout(function () {\n                self.$el.removeClass(\"ui-dragover-\" + status);\n            }, this.model.get(\"statustimer\"));\n        },\n\n        /** Assists in identifying the batch mode */\n        _batch: function _batch(result) {\n            result[\"batch\"] = false;\n            var current = this.model.get(\"current\");\n            var config = this.config[current];\n            if (config.src == \"hdca\" && !config.multiple) {\n                var hdca = this.history[this.fields[current].value() + \"_hdca\"];\n                if (hdca && hdca.map_over_type) {\n                    result[\"batch\"] = true;\n                }\n            }\n            if (config.batch == Batch.LINKED || config.batch == Batch.ENABLED) {\n                result[\"batch\"] = true;\n                if (config.batch == Batch.ENABLED && this.button_product.value() === \"true\") {\n                    result[\"product\"] = true;\n                }\n            }\n            return result;\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 36:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5), __webpack_require__(22), __webpack_require__(19)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, Table, List) {\n    // collection of libraries\n    var Libraries = Backbone.Collection.extend({\n        url: Galaxy.root + \"api/libraries?deleted=false\"\n    });\n\n    // collection of dataset\n    var LibraryDatasets = Backbone.Collection.extend({\n        initialize: function initialize() {\n            var self = this;\n            this.config = new Backbone.Model({ library_id: null });\n            this.config.on(\"change\", function () {\n                self.fetch({ reset: true });\n            });\n        },\n        url: function url() {\n            return Galaxy.root + \"api/libraries/\" + this.config.get(\"library_id\") + \"/contents\";\n        }\n    });\n\n    // hda/hdca content selector ui element\n    var View = Backbone.View.extend({\n        // initialize\n        initialize: function initialize(options) {\n            // link this\n            var self = this;\n\n            // collections\n            this.libraries = new Libraries();\n            this.datasets = new LibraryDatasets();\n\n            // link app and options\n            this.options = options;\n\n            // select field for the library\n            // TODO: Remove this once the library API supports searching for library datasets\n            this.library_select = new Ui.Select.View({\n                onchange: function onchange(value) {\n                    self.datasets.config.set(\"library_id\", value);\n                }\n            });\n\n            // create ui-list view to keep track of selected data libraries\n            this.dataset_list = new List.View({\n                name: \"dataset\",\n                optional: options.optional,\n                multiple: options.multiple,\n                onchange: function onchange() {\n                    self.trigger(\"change\");\n                }\n            });\n\n            // add reset handler for fetched libraries\n            this.libraries.on(\"reset\", function () {\n                var data = [];\n                self.libraries.each(function (model) {\n                    data.push({\n                        value: model.id,\n                        label: model.get(\"name\")\n                    });\n                });\n                self.library_select.update(data);\n            });\n\n            // add reset handler for fetched library datasets\n            this.datasets.on(\"reset\", function () {\n                var data = [];\n                var library_current = self.library_select.text();\n                if (library_current !== null) {\n                    self.datasets.each(function (model) {\n                        if (model.get(\"type\") === \"file\") {\n                            data.push({\n                                value: model.id,\n                                label: model.get(\"name\")\n                            });\n                        }\n                    });\n                }\n                self.dataset_list.update(data);\n            });\n\n            // add change event. fires on trigger\n            this.on(\"change\", function () {\n                options.onchange && options.onchange(self.value());\n            });\n\n            // create elements\n            this.setElement(this._template());\n            this.$(\".library-select\").append(this.library_select.$el);\n            this.$el.append(this.dataset_list.$el);\n\n            // initial fetch of libraries\n            this.libraries.fetch({\n                reset: true,\n                success: function success() {\n                    self.library_select.trigger(\"change\");\n                    if (self.options.value !== undefined) {\n                        self.value(self.options.value);\n                    }\n                }\n            });\n        },\n\n        /** Return/Set currently selected library datasets */\n        value: function value(val) {\n            return this.dataset_list.value(val);\n        },\n\n        /** Template */\n        _template: function _template() {\n            return '<div class=\"ui-select-library\">' + '<div class=\"library ui-margin-bottom\">' + '<span class=\"library-title\">Select Library</span>' + '<span class=\"library-select\"/>' + \"</div>\" + \"</div>\";\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 37:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(19)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, List) {\n    /**\n    * FTP file selector\n    */\n    var View = Backbone.View.extend({\n        // initialize\n        initialize: function initialize(options) {\n            // link this\n            var self = this;\n\n            // create ui-list view to keep track of selected ftp files\n            this.ftpfile_list = new List.View({\n                name: \"file\",\n                optional: options.optional,\n                multiple: options.multiple,\n                onchange: function onchange() {\n                    options.onchange && options.onchange(self.value());\n                }\n            });\n\n            // create elements\n            this.setElement(this.ftpfile_list.$el);\n\n            // initial fetch of ftps\n            Utils.get({\n                url: Galaxy.root + \"api/remote_files\",\n                success: function success(response) {\n                    var data = [];\n                    for (var i in response) {\n                        data.push({\n                            value: response[i][\"path\"],\n                            label: response[i][\"path\"]\n                        });\n                    }\n                    self.ftpfile_list.update(data);\n                }\n            });\n        },\n\n        /** Return/Set currently selected ftp datasets */\n        value: function value(val) {\n            return this.ftpfile_list.value(val);\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 38:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// dependencies\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5), __webpack_require__(39)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui, GenomespaceBrowser) {\n    /**\n    * GenomeSpace file selector\n    */\n    var View = Backbone.View.extend({\n        // initialize\n        initialize: function initialize(options) {\n            // link this\n            var self = this;\n\n            // create insert new list element button\n            this.browse_button = new Ui.ButtonIcon({\n                title: \"Browse\",\n                icon: \"fa fa-sign-in\",\n                tooltip: \"Browse GenomeSpace\",\n                onclick: function onclick() {\n                    self.browseGenomeSpace();\n                }\n            });\n\n            // create genomespace filepath textbox\n            this.filename_textbox = new Ui.Input();\n\n            // create genomespace token textbox\n            this.token_textbox = new Ui.Input({\n                type: \"password\"\n            });\n\n            // create elements\n            this.setElement(this._template(options));\n            this.$(\".ui-gs-browse-button\").append(this.browse_button.$el);\n            this.$(\".ui-gs-filename-textbox\").append(this.filename_textbox.$el);\n            this.$(\".ui-gs-token-textbox\").append(this.token_textbox.$el);\n        },\n\n        /** Browse GenomeSpace */\n        browseGenomeSpace: function browseGenomeSpace(options) {\n            var self = this;\n            GenomespaceBrowser.openFileBrowser({\n                successCallback: function successCallback(data) {\n                    self.value(data.destination + \"^\" + data.token);\n                }\n            });\n        },\n\n        /** Main Template */\n        _template: function _template(options) {\n            return '<div class=\"ui-gs-select-file\">' + '<div class=\"ui-gs-browse-field\">' + '<span class=\"ui-gs-browse-button\" />' + '<span class=\"ui-gs-filename-textbox\" />' + \"</div>\" + '<div class=\"ui-gs-token-field\">' + '<span class=ui-gs-label\"><div class=\"ui-gs-token-label\">Token</div></span>' + '<span class=\"ui-gs-token-textbox\" />' + \"</div>\" + \"</div>\";\n        },\n\n        /** Return/Set currently selected genomespace filename/token */\n        value: function value(new_value) {\n            // check if new_value is defined\n            if (new_value !== undefined) {\n                this._setValue(new_value);\n            } else {\n                return this._getValue();\n            }\n        },\n\n        // get value\n        _getValue: function _getValue() {\n            return this.filename_textbox.value() + \"^\" + this.token_textbox.value();\n        },\n\n        // set value\n        _setValue: function _setValue(new_value) {\n            if (new_value) {\n                values = new_value.split(\"^\");\n                this.filename_textbox.value(values[0]);\n                this.token_textbox.value(values[1]);\n            }\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 39:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n// Provides support for interacting with the GenomeSpace File Browser popup dialogue\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    // tool form templates\n    return {\n        openFileBrowser: function openFileBrowser(options) {\n            var GS_UI_URL = window.Galaxy.config.genomespace_ui_url;\n            var GS_UPLOAD_URL = GS_UI_URL + \"upload/loadUrlToGenomespace.html?getLocation=true\";\n\n            var newWin = window.open(GS_UPLOAD_URL, \"GenomeSpace File Browser\", \"height=360px,width=600px\");\n\n            successCalBack = options[\"successCallback\"];\n            window.addEventListener(\"message\", function (e) {\n                successCalBack(e.data);\n            }, false);\n\n            newWin.focus();\n\n            if (options[\"errorCallback\"] != null) newWin.setCallbackOnGSUploadError = config[\"errorCallback\"];\n        }\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ 40:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** Renders the color picker used e.g. in the tool form **/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils) {\n    return Backbone.View.extend({\n        colors: {\n            standard: [\"c00000\", \"ff0000\", \"ffc000\", \"ffff00\", \"92d050\", \"00b050\", \"00b0f0\", \"0070c0\", \"002060\", \"7030a0\"],\n            base: [\"ffffff\", \"000000\", \"eeece1\", \"1f497d\", \"4f81bd\", \"c0504d\", \"9bbb59\", \"8064a2\", \"4bacc6\", \"f79646\"],\n            theme: [[\"f2f2f2\", \"7f7f7f\", \"ddd9c3\", \"c6d9f0\", \"dbe5f1\", \"f2dcdb\", \"ebf1dd\", \"e5e0ec\", \"dbeef3\", \"fdeada\"], [\"d8d8d8\", \"595959\", \"c4bd97\", \"8db3e2\", \"b8cce4\", \"e5b9b7\", \"d7e3bc\", \"ccc1d9\", \"b7dde8\", \"fbd5b5\"], [\"bfbfbf\", \"3f3f3f\", \"938953\", \"548dd4\", \"95b3d7\", \"d99694\", \"c3d69b\", \"b2a2c7\", \"92cddc\", \"fac08f\"], [\"a5a5a5\", \"262626\", \"494429\", \"17365d\", \"366092\", \"953734\", \"76923c\", \"5f497a\", \"31859b\", \"e36c09\"], [\"7f7f7e\", \"0c0c0c\", \"1d1b10\", \"0f243e\", \"244061\", \"632423\", \"4f6128\", \"3f3151\", \"205867\", \"974806\"]]\n        },\n\n        initialize: function initialize(options) {\n            this.options = Utils.merge(options, {});\n            this.setElement(this._template());\n            this.$panel = this.$(\".ui-color-picker-panel\");\n            this.$view = this.$(\".ui-color-picker-view\");\n            this.$value = this.$(\".ui-color-picker-value\");\n            this.$header = this.$(\".ui-color-picker-header\");\n            this._build();\n            this.visible = false;\n            this.value(this.options.value);\n            this.$boxes = this.$(\".ui-color-picker-box\");\n            var self = this;\n            this.$boxes.on(\"click\", function () {\n                self.value($(this).css(\"background-color\"));\n                self.$header.trigger(\"click\");\n            });\n            this.$header.on(\"click\", function () {\n                self.visible = !self.visible;\n                if (self.visible) {\n                    self.$view.fadeIn(\"fast\");\n                } else {\n                    self.$view.fadeOut(\"fast\");\n                }\n            });\n        },\n\n        /** Get/set value */\n        value: function value(new_val) {\n            if (new_val !== undefined && new_val !== null) {\n                this.$value.css(\"background-color\", new_val);\n                this.$(\".ui-color-picker-box\").empty();\n                this.$(this._getValue()).html(this._templateCheck());\n                this.options.onchange && this.options.onchange(new_val);\n            }\n            return this._getValue();\n        },\n\n        /** Get value from dom */\n        _getValue: function _getValue() {\n            var rgb = this.$value.css(\"background-color\");\n            rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n            if (rgb) {\n                var hex = function hex(x) {\n                    return (\"0\" + parseInt(x).toString(16)).slice(-2);\n                };\n\n                return \"#\" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);\n            } else {\n                return null;\n            }\n        },\n\n        /** Build color panel */\n        _build: function _build() {\n            this._content({ colors: this.colors.base });\n            for (var i in this.colors.theme) {\n                var line_def = {};\n                if (i == 0) {\n                    line_def[\"bottom\"] = true;\n                } else if (i != this.colors.theme.length - 1) {\n                    line_def[\"top\"] = true;\n                    line_def[\"bottom\"] = true;\n                } else {\n                    line_def[\"top\"] = true;\n                }\n                line_def[\"colors\"] = this.colors.theme[i];\n                this._content(line_def);\n            }\n            this._content({ colors: this.colors.standard });\n        },\n\n        /** Create content */\n        _content: function _content(options) {\n            var colors = options.colors;\n            var $content = $(this._templateContent());\n            var $line = $content.find(\".line\");\n            this.$panel.append($content);\n            for (var i in colors) {\n                var $box = $(this._templateBox(colors[i]));\n                if (options.top) {\n                    $box.css(\"border-top\", \"none\");\n                    $box.css(\"border-top-left-radius\", \"0px\");\n                    $box.css(\"border-top-right-radius\", \"0px\");\n                }\n                if (options.bottom) {\n                    $box.css(\"border-bottom\", \"none\");\n                    $box.css(\"border-bottom-left-radius\", \"0px\");\n                    $box.css(\"border-bottom-right-radius\", \"0px\");\n                }\n                $line.append($box);\n            }\n            return $content;\n        },\n\n        /** Check icon */\n        _templateCheck: function _templateCheck() {\n            return '<div class=\"ui-color-picker-check fa fa-check\"/>';\n        },\n\n        /** Content template */\n        _templateContent: function _templateContent() {\n            return '<div class=\"ui-color-picker-content\">' + '<div class=\"line\"/>' + \"</div>\";\n        },\n\n        /** Box template */\n        _templateBox: function _templateBox(color) {\n            return '<div id=\"' + color + '\" class=\"ui-color-picker-box\" style=\"background-color: #' + color + ';\"/>';\n        },\n\n        /** Main template */\n        _template: function _template() {\n            return '<div class=\"ui-color-picker\">' + '<div class=\"ui-color-picker-header\">' + '<div class=\"ui-color-picker-value\"/>' + '<div class=\"ui-color-picker-label\">Select a color</div>' + \"</div>\" + '<div class=\"ui-color-picker-view ui-input\">' + '<div class=\"ui-color-picker-panel\"/>' + \"</div>\";\n            \"</div>\";\n        }\n    });\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 44:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone) {\n\nvar jQuery = __webpack_require__(0),\n    $ = jQuery,\n    QUERY_STRING = __webpack_require__(11),\n    Ui = __webpack_require__(5);\n\nvar Router = Backbone.Router.extend({\n    // TODO: not many client routes at this point - fill and remove from server.\n    // since we're at root here, this may be the last to be routed entirely on the client.\n    initialize: function initialize(page, options) {\n        this.page = page;\n        this.options = options;\n    },\n\n    /** helper to push a new navigation state */\n    push: function push(url, data) {\n        data = data || {};\n        data.__identifer = Math.random().toString(36).substr(2);\n        if (!$.isEmptyObject(data)) {\n            url += url.indexOf(\"?\") == -1 ? \"?\" : \"&\";\n            url += $.param(data, true);\n        }\n        Galaxy.params = data;\n        this.navigate(url, { trigger: true });\n    },\n\n    /** override to parse query string into obj and send to each route */\n    execute: function execute(callback, args, name) {\n        Galaxy.debug(\"router execute:\", callback, args, name);\n        var queryObj = QUERY_STRING.parse(args.pop());\n        args.push(queryObj);\n        if (callback) {\n            if (this.authenticate(args, name)) {\n                callback.apply(this, args);\n            } else {\n                this.access_denied();\n            }\n        }\n    },\n\n    authenticate: function authenticate(args, name) {\n        return true;\n    },\n\n    access_denied: function access_denied() {\n        this.page.display(new Ui.Message({\n            status: \"danger\",\n            message: \"You must be logged in with proper credentials to make this request.\",\n            persistent: true\n        }));\n    }\n});\n\nmodule.exports = Router;\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))\n\n/***/ }),\n\n/***/ 5:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $, _) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(17), __webpack_require__(29), __webpack_require__(18), __webpack_require__(30), __webpack_require__(10), __webpack_require__(7)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Select, Slider, Options, Drilldown, Buttons, Modal) {\n    /** Label wrapper */\n    var Label = Backbone.View.extend({\n        tagName: \"label\",\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model(options);\n            this.tagName = options.tagName || this.tagName;\n            this.setElement($(\"<\" + this.tagName + \"/>\"));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n        title: function title(new_title) {\n            this.model.set(\"title\", new_title);\n        },\n        value: function value() {\n            return this.model.get(\"title\");\n        },\n        render: function render() {\n            this.$el.removeClass().addClass(\"ui-label\").addClass(this.model.get(\"cls\")).html(this.model.get(\"title\"));\n            return this;\n        }\n    });\n\n    /** Displays messages used e.g. in the tool form */\n    var Message = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                message: null,\n                status: \"info\",\n                cls: \"\",\n                persistent: false,\n                fade: true\n            }).set(options);\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n        update: function update(options) {\n            this.model.set(options);\n        },\n        render: function render() {\n            this.$el.removeClass().addClass(\"ui-message\").addClass(this.model.get(\"cls\"));\n            var status = this.model.get(\"status\");\n            if (this.model.get(\"large\")) {\n                this.$el.addClass((status == \"success\" && \"done\" || status == \"danger\" && \"error\" || status) + \"messagelarge\");\n            } else {\n                this.$el.addClass(\"alert\").addClass(\"alert-\" + status);\n            }\n            if (this.model.get(\"message\")) {\n                this.$el.html(this.messageForDisplay());\n                this.$el[this.model.get(\"fade\") ? \"fadeIn\" : \"show\"]();\n                this.timeout && window.clearTimeout(this.timeout);\n                if (!this.model.get(\"persistent\")) {\n                    var self = this;\n                    this.timeout = window.setTimeout(function () {\n                        self.model.set(\"message\", \"\");\n                    }, 3000);\n                }\n            } else {\n                this.$el.fadeOut();\n            }\n            return this;\n        },\n        messageForDisplay: function messageForDisplay() {\n            return _.escape(this.model.get(\"message\"));\n        }\n    });\n\n    var UnescapedMessage = Message.extend({\n        messageForDisplay: function messageForDisplay() {\n            return this.model.get(\"message\");\n        }\n    });\n\n    /** Renders an input element used e.g. in the tool form */\n    var Input = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model({\n                type: \"text\",\n                placeholder: \"\",\n                disabled: false,\n                readonly: false,\n                visible: true,\n                cls: \"\",\n                area: false,\n                color: null,\n                style: null\n            }).set(options);\n            this.tagName = this.model.get(\"area\") ? \"textarea\" : \"input\";\n            this.setElement($(\"<\" + this.tagName + \"/>\"));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n        events: {\n            input: \"_onchange\"\n        },\n        value: function value(new_val) {\n            new_val !== undefined && this.model.set(\"value\", typeof new_val === \"string\" ? new_val : \"\");\n            return this.model.get(\"value\");\n        },\n        render: function render() {\n            var self = this;\n            this.$el.removeClass().addClass(\"ui-\" + this.tagName).addClass(this.model.get(\"cls\")).addClass(this.model.get(\"style\")).attr(\"id\", this.model.id).attr(\"type\", this.model.get(\"type\")).attr(\"placeholder\", this.model.get(\"placeholder\")).css(\"color\", this.model.get(\"color\") || \"\").css(\"border-color\", this.model.get(\"color\") || \"\");\n            var datalist = this.model.get(\"datalist\");\n            if ($.isArray(datalist) && datalist.length > 0) {\n                this.$el.autocomplete({\n                    source: function source(request, response) {\n                        response(self.model.get(\"datalist\"));\n                    },\n                    change: function change() {\n                        self._onchange();\n                    }\n                });\n            }\n            if (this.model.get(\"value\") !== this.$el.val()) {\n                this.$el.val(this.model.get(\"value\"));\n            }\n            _.each([\"readonly\", \"disabled\"], function (attr_name) {\n                self.model.get(attr_name) ? self.$el.attr(attr_name, true) : self.$el.removeAttr(attr_name);\n            });\n            this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n            return this;\n        },\n        _onchange: function _onchange() {\n            this.value(this.$el.val());\n            this.model.get(\"onchange\") && this.model.get(\"onchange\")(this.model.get(\"value\"));\n        }\n    });\n\n    /** Creates a hidden element input field used e.g. in the tool form */\n    var Hidden = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = options && options.model || new Backbone.Model(options);\n            this.setElement($(\"<div/>\").append(this.$info = $(\"<div/>\")).append(this.$hidden = $(\"<div/>\")));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n        value: function value(new_val) {\n            new_val !== undefined && this.model.set(\"value\", new_val);\n            return this.model.get(\"value\");\n        },\n        render: function render() {\n            this.$el.attr(\"id\", this.model.id);\n            this.$hidden.val(this.model.get(\"value\"));\n            this.model.get(\"info\") ? this.$info.show().text(this.model.get(\"info\")) : this.$info.hide();\n            return this;\n        }\n    });\n\n    /** Creates a upload element input field */\n    var Upload = Backbone.View.extend({\n        initialize: function initialize(options) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model(options);\n            this.setElement($(\"<div/>\").append(this.$info = $(\"<div/>\")).append(this.$file = $(\"<input/>\").attr(\"type\", \"file\").addClass(\"ui-margin-bottom\")).append(this.$text = $(\"<textarea/>\").addClass(\"ui-textarea\").attr(\"disabled\", true)).append(this.$wait = $(\"<i/>\").addClass(\"fa fa-spinner fa-spin\")));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.$file.on(\"change\", function (e) {\n                self._readFile(e);\n            });\n            this.render();\n        },\n        value: function value(new_val) {\n            new_val !== undefined && this.model.set(\"value\", new_val);\n            return this.model.get(\"value\");\n        },\n        render: function render() {\n            this.$el.attr(\"id\", this.model.id);\n            this.model.get(\"info\") ? this.$info.show().text(this.model.get(\"info\")) : this.$info.hide();\n            this.model.get(\"value\") ? this.$text.text(this.model.get(\"value\")).show() : this.$text.hide();\n            this.model.get(\"wait\") ? this.$wait.show() : this.$wait.hide();\n            return this;\n        },\n        _readFile: function _readFile(e) {\n            var self = this;\n            var file = e.target.files && e.target.files[0];\n            if (file) {\n                var reader = new FileReader();\n                reader.onload = function () {\n                    self.model.set({ wait: false, value: this.result });\n                };\n                this.model.set({ wait: true, value: null });\n                reader.readAsText(file);\n            }\n        }\n    });\n\n    return {\n        Button: Buttons.ButtonDefault,\n        ButtonIcon: Buttons.ButtonIcon,\n        ButtonCheck: Buttons.ButtonCheck,\n        ButtonMenu: Buttons.ButtonMenu,\n        ButtonLink: Buttons.ButtonLink,\n        Input: Input,\n        Label: Label,\n        Message: Message,\n        UnescapedMessage: UnescapedMessage,\n        Upload: Upload,\n        Modal: Modal,\n        RadioButton: Options.RadioButton,\n        Checkbox: Options.Checkbox,\n        Radio: Options.Radio,\n        Select: Select,\n        Hidden: Hidden,\n        Slider: Slider,\n        Drilldown: Drilldown\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0), __webpack_require__(2)))\n\n/***/ }),\n\n/***/ 58:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/** Generic form view */\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(9), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Form, Ui) {\n    var View = Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = new Backbone.Model(options);\n            this.url = this.model.get(\"url\");\n            this.redirect = this.model.get(\"redirect\");\n            this.setElement(\"<div/>\");\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            $.ajax({\n                url: Galaxy.root + this.url,\n                type: \"GET\"\n            }).done(function (response) {\n                var options = $.extend({}, self.model.attributes, response);\n                var form = new Form({\n                    title: options.title,\n                    message: options.message,\n                    status: options.status || \"warning\",\n                    icon: options.icon,\n                    inputs: options.inputs,\n                    buttons: {\n                        submit: new Ui.Button({\n                            tooltip: options.submit_tooltip,\n                            title: options.submit_title || \"Save\",\n                            icon: options.submit_icon || \"fa-save\",\n                            cls: \"btn btn-primary ui-clear-float\",\n                            onclick: function onclick() {\n                                self._submit(form);\n                            }\n                        })\n                    }\n                });\n                self.$el.empty().append(form.$el);\n            }).fail(function (response) {\n                self.$el.empty().append(new Ui.Message({\n                    message: \"Failed to load resource \" + self.url + \".\",\n                    status: \"danger\",\n                    persistent: true\n                }).$el);\n            });\n        },\n\n        _submit: function _submit(form) {\n            var self = this;\n            $.ajax({\n                url: Galaxy.root + self.url,\n                data: JSON.stringify(form.data.create()),\n                type: \"PUT\",\n                contentType: \"application/json\"\n            }).done(function (response) {\n                var success_message = {\n                    message: response.message,\n                    status: \"success\",\n                    persistent: false\n                };\n                if (self.redirect) {\n                    window.location = Galaxy.root + self.redirect + \"?\" + $.param(success_message);\n                } else {\n                    form.data.matchModel(response, function (input, input_id) {\n                        form.field_list[input_id].value(input.value);\n                    });\n                    self._showMessage(form, success_message);\n                }\n            }).fail(function (response) {\n                self._showMessage(form, {\n                    message: response.responseJSON.err_msg,\n                    status: \"danger\",\n                    persistent: false\n                });\n            });\n        },\n\n        _showMessage: function _showMessage(form, options) {\n            var $panel = form.$el.parents().filter(function () {\n                return [\"auto\", \"scroll\"].indexOf($(this).css(\"overflow\")) != -1;\n            }).first();\n            $panel.animate({ scrollTop: 0 }, 500);\n            form.message.update(options);\n        }\n    });\n\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 8:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Ui) {\n    var View = Backbone.View.extend({\n        visible: false,\n        initialize: function initialize(options) {\n            var self = this;\n            this.model = options && options.model || new Backbone.Model({\n                id: Utils.uid(),\n                cls: \"ui-portlet\",\n                title: \"\",\n                icon: \"\",\n                buttons: null,\n                body: null,\n                scrollable: true,\n                nopadding: false,\n                operations: null,\n                collapsible: false,\n                collapsible_button: false,\n                collapsed: false,\n                onchange_title: null\n            }).set(options);\n            this.setElement(this._template());\n\n            // link all dom elements\n            this.$body = this.$(\".portlet-body\");\n            this.$title_text = this.$(\".portlet-title-text\");\n            this.$title_icon = this.$(\".portlet-title-icon\");\n            this.$header = this.$(\".portlet-header\");\n            this.$content = this.$(\".portlet-content\");\n            this.$backdrop = this.$(\".portlet-backdrop\");\n            this.$buttons = this.$(\".portlet-buttons\");\n            this.$operations = this.$(\".portlet-operations\");\n\n            // add body to component list\n            this.model.get(\"body\") && this.append(this.model.get(\"body\"));\n\n            // add icon for collapsible option\n            this.collapsible_button = new Ui.ButtonIcon({\n                icon: \"fa-eye\",\n                tooltip: \"Collapse/Expand\",\n                cls: \"ui-button-icon-plain\",\n                onclick: function onclick() {\n                    self[self.collapsed ? \"expand\" : \"collapse\"]();\n                }\n            });\n            this.render();\n        },\n\n        render: function render() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el.removeClass().addClass(options.cls).attr(\"id\", options.id);\n            this.$header[options.title ? \"show\" : \"hide\"]();\n            this.$title_text.html(options.title);\n            _.each([this.$content, this.$body], function ($el) {\n                $el[options.nopadding ? \"addClass\" : \"removeClass\"](\"no-padding\");\n            });\n\n            // render title icon\n            if (options.icon) {\n                this.$title_icon.removeClass().addClass(\"portlet-title-icon fa\").addClass(options.icon).show();\n            } else {\n                this.$title_icon.hide();\n            }\n\n            // make portlet collapsible\n            this.$title_text[options.collapsible ? \"addClass\" : \"removeClass\"](\"no-highlight collapsible\").off();\n            if (options.collapsible) {\n                this.$title_text.on(\"click\", function () {\n                    self[self.collapsed ? \"expand\" : \"collapse\"]();\n                });\n                options.collapsed ? this.collapse() : this.expand();\n            }\n\n            // allow title editing\n            this.$title_text.prop(\"disabled\", !options.onchange_title);\n            options.onchange_title && this.$title_text.make_text_editable({\n                on_finish: function on_finish(new_title) {\n                    options.onchange_title(new_title);\n                }\n            });\n\n            // render buttons\n            if (options.buttons) {\n                this.$buttons.empty().show();\n                $.each(this.model.get(\"buttons\"), function (name, item) {\n                    item.$el.prop(\"id\", name);\n                    self.$buttons.append(item.$el);\n                });\n            } else {\n                this.$buttons.hide();\n            }\n\n            // render operations\n            this.$operations.empty;\n            if (options.collapsible_button) {\n                this.$operations.append(this.collapsible_button.$el);\n            }\n            if (options.operations) {\n                $.each(options.operations, function (name, item) {\n                    item.$el.prop(\"id\", name);\n                    self.$operations.append(item.$el);\n                });\n            }\n            return this;\n        },\n\n        /** Append new doms to body */\n        append: function append($el) {\n            this.$body.append($el);\n        },\n\n        /** Remove all content */\n        empty: function empty() {\n            this.$body.empty();\n        },\n\n        /** Return header element */\n        header: function header() {\n            return this.$header;\n        },\n\n        /** Return body element */\n        body: function body() {\n            return this.$body;\n        },\n\n        /** Show portlet */\n        show: function show() {\n            this.visible = true;\n            this.$el.fadeIn(\"fast\");\n        },\n\n        /** Hide portlet */\n        hide: function hide() {\n            this.visible = false;\n            this.$el.hide();\n        },\n\n        /** Enable a particular button */\n        enableButton: function enableButton(id) {\n            this.$buttons.find(\"#\" + id).prop(\"disabled\", false);\n        },\n\n        /** Disable a particular button */\n        disableButton: function disableButton(id) {\n            this.$buttons.find(\"#\" + id).prop(\"disabled\", true);\n        },\n\n        /** Hide a particular operation */\n        hideOperation: function hideOperation(id) {\n            this.$operations.find(\"#\" + id).hide();\n        },\n\n        /** Show a particular operation */\n        showOperation: function showOperation(id) {\n            this.$operations.find(\"#\" + id).show();\n        },\n\n        /** Replaces the event callback of an existing operation */\n        setOperation: function setOperation(id, callback) {\n            this.$operations.find(\"#\" + id).off(\"click\").on(\"click\", callback);\n        },\n\n        /** Change title */\n        title: function title(new_title) {\n            new_title && this.$title_text.html(new_title);\n            return this.$title_text.html();\n        },\n\n        /** Collapse portlet */\n        collapse: function collapse() {\n            this.collapsed = true;\n            this.$content.height(\"0%\");\n            this.$body.hide();\n            this.collapsible_button.setIcon(\"fa-eye-slash\");\n        },\n\n        /** Expand portlet */\n        expand: function expand() {\n            this.collapsed = false;\n            this.$content.height(\"100%\");\n            this.$body.fadeIn(\"fast\");\n            this.collapsible_button.setIcon(\"fa-eye\");\n        },\n\n        /** Disable content access */\n        disable: function disable() {\n            this.$backdrop.show();\n        },\n\n        /** Enable content access */\n        enable: function enable() {\n            this.$backdrop.hide();\n        },\n\n        _template: function _template() {\n            return $(\"<div/>\").append($(\"<div/>\").addClass(\"portlet-header\").append($(\"<div/>\").addClass(\"portlet-operations\")).append($(\"<div/>\").addClass(\"portlet-title\").append($(\"<i/>\").addClass(\"portlet-title-icon\")).append($(\"<span/>\").addClass(\"portlet-title-text\")))).append($(\"<div/>\").addClass(\"portlet-content\").append($(\"<div/>\").addClass(\"portlet-body\")).append($(\"<div/>\").addClass(\"portlet-buttons\"))).append($(\"<div/>\").addClass(\"portlet-backdrop\"));\n        }\n    });\n    return {\n        View: View\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ }),\n\n/***/ 9:\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(Backbone, _, $) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n/**\n    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(3), __webpack_require__(8), __webpack_require__(5), __webpack_require__(31), __webpack_require__(23)], __WEBPACK_AMD_DEFINE_RESULT__ = function (Utils, Portlet, Ui, FormSection, FormData) {\n    return Backbone.View.extend({\n        initialize: function initialize(options) {\n            this.model = new Backbone.Model({\n                initial_errors: false,\n                cls: \"ui-portlet-limited\",\n                icon: null,\n                always_refresh: true,\n                status: \"warning\",\n                hide_operations: false,\n                onchange: function onchange() {}\n            }).set(options);\n            this.setElement(\"<div/>\");\n            this.render();\n        },\n\n        /** Update available options */\n        update: function update(new_model) {\n            var self = this;\n            this.data.matchModel(new_model, function (node, input_id) {\n                var input = self.input_list[input_id];\n                if (input && input.options) {\n                    if (!_.isEqual(input.options, node.options)) {\n                        input.options = node.options;\n                        var field = self.field_list[input_id];\n                        if (field.update) {\n                            var new_options = [];\n                            if ([\"data\", \"data_collection\", \"drill_down\"].indexOf(input.type) != -1) {\n                                new_options = input.options;\n                            } else {\n                                for (var i in node.options) {\n                                    var opt = node.options[i];\n                                    if (opt.length > 2) {\n                                        new_options.push({\n                                            label: opt[0],\n                                            value: opt[1]\n                                        });\n                                    }\n                                }\n                            }\n                            field.update(new_options);\n                            field.trigger(\"change\");\n                            Galaxy.emit.debug(\"form-view::update()\", \"Updating options for \" + input_id);\n                        }\n                    }\n                }\n            });\n        },\n\n        /** Set form into wait mode */\n        wait: function wait(active) {\n            for (var i in this.input_list) {\n                var field = this.field_list[i];\n                var input = this.input_list[i];\n                if (input.is_dynamic && field.wait && field.unwait) {\n                    field[active ? \"wait\" : \"unwait\"]();\n                }\n            }\n        },\n\n        /** Highlight and scroll to input element (currently only used for error notifications) */\n        highlight: function highlight(input_id, message, silent) {\n            var input_element = this.element_list[input_id];\n            if (input_element) {\n                input_element.error(message || \"Please verify this parameter.\");\n                this.portlet.expand();\n                this.trigger(\"expand\", input_id);\n                if (!silent) {\n                    var $panel = this.$el.parents().filter(function () {\n                        return [\"auto\", \"scroll\"].indexOf($(this).css(\"overflow\")) != -1;\n                    }).first();\n                    $panel.animate({\n                        scrollTop: $panel.scrollTop() + input_element.$el.offset().top - 120\n                    }, 500);\n                }\n            }\n        },\n\n        /** Highlights errors */\n        errors: function errors(options) {\n            this.trigger(\"reset\");\n            if (options && options.errors) {\n                var error_messages = this.data.matchResponse(options.errors);\n                for (var input_id in this.element_list) {\n                    var input = this.element_list[input_id];\n                    if (error_messages[input_id]) {\n                        this.highlight(input_id, error_messages[input_id], true);\n                    }\n                }\n            }\n        },\n\n        /** Render tool form */\n        render: function render() {\n            var self = this;\n            this.off(\"change\");\n            this.off(\"reset\");\n            // contains the dom field elements as created by the parameter factory i.e. form-parameters\n            this.field_list = {};\n            // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n            this.input_list = {};\n            // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n            this.element_list = {};\n            // converts the form into a json data structure\n            this.data = new FormData.Manager(this);\n            this._renderForm();\n            this.data.create();\n            this.model.get(\"initial_errors\") && this.errors(this.model.attributes);\n            // add listener which triggers on checksum change, and reset the form input wrappers\n            var current_check = this.data.checksum();\n            this.on(\"change\", function (input_id) {\n                var input = self.input_list[input_id];\n                if (!input || input.refresh_on_change || self.model.get(\"always_refresh\")) {\n                    var new_check = self.data.checksum();\n                    if (new_check != current_check) {\n                        current_check = new_check;\n                        self.model.get(\"onchange\")();\n                    }\n                }\n            });\n            this.on(\"reset\", function () {\n                _.each(self.element_list, function (input_element) {\n                    input_element.reset();\n                });\n            });\n            return this;\n        },\n\n        /** Renders/appends dom elements of the form */\n        _renderForm: function _renderForm() {\n            $(\".tooltip\").remove();\n            var options = this.model.attributes;\n            this.message = new Ui.UnescapedMessage();\n            this.section = new FormSection.View(this, {\n                inputs: options.inputs\n            });\n            this.portlet = new Portlet.View({\n                icon: options.icon,\n                title: options.title,\n                cls: options.cls,\n                operations: !options.hide_operations && options.operations,\n                buttons: options.buttons,\n                collapsible: options.collapsible,\n                collapsed: options.collapsed,\n                onchange_title: options.onchange_title\n            });\n            this.portlet.append(this.message.$el);\n            this.portlet.append(this.section.$el);\n            this.$el.empty();\n            options.inputs && this.$el.append(this.portlet.$el);\n            options.message && this.message.update({\n                persistent: true,\n                status: options.status,\n                message: options.message\n            });\n            Galaxy.emit.debug(\"form-view::initialize()\", \"Completed\");\n        }\n    });\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1), __webpack_require__(2), __webpack_require__(0)))\n\n/***/ })\n\n},[158]);\n\n\n// WEBPACK FOOTER //\n// admin.bundled.js","/** This module contains all button views. */\ndefine([\"utils/utils\"], function(Utils) {\n    /** This renders the default button which is used e.g. at the bottom of the upload modal. */\n    var ButtonDefault = Backbone.View.extend({\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    title: \"\",\n                    icon: \"\",\n                    cls: \"btn btn-default\",\n                    wait: false,\n                    wait_text: \"Sending...\",\n                    wait_cls: \"btn btn-info\",\n                    disabled: false,\n                    percentage: -1\n                }).set(options);\n            this.setElement(\n                $(\"<button/>\")\n                    .attr(\"type\", \"button\")\n                    .append((this.$icon = $(\"<i/>\")))\n                    .append((this.$title = $(\"<span/>\")))\n                    .append(\n                        (this.$progress = $(\"<div/>\").append(\n                            (this.$progress_bar = $(\"<div/>\"))\n                        ))\n                    )\n            );\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el\n                .removeClass()\n                .addClass(\"ui-button-default\")\n                .addClass(options.disabled && \"disabled\")\n                .attr(\"id\", options.id)\n                .attr(\"disabled\", options.disabled)\n                .off(\"click\")\n                .on(\"click\", function() {\n                    $(\".tooltip\").hide();\n                    options.onclick && !self.disabled && options.onclick();\n                })\n                .tooltip({ title: options.tooltip, placement: \"bottom\" });\n            this.$progress\n                .addClass(\"progress\")\n                .css(\"display\", options.percentage !== -1 ? \"block\" : \"none\");\n            this.$progress_bar\n                .addClass(\"progress-bar\")\n                .css({ width: options.percentage + \"%\" });\n            this.$icon.removeClass().addClass(\"icon fa\");\n            this.$title.removeClass().addClass(\"title\");\n            if (options.wait) {\n                this.$el.addClass(options.wait_cls).prop(\"disabled\", true);\n                this.$icon.addClass(\"fa-spinner fa-spin ui-margin-right\");\n                this.$title.html(options.wait_text);\n            } else {\n                this.$el.addClass(options.cls);\n                this.$icon.addClass(options.icon);\n                this.$title.html(options.title);\n                options.icon &&\n                    options.title &&\n                    this.$icon.addClass(\"ui-margin-right\");\n            }\n        },\n\n        /** Show button */\n        show: function() {\n            this.$el.show();\n        },\n\n        /** Hide button */\n        hide: function() {\n            this.$el.hide();\n        },\n\n        /** Disable button */\n        disable: function() {\n            this.model.set(\"disabled\", true);\n        },\n\n        /** Enable button */\n        enable: function() {\n            this.model.set(\"disabled\", false);\n        },\n\n        /** Show spinner to indicate that the button is not ready to be clicked */\n        wait: function() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner to indicate that the button is ready to be clicked */\n        unwait: function() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Change icon */\n        setIcon: function(icon) {\n            this.model.set(\"icon\", icon);\n        }\n    });\n\n    /** This button allows the right-click/open-in-new-tab feature, its used e.g. for panel buttons. */\n    var ButtonLink = ButtonDefault.extend({\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    title: \"\",\n                    icon: \"\",\n                    cls: \"\"\n                }).set(options);\n            this.setElement($(\"<a/>\").append((this.$icon = $(\"<span/>\"))));\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function() {\n            var options = this.model.attributes;\n            this.$el\n                .removeClass()\n                .addClass(options.cls)\n                .attr({\n                    id: options.id,\n                    href: options.href || \"javascript:void(0)\",\n                    title: options.title,\n                    target: options.target || \"_top\",\n                    disabled: options.disabled\n                })\n                .tooltip({ placement: \"bottom\" })\n                .off(\"click\")\n                .on(\"click\", function() {\n                    options.onclick && !options.disabled && options.onclick();\n                });\n            this.$icon.removeClass().addClass(options.icon);\n        }\n    });\n\n    /** The check button is used in the tool form and allows to distinguish between multiple states e.g. all, partially and nothing selected. */\n    var ButtonCheck = Backbone.View.extend({\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    title: \"Select/Unselect all\",\n                    icons: [\n                        \"fa-square-o\",\n                        \"fa-minus-square-o\",\n                        \"fa-check-square-o\"\n                    ],\n                    value: 0,\n                    onchange: function() {}\n                }).set(options);\n            this.setElement(\n                $(\"<div/>\")\n                    .append((this.$icon = $(\"<span/>\")))\n                    .append((this.$title = $(\"<span/>\")))\n            );\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function(options) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el\n                .addClass(\"ui-button-check\")\n                .off(\"click\")\n                .on(\"click\", function() {\n                    self.model.set(\n                        \"value\",\n                        (self.model.get(\"value\") === 0 && 2) || 0\n                    );\n                    options.onclick && options.onclick();\n                });\n            this.$title.html(options.title);\n            this.$icon\n                .removeClass()\n                .addClass(\"icon fa ui-margin-right\")\n                .addClass(options.icons[options.value]);\n        },\n\n        /* Sets a new value and/or returns the value.\n        * @param{Integer}   new_val - Set a new value 0=unchecked, 1=partial and 2=checked.\n        * OR:\n        * @param{Integer}   new_val - Number of selected options.\n        * @param{Integer}   total   - Total number of available options.\n        */\n        value: function(new_val, total) {\n            if (new_val !== undefined) {\n                if (total && new_val !== 0) {\n                    new_val = (new_val !== total && 1) || 2;\n                }\n                this.model.set(\"value\", new_val);\n                this.model.get(\"onchange\")(this.model.get(\"value\"));\n            }\n            return this.model.get(\"value\");\n        }\n    });\n\n    /** This renders a differently styled, more compact button version. */\n    var ButtonIcon = ButtonDefault.extend({\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    title: \"\",\n                    icon: \"\",\n                    cls: \"ui-button-icon\",\n                    disabled: false\n                }).set(options);\n            this.setElement(\n                $(\"<div/>\").append(\n                    (this.$button = $(\"<div/>\")\n                        .append((this.$icon = $(\"<i/>\")))\n                        .append((this.$title = $(\"<span/>\"))))\n                )\n            );\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function(options) {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el\n                .removeClass()\n                .addClass(options.cls)\n                .addClass(options.disabled && \"disabled\")\n                .attr(\"disabled\", options.disabled)\n                .attr(\"id\", options.id)\n                .off(\"click\")\n                .on(\"click\", function() {\n                    $(\".tooltip\").hide();\n                    !options.disabled && options.onclick && options.onclick();\n                });\n            this.$button\n                .addClass(\"button\")\n                .tooltip({ title: options.tooltip, placement: \"bottom\" });\n            this.$icon\n                .removeClass()\n                .addClass(\"icon fa\")\n                .addClass(options.icon);\n            this.$title.addClass(\"title\").html(options.title);\n            options.icon &&\n                options.title &&\n                this.$icon.addClass(\"ui-margin-right\");\n        }\n    });\n\n    /** This class creates a button with dropdown menu. */\n    var ButtonMenu = ButtonDefault.extend({\n        $menu: null,\n        initialize: function(options) {\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: \"\",\n                    title: \"\",\n                    pull: \"right\",\n                    icon: null,\n                    onclick: null,\n                    cls: \"ui-button-icon ui-button-menu\",\n                    tooltip: \"\",\n                    target: \"\",\n                    href: \"\",\n                    onunload: null,\n                    visible: true,\n                    tag: \"\"\n                }).set(options);\n            this.collection = new Backbone.Collection();\n            this.setElement(\n                $(\"<div/>\").append(\n                    (this.$root = $(\"<div/>\")\n                        .append((this.$icon = $(\"<i/>\")))\n                        .append((this.$title = $(\"<span/>\"))))\n                )\n            );\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.listenTo(\n                this.collection,\n                \"change add remove reset\",\n                this.render,\n                this\n            );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el\n                .removeClass()\n                .addClass(\"dropdown\")\n                .addClass(options.cls)\n                .attr(\"id\", options.id)\n                .css({\n                    display:\n                        options.visible &&\n                        this.collection.where({ visible: true }).length > 0\n                            ? \"block\"\n                            : \"none\"\n                });\n            this.$root\n                .addClass(\"root button dropdown-toggle\")\n                .attr(\"data-toggle\", \"dropdown\")\n                .tooltip({ title: options.tooltip, placement: \"bottom\" })\n                .off(\"click\")\n                .on(\"click\", function(e) {\n                    $(\".tooltip\").hide();\n                    e.preventDefault();\n                    options.onclick && options.onclick();\n                });\n            this.$icon\n                .removeClass()\n                .addClass(\"icon fa\")\n                .addClass(options.icon);\n            this.$title\n                .removeClass()\n                .addClass(\"title\")\n                .html(options.title);\n            options.icon &&\n                options.title &&\n                this.$icon.addClass(\"ui-margin-right\");\n            this.$menu && this.$menu.remove();\n            if (this.collection.length > 0) {\n                this.$menu = $(\"<ul/>\")\n                    .addClass(\"menu dropdown-menu\")\n                    .addClass(\"pull-\" + self.model.get(\"pull\"))\n                    .attr(\"role\", \"menu\");\n                this.$el.append(this.$menu);\n            }\n            this.collection.each(function(submodel) {\n                var suboptions = submodel.attributes;\n                if (suboptions.visible) {\n                    var $link = $(\"<a/>\")\n                        .addClass(\"dropdown-item\")\n                        .attr({\n                            href: suboptions.href,\n                            target: suboptions.target\n                        })\n                        .append(\n                            $(\"<i/>\")\n                                .addClass(\"fa\")\n                                .addClass(suboptions.icon)\n                                .css(\n                                    \"display\",\n                                    suboptions.icon ? \"inline-block\" : \"none\"\n                                )\n                        )\n                        .append(suboptions.title)\n                        .on(\"click\", function(e) {\n                            if (suboptions.onclick) {\n                                e.preventDefault();\n                                suboptions.onclick();\n                            }\n                        });\n                    self.$menu.append($(\"<li/>\").append($link));\n                    suboptions.divider &&\n                        self.$menu.append($(\"<li/>\").addClass(\"divider\"));\n                }\n            });\n        },\n\n        /** Add a new menu item */\n        addMenu: function(options) {\n            this.collection.add(\n                Utils.merge(options, {\n                    title: \"\",\n                    target: \"\",\n                    href: \"\",\n                    onclick: null,\n                    divider: false,\n                    visible: true,\n                    icon: null,\n                    cls: \"button-menu btn-group\"\n                })\n            );\n        }\n    });\n\n    return {\n        ButtonDefault: ButtonDefault,\n        ButtonLink: ButtonLink,\n        ButtonIcon: ButtonIcon,\n        ButtonCheck: ButtonCheck,\n        ButtonMenu: ButtonMenu\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-buttons.js","var jQuery = require(\"jquery\"),\n    $ = jQuery,\n    GalaxyApp = require(\"galaxy\").GalaxyApp,\n    AdminPanel = require(\"./panels/admin-panel\"),\n    FormWrapper = require(\"mvc/form/form-wrapper\"),\n    GridView = require(\"mvc/grid/grid-view\"),\n    Ui = require(\"mvc/ui/ui-misc\"),\n    QueryStringParsing = require(\"utils/query-string-parsing\"),\n    Router = require(\"layout/router\"),\n    Utils = require(\"utils/utils\"),\n    Page = require(\"layout/page\");\n\nwindow.app = function app(options, bootstrapped) {\n    window.Galaxy = new GalaxyApp(options, bootstrapped);\n    Galaxy.debug(\"admin app\");\n\n    /** Routes */\n    var AdminRouter = Router.extend({\n        routes: {\n            \"(/)admin(/)users\": \"show_users\",\n            \"(/)admin(/)roles\": \"show_roles\",\n            \"(/)admin(/)groups\": \"show_groups\",\n            \"(/)admin(/)tool_versions\": \"show_tool_versions\",\n            \"(/)admin(/)quotas\": \"show_quotas\",\n            \"(/)admin(/)repositories\": \"show_repositories\",\n            \"(/)admin(/)forms\": \"show_forms\",\n            \"(/)admin(/)form(/)(:form_id)\": \"show_form\"\n        },\n\n        authenticate: function(args, name) {\n            return Galaxy.user && Galaxy.user.id && Galaxy.user.get(\"is_admin\");\n        },\n\n        show_users: function() {\n            this.page.display(\n                new GridView({\n                    url_base: Galaxy.root + \"admin/users_list\",\n                    url_data: Galaxy.params,\n                    dict_format: true\n                })\n            );\n        },\n\n        show_roles: function() {\n            this.page.display(\n                new GridView({\n                    url_base: Galaxy.root + \"admin/roles_list\",\n                    url_data: Galaxy.params,\n                    dict_format: true\n                })\n            );\n        },\n\n        show_groups: function() {\n            this.page.display(\n                new GridView({\n                    url_base: Galaxy.root + \"admin/groups_list\",\n                    url_data: Galaxy.params,\n                    dict_format: true\n                })\n            );\n        },\n\n        show_repositories: function() {\n            this.page.display(\n                new GridView({\n                    url_base:\n                        Galaxy.root + \"admin_toolshed/browse_repositories\",\n                    url_data: Galaxy.params,\n                    dict_format: true\n                })\n            );\n        },\n\n        show_tool_versions: function() {\n            this.page.display(\n                new GridView({\n                    url_base: Galaxy.root + \"admin/tool_versions_list\",\n                    url_data: Galaxy.params,\n                    dict_format: true\n                })\n            );\n        },\n\n        show_quotas: function() {\n            this.page.display(\n                new GridView({\n                    url_base: Galaxy.root + \"admin/quotas_list\",\n                    url_data: Galaxy.params,\n                    dict_format: true\n                })\n            );\n        },\n\n        show_forms: function() {\n            this.page.display(\n                new GridView({\n                    url_base: Galaxy.root + \"forms/forms_list\",\n                    url_data: Galaxy.params,\n                    dict_format: true\n                })\n            );\n        },\n\n        show_form: function(form_id) {\n            var id = \"?id=\" + QueryStringParsing.get(\"id\");\n            var form_defs = {\n                reset_user_password: {\n                    title: \"Reset passwords\",\n                    url: \"admin/reset_user_password\" + id,\n                    icon: \"fa-user\",\n                    submit_title: \"Save new password\",\n                    redirect: \"admin/users\"\n                },\n                manage_roles_and_groups_for_user: {\n                    url: \"admin/manage_roles_and_groups_for_user\" + id,\n                    icon: \"fa-users\",\n                    redirect: \"admin/users\"\n                },\n                manage_users_and_groups_for_role: {\n                    url: \"admin/manage_users_and_groups_for_role\" + id,\n                    redirect: \"admin/roles\"\n                },\n                manage_users_and_roles_for_group: {\n                    url: \"admin/manage_users_and_roles_for_group\" + id,\n                    redirect: \"admin/groups\"\n                },\n                manage_users_and_groups_for_quota: {\n                    url: \"admin/manage_users_and_groups_for_quota\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                create_role: {\n                    url: \"admin/create_role\",\n                    redirect: \"admin/roles\"\n                },\n                create_group: {\n                    url: \"admin/create_group\",\n                    redirect: \"admin/groups\"\n                },\n                create_quota: {\n                    url: \"admin/create_quota\",\n                    redirect: \"admin/quotas\"\n                },\n                rename_role: {\n                    url: \"admin/rename_role\" + id,\n                    redirect: \"admin/roles\"\n                },\n                rename_group: {\n                    url: \"admin/rename_group\" + id,\n                    redirect: \"admin/groups\"\n                },\n                rename_quota: {\n                    url: \"admin/rename_quota\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                edit_quota: {\n                    url: \"admin/edit_quota\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                set_quota_default: {\n                    url: \"admin/set_quota_default\" + id,\n                    redirect: \"admin/quotas\"\n                },\n                create_form: {\n                    url: \"forms/create_form\",\n                    redirect: \"admin/forms\"\n                },\n                edit_form: {\n                    url: \"forms/edit_form\" + id,\n                    redirect: \"admin/forms\"\n                }\n            };\n            this.page.display(new FormWrapper.View(form_defs[form_id]));\n        }\n    });\n\n    $(function() {\n        _.extend(options.config, { active_view: \"admin\" });\n        Utils.setWindowTitle(\"Administration\");\n        Galaxy.page = new Page.View(\n            _.extend(options, {\n                Left: AdminPanel,\n                Router: AdminRouter\n            })\n        );\n    });\n};\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/apps/admin.js","var _l = require(\"utils/localization\");\n\nvar AdminPanel = Backbone.View.extend({\n    initialize: function(page, options) {\n        var self = this;\n        this.page = page;\n        this.root = options.root;\n        this.config = options.config;\n        this.settings = options.settings;\n        this.message = options.message;\n        this.status = options.status;\n        this.model = new Backbone.Model({\n            title: _l(\"Administration\")\n        });\n        this.categories = new Backbone.Collection([{\n            title : \"Server\",\n            items : [ {\n                title   : \"Data types registry\",\n                url     : \"admin/view_datatypes_registry\"\n            },{\n                title   : \"Data tables registry\",\n                url     : \"admin/view_tool_data_tables\"\n            },{\n                title   : \"Data libraries\",\n                url     : \"library_admin/browse_libraries\"\n            },{\n                title   : \"Display applications\",\n                url     : \"admin/display_applications\"\n            },{\n                title   : \"Manage jobs\",\n                url     : \"admin/jobs\"\n            },{\n                title   : \"Local data\",\n                url     : \"data_manager\"\n            } ]\n        },{\n            title : \"User Management\",\n            items : [ {\n                title   : \"Users\",\n                url     : \"admin/users\",\n                target  : \"__use_router__\"\n            },{\n                title   : \"Quotas\",\n                url     : \"admin/quotas\",\n                target  : \"__use_router__\",\n                enabled : self.config.enable_quotas\n            },{\n                title   : \"Groups\",\n                url     : \"admin/groups\",\n                target  : \"__use_router__\"\n            },{\n                title   : \"Roles\",\n                url     : \"admin/roles\",\n                target  : \"__use_router__\"\n            },{\n                title   : \"Forms\",\n                url     : \"admin/forms\",\n                target  : \"__use_router__\"\n            },{\n                title   : \"API keys\",\n                url     : \"userskeys/all_users\"\n            },{\n                title   : \"Impersonate a user\",\n                url     : \"admin/impersonate\",\n                enabled : self.config.allow_user_impersonation\n            }]\n        },{\n            title : \"Tools and Tool Shed\",\n            items : [ {\n                title   : \"Search Tool Shed\",\n                url     : \"admin_toolshed/browse_tool_sheds\",\n                enabled : self.settings.is_tool_shed_installed\n            },{\n                title   : \"Search Tool Shed (Beta)\",\n                url     : \"admin_toolshed/browse_toolsheds\",\n                enabled : self.settings.is_tool_shed_installed && self.config.enable_beta_ts_api_install\n            },{\n                title   : \"Monitor installing repositories\",\n                url     : \"admin_toolshed/monitor_repository_installation?installing_repository_ids=\" + self.settings.installing_repository_ids,\n                enabled : self.settings.installing_repository_ids\n            },{\n                title   : \"Manage installed tools\",\n                url     : \"admin/repositories\",\n                enabled : self.settings.is_repo_installed,\n                target  : \"__use_router__\"\n            },{\n                title   : \"Reset metadata\",\n                url     : \"admin_toolshed/reset_metadata_on_selected_installed_repositories\",\n                enabled : self.settings.is_repo_installed\n            },{\n                title   : \"Download local tool\",\n                url     : \"admin/package_tool\"\n            },{\n                title   : \"Tool lineage\",\n                url     : \"admin/tool_versions\",\n                target  : \"__use_router__\"\n            },{\n                title   : \"Reload a tool\\\"s configuration\",\n                url     : \"admin/reload_tool\"\n            },{\n                title   : \"Review tool migration stages\",\n                url     : \"admin/review_tool_migration_stages\"\n            },{\n                title   : \"View Tool Error Logs\",\n                url     : \"admin/tool_errors\"\n            },{\n                title   : \"Manage Display Whitelist\",\n                url     : \"admin/sanitize_whitelist\"\n            },{\n                title   : \"Manage Tool Dependencies\",\n                url     : \"admin/manage_tool_dependencies\"\n            } ]\n        }]);\n        this.setElement( this._template() );\n    },\n\n    render: function() {\n        var self = this;\n        this.$el.empty();\n        this.categories.each(function(category) {\n            var $section = $(self._templateSection(category.attributes));\n            var $entries = $section.find(\".ui-side-section-body\");\n            _.each(category.get(\"items\"), function(item) {\n                if (item.enabled === undefined || item.enabled) {\n                    var $link = $(\"<a/>\")\n                        .attr({ href: self.root + item.url })\n                        .text(_l(item.title));\n                    if (item.target == \"__use_router__\") {\n                        $link.on(\"click\", function(e) {\n                            e.preventDefault();\n                            self.page.router.push(item.url);\n                        });\n                    } else {\n                        $link.attr(\"target\", \"galaxy_main\");\n                    }\n                    $entries.append(\n                        $(\"<div/>\")\n                            .addClass(\"ui-side-section-body-title\")\n                            .append($link)\n                    );\n                }\n            });\n            self.$el.append($section);\n        });\n        this.page\n            .$(\"#galaxy_main\")\n            .prop(\n                \"src\",\n                this.root +\n                    \"admin/center?message=\" +\n                    this.message +\n                    \"&status=\" +\n                    this.status\n            );\n    },\n\n    _templateSection: function(options) {\n        return [\n            \"<div>\",\n            '<div class=\"ui-side-section-title\">' +\n                _l(options.title) +\n                \"</div>\",\n            '<div class=\"ui-side-section-body\"/>',\n            \"</div>\"\n        ].join(\"\");\n    },\n\n    _template: function() {\n        return '<div class=\"ui-side-panel\"/>';\n    },\n\n    toString: function() {\n        return \"adminPanel\";\n    }\n});\n\nmodule.exports = AdminPanel;\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/apps/panels/admin-panel.js","// This is necessary so that, when nested arrays are used in ajax/post/get methods, square brackets ('[]') are\n// not appended to the identifier of a nested array.\njQuery.ajaxSettings.traditional = true;\n\n// dependencies\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/grid/grid-model\",\n        \"mvc/grid/grid-template\",\n        \"mvc/ui/popup-menu\"\n    ],\n    function(Utils, GridModel, Templates, PopupMenu) {\n        // grid view\n        return Backbone.View.extend({\n            // model\n            grid: null,\n\n            // Initialize\n            initialize: function(grid_config) {\n                this.grid = new GridModel();\n                this.dict_format = grid_config.dict_format;\n                this.title = grid_config.title;\n                var self = this;\n                window.add_tag_to_grid_filter = function(tag_name, tag_value) {\n                    // Put tag name and value together.\n                    var tag =\n                        tag_name +\n                        (tag_value !== undefined && tag_value !== \"\"\n                            ? \":\" + tag_value\n                            : \"\");\n                    var advanced_search = $(\"#advanced-search\").is(\":visible\");\n                    if (!advanced_search) {\n                        $(\"#standard-search\").slideToggle(\"fast\");\n                        $(\"#advanced-search\").slideToggle(\"fast\");\n                    }\n                    self.add_filter_condition(\"tags\", tag);\n                };\n\n                // set element\n                if (this.dict_format) {\n                    this.setElement(\"<div/>\");\n                    if (grid_config.url_base && !grid_config.items) {\n                        var url_data = grid_config.url_data || {};\n                        _.each(grid_config.filters, function(v, k) {\n                            url_data[\"f-\" + k] = v;\n                        });\n                        $.ajax({\n                            url: grid_config.url_base + \"?\" + $.param(url_data),\n                            success: function(response) {\n                                response.embedded = grid_config.embedded;\n                                response.filters = grid_config.filters || {};\n                                self.init_grid(response);\n                            }\n                        });\n                    } else {\n                        this.init_grid(grid_config);\n                    }\n                } else {\n                    this.setElement(\"#grid-container\");\n                    this.init_grid(grid_config);\n                }\n\n                // fix padding\n                if (grid_config.use_panels) {\n                    $(\"#center\").css({\n                        padding: \"10px\",\n                        overflow: \"auto\"\n                    });\n                }\n            },\n\n            // refresh frames\n            handle_refresh: function(refresh_frames) {\n                if (refresh_frames) {\n                    if ($.inArray(\"history\", refresh_frames) > -1) {\n                        if (top.Galaxy && top.Galaxy.currHistoryPanel) {\n                            top.Galaxy.currHistoryPanel.loadCurrentHistory();\n                        }\n                    }\n                }\n            },\n\n            // Initialize\n            init_grid: function(grid_config) {\n                this.grid.set(grid_config);\n\n                // get options\n                var options = this.grid.attributes;\n\n                if (this.allow_title_display && options.title) {\n                    Utils.setWindowTitle(options.title);\n                }\n                // handle refresh requests\n                this.handle_refresh(options.refresh_frames);\n\n                // strip protocol and domain\n                var url = this.grid.get(\"url_base\");\n                url = url.replace(/^.*\\/\\/[^\\/]+/, \"\");\n                this.grid.set(\"url_base\", url);\n\n                // append main template\n                this.$el.html(Templates.grid(options));\n\n                // update div contents\n                this.$el\n                    .find(\"#grid-table-header\")\n                    .html(Templates.header(options));\n                this.$el.find(\"#grid-table-body\").html(Templates.body(options));\n                this.$el\n                    .find(\"#grid-table-footer\")\n                    .html(Templates.footer(options));\n\n                // update message\n                if (options.message) {\n                    this.$el\n                        .find(\"#grid-message\")\n                        .html(Templates.message(options));\n                    var self = this;\n                    if (options.use_hide_message) {\n                        setTimeout(function() {\n                            self.$el.find(\"#grid-message\").html(\"\");\n                        }, 5000);\n                    }\n                }\n\n                // configure elements\n                this.init_grid_elements();\n                this.init_grid_controls();\n\n                // attach global event handler\n                // TODO: redundant (the onload/standard page handlers do this) - but needed because these are constructed after page ready\n                init_refresh_on_change();\n            },\n\n            // Initialize grid controls\n            init_grid_controls: function() {\n                // link\n                var self = this;\n\n                // Initialize grid operation button.\n                this.$el.find(\".operation-button\").each(function() {\n                    $(this).off();\n                    $(this).click(function() {\n                        self.submit_operation(this);\n                        return false;\n                    });\n                });\n\n                // Initialize text filters to select text on click and use normal font when user is typing.\n                this.$el.find(\"input[type=text]\").each(function() {\n                    $(this).off();\n                    $(this)\n                        .click(function() {\n                            $(this).select();\n                        })\n                        .keyup(function() {\n                            $(this).css(\"font-style\", \"normal\");\n                        });\n                });\n\n                // Initialize sort links.\n                this.$el.find(\".sort-link\").each(function() {\n                    $(this).off();\n                    $(this).click(function() {\n                        self.set_sort_condition($(this).attr(\"sort_key\"));\n                        return false;\n                    });\n                });\n\n                // Initialize text filters.\n                this.$el.find(\".text-filter-form\").each(function() {\n                    $(this).off();\n                    $(this).submit(function() {\n                        var column_key = $(this).attr(\"column_key\");\n                        var text_input_obj = $(\n                            \"#input-\" + column_key + \"-filter\"\n                        );\n                        var text_input = text_input_obj.val();\n                        text_input_obj.val(\"\");\n                        self.add_filter_condition(column_key, text_input);\n                        return false;\n                    });\n                });\n\n                // Initialize categorical filters.\n                this.$el.find(\".text-filter-val > a\").each(function() {\n                    $(this).off();\n                    $(this).click(function() {\n                        // Remove visible element.\n                        $(this)\n                            .parent()\n                            .remove();\n\n                        // Remove filter condition.\n                        self.remove_filter_condition(\n                            $(this).attr(\"filter_key\"),\n                            $(this).attr(\"filter_val\")\n                        );\n\n                        // Return\n                        return false;\n                    });\n                });\n\n                // Initialize categorical filters.\n                this.$el.find(\".categorical-filter > a\").each(function() {\n                    $(this).off();\n                    $(this).click(function() {\n                        self.set_categorical_filter(\n                            $(this).attr(\"filter_key\"),\n                            $(this).attr(\"filter_val\")\n                        );\n                        return false;\n                    });\n                });\n\n                // Initialize standard, advanced search toggles.\n                this.$el.find(\".advanced-search-toggle\").each(function() {\n                    $(this).off();\n                    $(this).click(function() {\n                        self.$el.find(\"#standard-search\").slideToggle(\"fast\");\n                        self.$el.find(\"#advanced-search\").slideToggle(\"fast\");\n                        return false;\n                    });\n                });\n\n                // Add event to check all box\n                this.$el.find(\"#check_all\").off();\n                this.$el.find(\"#check_all\").on(\"click\", function() {\n                    self.check_all_items();\n                });\n            },\n\n            // Initialize grid elements.\n            init_grid_elements: function() {\n                // Initialize grid selection checkboxes.\n                this.$el.find(\".grid\").each(function() {\n                    var checkboxes = $(this).find(\n                        \"input.grid-row-select-checkbox\"\n                    );\n                    var check_count = $(this).find(\"span.grid-selected-count\");\n                    var update_checked = function() {\n                        check_count.text(\n                            $(checkboxes).filter(\":checked\").length\n                        );\n                    };\n\n                    $(checkboxes).each(function() {\n                        $(this).change(update_checked);\n                    });\n                    update_checked();\n                });\n\n                // Initialize ratings.\n                if (this.$el.find(\".community_rating_star\").length !== 0)\n                    this.$el.find(\".community_rating_star\").rating({});\n\n                // get options\n                var options = this.grid.attributes;\n                var self = this;\n\n                //\n                // add page click events\n                //\n                this.$el.find(\".page-link > a\").each(function() {\n                    $(this).click(function() {\n                        self.set_page($(this).attr(\"page_num\"));\n                        return false;\n                    });\n                });\n\n                //\n                // add inbound/outbound events\n                //\n                this.$el.find(\".use-target\").each(function() {\n                    $(this).click(function(e) {\n                        self.execute({\n                            href: $(this).attr(\"href\"),\n                            target: $(this).attr(\"target\")\n                        });\n                        return false;\n                    });\n                });\n\n                // empty grid?\n                var items_length = options.items.length;\n                if (items_length == 0) {\n                    return;\n                }\n\n                // add operation popup menus\n                _.each(options.items, function(item, index) {\n                    var button = self.$(\"#grid-\" + index + \"-popup\").off();\n                    var popup = new PopupMenu(button);\n                    _.each(options[\"operations\"], function(operation) {\n                        self._add_operation(popup, operation, item);\n                    });\n                });\n            },\n\n            /** Add an operation to the items menu */\n            _add_operation: function(popup, operation, item) {\n                var self = this;\n                var settings = item.operation_config[operation.label];\n                if (settings.allowed && operation.allow_popup) {\n                    popup.addItem({\n                        html: operation.label,\n                        href: settings.url_args,\n                        target: settings.target,\n                        confirmation_text: operation.confirm,\n                        func: function(e) {\n                            e.preventDefault();\n                            var label = $(e.target).html();\n                            if (operation.onclick) {\n                                operation.onclick(item.encode_id);\n                            } else {\n                                self.execute(this.findItemByHtml(label));\n                            }\n                        }\n                    });\n                }\n            },\n\n            // Add a condition to the grid filter; this adds the condition and refreshes the grid.\n            add_filter_condition: function(name, value) {\n                // Do nothing is value is empty.\n                if (value === \"\") {\n                    return false;\n                }\n\n                // Add condition to grid.\n                this.grid.add_filter(name, value, true);\n\n                // Add button that displays filter and provides a button to delete it.\n                var t = $(Templates.filter_element(name, value));\n                var self = this;\n                t.click(function() {\n                    // Remove visible element.\n                    $(this).remove();\n\n                    // Remove filter condition.\n                    self.remove_filter_condition(name, value);\n                });\n\n                // append to container\n                var container = this.$el.find(\n                    \"#\" + name + \"-filtering-criteria\"\n                );\n                container.append(t);\n\n                // execute\n                this.go_page_one();\n                this.execute();\n            },\n\n            // Remove a condition to the grid filter; this adds the condition and refreshes the grid.\n            remove_filter_condition: function(name, value) {\n                // Remove filter condition.\n                this.grid.remove_filter(name, value);\n\n                // Execute\n                this.go_page_one();\n                this.execute();\n            },\n\n            // Set sort condition for grid.\n            set_sort_condition: function(col_key) {\n                // Set new sort condition. New sort is col_key if sorting new column; if reversing sort on\n                // currently sorted column, sort is reversed.\n                var cur_sort = this.grid.get(\"sort_key\");\n                var new_sort = col_key;\n                if (cur_sort.indexOf(col_key) !== -1) {\n                    // Reverse sort.\n                    if (cur_sort.substring(0, 1) !== \"-\") {\n                        new_sort = \"-\" + col_key;\n                    }\n                }\n\n                // Remove sort arrows elements.\n                this.$el.find(\".sort-arrow\").remove();\n\n                // Add sort arrow element to new sort column.\n                var sort_arrow =\n                    new_sort.substring(0, 1) == \"-\" ? \"&uarr;\" : \"&darr;\";\n                var t = $(\"<span>\" + sort_arrow + \"</span>\").addClass(\n                    \"sort-arrow\"\n                );\n\n                // Add to header\n                this.$el.find(\"#\" + col_key + \"-header\").append(t);\n\n                // Update grid.\n                this.grid.set(\"sort_key\", new_sort);\n                this.go_page_one();\n                this.execute();\n            },\n\n            // Set new value for categorical filter.\n            set_categorical_filter: function(name, new_value) {\n                // Update filter hyperlinks to reflect new filter value.\n                var category_filter = this.grid.get(\"categorical_filters\")[\n                        name\n                    ],\n                    cur_value = this.grid.get(\"filters\")[name];\n                var self = this;\n                this.$el.find(\".\" + name + \"-filter\").each(function() {\n                    var text = $.trim($(this).text());\n                    var filter = category_filter[text];\n                    var filter_value = filter[name];\n                    if (filter_value == new_value) {\n                        // Remove filter link since grid will be using this filter. It is assumed that\n                        // this element has a single child, a hyperlink/anchor with text.\n                        $(this).empty();\n                        $(this).addClass(\"current-filter\");\n                        $(this).append(text);\n                    } else if (filter_value == cur_value) {\n                        // Add hyperlink for this filter since grid will no longer be using this filter. It is assumed that\n                        // this element has a single child, a hyperlink/anchor.\n                        $(this).empty();\n                        var t = $('<a href=\"#\">' + text + \"</a>\");\n                        t.click(function() {\n                            self.set_categorical_filter(name, filter_value);\n                        });\n                        $(this).removeClass(\"current-filter\");\n                        $(this).append(t);\n                    }\n                });\n\n                // Update grid.\n                this.grid.add_filter(name, new_value);\n                this.go_page_one();\n                this.execute();\n            },\n\n            // Set page to view.\n            set_page: function(new_page) {\n                // Update page hyperlink to reflect new page.\n                var self = this;\n                this.$el.find(\".page-link\").each(function() {\n                    var id = $(this).attr(\"id\"),\n                        page_num = parseInt(id.split(\"-\")[2], 10), // Id has form 'page-link-<page_num>\n                        cur_page = self.grid.get(\"cur_page\"),\n                        text;\n                    if (page_num === new_page) {\n                        // Remove link to page since grid will be on this page. It is assumed that\n                        // this element has a single child, a hyperlink/anchor with text.\n                        text = $(this)\n                            .children()\n                            .text();\n                        $(this).empty();\n                        $(this).addClass(\"inactive-link\");\n                        $(this).text(text);\n                    } else if (page_num === cur_page) {\n                        // Add hyperlink to this page since grid will no longer be on this page. It is assumed that\n                        // this element has a single child, a hyperlink/anchor.\n                        text = $(this).text();\n                        $(this).empty();\n                        $(this).removeClass(\"inactive-link\");\n                        var t = $('<a href=\"#\">' + text + \"</a>\");\n                        t.click(function() {\n                            self.set_page(page_num);\n                        });\n                        $(this).append(t);\n                    }\n                });\n\n                if (new_page === \"all\") {\n                    this.grid.set(\"cur_page\", new_page);\n                } else {\n                    this.grid.set(\"cur_page\", parseInt(new_page, 10));\n                }\n                this.execute();\n            },\n\n            // confirmation/submission of operation request\n            submit_operation: function(operation_button, confirmation_text) {\n                // identify operation\n                var operation_name = $(operation_button).val();\n\n                // verify in any item is selected\n                var number_of_checked_ids = this.$el.find(\n                    'input[name=\"id\"]:checked'\n                ).length;\n                if (!number_of_checked_ids > 0) {\n                    return false;\n                }\n\n                // Check to see if there's grid confirmation text for this operation\n                var operation = _.findWhere(this.grid.attributes.operations, {\n                    label: operation_name\n                });\n                if (operation && !confirmation_text) {\n                    confirmation_text = operation.confirm || \"\";\n                }\n\n                // collect ids\n                var item_ids = [];\n                this.$el.find(\"input[name=id]:checked\").each(function() {\n                    item_ids.push($(this).val());\n                });\n\n                // execute operation\n                var options = {\n                    operation: operation_name,\n                    id: item_ids,\n                    confirmation_text: confirmation_text\n                };\n                if (operation.target == \"top\") {\n                    options = _.extend(options, {\n                        href: operation.href,\n                        target: operation.target\n                    });\n                }\n                this.execute(options);\n                return true;\n            },\n\n            check_all_items: function() {\n                var check = this.$(\".grid-row-select-checkbox\");\n                var state = this.$(\"#check_all\").prop(\"checked\");\n                _.each(check, function(c) {\n                    $(c).prop(\"checked\", state);\n                });\n                this.init_grid_elements();\n            },\n\n            // Go back to page one; this is useful when a filter is applied.\n            go_page_one: function() {\n                // Need to go back to page 1 if not showing all.\n                var cur_page = this.grid.get(\"cur_page\");\n                if (\n                    cur_page !== null &&\n                    cur_page !== undefined &&\n                    cur_page !== \"all\"\n                ) {\n                    this.grid.set(\"cur_page\", 1);\n                }\n            },\n\n            //\n            // execute operations and hyperlink requests\n            //\n            execute: function(options) {\n                // get url\n                var id = null;\n                var href = null;\n                var operation = null;\n                var confirmation_text = null;\n                var target = null;\n\n                // check for options\n                if (options) {\n                    // get options\n                    href = options.href;\n                    operation = options.operation;\n                    id = options.id;\n                    confirmation_text = options.confirmation_text;\n                    target = options.target;\n\n                    // check if input contains the operation tag\n                    if (\n                        href !== undefined &&\n                        href.indexOf(\"operation=\") != -1\n                    ) {\n                        // Get operation, id in hyperlink's href.\n                        var href_parts = href.split(\"?\");\n                        if (href_parts.length > 1) {\n                            var href_parms_str = href_parts[1];\n                            var href_parms = href_parms_str.split(\"&\");\n                            for (\n                                var index = 0;\n                                index < href_parms.length;\n                                index++\n                            ) {\n                                if (\n                                    href_parms[index].indexOf(\"operation\") != -1\n                                ) {\n                                    // Found operation parm; get operation value.\n                                    operation = href_parms[index].split(\"=\")[1];\n                                    operation = operation.replace(/\\+/g, \" \");\n                                } else if (\n                                    href_parms[index].indexOf(\"id\") != -1\n                                ) {\n                                    // Found id parm; get id value.\n                                    id = href_parms[index].split(\"=\")[1];\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // check for operation details\n                if (operation && id) {\n                    // show confirmation box\n                    if (\n                        confirmation_text &&\n                        confirmation_text != \"\" &&\n                        confirmation_text != \"None\" &&\n                        confirmation_text != \"null\"\n                    )\n                        if (!confirm(confirmation_text)) return false;\n\n                    // use small characters for operation?!\n                    operation = operation.toLowerCase();\n\n                    // Update grid.\n                    this.grid.set({\n                        operation: operation,\n                        item_ids: id\n                    });\n\n                    // Do operation. If operation cannot be performed asynchronously, redirect to location.\n                    if (target == \"top\") {\n                        window.top.location =\n                            href + \"?\" + $.param(this.grid.get_url_data());\n                    } else if (\n                        this.grid.can_async_op(operation) ||\n                        this.dict_format\n                    ) {\n                        this.update_grid();\n                    } else {\n                        this.go_to(target, href);\n                    }\n\n                    // done\n                    return false;\n                }\n\n                // refresh grid\n                if (href) {\n                    this.go_to(target, href);\n                    return false;\n                }\n\n                // refresh grid\n                if (this.grid.get(\"async\") || this.dict_format) {\n                    this.update_grid();\n                } else {\n                    this.go_to(target, href);\n                }\n\n                // done\n                return false;\n            },\n\n            // go to url\n            go_to: function(target, href) {\n                // get aysnc status\n                var async = this.grid.get(\"async\");\n                this.grid.set(\"async\", false);\n\n                // get slide status\n                var advanced_search = this.$el\n                    .find(\"#advanced-search\")\n                    .is(\":visible\");\n                this.grid.set(\"advanced_search\", advanced_search);\n\n                // get default url\n                if (!href) {\n                    href =\n                        this.grid.get(\"url_base\") +\n                        \"?\" +\n                        $.param(this.grid.get_url_data());\n                }\n\n                // clear grid of transient request attributes.\n                this.grid.set({\n                    operation: undefined,\n                    item_ids: undefined,\n                    async: async\n                });\n                switch (target) {\n                    case \"center\":\n                        $(\"#galaxy_main\").attr(\"src\", href);\n                        break;\n                    case \"top\":\n                        window.top.location = href;\n                        break;\n                    default:\n                        window.location = href;\n                }\n            },\n\n            // Update grid.\n            update_grid: function() {\n                // If there's an operation, do POST; otherwise, do GET.\n                var method = this.grid.get(\"operation\") ? \"POST\" : \"GET\";\n\n                // Show overlay to indicate loading and prevent user actions.\n                this.$el.find(\".loading-elt-overlay\").show();\n                var self = this;\n                $.ajax({\n                    type: method,\n                    url: self.grid.get(\"url_base\"),\n                    data: self.grid.get_url_data(),\n                    error: function(response) {\n                        alert(\"Grid refresh failed\");\n                    },\n                    success: function(response_text) {\n                        // backup\n                        var embedded = self.grid.get(\"embedded\");\n                        var insert = self.grid.get(\"insert\");\n                        var advanced_search = self.$el\n                            .find(\"#advanced-search\")\n                            .is(\":visible\");\n\n                        // request new configuration\n                        var json = self.dict_format\n                            ? response_text\n                            : $.parseJSON(response_text);\n\n                        // update\n                        json.embedded = embedded;\n                        json.insert = insert;\n                        json.advanced_search = advanced_search;\n\n                        // Initialize new grid config\n                        self.init_grid(json);\n\n                        // Hide loading overlay.\n                        self.$el.find(\".loading-elt-overlay\").hide();\n                    },\n                    complete: function() {\n                        // Clear grid of transient request attributes.\n                        self.grid.set({\n                            operation: undefined,\n                            item_ids: undefined\n                        });\n                    }\n                });\n            }\n        });\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-view.js","/**\n *  This class creates/wraps a default html select field as backbone class.\n */\ndefine([\"utils/utils\", \"mvc/ui/ui-buttons\"], function(Utils, Buttons) {\n    var View = Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            this.data = [];\n            this.data2 = [];\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    cls: \"ui-select\",\n                    error_text: \"No options available\",\n                    empty_text: \"Nothing selected\",\n                    visible: true,\n                    wait: false,\n                    multiple: false,\n                    searchable: true,\n                    optional: false,\n                    disabled: false,\n                    readonly: false,\n                    onchange: function() {},\n                    value: null,\n                    individual: false,\n                    pagesize: 20\n                }).set(options);\n            this.on(\"change\", function() {\n                self.model.get(\"onchange\") &&\n                    self.model.get(\"onchange\")(self.value());\n            });\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(\n                this.model,\n                \"change:disabled\",\n                this._changeDisabled,\n                this\n            );\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(\n                this.model,\n                \"change:visible\",\n                this._changeVisible,\n                this\n            );\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(\n                this.model,\n                \"change:multiple change:searchable change:cls change:id\",\n                this.render,\n                this\n            );\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            this.model.get(\"searchable\")\n                ? this._renderSearchable()\n                : this._renderClassic();\n            this.$el\n                .addClass(this.model.get(\"cls\"))\n                .attr(\"id\", this.model.get(\"id\"));\n            this.$select\n                .empty()\n                .addClass(\"select\")\n                .attr(\"id\", this.model.get(\"id\") + \"_select\")\n                .prop(\"multiple\", this.model.get(\"multiple\"))\n                .on(\"change\", function() {\n                    self.value(self._getValue());\n                    self.trigger(\"change\");\n                });\n            this._changeData();\n            this._changeWait();\n            this._changeVisible();\n            this._changeDisabled();\n        },\n\n        /** Renders the classic selection field */\n        _renderClassic: function() {\n            var self = this;\n            this.$el\n                .addClass(\n                    this.model.get(\"multiple\")\n                        ? \"ui-select-multiple\"\n                        : \"ui-select\"\n                )\n                .append((this.$select = $(\"<select/>\")))\n                .append((this.$dropdown = $(\"<div/>\")))\n                .append(\n                    (this.$resize = $(\"<div/>\").append(\n                        (this.$resize_icon = $(\"<i/>\"))\n                    ))\n                );\n            if (this.model.get(\"multiple\")) {\n                this.$dropdown.hide();\n                this.$resize_icon\n                    .addClass(\"fa fa-angle-double-right fa-rotate-45\")\n                    .show();\n                this.$resize\n                    .removeClass()\n                    .addClass(\"icon-resize\")\n                    .show()\n                    .off(\"mousedown\")\n                    .on(\"mousedown\", function(event) {\n                        var currentY = event.pageY;\n                        var currentHeight = self.$select.height();\n                        self.minHeight = self.minHeight || currentHeight;\n                        $(\"#dd-helper\")\n                            .show()\n                            .on(\"mousemove\", function(event) {\n                                self.$select.height(\n                                    Math.max(\n                                        currentHeight +\n                                            (event.pageY - currentY),\n                                        self.minHeight\n                                    )\n                                );\n                            })\n                            .on(\"mouseup mouseleave\", function() {\n                                $(\"#dd-helper\")\n                                    .hide()\n                                    .off();\n                            });\n                    });\n            } else {\n                this.$dropdown.show();\n                this.$resize.hide();\n                this.$resize_icon.hide();\n            }\n        },\n\n        /** Renders the default select2 field */\n        _renderSearchable: function() {\n            var self = this;\n            this.$el\n                .append((this.$select = $(\"<div/>\")))\n                .append((this.$dropdown = $(\"<div/>\")));\n            this.$dropdown.hide();\n            if (!this.model.get(\"multiple\")) {\n                this.$dropdown.show().on(\"click\", function() {\n                    self.$select.select2 && self.$select.select2(\"open\");\n                });\n            }\n            this.all_button = null;\n            if (\n                this.model.get(\"multiple\") &&\n                !this.model.get(\"individual\") &&\n                !this.model.get(\"readonly\")\n            ) {\n                this.all_button = new Buttons.ButtonCheck({\n                    onclick: function() {\n                        var new_value = [];\n                        self.all_button.value() !== 0 &&\n                            _.each(self.model.get(\"data\"), function(option) {\n                                new_value.push(option.value);\n                            });\n                        self.value(new_value);\n                        self.trigger(\"change\");\n                    }\n                });\n                this.$el.prepend(this.all_button.$el);\n            }\n        },\n\n        /** Matches a search term with a given text */\n        _match: function(term, text) {\n            return (\n                !term ||\n                term == \"\" ||\n                String(text)\n                    .toUpperCase()\n                    .indexOf(term.toUpperCase()) >= 0\n            );\n        },\n\n        /** Updates the selection options */\n        _changeData: function() {\n            var self = this;\n            this.data = [];\n            if (!this.model.get(\"multiple\") && this.model.get(\"optional\")) {\n                this.data.push({\n                    value: \"__null__\",\n                    label: self.model.get(\"empty_text\")\n                });\n            }\n            _.each(this.model.get(\"data\"), function(option) {\n                self.data.push(option);\n            });\n            if (this.length() == 0) {\n                this.data.push({\n                    value: \"__null__\",\n                    label: this.model.get(\"error_text\")\n                });\n            }\n            if (this.model.get(\"searchable\")) {\n                this.data2 = [];\n                _.each(this.data, function(option, index) {\n                    self.data2.push({\n                        order: index,\n                        id: option.value,\n                        text: option.label,\n                        tags: option.tags\n                    });\n                });\n                this.$select.data(\"select2\") && this.$select.select2(\"destroy\");\n                this.matched_tags = {};\n                this.$select.select2({\n                    data: self.data2,\n                    closeOnSelect: !this.model.get(\"multiple\"),\n                    multiple: this.model.get(\"multiple\"),\n                    query: function(q) {\n                        self.matched_tags = {};\n                        var pagesize = self.model.get(\"pagesize\");\n                        var results = _.filter(self.data2, function(e) {\n                            var found = false;\n                            _.each(e.tags, function(tag) {\n                                if (self._match(q.term, tag)) {\n                                    found = self.matched_tags[tag] = true;\n                                }\n                            });\n                            return found || self._match(q.term, e.text);\n                        });\n                        q.callback({\n                            results: results.slice(\n                                (q.page - 1) * pagesize,\n                                q.page * pagesize\n                            ),\n                            more: results.length >= q.page * pagesize\n                        });\n                    },\n                    formatResult: function(result) {\n                        return (\n                            _.escape(result.text) +\n                            '<div class=\"ui-tags\">' +\n                            _.reduce(\n                                result.tags,\n                                function(memo, tag) {\n                                    if (self.matched_tags[tag]) {\n                                        return (\n                                            memo +\n                                            \"&nbsp;\" +\n                                            '<div class=\"label label-info\">' +\n                                            _.escape(tag) +\n                                            \"</div>\"\n                                        );\n                                    }\n                                    return memo;\n                                },\n                                \"\"\n                            ) +\n                            \"</div>\"\n                        );\n                    }\n                });\n                this.$(\".select2-container .select2-search input\").off(\"blur\");\n            } else {\n                this.$select.find(\"option\").remove();\n                _.each(this.data, function(option) {\n                    self.$select.append(\n                        $(\"<option/>\")\n                            .attr(\"value\", option.value)\n                            .html(_.escape(option.label))\n                    );\n                });\n            }\n            this.model.set(\n                \"disabled\",\n                this.model.get(\"readonly\") || this.length() == 0\n            );\n            this._changeValue();\n        },\n\n        /** Handles field enabling/disabling, usually used when no options are available */\n        _changeDisabled: function() {\n            if (this.model.get(\"searchable\")) {\n                this.$select.select2(\n                    this.model.get(\"disabled\") ? \"disable\" : \"enable\"\n                );\n            } else {\n                this.$select.prop(\"disabled\", this.model.get(\"disabled\"));\n            }\n        },\n\n        /** Searchable fields may display a spinner e.g. while waiting for a server response */\n        _changeWait: function() {\n            this.$dropdown\n                .removeClass()\n                .addClass(\"icon-dropdown fa\")\n                .addClass(\n                    this.model.get(\"wait\")\n                        ? \"fa-spinner fa-spin\"\n                        : \"fa-caret-down\"\n                );\n        },\n\n        /** Handles field visibility */\n        _changeVisible: function() {\n            this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n            this.$select[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n        },\n\n        /** Synchronizes the model value with the actually selected field value */\n        _changeValue: function() {\n            this._setValue(this.model.get(\"value\"));\n            if (this.model.get(\"multiple\")) {\n                if (this.all_button) {\n                    var value = this._getValue();\n                    this.all_button.value(\n                        $.isArray(value) ? value.length : 0,\n                        this.length()\n                    );\n                }\n            } else if (\n                this._getValue() === null &&\n                !this.model.get(\"optional\")\n            ) {\n                this._setValue(this.first());\n            }\n        },\n\n        /** Return/Set current selection */\n        value: function(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            return this._getValue();\n        },\n\n        /** Return the first select option */\n        first: function() {\n            return this.data.length > 0 ? this.data[0].value : null;\n        },\n\n        /** Check if a value is an existing option */\n        exists: function(value) {\n            return _.findWhere(this.data, { value: value });\n        },\n\n        /** Return the label/text of the current selection */\n        text: function() {\n            var v = this._getValue();\n            var d = this.exists($.isArray(v) ? v[0] : v);\n            return d ? d.label : \"\";\n        },\n\n        /** Show the select field */\n        show: function() {\n            this.model.set(\"visible\", true);\n        },\n\n        /** Hide the select field */\n        hide: function() {\n            this.model.set(\"visible\", false);\n        },\n\n        /** Show a spinner indicating that the select options are currently loaded */\n        wait: function() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner indicating that the request has been completed */\n        unwait: function() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Returns true if the field is disabled */\n        disabled: function() {\n            return this.model.get(\"disabled\");\n        },\n\n        /** Enable the select field */\n        enable: function() {\n            this.model.set(\"disabled\", false);\n        },\n\n        /** Disable the select field */\n        disable: function() {\n            this.model.set(\"disabled\", true);\n        },\n\n        /** Update all available options at once */\n        add: function(options, sorter) {\n            _.each(this.model.get(\"data\"), function(v) {\n                v.keep &&\n                    !_.findWhere(options, { value: v.value }) &&\n                    options.push(v);\n            });\n            sorter && options && options.sort(sorter);\n            this.model.set(\"data\", options);\n        },\n\n        /** Update available options */\n        update: function(options) {\n            this.model.set(\"data\", options);\n        },\n\n        /** Set the custom onchange callback function */\n        setOnChange: function(callback) {\n            this.model.set(\"onchange\", callback);\n        },\n\n        /** Number of available options */\n        length: function() {\n            return $.isArray(this.model.get(\"data\"))\n                ? this.model.get(\"data\").length\n                : 0;\n        },\n\n        /** Set value to dom */\n        _setValue: function(new_value) {\n            var self = this;\n            if (new_value === null || new_value === undefined) {\n                new_value = \"__null__\";\n            }\n            if (this.model.get(\"multiple\")) {\n                new_value = $.isArray(new_value) ? new_value : [new_value];\n            } else if ($.isArray(new_value)) {\n                if (new_value.length > 0) {\n                    new_value = new_value[0];\n                } else {\n                    new_value = \"__null__\";\n                }\n            }\n            if (this.model.get(\"searchable\")) {\n                if ($.isArray(new_value)) {\n                    var val = [];\n                    _.each(new_value, function(v) {\n                        var d = _.findWhere(self.data2, { id: v });\n                        d && val.push(d);\n                    });\n                    new_value = val;\n                } else {\n                    var d = _.findWhere(this.data2, { id: new_value });\n                    new_value = d;\n                }\n                this.$select.select2(\"data\", new_value);\n            } else {\n                this.$select.val(new_value);\n            }\n        },\n\n        /** Get value from dom */\n        _getValue: function() {\n            var val = null;\n            if (this.model.get(\"searchable\")) {\n                var selected = this.$select.select2(\"data\");\n                if (selected) {\n                    if ($.isArray(selected)) {\n                        val = [];\n                        selected.sort(function(a, b) {\n                            return a.order - b.order;\n                        });\n                        _.each(selected, function(v) {\n                            val.push(v.id);\n                        });\n                    } else {\n                        val = selected.id;\n                    }\n                }\n            } else {\n                val = this.$select.val();\n            }\n            return Utils.isEmpty(val) ? null : val;\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-default.js","/** Base class for options based ui elements **/\ndefine([\"utils/utils\", \"mvc/ui/ui-buttons\"], function(Utils, Buttons) {\n    var Base = Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    visible: true,\n                    data: [],\n                    id: Utils.uid(),\n                    error_text: \"No options available.\",\n                    wait_text: \"Please wait...\",\n                    multiple: false,\n                    optional: false,\n                    onchange: function() {}\n                }).set(options);\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(\n                this.model,\n                \"change:visible\",\n                this._changeVisible,\n                this\n            );\n            this.on(\"change\", function() {\n                self.model.get(\"onchange\")(self.value());\n            });\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            this.$el\n                .empty()\n                .removeClass()\n                .addClass(\"ui-options\")\n                .append((this.$message = $(\"<div/>\")))\n                .append((this.$menu = $(\"<div/>\").addClass(\"ui-options-menu\")))\n                .append((this.$options = $(this._template())));\n\n            // add select/unselect all button\n            this.all_button = null;\n            if (this.model.get(\"multiple\")) {\n                this.all_button = new Buttons.ButtonCheck({\n                    onclick: function() {\n                        self\n                            .$(\"input\")\n                            .prop(\"checked\", self.all_button.value() !== 0);\n                        self.value(self._getValue());\n                        self.trigger(\"change\");\n                    }\n                });\n                this.$menu.append(this.all_button.$el);\n            }\n\n            // finalize dom\n            this._changeData();\n            this._changeWait();\n            this._changeVisible();\n        },\n\n        /** Update available options */\n        update: function(options) {\n            this.model.set(\"data\", options);\n        },\n\n        _changeData: function() {\n            var self = this;\n            this.$options.empty();\n            if (this._templateOptions) {\n                this.$options.append(\n                    this._templateOptions(this.model.get(\"data\"))\n                );\n            } else {\n                _.each(this.model.get(\"data\"), function(option) {\n                    self.$options.append(\n                        $(self._templateOption(option))\n                            .addClass(\"ui-option\")\n                            .tooltip({\n                                title: option.tooltip,\n                                placement: \"bottom\"\n                            })\n                    );\n                });\n            }\n            var self = this;\n            this.$(\"input\").on(\"change\", function() {\n                self.value(self._getValue());\n                self.trigger(\"change\");\n            });\n            this._changeValue();\n            this._changeWait();\n        },\n\n        _changeVisible: function() {\n            this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n        },\n\n        _changeWait: function() {\n            if (this.model.get(\"wait\")) {\n                if (this.length() === 0) {\n                    this._messageShow(this.model.get(\"wait_text\"), \"info\");\n                    this.$options.hide();\n                    this.$menu.hide();\n                }\n            } else {\n                if (this.length() === 0) {\n                    this._messageShow(this.model.get(\"error_text\"), \"danger\");\n                    this.$options.hide();\n                    this.$menu.hide();\n                } else {\n                    this.$message.hide();\n                    this.$options.css(\"display\", \"inline-block\");\n                    this.$menu.show();\n                }\n            }\n        },\n\n        _changeValue: function() {\n            this._setValue(this.model.get(\"value\"));\n            if (\n                this._getValue() === null &&\n                !this.model.get(\"multiple\") &&\n                !this.model.get(\"optional\")\n            ) {\n                this._setValue(this.first());\n            }\n            this.all_button &&\n                this.all_button.value(\n                    $.isArray(this._getValue()) ? this._getValue().length : 0,\n                    this.length()\n                );\n        },\n\n        /** Return/Set current selection */\n        value: function(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            return this._getValue();\n        },\n\n        /** Return first available option */\n        first: function() {\n            var options = this.$(\"input\").first();\n            return options.length > 0 ? options.val() : null;\n        },\n\n        /** Show a spinner indicating that the select options are currently loaded */\n        wait: function() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Hide spinner indicating that the request has been completed */\n        unwait: function() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Returns the number of options */\n        length: function() {\n            return this.$(\".ui-option\").length;\n        },\n\n        /** Set value to dom */\n        _setValue: function(new_value) {\n            var self = this;\n            if (new_value !== undefined) {\n                this.$(\"input\").prop(\"checked\", false);\n                if (new_value !== null) {\n                    var values = $.isArray(new_value) ? new_value : [new_value];\n                    _.each(values, function(v) {\n                        self\n                            .$('input[value=\"' + v + '\"]')\n                            .first()\n                            .prop(\"checked\", true);\n                    });\n                }\n            }\n        },\n\n        /** Return current selection */\n        _getValue: function() {\n            var selected = [];\n            this.$(\":checked\").each(function() {\n                selected.push($(this).val());\n            });\n            if (Utils.isEmpty(selected)) {\n                return null;\n            }\n            return this.model.get(\"multiple\") ? selected : selected[0];\n        },\n\n        /** Show message instead if options */\n        _messageShow: function(text, status) {\n            this.$message\n                .show()\n                .removeClass()\n                .addClass(\"ui-message alert alert-\" + status)\n                .html(text);\n        },\n\n        /** Main template function */\n        _template: function() {\n            return $(\"<div/>\").addClass(\"ui-options-list\");\n        }\n    });\n\n    /** Iconized **/\n    var BaseIcons = Base.extend({\n        _templateOption: function(pair) {\n            var id = Utils.uid();\n            return $(\"<div/>\")\n                .addClass(\"ui-option\")\n                .append(\n                    $(\"<input/>\").attr({\n                        id: id,\n                        type: this.model.get(\"type\"),\n                        name: this.model.id,\n                        value: pair.value\n                    })\n                )\n                .append(\n                    $(\"<label/>\")\n                        .addClass(\"ui-options-label\")\n                        .attr(\"for\", id)\n                        .html(pair.label)\n                );\n        }\n    });\n\n    /** Radio button field **/\n    var Radio = {};\n    Radio.View = BaseIcons.extend({\n        initialize: function(options) {\n            options.type = \"radio\";\n            BaseIcons.prototype.initialize.call(this, options);\n        }\n    });\n\n    /** Checkbox options field **/\n    var Checkbox = {};\n    Checkbox.View = BaseIcons.extend({\n        initialize: function(options) {\n            options.type = \"checkbox\";\n            options.multiple = true;\n            BaseIcons.prototype.initialize.call(this, options);\n        }\n    });\n\n    /** Radio button options field styled as classic buttons **/\n    var RadioButton = {};\n    RadioButton.View = Base.extend({\n        initialize: function(options) {\n            Base.prototype.initialize.call(this, options);\n        },\n\n        /** Set current value */\n        _setValue: function(new_value) {\n            if (new_value !== undefined) {\n                this.$(\"input\").prop(\"checked\", false);\n                this.$(\"label\").removeClass(\"active\");\n                this.$('[value=\"' + new_value + '\"]')\n                    .prop(\"checked\", true)\n                    .closest(\"label\")\n                    .addClass(\"active\");\n            }\n        },\n\n        /** Template for a single option */\n        _templateOption: function(pair) {\n            var $el = $(\"<label/>\").addClass(\"btn btn-default\");\n            pair.icon &&\n                $el.append(\n                    $(\"<i/>\")\n                        .addClass(\"fa\")\n                        .addClass(pair.icon)\n                        .addClass(!pair.label && \"no-padding\")\n                );\n            $el.append(\n                $(\"<input/>\").attr({\n                    type: \"radio\",\n                    name: this.model.id,\n                    value: pair.value\n                })\n            );\n            pair.label && $el.append(pair.label);\n            return $el;\n        },\n\n        /** Main template function */\n        _template: function() {\n            return $(\"<div/>\")\n                .addClass(\"btn-group ui-radiobutton\")\n                .attr(\"data-toggle\", \"buttons\");\n        }\n    });\n\n    return {\n        Base: Base,\n        BaseIcons: BaseIcons,\n        Radio: Radio,\n        RadioButton: RadioButton,\n        Checkbox: Checkbox\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-options.js","// dependencies\ndefine([\"utils/utils\", \"mvc/ui/ui-portlet\", \"mvc/ui/ui-misc\"], function(\n    Utils,\n    Portlet,\n    Ui\n) {\n    // ui list element\n    var View = Backbone.View.extend({\n        // create portlet to keep track of selected list elements\n        initialize: function(options) {\n            // link this\n            var self = this;\n\n            // initialize options\n            this.options = options;\n            this.name = options.name || \"element\";\n            this.multiple = options.multiple || false;\n\n            // create message handler\n            this.message = new Ui.Message();\n\n            // create portlet\n            this.portlet = new Portlet.View({ cls: \"ui-portlet-section\" });\n\n            // create select field containing the options which can be inserted into the list\n            this.select = new Ui.Select.View({ optional: options.optional });\n\n            // create insert new list element button\n            this.button = new Ui.ButtonIcon({\n                icon: \"fa fa-sign-in\",\n                tooltip: \"Insert new \" + this.name,\n                onclick: function() {\n                    self.add({\n                        id: self.select.value(),\n                        name: self.select.text()\n                    });\n                }\n            });\n\n            // build main element\n            this.setElement(this._template(options));\n            this.$(\".ui-list-message\").append(this.message.$el);\n            this.$(\".ui-list-portlet\").append(this.portlet.$el);\n            this.$(\".ui-list-button\").append(this.button.$el);\n            this.$(\".ui-list-select\").append(this.select.$el);\n        },\n\n        /** Return/Set currently selected list elements */\n        value: function(val) {\n            // set new value\n            if (val !== undefined) {\n                this.portlet.empty();\n                if ($.isArray(val)) {\n                    for (var i in val) {\n                        var v = val[i];\n                        var v_id = null;\n                        var v_name = null;\n                        if ($.type(v) != \"string\") {\n                            v_id = v.id;\n                            v_name = v.name;\n                        } else {\n                            v_id = v_name = v;\n                        }\n                        if (v_id != null) {\n                            this.add({\n                                id: v_id,\n                                name: v_name\n                            });\n                        }\n                    }\n                }\n                this._refresh();\n            }\n            // get current value\n            var lst = [];\n            this.$(\".ui-list-id\").each(function() {\n                lst.push({\n                    id: $(this).prop(\"id\"),\n                    name: $(this)\n                        .find(\".ui-list-name\")\n                        .html()\n                });\n            });\n            if (lst.length == 0) {\n                return null;\n            }\n            return lst;\n        },\n\n        /** Add row */\n        add: function(options) {\n            var self = this;\n            if (this.$('[id=\"' + options.id + '\"]').length === 0) {\n                if (!Utils.isEmpty(options.id)) {\n                    var $el = $(\n                        this._templateRow({\n                            id: options.id,\n                            name: options.name\n                        })\n                    );\n                    $el.on(\"click\", function() {\n                        $el.remove();\n                        self._refresh();\n                    });\n                    $el.on(\"mouseover\", function() {\n                        $el.addClass(\"portlet-highlight\");\n                    });\n                    $el.on(\"mouseout\", function() {\n                        $el.removeClass(\"portlet-highlight\");\n                    });\n                    this.portlet.append($el);\n                    this._refresh();\n                } else {\n                    this.message.update({\n                        message: \"Please select a valid \" + this.name + \".\",\n                        status: \"danger\"\n                    });\n                }\n            } else {\n                this.message.update({\n                    message: \"This \" + this.name + \" is already in the list.\"\n                });\n            }\n        },\n\n        /** Update available options */\n        update: function(options) {\n            this.select.update(options);\n        },\n\n        /** Refresh view */\n        _refresh: function() {\n            if (this.$(\".ui-list-id\").length > 0) {\n                !this.multiple && this.button.disable();\n                this.$(\".ui-list-portlet\").show();\n            } else {\n                this.button.enable();\n                this.$(\".ui-list-portlet\").hide();\n            }\n            this.options.onchange && this.options.onchange();\n        },\n\n        /** Main Template */\n        _template: function(options) {\n            return (\n                '<div class=\"ui-list\">' +\n                '<div class=\"ui-margin-top\">' +\n                '<span class=\"ui-list-button\"/>' +\n                '<span class=\"ui-list-select\"/>' +\n                \"</div>\" +\n                '<div class=\"ui-list-message\"/>' +\n                '<div class=\"ui-list-portlet\"/>' +\n                \"</div>\"\n            );\n        },\n\n        /** Row Template */\n        _templateRow: function(options) {\n            return (\n                '<div id=\"' +\n                options.id +\n                '\" class=\"ui-list-id\">' +\n                '<span class=\"ui-list-delete fa fa-trash\"/>' +\n                '<span class=\"ui-list-name\">' +\n                options.name +\n                \"</span>\" +\n                \"</div>\"\n            );\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-list.js","define(\n    [\n        //jquery\n        //backbone\n    ],\n    function() {\n        // =============================================================================\n        /**\n * view for a popup menu\n */\n        var PopupMenu = Backbone.View.extend({\n            //TODO: maybe better as singleton off the Galaxy obj\n            /** Cache the desired button element and options, set up the button click handler\n     *  NOTE: attaches this view as HTML/jQ data on the button for later use.\n     */\n            initialize: function($button, options) {\n                // default settings\n                this.$button = $button;\n                if (!this.$button.length) {\n                    this.$button = $(\"<div/>\");\n                }\n                this.options = options || [];\n                this.$button.data(\"popupmenu\", this);\n\n                // set up button click -> open menu behavior\n                var menu = this;\n                this.$button.click(function(event) {\n                    // if there's already a menu open, remove it\n                    $(\".popmenu-wrapper\").remove();\n                    menu._renderAndShow(event);\n                    return false;\n                });\n            },\n\n            // render the menu, append to the page body at the click position, and set up the 'click-away' handlers, show\n            _renderAndShow: function(clickEvent) {\n                this.render();\n                this.$el\n                    .appendTo(\"body\")\n                    .css(this._getShownPosition(clickEvent))\n                    .show();\n                this._setUpCloseBehavior();\n            },\n\n            // render the menu\n            // this menu doesn't attach itself to the DOM ( see _renderAndShow )\n            render: function() {\n                // render the menu body absolute and hidden, fill with template\n                this.$el\n                    .addClass(\"popmenu-wrapper\")\n                    .hide()\n                    .css({ position: \"absolute\" })\n                    .html(this.template(this.$button.attr(\"id\"), this.options));\n\n                // set up behavior on each link/anchor elem\n                if (this.options.length) {\n                    var menu = this;\n                    //precondition: there should be one option per li\n                    this.$el.find(\"li\").each(function(i, li) {\n                        var option = menu.options[i];\n\n                        // if the option has 'func', call that function when the anchor is clicked\n                        if (option.func) {\n                            $(this)\n                                .children(\"a.popupmenu-option\")\n                                .click(function(event) {\n                                    option.func.call(menu, event, option);\n                                    // We must preventDefault otherwise clicking \"cancel\"\n                                    // on a purge or something still navigates and causes\n                                    // the action.\n                                    event.preventDefault();\n                                    // bubble up so that an option click will call the close behavior\n                                });\n                        }\n                    });\n                }\n                return this;\n            },\n\n            template: function(id, options) {\n                return [\n                    '<ul id=\"',\n                    id,\n                    '-menu\" class=\"dropdown-menu\">',\n                    this._templateOptions(options),\n                    \"</ul>\"\n                ].join(\"\");\n            },\n\n            _templateOptions: function(options) {\n                if (!options.length) {\n                    return \"<li>(no options)</li>\";\n                }\n                return _.map(options, function(option) {\n                    if (option.divider) {\n                        return '<li class=\"divider\"></li>';\n                    } else if (option.header) {\n                        return [\n                            '<li class=\"head\"><a href=\"javascript:void(0);\">',\n                            option.html,\n                            \"</a></li>\"\n                        ].join(\"\");\n                    }\n                    var href = option.href || \"javascript:void(0);\",\n                        target = option.target\n                            ? ' target=\"' + option.target + '\"'\n                            : \"\",\n                        check = option.checked\n                            ? '<span class=\"fa fa-check\"></span>'\n                            : \"\";\n                    return [\n                        '<li><a class=\"popupmenu-option\" href=\"',\n                        href,\n                        '\"',\n                        target,\n                        \">\",\n                        check,\n                        option.html,\n                        \"</a></li>\"\n                    ].join(\"\");\n                }).join(\"\");\n            },\n\n            // get the absolute position/offset for the menu\n            _getShownPosition: function(clickEvent) {\n                // display menu horiz. centered on click...\n                var menuWidth = this.$el.width();\n                var x = clickEvent.pageX - menuWidth / 2;\n\n                // adjust to handle horiz. scroll and window dimensions ( draw entirely on visible screen area )\n                x = Math.min(\n                    x,\n                    $(document).scrollLeft() + $(window).width() - menuWidth - 5\n                );\n                x = Math.max(x, $(document).scrollLeft() + 5);\n                return {\n                    top: clickEvent.pageY,\n                    left: x\n                };\n            },\n\n            // bind an event handler to all available frames so that when anything is clicked\n            // the menu is removed from the DOM and the event handler unbinds itself\n            _setUpCloseBehavior: function() {\n                var menu = this;\n                //TODO: alternately: focus hack, blocking overlay, jquery.blockui\n\n                // function to close popup and unbind itself\n                function closePopup(event) {\n                    $(document).off(\"click.close_popup\");\n                    if (window && window.parent !== window) {\n                        try {\n                            $(window.parent.document).off(\"click.close_popup\");\n                        } catch (err) {}\n                    } else {\n                        try {\n                            $(\"iframe#galaxy_main\")\n                                .contents()\n                                .off(\"click.close_popup\");\n                        } catch (err) {}\n                    }\n                    menu.remove();\n                }\n\n                $(\"html\").one(\"click.close_popup\", closePopup);\n                if (window && window.parent !== window) {\n                    try {\n                        $(window.parent.document)\n                            .find(\"html\")\n                            .one(\"click.close_popup\", closePopup);\n                    } catch (err) {}\n                } else {\n                    try {\n                        $(\"iframe#galaxy_main\")\n                            .contents()\n                            .one(\"click.close_popup\", closePopup);\n                    } catch (err) {}\n                }\n            },\n\n            // add a menu option/item at the given index\n            addItem: function(item, index) {\n                // append to end if no index\n                index = index >= 0 ? index : this.options.length;\n                this.options.splice(index, 0, item);\n                return this;\n            },\n\n            // remove a menu option/item at the given index\n            removeItem: function(index) {\n                if (index >= 0) {\n                    this.options.splice(index, 1);\n                }\n                return this;\n            },\n\n            // search for a menu option by its html\n            findIndexByHtml: function(html) {\n                for (var i = 0; i < this.options.length; i++) {\n                    if (\n                        _.has(this.options[i], \"html\") &&\n                        this.options[i].html === html\n                    ) {\n                        return i;\n                    }\n                }\n                return null;\n            },\n\n            // search for a menu option by its html\n            findItemByHtml: function(html) {\n                return this.options[this.findIndexByHtml(html)];\n            },\n\n            // string representation\n            toString: function() {\n                return \"PopupMenu\";\n            }\n        });\n        /** shortcut to new for when you don't need to preserve the ref */\n        PopupMenu.create = function _create($button, options) {\n            return new PopupMenu($button, options);\n        };\n\n        // -----------------------------------------------------------------------------\n        // the following class functions are bridges from the original make_popupmenu and make_popup_menus\n        // to the newer backbone.js PopupMenu\n\n        /** Create a PopupMenu from simple map initial_options activated by clicking button_element.\n *      Converts initial_options to object array used by PopupMenu.\n *  @param {jQuery|DOMElement} button_element element which, when clicked, activates menu\n *  @param {Object} initial_options map of key -> values, where\n *      key is option text, value is fn to call when option is clicked\n *  @returns {PopupMenu} the PopupMenu created\n */\n        PopupMenu.make_popupmenu = function(button_element, initial_options) {\n            var convertedOptions = [];\n            _.each(initial_options, function(optionVal, optionKey) {\n                var newOption = { html: optionKey };\n\n                // keys with null values indicate: header\n                if (optionVal === null) {\n                    // !optionVal? (null only?)\n                    newOption.header = true;\n\n                    // keys with function values indicate: a menu option\n                } else if (jQuery.type(optionVal) === \"function\") {\n                    newOption.func = optionVal;\n                }\n                //TODO:?? any other special optionVals?\n                // there was no divider option originally\n                convertedOptions.push(newOption);\n            });\n            return new PopupMenu($(button_element), convertedOptions);\n        };\n\n        /** Find all anchors in $parent (using selector) and covert anchors into a PopupMenu options map.\n *  @param {jQuery} $parent the element that contains the links to convert to options\n *  @param {String} selector jq selector string to find links\n *  @returns {Object[]} the options array to initialize a PopupMenu\n */\n        //TODO: lose parent and selector, pass in array of links, use map to return options\n        PopupMenu.convertLinksToOptions = function($parent, selector) {\n            $parent = $($parent);\n            selector = selector || \"a\";\n            var options = [];\n            $parent.find(selector).each(function(elem, i) {\n                var option = {},\n                    $link = $(elem);\n\n                // convert link text to the option text (html) and the href into the option func\n                option.html = $link.text();\n                if ($link.attr(\"href\")) {\n                    var linkHref = $link.attr(\"href\"),\n                        linkTarget = $link.attr(\"target\"),\n                        confirmText = $link.attr(\"confirm\");\n\n                    option.func = function() {\n                        // if there's a \"confirm\" attribute, throw up a confirmation dialog, and\n                        //  if the user cancels - do nothing\n                        if (confirmText && !confirm(confirmText)) {\n                            return;\n                        }\n\n                        // if there's no confirm attribute, or the user accepted the confirm dialog:\n                        switch (linkTarget) {\n                            // relocate the center panel\n                            case \"_parent\":\n                                window.parent.location = linkHref;\n                                break;\n\n                            // relocate the entire window\n                            case \"_top\":\n                                window.top.location = linkHref;\n                                break;\n\n                            // relocate this panel\n                            default:\n                                window.location = linkHref;\n                        }\n                    };\n                }\n                options.push(option);\n            });\n            return options;\n        };\n\n        /** Create a single popupmenu from existing DOM button and anchor elements\n *  @param {jQuery} $buttonElement the element that when clicked will open the menu\n *  @param {jQuery} $menuElement the element that contains the anchors to convert into a menu\n *  @param {String} menuElementLinkSelector jq selector string used to find anchors to be made into menu options\n *  @returns {PopupMenu} the PopupMenu (Backbone View) that can render, control the menu\n */\n        PopupMenu.fromExistingDom = function(\n            $buttonElement,\n            $menuElement,\n            menuElementLinkSelector\n        ) {\n            $buttonElement = $($buttonElement);\n            $menuElement = $($menuElement);\n            var options = PopupMenu.convertLinksToOptions(\n                $menuElement,\n                menuElementLinkSelector\n            );\n            // we're done with the menu (having converted it to an options map)\n            $menuElement.remove();\n            return new PopupMenu($buttonElement, options);\n        };\n\n        /** Create all popupmenus within a document or a more specific element\n *  @param {DOMElement} parent the DOM element in which to search for popupmenus to build (defaults to document)\n *  @param {String} menuSelector jq selector string to find popupmenu menu elements (defaults to \"div[popupmenu]\")\n *  @param {Function} buttonSelectorBuildFn the function to build the jq button selector.\n *      Will be passed $menuElement, parent.\n *      (Defaults to return '#' + $menuElement.attr( 'popupmenu' ); )\n *  @returns {PopupMenu[]} array of popupmenus created\n */\n        PopupMenu.make_popup_menus = function(\n            parent,\n            menuSelector,\n            buttonSelectorBuildFn\n        ) {\n            parent = parent || document;\n            // orig. Glx popupmenu menus have a (non-std) attribute 'popupmenu'\n            //  which contains the id of the button that activates the menu\n            menuSelector = menuSelector || \"div[popupmenu]\";\n            // default to (orig. Glx) matching button to menu by using the popupmenu attr of the menu as the id of the button\n            buttonSelectorBuildFn =\n                buttonSelectorBuildFn ||\n                function($menuElement, parent) {\n                    return \"#\" + $menuElement.attr(\"popupmenu\");\n                };\n\n            // aggregate and return all PopupMenus\n            var popupMenusCreated = [];\n            $(parent)\n                .find(menuSelector)\n                .each(function() {\n                    var $menuElement = $(this),\n                        $buttonElement = $(parent).find(\n                            buttonSelectorBuildFn($menuElement, parent)\n                        );\n                    popupMenusCreated.push(\n                        PopupMenu.fromDom($buttonElement, $menuElement)\n                    );\n                    $buttonElement.addClass(\"popup\");\n                });\n            return popupMenusCreated;\n        };\n\n        // =============================================================================\n        return PopupMenu;\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/popup-menu.js","/** This class creates a ui table element. */\ndefine([\"utils/utils\"], function(Utils) {\n    var View = Backbone.View.extend({\n        initialize: function(options) {\n            this.options = Utils.merge(options, {\n                content: \"No content available.\",\n                onchange: null,\n                ondblclick: null,\n                onconfirm: null,\n                cls: \"ui-table\",\n                selectable: true,\n                cls_tr: \"\"\n            });\n            this.setElement(this._template());\n            this.$thead = this.$(\"thead\");\n            this.$tbody = this.$(\"tbody\");\n            this.$tmessage = this.$(\"tmessage\");\n            this.row = this._row();\n            this.row_count = 0;\n        },\n\n        events: {\n            click: \"_onclick\",\n            dblclick: \"_ondblclick\"\n        },\n\n        /** Add cell to header row */\n        addHeader: function($el) {\n            this.row.append($(\"<th/>\").append($el));\n        },\n\n        /** Append header row to table */\n        appendHeader: function() {\n            this.$thead.append(this.row);\n            this.row = $(\"<tr/>\");\n        },\n\n        /** Add cell to row */\n        add: function($el, width, align) {\n            var wrapper = $(\"<td/>\");\n            if (width) {\n                wrapper.css(\"width\", width);\n            }\n            if (align) {\n                wrapper.css(\"text-align\", align);\n            }\n            this.row.append(wrapper.append($el));\n        },\n\n        /** Append row to table */\n        append: function(id, fade) {\n            this._commit(id, fade, false);\n        },\n\n        /** Prepend row to table */\n        prepend: function(id, fade) {\n            this._commit(id, fade, true);\n        },\n\n        /** Helper to get row element */\n        get: function(id) {\n            return this.$(\"#\" + id);\n        },\n\n        /** Delete row by id */\n        del: function(id) {\n            var item = this.$tbody.find(\"#\" + id);\n            if (item.length > 0) {\n                item.remove();\n                this.row_count--;\n                this._refresh();\n            }\n        },\n\n        /** Delete all rows */\n        delAll: function() {\n            this.$tbody.empty();\n            this.row_count = 0;\n            this._refresh();\n        },\n\n        /** Set a value i.e. selects/highlights a particular row by id */\n        value: function(new_value) {\n            if (this.options.selectable) {\n                this.before = this.$tbody.find(\".current\").attr(\"id\");\n                if (new_value !== undefined) {\n                    this.$tbody.find(\"tr\").removeClass(\"current\");\n                    if (new_value) {\n                        this.$tbody.find(\"#\" + new_value).addClass(\"current\");\n                    }\n                }\n                var after = this.$tbody.find(\".current\").attr(\"id\");\n                if (after === undefined) {\n                    return null;\n                } else {\n                    if (after != this.before && this.options.onchange) {\n                        this.options.onchange(new_value);\n                    }\n                    return after;\n                }\n            }\n        },\n\n        /** Return the number of rows */\n        size: function() {\n            return this.$tbody.find(\"tr\").length;\n        },\n\n        /** Helper to append rows */\n        _commit: function(id, fade, prepend) {\n            this.del(id);\n            this.row.attr(\"id\", id);\n            if (prepend) {\n                this.$tbody.prepend(this.row);\n            } else {\n                this.$tbody.append(this.row);\n            }\n            if (fade) {\n                this.row.hide();\n                this.row.fadeIn();\n            }\n            this.row = this._row();\n            this.row_count++;\n            this._refresh();\n        },\n\n        /** Helper to create new row */\n        _row: function() {\n            return $('<tr class=\"' + this.options.cls_tr + '\"></tr>');\n        },\n\n        /** Handles onclick events */\n        _onclick: function(e) {\n            var old_value = this.value();\n            var new_value = $(e.target)\n                .closest(\"tr\")\n                .attr(\"id\");\n            if (new_value != \"\") {\n                if (new_value && old_value != new_value) {\n                    if (this.options.onconfirm) {\n                        this.options.onconfirm(new_value);\n                    } else {\n                        this.value(new_value);\n                    }\n                }\n            }\n        },\n\n        /** Handles ondblclick events */\n        _ondblclick: function(e) {\n            var value = this.value();\n            if (value && this.options.ondblclick) {\n                this.options.ondblclick(value);\n            }\n        },\n\n        /** Refresh helper */\n        _refresh: function() {\n            if (this.row_count == 0) {\n                this.$tmessage.show();\n            } else {\n                this.$tmessage.hide();\n            }\n        },\n\n        /** Template */\n        _template: function() {\n            return (\n                \"<div>\" +\n                '<table class=\"' +\n                this.options.cls +\n                '\">' +\n                \"<thead/>\" +\n                \"<tbody/>\" +\n                \"</table>\" +\n                \"<tmessage>\" +\n                this.options.content +\n                \"</tmessage>\" +\n                \"<div>\"\n            );\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-table.js","/* This class maps the form dom to an api compatible javascript dictionary. */\ndefine([\"utils/utils\"], function(Utils) {\n    var Manager = Backbone.Model.extend({\n        initialize: function(app) {\n            this.app = app;\n        },\n\n        /** Creates a checksum. */\n        checksum: function() {\n            var sum = \"\";\n            var self = this;\n            this.app.section.$el.find(\".section-row\").each(function() {\n                var id = $(this).attr(\"id\");\n                var field = self.app.field_list[id];\n                if (field) {\n                    sum +=\n                        id +\n                        \":\" +\n                        JSON.stringify(field.value && field.value()) +\n                        \":\" +\n                        field.collapsed +\n                        \";\";\n                }\n            });\n            return sum;\n        },\n\n        /** Convert dom into a dictionary of flat id/value pairs used e.g. on job submission. */\n        create: function() {\n            var self = this;\n\n            // get raw dictionary from dom\n            var dict = {};\n            this._iterate(this.app.section.$el, dict);\n\n            // add to result dictionary, label elements\n            var result_dict = {};\n            this.flat_dict = {};\n            function add(flat_id, input_id, input_value) {\n                self.flat_dict[flat_id] = input_id;\n                result_dict[flat_id] = input_value;\n                self.app.element_list[input_id] &&\n                    self.app.element_list[input_id].$el.attr(\n                        \"tour_id\",\n                        flat_id\n                    );\n            }\n            // converter between raw dictionary and job dictionary\n            function convert(identifier, head) {\n                for (var index in head) {\n                    var node = head[index];\n                    if (node.input) {\n                        var input = node.input;\n                        var flat_id = identifier;\n                        if (identifier != \"\") {\n                            flat_id += \"|\";\n                        }\n                        flat_id += input.name;\n                        switch (input.type) {\n                            case \"repeat\":\n                                var section_label = \"section-\";\n                                var block_indices = [];\n                                var block_prefix = null;\n                                for (var block_label in node) {\n                                    var pos = block_label.indexOf(\n                                        section_label\n                                    );\n                                    if (pos != -1) {\n                                        pos += section_label.length;\n                                        block_indices.push(\n                                            parseInt(block_label.substr(pos))\n                                        );\n                                        if (!block_prefix) {\n                                            block_prefix = block_label.substr(\n                                                0,\n                                                pos\n                                            );\n                                        }\n                                    }\n                                }\n                                block_indices.sort(function(a, b) {\n                                    return a - b;\n                                });\n                                var index = 0;\n                                for (var i in block_indices) {\n                                    convert(\n                                        flat_id + \"_\" + index++,\n                                        node[block_prefix + block_indices[i]]\n                                    );\n                                }\n                                break;\n                            case \"conditional\":\n                                var value = self.app.field_list[\n                                    input.id\n                                ].value();\n                                add(\n                                    flat_id + \"|\" + input.test_param.name,\n                                    input.id,\n                                    value\n                                );\n                                var selectedCase = matchCase(input, value);\n                                if (selectedCase != -1) {\n                                    convert(\n                                        flat_id,\n                                        head[\n                                            input.id +\n                                                \"-section-\" +\n                                                selectedCase\n                                        ]\n                                    );\n                                }\n                                break;\n                            case \"section\":\n                                convert((!input.flat && flat_id) || \"\", node);\n                                break;\n                            default:\n                                var field = self.app.field_list[input.id];\n                                if (field && field.value) {\n                                    var value = field.value();\n                                    if (\n                                        input.ignore === undefined ||\n                                        input.ignore != value\n                                    ) {\n                                        if (\n                                            field.collapsed &&\n                                            input.collapsible_value\n                                        ) {\n                                            value = input.collapsible_value;\n                                        }\n                                        add(flat_id, input.id, value);\n                                        if (input.payload) {\n                                            for (var p_id in input.payload) {\n                                                add(\n                                                    p_id,\n                                                    input.id,\n                                                    input.payload[p_id]\n                                                );\n                                            }\n                                        }\n                                    }\n                                }\n                        }\n                    }\n                }\n            }\n            convert(\"\", dict);\n            return result_dict;\n        },\n\n        /** Matches flat ids to corresponding input element\n         * @param{string} flat_id - Flat input id to be looked up.\n         */\n        match: function(flat_id) {\n            return this.flat_dict && this.flat_dict[flat_id];\n        },\n\n        /** Match conditional values to selected cases\n        */\n        matchCase: function(input, value) {\n            return matchCase(input, value);\n        },\n\n        /** Matches a new tool model to the current input elements e.g. used to update dynamic options\n        */\n        matchModel: function(model, callback) {\n            var self = this;\n            visitInputs(model.inputs, function(input, name) {\n                self.flat_dict[name] && callback(input, self.flat_dict[name]);\n            });\n        },\n\n        /** Matches identifier from api response to input elements e.g. used to display validation errors\n        */\n        matchResponse: function(response) {\n            var result = {};\n            var self = this;\n            function search(id, head) {\n                if (typeof head === \"string\") {\n                    var input_id = self.flat_dict[id];\n                    input_id && (result[input_id] = head);\n                } else {\n                    for (var i in head) {\n                        var new_id = i;\n                        if (id !== \"\") {\n                            var separator = \"|\";\n                            if (head instanceof Array) {\n                                separator = \"_\";\n                            }\n                            new_id = id + separator + new_id;\n                        }\n                        search(new_id, head[i]);\n                    }\n                }\n            }\n            search(\"\", response);\n            return result;\n        },\n\n        /** Map dom tree to dictionary tree with input elements.\n        */\n        _iterate: function(parent, dict) {\n            var self = this;\n            var children = $(parent).children();\n            children.each(function() {\n                var child = this;\n                var id = $(child).attr(\"id\");\n                if ($(child).hasClass(\"section-row\")) {\n                    var input = self.app.input_list[id];\n                    dict[id] = (input && { input: input }) || {};\n                    self._iterate(child, dict[id]);\n                } else {\n                    self._iterate(child, dict);\n                }\n            });\n        }\n    });\n\n    /** Match conditional values to selected cases\n     * @param{dict}   input     - Definition of conditional input parameter\n     * @param{dict}   value     - Current value\n     */\n    var matchCase = function(input, value) {\n        if (input.test_param.type == \"boolean\") {\n            if (value == \"true\") {\n                value = input.test_param.truevalue || \"true\";\n            } else {\n                value = input.test_param.falsevalue || \"false\";\n            }\n        }\n        for (var i in input.cases) {\n            if (input.cases[i].value == value) {\n                return i;\n            }\n        }\n        return -1;\n    };\n\n    /** Visits tool inputs\n     * @param{dict}   inputs    - Nested dictionary of input elements\n     * @param{dict}   callback  - Called with the mapped dictionary object and corresponding model node\n     */\n    var visitInputs = function(inputs, callback, prefix, context) {\n        context = $.extend(true, {}, context);\n        _.each(inputs, function(input) {\n            if (input && input.type && input.name) {\n                context[input.name] = input;\n            }\n        });\n        for (var key in inputs) {\n            var node = inputs[key];\n            node.name = node.name || key;\n            var name = prefix ? prefix + \"|\" + node.name : node.name;\n            switch (node.type) {\n                case \"repeat\":\n                    _.each(node.cache, function(cache, j) {\n                        visitInputs(cache, callback, name + \"_\" + j, context);\n                    });\n                    break;\n                case \"conditional\":\n                    if (node.test_param) {\n                        callback(\n                            node.test_param,\n                            name + \"|\" + node.test_param.name,\n                            context\n                        );\n                        var selectedCase = matchCase(\n                            node,\n                            node.test_param.value\n                        );\n                        if (selectedCase != -1) {\n                            visitInputs(\n                                node.cases[selectedCase].inputs,\n                                callback,\n                                name,\n                                context\n                            );\n                        } else {\n                            Galaxy.emit.debug(\n                                \"form-data::visitInputs() - Invalid case for \" +\n                                    name +\n                                    \".\"\n                            );\n                        }\n                    } else {\n                        Galaxy.emit.debug(\n                            \"form-data::visitInputs() - Conditional test parameter missing for \" +\n                                name +\n                                \".\"\n                        );\n                    }\n                    break;\n                case \"section\":\n                    visitInputs(node.inputs, callback, name, context);\n                    break;\n                default:\n                    callback(node, name, context);\n            }\n        }\n    };\n\n    return {\n        Manager: Manager,\n        visitInputs: visitInputs\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-data.js","// dependencies\ndefine([], function() {\n    // grid model\n    return Backbone.Model.extend({\n        defaults: {\n            url_base: \"\",\n            async: false,\n            async_ops: [],\n            categorical_filters: [],\n            filters: {},\n            sort_key: null,\n            show_item_checkboxes: false,\n            advanced_search: false,\n            cur_page: 1,\n            num_pages: 1,\n            operation: undefined,\n            item_ids: undefined\n        },\n\n        /**\n     * Return true if operation can be done asynchronously.\n     */\n        can_async_op: function(op) {\n            return _.indexOf(this.attributes.async_ops, op) !== -1;\n        },\n\n        /**\n     * Add filtering criterion.\n     */\n        add_filter: function(key, value, append) {\n            // Update URL arg with new condition.\n            if (append) {\n                // Update or append value.\n                var cur_val = this.attributes.filters[key],\n                    new_val;\n                if (cur_val === null || cur_val === undefined) {\n                    new_val = value;\n                } else if (typeof cur_val == \"string\") {\n                    if (cur_val == \"All\" || cur_val == value) {\n                        new_val = value;\n                    } else {\n                        // Replace string with array.\n                        var values = [];\n                        values[0] = cur_val;\n                        values[1] = value;\n                        new_val = values;\n                    }\n                } else {\n                    // Current value is an array.\n                    new_val = cur_val;\n                    if (new_val.indexOf(value) === -1) {\n                        new_val.push(value);\n                    }\n                }\n                this.attributes.filters[key] = new_val;\n            } else {\n                // Replace value.\n                this.attributes.filters[key] = value;\n            }\n        },\n\n        /**\n     * Remove filtering criterion.\n     */\n        remove_filter: function(key, condition) {\n            var cur_val = this.attributes.filters[key];\n            if (cur_val === null || cur_val === undefined) {\n                return false;\n            }\n\n            if (typeof cur_val === \"string\") {\n                // overwrite/remove condition.\n                this.attributes.filters[key] = \"\";\n            } else {\n                // filter contains an array of conditions.\n                var condition_index = _.indexOf(cur_val, condition);\n                if (condition_index !== -1) {\n                    cur_val[condition_index] = \"\";\n                }\n            }\n        },\n\n        /**\n     * Returns URL data for obtaining a new grid.\n     */\n        get_url_data: function() {\n            var url_data = {\n                async: this.attributes.async,\n                sort: this.attributes.sort_key,\n                page: this.attributes.cur_page,\n                show_item_checkboxes: this.attributes.show_item_checkboxes,\n                advanced_search: this.attributes.advanced_search\n            };\n\n            // Add operation, item_ids only if they have values.\n            if (this.attributes.operation) {\n                url_data.operation = this.attributes.operation;\n            }\n            if (this.attributes.item_ids) {\n                url_data.id = this.attributes.item_ids;\n            }\n\n            // Add filter arguments to data, placing \"f-\" in front of all arguments.\n            var self = this;\n            _.each(_.pairs(self.attributes.filters), function(k) {\n                url_data[\"f-\" + k[0]] = k[1];\n            });\n            return url_data;\n        },\n\n        // Return URL for obtaining a new grid\n        get_url: function(args) {\n            return (\n                this.get(\"url_base\") +\n                \"?\" +\n                $.param(this.get_url_data()) +\n                \"&\" +\n                $.param(args)\n            );\n        }\n    });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-model.js","// dependencies\ndefine([\"utils/utils\"], function(Utils) {\n    // grid view templates\n    return {\n        // template\n        grid: function(options) {\n            var tmpl = \"\";\n            if (options.embedded) {\n                tmpl = this.grid_header(options) + this.grid_table(options);\n            } else {\n                tmpl =\n                    '<div class=\"loading-elt-overlay\"></div>' +\n                    \"<table>\" +\n                    \"<tr>\" +\n                    '<td width=\"75%\">' +\n                    this.grid_header(options) +\n                    \"</td>\" +\n                    \"<td></td>\" +\n                    \"<td></td>\" +\n                    \"</tr>\" +\n                    \"<tr>\" +\n                    '<td width=\"100%\" id=\"grid-message\" valign=\"top\"></td>' +\n                    \"<td></td>\" +\n                    \"<td></td>\" +\n                    \"</tr>\" +\n                    \"</table>\" +\n                    this.grid_table(options);\n            }\n\n            // add info text\n            if (options.info_text) {\n                tmpl +=\n                    '<br><div class=\"toolParamHelp\" style=\"clear: both;\">' +\n                    options.info_text +\n                    \"</div>\";\n            }\n\n            // return\n            return tmpl;\n        },\n\n        // template\n        grid_table: function(options) {\n            return (\n                '<form method=\"post\" onsubmit=\"return false;\">' +\n                '<table id=\"grid-table\" class=\"grid\">' +\n                '<thead id=\"grid-table-header\"></thead>' +\n                '<tbody id=\"grid-table-body\"></tbody>' +\n                '<tfoot id=\"grid-table-footer\"></tfoot>' +\n                \"</table>\" +\n                \"</form>\"\n            );\n        },\n\n        // template\n        grid_header: function(options) {\n            var tmpl = '<div class=\"grid-header\">';\n            if (!options.embedded) {\n                tmpl += \"<h2>\" + options.title + \"</h2>\";\n            }\n            if (options.global_actions) {\n                tmpl += '<ul class=\"manage-table-actions\">';\n                var show_popup = options.global_actions.length >= 3;\n                if (show_popup) {\n                    tmpl +=\n                        '<li><a class=\"action-button\" id=\"popup-global-actions\" class=\"menubutton\">Actions</a></li>' +\n                        '<div popupmenu=\"popup-global-actions\">';\n                }\n                for (var i in options.global_actions) {\n                    var action = options.global_actions[i];\n                    tmpl +=\n                        \"<li>\" +\n                        '<a class=\"action-button use-target\" target=\"' +\n                        action.target +\n                        '\" href=\"' +\n                        action.url_args +\n                        '\" onclick=\"return false;\" >' +\n                        action.label +\n                        \"</a>\" +\n                        \"</li>\";\n                }\n                if (show_popup) {\n                    tmpl += \"</div>\";\n                }\n                tmpl += \"</ul>\";\n            }\n            if (options.insert) {\n                tmpl += options.insert;\n            }\n\n            // add grid filters\n            tmpl += this.grid_filters(options);\n            tmpl += \"</div>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template\n        header: function(options) {\n            // start\n            var tmpl = \"<tr>\";\n\n            // add checkbox\n            if (options.show_item_checkboxes) {\n                tmpl += \"<th>\";\n                if (options.items.length > 0) {\n                    tmpl +=\n                        '<input type=\"checkbox\" id=\"check_all\" name=select_all_checkbox value=\"true\">' +\n                        '<input type=\"hidden\" name=select_all_checkbox value=\"true\">';\n                }\n                tmpl += \"</th>\";\n            }\n\n            // create header elements\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.visible) {\n                    tmpl += '<th id=\"' + column.key + '-header\">';\n                    if (column.href) {\n                        tmpl +=\n                            '<a href=\"' +\n                            column.href +\n                            '\" class=\"sort-link\" sort_key=\"' +\n                            column.key +\n                            '\">' +\n                            column.label +\n                            \"</a>\";\n                    } else {\n                        tmpl += column.label;\n                    }\n                    tmpl +=\n                        '<span class=\"sort-arrow\">' +\n                        column.extra +\n                        \"</span>\" +\n                        \"</th>\";\n                }\n            }\n\n            // finalize\n            tmpl += \"</tr>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template\n        body: function(options) {\n            // initialize\n            var tmpl = \"\";\n            var num_rows_rendered = 0;\n            var items_length = options.items.length;\n\n            // empty grid?\n            if (items_length == 0) {\n                // No results.\n                tmpl += '<tr><td colspan=\"100\"><em>No Items</em></td></tr>';\n                num_rows_rendered = 1;\n            }\n\n            // create rows\n            for (var i in options.items) {\n                // encode ids\n                var item = options.items[i];\n                var encoded_id = item.encode_id;\n                var popupmenu_id = \"grid-\" + i + \"-popup\";\n\n                // Tag current\n                tmpl += \"<tr \";\n                if (options.current_item_id == item.id) {\n                    tmpl += 'class=\"current\"';\n                }\n                tmpl += \">\";\n\n                // Item selection column\n                if (options.show_item_checkboxes) {\n                    tmpl +=\n                        '<td style=\"width: 1.5em;\">' +\n                        '<input type=\"checkbox\" name=\"id\" value=\"' +\n                        encoded_id +\n                        '\" id=\"' +\n                        encoded_id +\n                        '\" class=\"grid-row-select-checkbox\" />' +\n                        \"</td>\";\n                }\n\n                // Data columns\n                for (var j in options.columns) {\n                    var column = options.columns[j];\n                    if (column.visible) {\n                        // Nowrap\n                        var nowrap = \"\";\n                        if (column.nowrap) {\n                            nowrap = 'style=\"white-space:nowrap;\"';\n                        }\n\n                        // get column settings\n                        var column_settings = item.column_config[column.label];\n\n                        // load attributes\n                        var link = column_settings.link;\n                        var value = column_settings.value;\n                        var target = column_settings.target;\n\n                        // unescape value\n                        if (jQuery.type(value) === \"string\") {\n                            value = value.replace(/\\/\\//g, \"/\");\n                        }\n\n                        // Attach popup menu?\n                        var id = \"\";\n                        var cls = \"\";\n                        if (column.attach_popup) {\n                            id = \"grid-\" + i + \"-popup\";\n                            cls = \"menubutton\";\n                            if (link != \"\") {\n                                cls += \" split\";\n                            }\n                            cls += \" popup\";\n                        }\n\n                        // Check for row wrapping\n                        tmpl += \"<td \" + nowrap + \">\";\n\n                        // Link\n                        if (link) {\n                            if (options.operations.length != 0) {\n                                tmpl +=\n                                    '<div id=\"' +\n                                    id +\n                                    '\" class=\"' +\n                                    cls +\n                                    '\" style=\"float: left;\">';\n                            }\n                            tmpl +=\n                                '<a class=\"menubutton-label use-target\" target=\"' +\n                                target +\n                                '\" href=\"' +\n                                link +\n                                '\" onclick=\"return false;\">' +\n                                value +\n                                \"</a>\";\n                            if (options.operations.length != 0) {\n                                tmpl += \"</div>\";\n                            }\n                        } else {\n                            tmpl +=\n                                '<div id=\"' +\n                                id +\n                                '\" class=\"' +\n                                cls +\n                                '\"><label id=\"' +\n                                column.label_id_prefix +\n                                encoded_id +\n                                '\" for=\"' +\n                                encoded_id +\n                                '\">' +\n                                (value || \"\") +\n                                \"</label></div>\";\n                        }\n                        tmpl += \"</td>\";\n                    }\n                }\n                tmpl += \"</tr>\";\n                num_rows_rendered++;\n            }\n            return tmpl;\n        },\n\n        // template\n        footer: function(options) {\n            // create template string\n            var tmpl = \"\";\n\n            // paging\n            if (options.use_paging && options.num_pages > 1) {\n                // get configuration\n                var num_page_links = options.num_page_links;\n                var cur_page_num = options.cur_page_num;\n                var num_pages = options.num_pages;\n\n                // First pass on min page.\n                var page_link_range = num_page_links / 2;\n                var min_page = cur_page_num - page_link_range;\n                var min_offset = 0;\n                if (min_page <= 0) {\n                    // Min page is too low.\n                    min_page = 1;\n                    min_offset = page_link_range - (cur_page_num - min_page);\n                }\n\n                // Set max page.\n                var max_range = page_link_range + min_offset;\n                var max_page = cur_page_num + max_range;\n                var max_offset;\n                if (max_page <= num_pages) {\n                    // Max page is fine.\n                    max_offset = 0;\n                } else {\n                    // Max page is too high.\n                    max_page = num_pages;\n                    // +1 to account for the +1 in the loop below.\n                    max_offset = max_range - (max_page + 1 - cur_page_num);\n                }\n\n                // Second and final pass on min page to add any unused\n                // offset from max to min.\n                if (max_offset != 0) {\n                    min_page -= max_offset;\n                    if (min_page < 1) {\n                        min_page = 1;\n                    }\n                }\n\n                // template header\n                tmpl += '<tr id=\"page-links-row\">';\n                if (options.show_item_checkboxes) {\n                    tmpl += \"<td></td>\";\n                }\n                tmpl +=\n                    '<td colspan=\"100\">' +\n                    '<span id=\"page-link-container\">' +\n                    \"Page:\";\n\n                if (min_page > 1) {\n                    tmpl +=\n                        '<span class=\"page-link\" id=\"page-link-1\"><a href=\"javascript:void(0);\" page_num=\"1\" onclick=\"return false;\">1</a></span> ...';\n                }\n\n                // create page urls\n                for (\n                    var page_index = min_page;\n                    page_index < max_page + 1;\n                    page_index++\n                ) {\n                    if (page_index == options.cur_page_num) {\n                        tmpl +=\n                            '<span class=\"page-link inactive-link\" id=\"page-link-' +\n                            page_index +\n                            '\">' +\n                            page_index +\n                            \"</span>\";\n                    } else {\n                        tmpl +=\n                            '<span class=\"page-link\" id=\"page-link-' +\n                            page_index +\n                            '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' +\n                            page_index +\n                            '\">' +\n                            page_index +\n                            \"</a></span>\";\n                    }\n                }\n\n                // show last page\n                if (max_page < num_pages) {\n                    tmpl +=\n                        \"...\" +\n                        '<span class=\"page-link\" id=\"page-link-' +\n                        num_pages +\n                        '\"><a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"' +\n                        num_pages +\n                        '\">' +\n                        num_pages +\n                        \"</a></span>\";\n                }\n                tmpl += \"</span>\";\n\n                // Show all link\n                tmpl +=\n                    '<span class=\"page-link\" id=\"show-all-link-span\"> | <a href=\"javascript:void(0);\" onclick=\"return false;\" page_num=\"all\">Show All</a></span>' +\n                    \"</td>\" +\n                    \"</tr>\";\n            }\n\n            // Grid operations for multiple items.\n            if (options.show_item_checkboxes) {\n                // start template\n                tmpl +=\n                    \"<tr>\" +\n                    '<input type=\"hidden\" id=\"operation\" name=\"operation\" value=\"\">' +\n                    \"<td></td>\" +\n                    '<td colspan=\"100\">' +\n                    'For <span class=\"grid-selected-count\"></span> selected items: ';\n\n                // configure buttons for operations\n                for (var i in options.operations) {\n                    var operation = options.operations[i];\n                    if (operation.allow_multiple) {\n                        tmpl +=\n                            '<input type=\"button\" value=\"' +\n                            operation.label +\n                            '\" class=\"operation-button action-button\">&nbsp;';\n                    }\n                }\n\n                // finalize template\n                tmpl += \"</td>\" + \"</tr>\";\n            }\n\n            // count global operations\n            var found_global = false;\n            for (i in options.operations) {\n                if (options.operations[i].global_operation) {\n                    found_global = true;\n                    break;\n                }\n            }\n\n            // add global operations\n            if (found_global) {\n                tmpl += \"<tr>\" + '<td colspan=\"100\">';\n                for (i in options.operations) {\n                    var operation = options.operations[i];\n                    if (operation.global_operation) {\n                        tmpl +=\n                            '<a class=\"action-button\" href=\"' +\n                            operation.global_operation +\n                            '\">' +\n                            operation.label +\n                            \"</a>\";\n                    }\n                }\n                tmpl += \"</td>\" + \"</tr>\";\n            }\n\n            // add legend\n            if (options.legend) {\n                tmpl +=\n                    \"<tr>\" +\n                    '<td colspan=\"100\">' +\n                    options.legend +\n                    \"</td>\" +\n                    \"</tr>\";\n            }\n\n            // return\n            return tmpl;\n        },\n\n        // template\n        message: function(options) {\n            var status = options.status == \"success\" ? \"done\" : options.status;\n            return (\n                \"<p>\" +\n                '<div class=\"' +\n                status +\n                'message transient-message\">' +\n                _.escape(options.message) +\n                \"</div>\" +\n                '<div style=\"clear: both\"></div>' +\n                \"</p>\"\n            );\n        },\n\n        // template\n        grid_filters: function(options) {\n            // get filters\n            var default_filter_dict = options.default_filter_dict;\n            var filters = options.filters;\n\n            // show advanced search if flag set or if there are filters for advanced search fields\n            var advanced_search_display = \"none\";\n            if (options.advanced_search) {\n                advanced_search_display = \"block\";\n            }\n\n            // identify columns with advanced filtering\n            var show_advanced_search_link = false;\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.filterable == \"advanced\") {\n                    var column_key = column.key;\n                    var f_key = filters[column_key];\n                    var d_key = default_filter_dict[column_key];\n                    if (f_key && d_key && f_key != d_key) {\n                        advanced_search_display = \"block\";\n                    }\n                    show_advanced_search_link = true;\n                }\n            }\n\n            // hide standard search if advanced is shown\n            var standard_search_display = \"block\";\n            if (advanced_search_display == \"block\") {\n                standard_search_display = \"none\";\n            }\n\n            //\n            // standard search\n            //\n            var tmpl =\n                '<div id=\"standard-search\" style=\"display: ' +\n                standard_search_display +\n                ';\">' +\n                \"<table>\" +\n                \"<tr>\" +\n                '<td style=\"padding: 0;\">' +\n                \"<table>\";\n\n            // add standard filters\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.filterable == \"standard\") {\n                    tmpl += this.grid_column_filter(options, column);\n                }\n            }\n\n            // finalize standard search\n            tmpl += \"</table>\" + \"</td>\" + \"</tr>\" + \"<tr>\" + \"<td>\";\n\n            // show advanced search link in standard display\n            if (show_advanced_search_link) {\n                tmpl +=\n                    '<a href=\"\" class=\"advanced-search-toggle\">Advanced Search</a>';\n            }\n\n            // finalize standard search display\n            tmpl += \"</td>\" + \"</tr>\" + \"</table>\" + \"</div>\";\n\n            //\n            // advanced search\n            //\n            tmpl +=\n                '<div id=\"advanced-search\" style=\"display: ' +\n                advanced_search_display +\n                '; margin-top: 5px; border: 1px solid #ccc;\">' +\n                \"<table>\" +\n                \"<tr>\" +\n                '<td style=\"text-align: left\" colspan=\"100\">' +\n                '<a href=\"\" class=\"advanced-search-toggle\">Close Advanced Search</a>' +\n                \"</td>\" +\n                \"</tr>\";\n\n            // add advanced filters\n            for (var i in options.columns) {\n                var column = options.columns[i];\n                if (column.filterable == \"advanced\") {\n                    tmpl += this.grid_column_filter(options, column);\n                }\n            }\n\n            // finalize advanced search template\n            tmpl += \"</table>\" + \"</div>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template\n        grid_column_filter: function(options, column) {\n            // collect parameters\n            var default_filter_dict = options.default_filter_dict;\n            var filters = options.filters;\n            var column_label = column.label;\n            var column_key = column.key;\n            if (column.filterable == \"advanced\") {\n                column_label = column_label.toLowerCase();\n            }\n\n            // start\n            var tmpl = \"<tr>\";\n\n            if (column.filterable == \"advanced\") {\n                tmpl +=\n                    '<td align=\"left\" style=\"padding-left: 10px\">' +\n                    column_label +\n                    \":</td>\";\n            }\n            tmpl += '<td style=\"padding-bottom: 1px;\">';\n            if (column.is_text) {\n                tmpl +=\n                    '<form class=\"text-filter-form\" column_key=\"' +\n                    column_key +\n                    '\" action=\"' +\n                    options.url +\n                    '\" method=\"get\" >';\n                // Carry forward filtering criteria with hidden inputs.\n                for (i in options.columns) {\n                    var temp_column = options.columns[i];\n                    var filter_value = filters[temp_column.key];\n                    if (filter_value) {\n                        if (filter_value != \"All\") {\n                            if (temp_column.is_text) {\n                                filter_value = JSON.stringify(filter_value);\n                            }\n                            tmpl +=\n                                '<input type=\"hidden\" id=\"' +\n                                temp_column.key +\n                                '\" name=\"f-' +\n                                temp_column.key +\n                                '\" value=\"' +\n                                filter_value +\n                                '\"/>';\n                        }\n                    }\n                }\n                // Print current filtering criteria and links to delete.\n                tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\n                // add filters\n                var column_filter = filters[column_key];\n                if (column_filter) {\n                    // identify type\n                    var type = jQuery.type(column_filter);\n\n                    // single filter value\n                    if (type == \"string\") {\n                        if (column_filter != \"All\") {\n                            // append template\n                            tmpl += this.filter_element(\n                                column_key,\n                                column_filter\n                            );\n                        }\n                    }\n\n                    // multiple filter values\n                    if (type == \"array\") {\n                        for (var i in column_filter) {\n                            // get filter\n                            var filter = column_filter[i];\n\n                            // copy filters and remove entry\n                            var params = column_filter;\n                            params = params.slice(i);\n\n                            // append template\n                            tmpl += this.filter_element(column_key, filter);\n                        }\n                    }\n                }\n\n                // close span\n                tmpl += \"</span>\";\n\n                // Set value, size of search input field. Minimum size is 20 characters.\n                var value = \"\";\n                if (column.filterable == \"standard\") {\n                    value = column.label.toLowerCase();\n                    var size = value.length;\n                    if (size < 20) {\n                        size = 20;\n                    }\n                    // +4 to account for space after placeholder\n                    size = size + 4;\n                }\n\n                // print input field for column\n                tmpl +=\n                    '<span class=\"search-box\">' +\n                    '<input class=\"search-box-input\" id=\"input-' +\n                    column_key +\n                    '-filter\" name=\"f-' +\n                    column_key +\n                    '\" type=\"text\" placeholder=\"' +\n                    value +\n                    '\" size=\"' +\n                    size +\n                    '\"/>' +\n                    '<button type=\"submit\" style=\"background: transparent; border: none; padding: 4px; margin: 0px;\">' +\n                    '<i class=\"fa fa-search\"></i>' +\n                    \"</button>\" +\n                    \"</span>\" +\n                    \"</form>\";\n            } else {\n                // filter criteria\n                tmpl += '<span id=\"' + column_key + '-filtering-criteria\">';\n\n                // add category filters\n                var seperator = false;\n                for (var cf_label in options.categorical_filters[column_key]) {\n                    // get category filter\n                    var cf = options.categorical_filters[column_key][cf_label];\n\n                    // each filter will have only a single argument, so get that single argument\n                    var cf_key = \"\";\n                    var cf_arg = \"\";\n                    for (var key in cf) {\n                        cf_key = key;\n                        cf_arg = cf[key];\n                    }\n\n                    // add seperator\n                    if (seperator) {\n                        tmpl += \" | \";\n                    }\n                    seperator = true;\n\n                    // add category\n                    var filter = filters[column_key];\n                    if (filter && cf[column_key] && filter == cf_arg) {\n                        tmpl +=\n                            '<span class=\"categorical-filter ' +\n                            column_key +\n                            '-filter current-filter\">' +\n                            cf_label +\n                            \"</span>\";\n                    } else {\n                        tmpl +=\n                            '<span class=\"categorical-filter ' +\n                            column_key +\n                            '-filter\">' +\n                            '<a href=\"javascript:void(0);\" filter_key=\"' +\n                            cf_key +\n                            '\" filter_val=\"' +\n                            cf_arg +\n                            '\">' +\n                            cf_label +\n                            \"</a>\" +\n                            \"</span>\";\n                    }\n                }\n                tmpl += \"</span>\";\n            }\n            tmpl += \"</td>\" + \"</tr>\";\n\n            // return template\n            return tmpl;\n        },\n\n        // template for filter items\n        filter_element: function(filter_key, filter_value) {\n            filter_value = Utils.sanitize(filter_value);\n            return (\n                '<span class=\"text-filter-val\">' +\n                filter_value +\n                '<a href=\"javascript:void(0);\" filter_key=\"' +\n                filter_key +\n                '\" filter_val=\"' +\n                filter_value +\n                '\">' +\n                '<i class=\"fa fa-times\" style=\"padding-left: 5px; padding-bottom: 6px;\"/>' +\n                \"</a>\" +\n                \"</span>\"\n            );\n        }\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/grid/grid-template.js","define([\"utils/utils\"], function(Utils) {\n    var View = Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    min: null,\n                    max: null,\n                    step: null,\n                    precise: false,\n                    split: 10000,\n                    value: null,\n                    onchange: function() {}\n                }).set(options);\n\n            // create new element\n            this.setElement(this._template());\n            this.$el.attr(\"id\", this.model.id);\n            this.$text = this.$(\".ui-form-slider-text\");\n            this.$slider = this.$(\".ui-form-slider-element\");\n\n            // add text field event\n            var pressed = [];\n            this.$text\n                .on(\"change\", function() {\n                    self.value($(this).val());\n                })\n                .on(\"keyup\", function(e) {\n                    pressed[e.which] = false;\n                })\n                .on(\"keydown\", function(e) {\n                    var v = e.which;\n                    pressed[v] = true;\n                    if (\n                        self.model.get(\"is_workflow\") &&\n                        pressed[16] &&\n                        v == 52\n                    ) {\n                        self.value(\"$\");\n                        event.preventDefault();\n                    } else if (\n                        !(\n                            v == 8 ||\n                            v == 9 ||\n                            v == 13 ||\n                            v == 37 ||\n                            v == 39 ||\n                            (v >= 48 && v <= 57 && !pressed[16]) ||\n                            (v >= 96 && v <= 105) ||\n                            ((v == 190 || v == 110) &&\n                                $(this)\n                                    .val()\n                                    .indexOf(\".\") == -1 &&\n                                self.model.get(\"precise\")) ||\n                            ((v == 189 || v == 109) &&\n                                $(this)\n                                    .val()\n                                    .indexOf(\"-\") == -1) ||\n                            self._isParameter($(this).val()) ||\n                            pressed[91] ||\n                            pressed[17]\n                        )\n                    ) {\n                        event.preventDefault();\n                    }\n                });\n\n            // build slider, cannot be rebuild in render\n            var opts = this.model.attributes;\n            this.has_slider =\n                opts.max !== null && opts.min !== null && opts.max > opts.min;\n            var step = opts.step;\n            if (!step) {\n                if (opts.precise && this.has_slider) {\n                    step = (opts.max - opts.min) / opts.split;\n                } else {\n                    step = 1.0;\n                }\n            }\n            if (this.has_slider) {\n                this.$text.addClass(\"ui-form-slider-left\");\n                this.$slider\n                    .slider({ min: opts.min, max: opts.max, step: step })\n                    .on(\"slide\", function(event, ui) {\n                        self.value(ui.value);\n                    });\n            } else {\n                this.$slider.hide();\n            }\n\n            // add listeners\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n        },\n\n        render: function() {\n            var value = this.model.get(\"value\");\n            this.has_slider && this.$slider.slider(\"value\", value);\n            value !== this.$text.val() && this.$text.val(value);\n        },\n\n        /** Set and return the current value */\n        value: function(new_val) {\n            var options = this.model.attributes;\n            if (new_val !== undefined) {\n                if (\n                    new_val !== null &&\n                    new_val !== \"\" &&\n                    !this._isParameter(new_val)\n                ) {\n                    isNaN(new_val) && (new_val = 0);\n                    !options.precise && (new_val = Math.round(new_val));\n                    options.max !== null &&\n                        (new_val = Math.min(new_val, options.max));\n                    options.min !== null &&\n                        (new_val = Math.max(new_val, options.min));\n                }\n                this.model.set(\"value\", new_val);\n                this.model.trigger(\"change\");\n                options.onchange(new_val);\n            }\n            return this.model.get(\"value\");\n        },\n\n        /** Return true if the field contains a workflow parameter i.e. $('name') */\n        _isParameter: function(value) {\n            return (\n                this.model.get(\"is_workflow\") &&\n                String(value).substring(0, 1) === \"$\"\n            );\n        },\n\n        /** Slider template */\n        _template: function() {\n            return (\n                '<div class=\"ui-form-slider\">' +\n                '<input class=\"ui-form-slider-text\" type=\"text\"/>' +\n                '<div class=\"ui-form-slider-element\"/>' +\n                \"</div>\"\n            );\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-slider.js","/** This class creates/wraps a drill down element. */\ndefine([\"utils/utils\", \"mvc/ui/ui-options\"], function(Utils, Options) {\n    var View = Options.BaseIcons.extend({\n        initialize: function(options) {\n            options.type = options.display || \"checkbox\";\n            options.multiple = options.type == \"checkbox\";\n            Options.BaseIcons.prototype.initialize.call(this, options);\n        },\n\n        /** Set states for selected values */\n        _setValue: function(new_value) {\n            Options.BaseIcons.prototype._setValue.call(this, new_value);\n            if (\n                new_value !== undefined &&\n                new_value !== null &&\n                this.header_index\n            ) {\n                var self = this;\n                var values = $.isArray(new_value) ? new_value : [new_value];\n                _.each(values, function(v) {\n                    var list = self.header_index[v];\n                    _.each(list, function(element) {\n                        self._setState(element, true);\n                    });\n                });\n            }\n        },\n\n        /** Expand/collapse a sub group */\n        _setState: function(header_id, is_expanded) {\n            var $button = this.$(\".button-\" + header_id);\n            var $subgroup = this.$(\".subgroup-\" + header_id);\n            $button.data(\"is_expanded\", is_expanded);\n            if (is_expanded) {\n                $subgroup.show();\n                $button\n                    .removeClass(\"fa-plus-square\")\n                    .addClass(\"fa-minus-square\");\n            } else {\n                $subgroup.hide();\n                $button\n                    .removeClass(\"fa-minus-square\")\n                    .addClass(\"fa-plus-square\");\n            }\n        },\n\n        /** Template to create options tree */\n        _templateOptions: function() {\n            var self = this;\n            this.header_index = {};\n\n            // attach event handler\n            function attach($el, header_id) {\n                var $button = $el.find(\".button-\" + header_id);\n                $button.on(\"click\", function() {\n                    self._setState(header_id, !$button.data(\"is_expanded\"));\n                });\n            }\n\n            // recursive function which iterates through options\n            function iterate($tmpl, options, header) {\n                header = header || [];\n                for (var i in options) {\n                    var level = options[i];\n                    var has_options = level.options && level.options.length > 0;\n                    var new_header = header.slice(0);\n                    self.header_index[level.value] = new_header.slice(0);\n                    var $group = $(\"<div/>\");\n                    if (has_options) {\n                        var header_id = Utils.uid();\n                        var $button = $(\"<span/>\")\n                            .addClass(\"button-\" + header_id)\n                            .addClass(\"ui-drilldown-button fa fa-plus-square\");\n                        var $subgroup = $(\"<div/>\")\n                            .addClass(\"subgroup-\" + header_id)\n                            .addClass(\"ui-drilldown-subgroup\");\n                        $group.append(\n                            $(\"<div/>\")\n                                .append($button)\n                                .append(\n                                    self._templateOption({\n                                        label: level.name,\n                                        value: level.value\n                                    })\n                                )\n                        );\n                        new_header.push(header_id);\n                        iterate($subgroup, level.options, new_header);\n                        $group.append($subgroup);\n                        attach($group, header_id);\n                    } else {\n                        $group.append(\n                            self._templateOption({\n                                label: level.name,\n                                value: level.value\n                            })\n                        );\n                    }\n                    $tmpl.append($group);\n                }\n            }\n\n            // iterate through options and create dom\n            var $tmpl = $(\"<div/>\");\n            iterate($tmpl, this.model.get(\"data\"));\n            return $tmpl;\n        },\n\n        /** Template for drill down view */\n        _template: function() {\n            return $(\"<div/>\")\n                .addClass(\"ui-options-list drilldown-container\")\n                .attr(\"id\", this.model.id);\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-drilldown.js","/**\n    This class creates a form section and populates it with input elements. It also handles repeat blocks and conditionals by recursively creating new sub sections.\n*/\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/ui/ui-misc\",\n        \"mvc/ui/ui-portlet\",\n        \"mvc/form/form-repeat\",\n        \"mvc/form/form-input\",\n        \"mvc/form/form-parameters\"\n    ],\n    function(Utils, Ui, Portlet, Repeat, InputElement, Parameters) {\n        var View = Backbone.View.extend({\n            initialize: function(app, options) {\n                this.app = app;\n                this.inputs = options.inputs;\n                this.parameters = new Parameters();\n                this.setElement($(\"<div/>\"));\n                this.render();\n            },\n\n            /** Render section view */\n            render: function() {\n                var self = this;\n                this.$el.empty();\n                _.each(this.inputs, function(input) {\n                    self.add(input);\n                });\n            },\n\n            /** Add a new input element */\n            add: function(input) {\n                var input_def = jQuery.extend(true, {}, input);\n                input_def.id = input.id = Utils.uid();\n                this.app.input_list[input_def.id] = input_def;\n                switch (input_def.type) {\n                    case \"conditional\":\n                        this._addConditional(input_def);\n                        break;\n                    case \"repeat\":\n                        this._addRepeat(input_def);\n                        break;\n                    case \"section\":\n                        this._addSection(input_def);\n                        break;\n                    default:\n                        this._addRow(input_def);\n                }\n            },\n\n            /** Add a conditional block */\n            _addConditional: function(input_def) {\n                var self = this;\n                input_def.test_param.id = input_def.id;\n                this.app.model.get(\"sustain_conditionals\") &&\n                    (input_def.test_param.disabled = true);\n                var field = this._addRow(input_def.test_param);\n\n                // set onchange event for test parameter\n                field.model &&\n                    field.model.set(\"onchange\", function(value) {\n                        var selectedCase = self.app.data.matchCase(\n                            input_def,\n                            value\n                        );\n                        for (var i in input_def.cases) {\n                            var case_def = input_def.cases[i];\n                            var section_row = self.$(\n                                \"#\" + input_def.id + \"-section-\" + i\n                            );\n                            var nonhidden = false;\n                            for (var j in case_def.inputs) {\n                                if (!case_def.inputs[j].hidden) {\n                                    nonhidden = true;\n                                    break;\n                                }\n                            }\n                            if (i == selectedCase && nonhidden) {\n                                section_row.fadeIn(\"fast\");\n                            } else {\n                                section_row.hide();\n                            }\n                        }\n                        self.app.trigger(\"change\");\n                    });\n\n                // add conditional sub sections\n                for (var i in input_def.cases) {\n                    var sub_section = new View(this.app, {\n                        inputs: input_def.cases[i].inputs\n                    });\n                    this._append(\n                        sub_section.$el.addClass(\"ui-form-section\"),\n                        input_def.id + \"-section-\" + i\n                    );\n                }\n\n                // trigger refresh on conditional input field after all input elements have been created\n                field.trigger(\"change\");\n            },\n\n            /** Add a repeat block */\n            _addRepeat: function(input_def) {\n                var self = this;\n                var block_index = 0;\n\n                // create repeat block element\n                var repeat = new Repeat.View({\n                    title: input_def.title || \"Repeat\",\n                    min: input_def.min,\n                    max: input_def.max,\n                    onnew: function() {\n                        create(input_def.inputs);\n                        self.app.trigger(\"change\");\n                    }\n                });\n\n                // helper function to create new repeat blocks\n                function create(inputs) {\n                    var sub_section_id =\n                        input_def.id + \"-section-\" + block_index++;\n                    var sub_section = new View(self.app, { inputs: inputs });\n                    repeat.add({\n                        id: sub_section_id,\n                        $el: sub_section.$el,\n                        ondel: function() {\n                            repeat.del(sub_section_id);\n                            self.app.trigger(\"change\");\n                        }\n                    });\n                }\n\n                //\n                // add parsed/minimum number of repeat blocks\n                //\n                var n_cache = _.size(input_def.cache);\n                for (\n                    var i = 0;\n                    i <\n                    Math.max(\n                        Math.max(n_cache, input_def.min || 0),\n                        input_def.default || 0\n                    );\n                    i++\n                ) {\n                    create(i < n_cache ? input_def.cache[i] : input_def.inputs);\n                }\n\n                // hide options\n                this.app.model.get(\"sustain_repeats\") && repeat.hideOptions();\n\n                // create input field wrapper\n                var input_element = new InputElement(this.app, {\n                    label: input_def.title || input_def.name,\n                    help: input_def.help,\n                    field: repeat\n                });\n                this._append(input_element.$el, input_def.id);\n            },\n\n            /** Add a customized section */\n            _addSection: function(input_def) {\n                var portlet = new Portlet.View({\n                    title: input_def.title || input_def.name,\n                    cls: \"ui-portlet-section\",\n                    collapsible: true,\n                    collapsible_button: true,\n                    collapsed: !input_def.expanded\n                });\n                portlet.append(\n                    new View(this.app, { inputs: input_def.inputs }).$el\n                );\n                portlet.append(\n                    $(\"<div/>\")\n                        .addClass(\"ui-form-info\")\n                        .html(input_def.help)\n                );\n                this.app.on(\"expand\", function(input_id) {\n                    portlet.$(\"#\" + input_id).length > 0 && portlet.expand();\n                });\n                this._append(portlet.$el, input_def.id);\n            },\n\n            /** Add a single input field element */\n            _addRow: function(input_def) {\n                var self = this;\n                var id = input_def.id;\n                input_def.onchange =\n                    input_def.onchange ||\n                    function() {\n                        self.app.trigger(\"change\", id);\n                    };\n                var field = this.parameters.create(input_def);\n                this.app.field_list[id] = field;\n                var input_element = new InputElement(this.app, {\n                    name: input_def.name,\n                    label: input_def.hide_label\n                        ? \"\"\n                        : input_def.label || input_def.name,\n                    value: input_def.value,\n                    text_value: input_def.text_value,\n                    collapsible_value: input_def.collapsible_value,\n                    collapsible_preview: input_def.collapsible_preview,\n                    help: input_def.help,\n                    argument: input_def.argument,\n                    disabled: input_def.disabled,\n                    color: input_def.color,\n                    style: input_def.style,\n                    backdrop: input_def.backdrop,\n                    hidden: input_def.hidden,\n                    fixed: input_def.fixed,\n                    field: field\n                });\n                this.app.element_list[id] = input_element;\n                this._append(input_element.$el, input_def.id);\n                return field;\n            },\n\n            /** Append a new element to the form i.e. input element, repeat block, conditionals etc. */\n            _append: function($el, id) {\n                this.$el.append($el.addClass(\"section-row\").attr(\"id\", id));\n            }\n        });\n\n        return {\n            View: View\n        };\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-section.js","/** This class creates a ui component which enables the dynamic creation of portlets */\ndefine([\"utils/utils\", \"mvc/ui/ui-portlet\", \"mvc/ui/ui-misc\"], function(\n    Utils,\n    Portlet,\n    Ui\n) {\n    var View = Backbone.View.extend({\n        initialize: function(options) {\n            this.list = {};\n            this.options = Utils.merge(options, {\n                title: \"Repeat\",\n                empty_text: \"Not available.\",\n                max: null,\n                min: null\n            });\n            this.button_new = new Ui.ButtonIcon({\n                icon: \"fa-plus\",\n                title: \"Insert \" + this.options.title,\n                tooltip: \"Add new \" + this.options.title + \" block\",\n                cls: \"ui-button-icon ui-clear-float form-repeat-add\",\n                onclick: function() {\n                    options.onnew && options.onnew();\n                }\n            });\n            this.setElement(\n                $(\"<div/>\")\n                    .append((this.$list = $(\"<div/>\")))\n                    .append($(\"<div/>\").append(this.button_new.$el))\n            );\n        },\n\n        /** Number of repeat blocks */\n        size: function() {\n            return _.size(this.list);\n        },\n\n        /** Add new repeat block */\n        add: function(options) {\n            if (!options.id || this.list[options.id]) {\n                Galaxy.emit.debug(\n                    \"form-repeat::add()\",\n                    \"Duplicate or invalid repeat block id.\"\n                );\n                return;\n            }\n            var button_delete = new Ui.ButtonIcon({\n                icon: \"fa-trash-o\",\n                tooltip: \"Delete this repeat block\",\n                cls: \"ui-button-icon-plain form-repeat-delete\",\n                onclick: function() {\n                    options.ondel && options.ondel();\n                }\n            });\n            var portlet = new Portlet.View({\n                id: options.id,\n                title: \"placeholder\",\n                cls: options.cls || \"ui-portlet-repeat\",\n                operations: { button_delete: button_delete }\n            });\n            portlet.append(options.$el);\n            portlet.$el.addClass(\"section-row\").hide();\n            this.list[options.id] = portlet;\n            this.$list.append(portlet.$el.fadeIn(\"fast\"));\n            this.options.max > 0 &&\n                this.size() >= this.options.max &&\n                this.button_new.disable();\n            this._refresh();\n        },\n\n        /** Delete repeat block */\n        del: function(id) {\n            if (!this.list[id]) {\n                Galaxy.emit.debug(\n                    \"form-repeat::del()\",\n                    \"Invalid repeat block id.\"\n                );\n                return;\n            }\n            this.$list.find(\"#\" + id).remove();\n            delete this.list[id];\n            this.button_new.enable();\n            this._refresh();\n        },\n\n        /** Remove all */\n        delAll: function() {\n            for (var id in this.list) {\n                this.del(id);\n            }\n        },\n\n        /** Hides add/del options */\n        hideOptions: function() {\n            this.button_new.$el.hide();\n            _.each(this.list, function(portlet) {\n                portlet.hideOperation(\"button_delete\");\n            });\n            _.isEmpty(this.list) &&\n                this.$el.append(\n                    $(\"<div/>\")\n                        .addClass(\"ui-form-info\")\n                        .html(this.options.empty_text)\n                );\n        },\n\n        /** Refresh view */\n        _refresh: function() {\n            var index = 0;\n            for (var id in this.list) {\n                var portlet = this.list[id];\n                portlet.title(++index + \": \" + this.options.title);\n                portlet[\n                    this.size() > this.options.min\n                        ? \"showOperation\"\n                        : \"hideOperation\"\n                ](\"button_delete\");\n            }\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-repeat.js","/**\n    This class creates a form input element wrapper\n*/\ndefine([], function() {\n    return Backbone.View.extend({\n        initialize: function(app, options) {\n            this.app = app;\n            this.app_options = app.model ? app.model.attributes : {};\n            this.field = (options && options.field) || new Backbone.View();\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    text_enable: this.app_options.text_enable || \"Enable\",\n                    text_disable: this.app_options.text_disable || \"Disable\",\n                    cls_enable:\n                        this.app_options.cls_enable ||\n                        \"fa fa-caret-square-o-down\",\n                    cls_disable:\n                        this.app_options.cls_disable ||\n                        \"fa fa-caret-square-o-up\",\n                    always_refresh: this.app_options.always_refresh\n                }).set(options);\n\n            // set element and link components\n            this.setElement(this._template());\n            this.$field = this.$(\".ui-form-field\");\n            this.$info = this.$(\".ui-form-info\");\n            this.$preview = this.$(\".ui-form-preview\");\n            this.$collapsible = this.$(\".ui-form-collapsible\");\n            this.$collapsible_text = this.$(\".ui-form-collapsible-text\");\n            this.$collapsible_icon = this.$(\".ui-form-collapsible-icon\");\n            this.$title = this.$(\".ui-form-title\");\n            this.$title_text = this.$(\".ui-form-title-text\");\n            this.$error_text = this.$(\".ui-form-error-text\");\n            this.$error = this.$(\".ui-form-error\");\n            this.$backdrop = this.$(\".ui-form-backdrop\");\n\n            // add field element\n            this.$field.prepend(this.field.$el);\n\n            // decide wether to expand or collapse fields\n            var collapsible_value = this.model.get(\"collapsible_value\");\n            this.field.collapsed =\n                collapsible_value !== undefined &&\n                JSON.stringify(this.model.get(\"value\")) ==\n                    JSON.stringify(collapsible_value);\n            this.listenTo(this.model, \"change\", this.render, this);\n            this.render();\n\n            // add click handler\n            var self = this;\n            this.$collapsible.on(\"click\", function() {\n                self.field.collapsed = !self.field.collapsed;\n                app.trigger && app.trigger(\"change\");\n                self.render();\n            });\n\n            // hide error on value change\n            if (this.field.model && !this.model.get(\"always_refresh\")) {\n                this.listenTo(this.field.model, \"change:value\", function() {\n                    self.reset();\n                });\n            }\n        },\n\n        /** Set backdrop for input element */\n        backdrop: function() {\n            this.model.set(\"backdrop\", true);\n        },\n\n        /** Set error text */\n        error: function(text) {\n            this.model.set(\"error_text\", text);\n        },\n\n        /** Reset this view */\n        reset: function() {\n            !this.model.get(\"fixed\") && this.model.set(\"error_text\", null);\n        },\n\n        render: function() {\n            // render help\n            $(\".tooltip\").hide();\n            var help_text = this.model.get(\"help\", \"\");\n            var help_argument = this.model.get(\"argument\");\n            if (\n                help_argument &&\n                help_text.indexOf(\"(\" + help_argument + \")\") == -1\n            ) {\n                help_text += \" (\" + help_argument + \")\";\n            }\n            this.$info.html(help_text);\n            // render visibility\n            this.$el[this.model.get(\"hidden\") ? \"hide\" : \"show\"]();\n            // render preview view for collapsed fields\n            this.$preview\n                [\n                    (this.field.collapsed &&\n                        this.model.get(\"collapsible_preview\")) ||\n                    this.model.get(\"disabled\")\n                        ? \"show\"\n                        : \"hide\"\n                ]()\n                .html(_.escape(this.model.get(\"text_value\")));\n            // render error messages\n            var error_text = this.model.get(\"error_text\");\n            this.$error[error_text ? \"show\" : \"hide\"]();\n            this.$el[error_text ? \"addClass\" : \"removeClass\"](\"ui-error\");\n            this.$error_text.html(error_text);\n            // render backdrop\n            this.$backdrop[this.model.get(\"backdrop\") ? \"show\" : \"hide\"]();\n            // render input field\n            this.field.collapsed || this.model.get(\"disabled\")\n                ? this.$field.hide()\n                : this.$field.show();\n            // render input field color and style\n            this.field.model &&\n                this.field.model.set({\n                    color: this.model.get(\"color\"),\n                    style: this.model.get(\"style\")\n                });\n            // render collapsible options\n            if (\n                !this.model.get(\"disabled\") &&\n                this.model.get(\"collapsible_value\") !== undefined\n            ) {\n                var collapsible_state = this.field.collapsed\n                    ? \"enable\"\n                    : \"disable\";\n                this.$title_text.hide();\n                this.$collapsible.show();\n                this.$collapsible_text.text(this.model.get(\"label\"));\n                this.$collapsible_icon\n                    .removeClass()\n                    .addClass(\"icon\")\n                    .addClass(this.model.get(\"cls_\" + collapsible_state))\n                    .attr(\n                        \"data-original-title\",\n                        this.model.get(\"text_\" + collapsible_state)\n                    )\n                    .tooltip({ placement: \"bottom\" });\n            } else {\n                this.$title_text.show().text(this.model.get(\"label\"));\n                this.$collapsible.hide();\n            }\n        },\n\n        _template: function() {\n            return $(\"<div/>\")\n                .addClass(\"ui-form-element\")\n                .append(\n                    $(\"<div/>\")\n                        .addClass(\"ui-form-error ui-error\")\n                        .append($(\"<span/>\").addClass(\"fa fa-arrow-down\"))\n                        .append($(\"<span/>\").addClass(\"ui-form-error-text\"))\n                )\n                .append(\n                    $(\"<div/>\")\n                        .addClass(\"ui-form-title\")\n                        .append(\n                            $(\"<div/>\")\n                                .addClass(\"ui-form-collapsible\")\n                                .append(\n                                    $(\"<i/>\").addClass(\n                                        \"ui-form-collapsible-icon\"\n                                    )\n                                )\n                                .append(\n                                    $(\"<span/>\").addClass(\n                                        \"ui-form-collapsible-text\"\n                                    )\n                                )\n                        )\n                        .append($(\"<span/>\").addClass(\"ui-form-title-text\"))\n                )\n                .append(\n                    $(\"<div/>\")\n                        .addClass(\"ui-form-field\")\n                        .append($(\"<span/>\").addClass(\"ui-form-info\"))\n                        .append($(\"<div/>\").addClass(\"ui-form-backdrop\"))\n                )\n                .append($(\"<div/>\").addClass(\"ui-form-preview\"));\n        }\n    });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-input.js","/**\n    This class creates input elements. New input parameter types should be added to the types dictionary.\n*/\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/ui/ui-misc\",\n        \"mvc/ui/ui-select-content\",\n        \"mvc/ui/ui-select-library\",\n        \"mvc/ui/ui-select-ftp\",\n        \"mvc/ui/ui-select-genomespace\",\n        \"mvc/ui/ui-color-picker\"\n    ],\n    function(\n        Utils,\n        Ui,\n        SelectContent,\n        SelectLibrary,\n        SelectFtp,\n        SelectGenomeSpace,\n        ColorPicker\n    ) {\n        // create form view\n        return Backbone.Model.extend({\n            /** Available parameter types */\n            types: {\n                text: \"_fieldText\",\n                password: \"_fieldText\",\n                select: \"_fieldSelect\",\n                data_column: \"_fieldSelect\",\n                genomebuild: \"_fieldSelect\",\n                data: \"_fieldData\",\n                data_collection: \"_fieldData\",\n                integer: \"_fieldSlider\",\n                float: \"_fieldSlider\",\n                boolean: \"_fieldBoolean\",\n                drill_down: \"_fieldDrilldown\",\n                color: \"_fieldColor\",\n                hidden: \"_fieldHidden\",\n                hidden_data: \"_fieldHidden\",\n                baseurl: \"_fieldHidden\",\n                library_data: \"_fieldLibrary\",\n                ftpfile: \"_fieldFtp\",\n                upload: \"_fieldUpload\",\n                genomespacefile: \"_fieldGenomeSpace\"\n            },\n\n            /** Returns an input field for a given field type */\n            create: function(input_def) {\n                var fieldClass = this.types[input_def.type];\n                var field =\n                    typeof this[fieldClass] === \"function\"\n                        ? this[fieldClass].call(this, input_def)\n                        : null;\n                if (!field) {\n                    field = input_def.options\n                        ? this._fieldSelect(input_def)\n                        : this._fieldText(input_def);\n                    Galaxy.emit.debug(\n                        \"form-parameters::_addRow()\",\n                        \"Auto matched field type (\" + input_def.type + \").\"\n                    );\n                }\n                input_def.value === undefined && (input_def.value = null);\n                field.value(input_def.value);\n                return field;\n            },\n\n            /** Data input field */\n            _fieldData: function(input_def) {\n                return new SelectContent.View({\n                    id: \"field-\" + input_def.id,\n                    extensions: input_def.extensions,\n                    optional: input_def.optional,\n                    multiple: input_def.multiple,\n                    type: input_def.type,\n                    flavor: input_def.flavor,\n                    data: input_def.options,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Select/Checkbox/Radio options field */\n            _fieldSelect: function(input_def) {\n                // show text field e.g. in workflow editor\n                if (input_def.is_workflow) {\n                    return this._fieldText(input_def);\n                }\n\n                // customize properties\n                if (input_def.type == \"data_column\") {\n                    input_def.error_text =\n                        \"Missing columns in referenced dataset.\";\n                }\n\n                // identify available options\n                var data = input_def.data;\n                if (!data) {\n                    data = [];\n                    _.each(input_def.options, function(option) {\n                        data.push({ label: option[0], value: option[1] });\n                    });\n                }\n\n                // identify display type\n                var SelectClass = Ui.Select;\n                switch (input_def.display) {\n                    case \"checkboxes\":\n                        SelectClass = Ui.Checkbox;\n                        break;\n                    case \"radio\":\n                        SelectClass = Ui.Radio;\n                        break;\n                    case \"radiobutton\":\n                        SelectClass = Ui.RadioButton;\n                        break;\n                }\n\n                // create select field\n                return new SelectClass.View({\n                    id: \"field-\" + input_def.id,\n                    data: data,\n                    error_text: input_def.error_text || \"No options available\",\n                    readonly: input_def.readonly,\n                    multiple: input_def.multiple,\n                    optional: input_def.optional,\n                    onchange: input_def.onchange,\n                    individual: input_def.individual,\n                    searchable: input_def.flavor !== \"workflow\"\n                });\n            },\n\n            /** Drill down options field */\n            _fieldDrilldown: function(input_def) {\n                // show text field e.g. in workflow editor\n                if (input_def.is_workflow) {\n                    return this._fieldText(input_def);\n                }\n\n                // create drill down field\n                return new Ui.Drilldown.View({\n                    id: \"field-\" + input_def.id,\n                    data: input_def.options,\n                    display: input_def.display,\n                    optional: input_def.optional,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Text input field */\n            _fieldText: function(input_def) {\n                // field replaces e.g. a select field\n                if (input_def.options && input_def.data) {\n                    input_def.area = input_def.multiple;\n                    if (Utils.isEmpty(input_def.value)) {\n                        input_def.value = null;\n                    } else {\n                        if ($.isArray(input_def.value)) {\n                            var str_value = \"\";\n                            for (var i in input_def.value) {\n                                str_value += String(input_def.value[i]);\n                                if (!input_def.multiple) {\n                                    break;\n                                }\n                                str_value += \"\\n\";\n                            }\n                            input_def.value = str_value;\n                        }\n                    }\n                }\n                // create input element\n                return new Ui.Input({\n                    id: \"field-\" + input_def.id,\n                    type: input_def.type,\n                    area: input_def.area,\n                    readonly: input_def.readonly,\n                    placeholder: input_def.placeholder,\n                    datalist: input_def.datalist,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Slider field */\n            _fieldSlider: function(input_def) {\n                return new Ui.Slider.View({\n                    id: \"field-\" + input_def.id,\n                    precise: input_def.type == \"float\",\n                    is_workflow: input_def.is_workflow,\n                    min: input_def.min,\n                    max: input_def.max,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Hidden field */\n            _fieldHidden: function(input_def) {\n                return new Ui.Hidden({\n                    id: \"field-\" + input_def.id,\n                    info: input_def.info\n                });\n            },\n\n            /** Boolean field */\n            _fieldBoolean: function(input_def) {\n                return new Ui.RadioButton.View({\n                    id: \"field-\" + input_def.id,\n                    data: [\n                        { label: \"Yes\", value: \"true\" },\n                        { label: \"No\", value: \"false\" }\n                    ],\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Color picker field */\n            _fieldColor: function(input_def) {\n                return new ColorPicker({\n                    id: \"field-\" + input_def.id,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** Library dataset field */\n            _fieldLibrary: function(input_def) {\n                return new SelectLibrary.View({\n                    id: \"field-\" + input_def.id,\n                    optional: input_def.optional,\n                    multiple: input_def.multiple,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** FTP file field */\n            _fieldFtp: function(input_def) {\n                return new SelectFtp.View({\n                    id: \"field-\" + input_def.id,\n                    optional: input_def.optional,\n                    multiple: input_def.multiple,\n                    onchange: input_def.onchange\n                });\n            },\n\n            /** GenomeSpace file select field\n         */\n            _fieldGenomeSpace: function(input_def) {\n                var self = this;\n                return new SelectGenomeSpace.View({\n                    id: \"field-\" + input_def.id,\n                    onchange: function() {\n                        self.app.trigger(\"change\");\n                    }\n                });\n            },\n\n            /** Upload file field */\n            _fieldUpload: function(input_def) {\n                return new Ui.Upload({\n                    id: \"field-\" + input_def.id,\n                    onchange: input_def.onchange\n                });\n            }\n        });\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-parameters.js","define([\"utils/utils\", \"mvc/ui/ui-misc\", \"mvc/ui/ui-select-default\"], function(\n    Utils,\n    Ui,\n    Select\n) {\n    /** Batch mode variations */\n    var Batch = { DISABLED: \"disabled\", ENABLED: \"enabled\", LINKED: \"linked\" };\n\n    /** List of available content selectors options */\n    var Configurations = {\n        data: [\n            {\n                src: \"hda\",\n                icon: \"fa-file-o\",\n                tooltip: \"Single dataset\",\n                multiple: false,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.LINKED\n            },\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.LINKED\n            }\n        ],\n        data_multiple: [\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collections\",\n                multiple: true,\n                batch: Batch.DISABLED\n            }\n        ],\n        data_collection: [\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.DISABLED\n            }\n        ],\n        workflow_data: [\n            {\n                src: \"hda\",\n                icon: \"fa-file-o\",\n                tooltip: \"Single dataset\",\n                multiple: false,\n                batch: Batch.DISABLED\n            }\n        ],\n        workflow_data_multiple: [\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.DISABLED\n            }\n        ],\n        workflow_data_collection: [\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.DISABLED\n            }\n        ],\n        module_data: [\n            {\n                src: \"hda\",\n                icon: \"fa-file-o\",\n                tooltip: \"Single dataset\",\n                multiple: false,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hda\",\n                icon: \"fa-files-o\",\n                tooltip: \"Multiple datasets\",\n                multiple: true,\n                batch: Batch.ENABLED\n            }\n        ],\n        module_data_collection: [\n            {\n                src: \"hdca\",\n                icon: \"fa-folder-o\",\n                tooltip: \"Dataset collection\",\n                multiple: false,\n                batch: Batch.DISABLED\n            },\n            {\n                src: \"hdca\",\n                icon: \"fa-folder\",\n                tooltip: \"Multiple collections\",\n                multiple: true,\n                batch: Batch.ENABLED\n            }\n        ]\n    };\n\n    /** View for hda and hdca content selector ui elements */\n    var View = Backbone.View.extend({\n        initialize: function(options) {\n            var self = this;\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    src_labels: { hda: \"dataset\", hdca: \"dataset collection\" },\n                    pagelimit: 100,\n                    statustimer: 1000\n                }).set(options);\n            this.setElement($(\"<div/>\").addClass(\"ui-select-content\"));\n            this.button_product = new Ui.RadioButton.View({\n                value: \"false\",\n                data: [\n                    {\n                        icon: \"fa fa-chain\",\n                        value: \"false\",\n                        tooltip:\n                            \"Linked inputs will be run in matched order with other datasets e.g. use this for matching forward and reverse reads.\"\n                    },\n                    {\n                        icon: \"fa fa-chain-broken\",\n                        value: \"true\",\n                        tooltip:\n                            \"Unlinked dataset inputs will be run against *all* other inputs.\"\n                    }\n                ]\n            });\n            var $batch_div = $(\"<div/>\")\n                .addClass(\"ui-form-info\")\n                .append($(\"<i/>\").addClass(\"fa fa-sitemap\"))\n                .append(\n                    $(\"<span/>\").html(\n                        \"This is a batch mode input field. Separate jobs will be triggered for each dataset selection.\"\n                    )\n                );\n            this.$batch = {\n                linked: $batch_div.clone(),\n                enabled: $batch_div\n                    .clone()\n                    .append(\n                        $(\"<div/>\")\n                            .append(\n                                $(\"<div/>\")\n                                    .addClass(\"ui-form-title\")\n                                    .html(\"Batch options:\")\n                            )\n                            .append(this.button_product.$el)\n                    )\n                    .append($(\"<div/>\").css(\"clear\", \"both\"))\n            };\n\n            // add drag-drop event handlers\n            this.$el\n                .on(\"dragenter\", function(e) {\n                    this.lastenter = e.target;\n                    self.$el.addClass(\"ui-dragover\");\n                })\n                .on(\"dragover\", function(e) {\n                    e.preventDefault();\n                })\n                .on(\"dragleave\", function(e) {\n                    this.lastenter === e.target &&\n                        self.$el.removeClass(\"ui-dragover\");\n                })\n                .on(\"drop\", function(e) {\n                    self._handleDrop(e);\n                });\n\n            // track current history elements\n            this.history = {};\n\n            // add listeners\n            this.listenTo(this.model, \"change:data\", this._changeData, this);\n            this.listenTo(this.model, \"change:wait\", this._changeWait, this);\n            this.listenTo(\n                this.model,\n                \"change:current\",\n                this._changeCurrent,\n                this\n            );\n            this.listenTo(this.model, \"change:value\", this._changeValue, this);\n            this.listenTo(\n                this.model,\n                \"change:type change:optional change:multiple change:extensions\",\n                this._changeType,\n                this\n            );\n            this.render();\n\n            // add change event\n            this.on(\"change\", function() {\n                options.onchange && options.onchange(self.value());\n            });\n        },\n\n        render: function() {\n            this._changeType();\n            this._changeValue();\n            this._changeWait();\n        },\n\n        /** Indicate that select fields are being updated */\n        wait: function() {\n            this.model.set(\"wait\", true);\n        },\n\n        /** Indicate that the options update has been completed */\n        unwait: function() {\n            this.model.set(\"wait\", false);\n        },\n\n        /** Update data representing selectable options */\n        update: function(options) {\n            this.model.set(\"data\", options);\n        },\n\n        /** Return the currently selected dataset values */\n        value: function(new_value) {\n            new_value !== undefined && this.model.set(\"value\", new_value);\n            var current = this.model.get(\"current\");\n            if (this.config[current]) {\n                var id_list = this.fields[current].value();\n                if (id_list !== null) {\n                    id_list = $.isArray(id_list) ? id_list : [id_list];\n                    if (id_list.length > 0) {\n                        var result = this._batch({ values: [] });\n                        for (var i in id_list) {\n                            var details = this.history[\n                                id_list[i] + \"_\" + this.config[current].src\n                            ];\n                            if (details) {\n                                result.values.push(details);\n                            } else {\n                                Galaxy.emit.debug(\n                                    \"ui-select-content::value()\",\n                                    \"Requested details not found for '\" +\n                                        id_list[i] +\n                                        \"'.\"\n                                );\n                                return null;\n                            }\n                        }\n                        result.values.sort(function(a, b) {\n                            return a.hid - b.hid;\n                        });\n                        return result;\n                    }\n                }\n            } else {\n                Galaxy.emit.debug(\n                    \"ui-select-content::value()\",\n                    \"Invalid value/source '\" + new_value + \"'.\"\n                );\n            }\n            return null;\n        },\n\n        /** Change of current select field */\n        _changeCurrent: function() {\n            var self = this;\n            _.each(this.fields, function(field, i) {\n                if (self.model.get(\"current\") == i) {\n                    field.$el.show();\n                    _.each(self.$batch, function($batchfield, batchmode) {\n                        $batchfield[\n                            self.config[i].batch == batchmode ? \"show\" : \"hide\"\n                        ]();\n                    });\n                    self.button_type.value(i);\n                } else {\n                    field.$el.hide();\n                }\n            });\n        },\n\n        /** Change of type */\n        _changeType: function() {\n            var self = this;\n\n            // identify selector type identifier i.e. [ flavor ]_[ type ]_[ multiple ]\n            var config_id =\n                (this.model.get(\"flavor\")\n                    ? this.model.get(\"flavor\") + \"_\"\n                    : \"\") +\n                String(this.model.get(\"type\")) +\n                (this.model.get(\"multiple\") ? \"_multiple\" : \"\");\n            if (Configurations[config_id]) {\n                this.config = Configurations[config_id];\n            } else {\n                this.config = Configurations[\"data\"];\n                Galaxy.emit.debug(\n                    \"ui-select-content::_changeType()\",\n                    \"Invalid configuration/type id '\" + config_id + \"'.\"\n                );\n            }\n\n            // prepare extension component of error message\n            var data = self.model.get(\"data\");\n            var extensions = Utils.textify(this.model.get(\"extensions\"));\n            var src_labels = this.model.get(\"src_labels\");\n\n            // build views\n            this.fields = [];\n            this.button_data = [];\n            _.each(this.config, function(c, i) {\n                self.button_data.push({\n                    value: i,\n                    icon: c.icon,\n                    tooltip: c.tooltip\n                });\n                self.fields.push(\n                    new Select.View({\n                        optional: self.model.get(\"optional\"),\n                        multiple: c.multiple,\n                        searchable:\n                            !c.multiple ||\n                            (data &&\n                                data[c.src] &&\n                                data[c.src].length >\n                                    self.model.get(\"pagelimit\")),\n                        individual: true,\n                        error_text:\n                            \"No \" +\n                            (extensions ? extensions + \" \" : \"\") +\n                            (src_labels[c.src] || \"content\") +\n                            \" available.\",\n                        onchange: function() {\n                            self.trigger(\"change\");\n                        }\n                    })\n                );\n            });\n            this.button_type = new Ui.RadioButton.View({\n                value: this.model.get(\"current\"),\n                data: this.button_data,\n                onchange: function(value) {\n                    self.model.set(\"current\", value);\n                    self.trigger(\"change\");\n                }\n            });\n\n            // append views\n            this.$el.empty();\n            var button_width = 0;\n            if (this.fields.length > 1) {\n                this.$el.append(this.button_type.$el);\n                button_width = Math.max(0, this.fields.length * 36) + \"px\";\n            }\n            _.each(this.fields, function(field) {\n                self.$el.append(field.$el.css({ \"margin-left\": button_width }));\n            });\n            _.each(this.$batch, function($batchfield, batchmode) {\n                self.$el.append(\n                    $batchfield.css({ \"margin-left\": button_width })\n                );\n            });\n            this.model.set(\"current\", 0);\n            this._changeCurrent();\n            this._changeData();\n        },\n\n        /** Change of wait flag */\n        _changeWait: function() {\n            var self = this;\n            _.each(this.fields, function(field) {\n                field[self.model.get(\"wait\") ? \"wait\" : \"unwait\"]();\n            });\n        },\n\n        /** Change of available options */\n        _changeData: function() {\n            var options = this.model.get(\"data\");\n            var self = this;\n            var select_options = {};\n            _.each(options, function(items, src) {\n                select_options[src] = [];\n                _.each(items, function(item) {\n                    select_options[src].push({\n                        hid: item.hid,\n                        keep: item.keep,\n                        label: item.hid + \": \" + item.name,\n                        value: item.id,\n                        tags: item.tags\n                    });\n                    self.history[item.id + \"_\" + src] = item;\n                });\n            });\n            _.each(this.config, function(c, i) {\n                select_options[c.src] &&\n                    self.fields[i].add(select_options[c.src], function(a, b) {\n                        return b.hid - a.hid;\n                    });\n            });\n        },\n\n        /** Change of incoming value */\n        _changeValue: function() {\n            var new_value = this.model.get(\"value\");\n            if (new_value && new_value.values && new_value.values.length > 0) {\n                // create list with content ids\n                var list = [];\n                _.each(new_value.values, function(value) {\n                    list.push(value.id);\n                });\n                // sniff first suitable field type from config list\n                var src = new_value.values[0].src;\n                var multiple = new_value.values.length > 1;\n                for (var i = 0; i < this.config.length; i++) {\n                    var field = this.fields[i];\n                    var c = this.config[i];\n                    if (\n                        c.src == src &&\n                        [multiple, true].indexOf(c.multiple) !== -1\n                    ) {\n                        this.model.set(\"current\", i);\n                        field.value(list);\n                        break;\n                    }\n                }\n            } else {\n                _.each(this.fields, function(field) {\n                    field.value(null);\n                });\n            }\n        },\n\n        /** Handles drop events e.g. from history panel */\n        _handleDrop: function(ev) {\n            try {\n                var data = this.model.get(\"data\");\n                var current = this.model.get(\"current\");\n                var config = this.config[current];\n                var field = this.fields[current];\n                var drop_data = JSON.parse(\n                    ev.originalEvent.dataTransfer.getData(\"text\")\n                )[0];\n                var new_id = drop_data.id;\n                var new_src =\n                    drop_data.history_content_type == \"dataset\"\n                        ? \"hda\"\n                        : \"hdca\";\n                var new_value = { id: new_id, src: new_src };\n                if (data && _.findWhere(data[new_src], new_value)) {\n                    if (config.src == new_src) {\n                        var current_value = field.value();\n                        if (current_value && config.multiple) {\n                            if (current_value.indexOf(new_id) == -1) {\n                                current_value.push(new_id);\n                            }\n                        } else {\n                            current_value = new_id;\n                        }\n                        field.value(current_value);\n                    } else {\n                        this.model.set(\"value\", { values: [new_value] });\n                        this.model.trigger(\"change:value\");\n                    }\n                    this.trigger(\"change\");\n                    this._handleDropStatus(\"success\");\n                } else {\n                    this._handleDropStatus(\"danger\");\n                }\n            } catch (e) {\n                this._handleDropStatus(\"danger\");\n            }\n            ev.preventDefault();\n        },\n\n        /** Highlight drag result */\n        _handleDropStatus: function(status) {\n            var self = this;\n            this.$el\n                .removeClass(\"ui-dragover\")\n                .addClass(\"ui-dragover-\" + status);\n            setTimeout(function() {\n                self.$el.removeClass(\"ui-dragover-\" + status);\n            }, this.model.get(\"statustimer\"));\n        },\n\n        /** Assists in identifying the batch mode */\n        _batch: function(result) {\n            result[\"batch\"] = false;\n            var current = this.model.get(\"current\");\n            var config = this.config[current];\n            if (config.src == \"hdca\" && !config.multiple) {\n                var hdca = this.history[this.fields[current].value() + \"_hdca\"];\n                if (hdca && hdca.map_over_type) {\n                    result[\"batch\"] = true;\n                }\n            }\n            if (config.batch == Batch.LINKED || config.batch == Batch.ENABLED) {\n                result[\"batch\"] = true;\n                if (\n                    config.batch == Batch.ENABLED &&\n                    this.button_product.value() === \"true\"\n                ) {\n                    result[\"product\"] = true;\n                }\n            }\n            return result;\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-content.js","// dependencies\ndefine(\n    [\"utils/utils\", \"mvc/ui/ui-misc\", \"mvc/ui/ui-table\", \"mvc/ui/ui-list\"],\n    function(Utils, Ui, Table, List) {\n        // collection of libraries\n        var Libraries = Backbone.Collection.extend({\n            url: Galaxy.root + \"api/libraries?deleted=false\"\n        });\n\n        // collection of dataset\n        var LibraryDatasets = Backbone.Collection.extend({\n            initialize: function() {\n                var self = this;\n                this.config = new Backbone.Model({ library_id: null });\n                this.config.on(\"change\", function() {\n                    self.fetch({ reset: true });\n                });\n            },\n            url: function() {\n                return (\n                    Galaxy.root +\n                    \"api/libraries/\" +\n                    this.config.get(\"library_id\") +\n                    \"/contents\"\n                );\n            }\n        });\n\n        // hda/hdca content selector ui element\n        var View = Backbone.View.extend({\n            // initialize\n            initialize: function(options) {\n                // link this\n                var self = this;\n\n                // collections\n                this.libraries = new Libraries();\n                this.datasets = new LibraryDatasets();\n\n                // link app and options\n                this.options = options;\n\n                // select field for the library\n                // TODO: Remove this once the library API supports searching for library datasets\n                this.library_select = new Ui.Select.View({\n                    onchange: function(value) {\n                        self.datasets.config.set(\"library_id\", value);\n                    }\n                });\n\n                // create ui-list view to keep track of selected data libraries\n                this.dataset_list = new List.View({\n                    name: \"dataset\",\n                    optional: options.optional,\n                    multiple: options.multiple,\n                    onchange: function() {\n                        self.trigger(\"change\");\n                    }\n                });\n\n                // add reset handler for fetched libraries\n                this.libraries.on(\"reset\", function() {\n                    var data = [];\n                    self.libraries.each(function(model) {\n                        data.push({\n                            value: model.id,\n                            label: model.get(\"name\")\n                        });\n                    });\n                    self.library_select.update(data);\n                });\n\n                // add reset handler for fetched library datasets\n                this.datasets.on(\"reset\", function() {\n                    var data = [];\n                    var library_current = self.library_select.text();\n                    if (library_current !== null) {\n                        self.datasets.each(function(model) {\n                            if (model.get(\"type\") === \"file\") {\n                                data.push({\n                                    value: model.id,\n                                    label: model.get(\"name\")\n                                });\n                            }\n                        });\n                    }\n                    self.dataset_list.update(data);\n                });\n\n                // add change event. fires on trigger\n                this.on(\"change\", function() {\n                    options.onchange && options.onchange(self.value());\n                });\n\n                // create elements\n                this.setElement(this._template());\n                this.$(\".library-select\").append(this.library_select.$el);\n                this.$el.append(this.dataset_list.$el);\n\n                // initial fetch of libraries\n                this.libraries.fetch({\n                    reset: true,\n                    success: function() {\n                        self.library_select.trigger(\"change\");\n                        if (self.options.value !== undefined) {\n                            self.value(self.options.value);\n                        }\n                    }\n                });\n            },\n\n            /** Return/Set currently selected library datasets */\n            value: function(val) {\n                return this.dataset_list.value(val);\n            },\n\n            /** Template */\n            _template: function() {\n                return (\n                    '<div class=\"ui-select-library\">' +\n                    '<div class=\"library ui-margin-bottom\">' +\n                    '<span class=\"library-title\">Select Library</span>' +\n                    '<span class=\"library-select\"/>' +\n                    \"</div>\" +\n                    \"</div>\"\n                );\n            }\n        });\n\n        return {\n            View: View\n        };\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-library.js","// dependencies\ndefine([\"utils/utils\", \"mvc/ui/ui-list\"], function(Utils, List) {\n    /**\n * FTP file selector\n */\n    var View = Backbone.View.extend({\n        // initialize\n        initialize: function(options) {\n            // link this\n            var self = this;\n\n            // create ui-list view to keep track of selected ftp files\n            this.ftpfile_list = new List.View({\n                name: \"file\",\n                optional: options.optional,\n                multiple: options.multiple,\n                onchange: function() {\n                    options.onchange && options.onchange(self.value());\n                }\n            });\n\n            // create elements\n            this.setElement(this.ftpfile_list.$el);\n\n            // initial fetch of ftps\n            Utils.get({\n                url: Galaxy.root + \"api/remote_files\",\n                success: function(response) {\n                    var data = [];\n                    for (var i in response) {\n                        data.push({\n                            value: response[i][\"path\"],\n                            label: response[i][\"path\"]\n                        });\n                    }\n                    self.ftpfile_list.update(data);\n                }\n            });\n        },\n\n        /** Return/Set currently selected ftp datasets */\n        value: function(val) {\n            return this.ftpfile_list.value(val);\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-ftp.js","// dependencies\ndefine([\"utils/utils\", \"mvc/ui/ui-misc\", \"mvc/tool/tool-genomespace\"], function(\n    Utils,\n    Ui,\n    GenomespaceBrowser\n) {\n    /**\n * GenomeSpace file selector\n */\n    var View = Backbone.View.extend({\n        // initialize\n        initialize: function(options) {\n            // link this\n            var self = this;\n\n            // create insert new list element button\n            this.browse_button = new Ui.ButtonIcon({\n                title: \"Browse\",\n                icon: \"fa fa-sign-in\",\n                tooltip: \"Browse GenomeSpace\",\n                onclick: function() {\n                    self.browseGenomeSpace();\n                }\n            });\n\n            // create genomespace filepath textbox\n            this.filename_textbox = new Ui.Input();\n\n            // create genomespace token textbox\n            this.token_textbox = new Ui.Input({\n                type: \"password\"\n            });\n\n            // create elements\n            this.setElement(this._template(options));\n            this.$(\".ui-gs-browse-button\").append(this.browse_button.$el);\n            this.$(\".ui-gs-filename-textbox\").append(this.filename_textbox.$el);\n            this.$(\".ui-gs-token-textbox\").append(this.token_textbox.$el);\n        },\n\n        /** Browse GenomeSpace */\n        browseGenomeSpace: function(options) {\n            var self = this;\n            GenomespaceBrowser.openFileBrowser({\n                successCallback: function(data) {\n                    self.value(data.destination + \"^\" + data.token);\n                }\n            });\n        },\n\n        /** Main Template */\n        _template: function(options) {\n            return (\n                '<div class=\"ui-gs-select-file\">' +\n                '<div class=\"ui-gs-browse-field\">' +\n                '<span class=\"ui-gs-browse-button\" />' +\n                '<span class=\"ui-gs-filename-textbox\" />' +\n                \"</div>\" +\n                '<div class=\"ui-gs-token-field\">' +\n                '<span class=ui-gs-label\"><div class=\"ui-gs-token-label\">Token</div></span>' +\n                '<span class=\"ui-gs-token-textbox\" />' +\n                \"</div>\" +\n                \"</div>\"\n            );\n        },\n\n        /** Return/Set currently selected genomespace filename/token */\n        value: function(new_value) {\n            // check if new_value is defined\n            if (new_value !== undefined) {\n                this._setValue(new_value);\n            } else {\n                return this._getValue();\n            }\n        },\n\n        // get value\n        _getValue: function() {\n            return (\n                this.filename_textbox.value() + \"^\" + this.token_textbox.value()\n            );\n        },\n\n        // set value\n        _setValue: function(new_value) {\n            if (new_value) {\n                values = new_value.split(\"^\");\n                this.filename_textbox.value(values[0]);\n                this.token_textbox.value(values[1]);\n            }\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-select-genomespace.js","// Provides support for interacting with the GenomeSpace File Browser popup dialogue\ndefine([], function() {\n    // tool form templates\n    return {\n        openFileBrowser: function(options) {\n            var GS_UI_URL = window.Galaxy.config.genomespace_ui_url;\n            var GS_UPLOAD_URL =\n                GS_UI_URL + \"upload/loadUrlToGenomespace.html?getLocation=true\";\n\n            var newWin = window.open(\n                GS_UPLOAD_URL,\n                \"GenomeSpace File Browser\",\n                \"height=360px,width=600px\"\n            );\n\n            successCalBack = options[\"successCallback\"];\n            window.addEventListener(\n                \"message\",\n                function(e) {\n                    successCalBack(e.data);\n                },\n                false\n            );\n\n            newWin.focus();\n\n            if (options[\"errorCallback\"] != null)\n                newWin.setCallbackOnGSUploadError = config[\"errorCallback\"];\n        }\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/tool/tool-genomespace.js","/** Renders the color picker used e.g. in the tool form **/\ndefine([\"utils/utils\"], function(Utils) {\n    return Backbone.View.extend({\n        colors: {\n            standard: [\n                \"c00000\",\n                \"ff0000\",\n                \"ffc000\",\n                \"ffff00\",\n                \"92d050\",\n                \"00b050\",\n                \"00b0f0\",\n                \"0070c0\",\n                \"002060\",\n                \"7030a0\"\n            ],\n            base: [\n                \"ffffff\",\n                \"000000\",\n                \"eeece1\",\n                \"1f497d\",\n                \"4f81bd\",\n                \"c0504d\",\n                \"9bbb59\",\n                \"8064a2\",\n                \"4bacc6\",\n                \"f79646\"\n            ],\n            theme: [\n                [\n                    \"f2f2f2\",\n                    \"7f7f7f\",\n                    \"ddd9c3\",\n                    \"c6d9f0\",\n                    \"dbe5f1\",\n                    \"f2dcdb\",\n                    \"ebf1dd\",\n                    \"e5e0ec\",\n                    \"dbeef3\",\n                    \"fdeada\"\n                ],\n                [\n                    \"d8d8d8\",\n                    \"595959\",\n                    \"c4bd97\",\n                    \"8db3e2\",\n                    \"b8cce4\",\n                    \"e5b9b7\",\n                    \"d7e3bc\",\n                    \"ccc1d9\",\n                    \"b7dde8\",\n                    \"fbd5b5\"\n                ],\n                [\n                    \"bfbfbf\",\n                    \"3f3f3f\",\n                    \"938953\",\n                    \"548dd4\",\n                    \"95b3d7\",\n                    \"d99694\",\n                    \"c3d69b\",\n                    \"b2a2c7\",\n                    \"92cddc\",\n                    \"fac08f\"\n                ],\n                [\n                    \"a5a5a5\",\n                    \"262626\",\n                    \"494429\",\n                    \"17365d\",\n                    \"366092\",\n                    \"953734\",\n                    \"76923c\",\n                    \"5f497a\",\n                    \"31859b\",\n                    \"e36c09\"\n                ],\n                [\n                    \"7f7f7e\",\n                    \"0c0c0c\",\n                    \"1d1b10\",\n                    \"0f243e\",\n                    \"244061\",\n                    \"632423\",\n                    \"4f6128\",\n                    \"3f3151\",\n                    \"205867\",\n                    \"974806\"\n                ]\n            ]\n        },\n\n        initialize: function(options) {\n            this.options = Utils.merge(options, {});\n            this.setElement(this._template());\n            this.$panel = this.$(\".ui-color-picker-panel\");\n            this.$view = this.$(\".ui-color-picker-view\");\n            this.$value = this.$(\".ui-color-picker-value\");\n            this.$header = this.$(\".ui-color-picker-header\");\n            this._build();\n            this.visible = false;\n            this.value(this.options.value);\n            this.$boxes = this.$(\".ui-color-picker-box\");\n            var self = this;\n            this.$boxes.on(\"click\", function() {\n                self.value($(this).css(\"background-color\"));\n                self.$header.trigger(\"click\");\n            });\n            this.$header.on(\"click\", function() {\n                self.visible = !self.visible;\n                if (self.visible) {\n                    self.$view.fadeIn(\"fast\");\n                } else {\n                    self.$view.fadeOut(\"fast\");\n                }\n            });\n        },\n\n        /** Get/set value */\n        value: function(new_val) {\n            if (new_val !== undefined && new_val !== null) {\n                this.$value.css(\"background-color\", new_val);\n                this.$(\".ui-color-picker-box\").empty();\n                this.$(this._getValue()).html(this._templateCheck());\n                this.options.onchange && this.options.onchange(new_val);\n            }\n            return this._getValue();\n        },\n\n        /** Get value from dom */\n        _getValue: function() {\n            var rgb = this.$value.css(\"background-color\");\n            rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n            if (rgb) {\n                function hex(x) {\n                    return (\"0\" + parseInt(x).toString(16)).slice(-2);\n                }\n                return \"#\" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);\n            } else {\n                return null;\n            }\n        },\n\n        /** Build color panel */\n        _build: function() {\n            this._content({ colors: this.colors.base });\n            for (var i in this.colors.theme) {\n                var line_def = {};\n                if (i == 0) {\n                    line_def[\"bottom\"] = true;\n                } else if (i != this.colors.theme.length - 1) {\n                    line_def[\"top\"] = true;\n                    line_def[\"bottom\"] = true;\n                } else {\n                    line_def[\"top\"] = true;\n                }\n                line_def[\"colors\"] = this.colors.theme[i];\n                this._content(line_def);\n            }\n            this._content({ colors: this.colors.standard });\n        },\n\n        /** Create content */\n        _content: function(options) {\n            var colors = options.colors;\n            var $content = $(this._templateContent());\n            var $line = $content.find(\".line\");\n            this.$panel.append($content);\n            for (var i in colors) {\n                var $box = $(this._templateBox(colors[i]));\n                if (options.top) {\n                    $box.css(\"border-top\", \"none\");\n                    $box.css(\"border-top-left-radius\", \"0px\");\n                    $box.css(\"border-top-right-radius\", \"0px\");\n                }\n                if (options.bottom) {\n                    $box.css(\"border-bottom\", \"none\");\n                    $box.css(\"border-bottom-left-radius\", \"0px\");\n                    $box.css(\"border-bottom-right-radius\", \"0px\");\n                }\n                $line.append($box);\n            }\n            return $content;\n        },\n\n        /** Check icon */\n        _templateCheck: function() {\n            return '<div class=\"ui-color-picker-check fa fa-check\"/>';\n        },\n\n        /** Content template */\n        _templateContent: function() {\n            return (\n                '<div class=\"ui-color-picker-content\">' +\n                '<div class=\"line\"/>' +\n                \"</div>\"\n            );\n        },\n\n        /** Box template */\n        _templateBox: function(color) {\n            return (\n                '<div id=\"' +\n                color +\n                '\" class=\"ui-color-picker-box\" style=\"background-color: #' +\n                color +\n                ';\"/>'\n            );\n        },\n\n        /** Main template */\n        _template: function() {\n            return (\n                '<div class=\"ui-color-picker\">' +\n                '<div class=\"ui-color-picker-header\">' +\n                '<div class=\"ui-color-picker-value\"/>' +\n                '<div class=\"ui-color-picker-label\">Select a color</div>' +\n                \"</div>\" +\n                '<div class=\"ui-color-picker-view ui-input\">' +\n                '<div class=\"ui-color-picker-panel\"/>' +\n                \"</div>\"\n            );\n            (\"</div>\");\n        }\n    });\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-color-picker.js","var jQuery = require(\"jquery\"),\n    $ = jQuery,\n    QUERY_STRING = require(\"utils/query-string-parsing\"),\n    Ui = require(\"mvc/ui/ui-misc\");\n\nvar Router = Backbone.Router.extend({\n    // TODO: not many client routes at this point - fill and remove from server.\n    // since we're at root here, this may be the last to be routed entirely on the client.\n    initialize: function(page, options) {\n        this.page = page;\n        this.options = options;\n    },\n\n    /** helper to push a new navigation state */\n    push: function(url, data) {\n        data = data || {};\n        data.__identifer = Math.random()\n            .toString(36)\n            .substr(2);\n        if (!$.isEmptyObject(data)) {\n            url += url.indexOf(\"?\") == -1 ? \"?\" : \"&\";\n            url += $.param(data, true);\n        }\n        Galaxy.params = data;\n        this.navigate(url, { trigger: true });\n    },\n\n    /** override to parse query string into obj and send to each route */\n    execute: function(callback, args, name) {\n        Galaxy.debug(\"router execute:\", callback, args, name);\n        var queryObj = QUERY_STRING.parse(args.pop());\n        args.push(queryObj);\n        if (callback) {\n            if (this.authenticate(args, name)) {\n                callback.apply(this, args);\n            } else {\n                this.access_denied();\n            }\n        }\n    },\n\n    authenticate: function(args, name) {\n        return true;\n    },\n\n    access_denied: function() {\n        this.page.display(\n            new Ui.Message({\n                status: \"danger\",\n                message:\n                    \"You must be logged in with proper credentials to make this request.\",\n                persistent: true\n            })\n        );\n    }\n});\n\nmodule.exports = Router;\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/layout/router.js","/**\n *  This class contains backbone wrappers for basic ui elements such as Images, Labels, Buttons, Input fields etc.\n */\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/ui/ui-select-default\",\n        \"mvc/ui/ui-slider\",\n        \"mvc/ui/ui-options\",\n        \"mvc/ui/ui-drilldown\",\n        \"mvc/ui/ui-buttons\",\n        \"mvc/ui/ui-modal\"\n    ],\n    function(Utils, Select, Slider, Options, Drilldown, Buttons, Modal) {\n        /** Label wrapper */\n        var Label = Backbone.View.extend({\n            tagName: \"label\",\n            initialize: function(options) {\n                this.model =\n                    (options && options.model) || new Backbone.Model(options);\n                this.tagName = options.tagName || this.tagName;\n                this.setElement($(\"<\" + this.tagName + \"/>\"));\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            title: function(new_title) {\n                this.model.set(\"title\", new_title);\n            },\n            value: function() {\n                return this.model.get(\"title\");\n            },\n            render: function() {\n                this.$el\n                    .removeClass()\n                    .addClass(\"ui-label\")\n                    .addClass(this.model.get(\"cls\"))\n                    .html(this.model.get(\"title\"));\n                return this;\n            }\n        });\n\n        /** Displays messages used e.g. in the tool form */\n        var Message = Backbone.View.extend({\n            initialize: function(options) {\n                this.model =\n                    (options && options.model) ||\n                    new Backbone.Model({\n                        message: null,\n                        status: \"info\",\n                        cls: \"\",\n                        persistent: false,\n                        fade: true\n                    }).set(options);\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            update: function(options) {\n                this.model.set(options);\n            },\n            render: function() {\n                this.$el\n                    .removeClass()\n                    .addClass(\"ui-message\")\n                    .addClass(this.model.get(\"cls\"));\n                var status = this.model.get(\"status\");\n                if (this.model.get(\"large\")) {\n                    this.$el.addClass(\n                        ((status == \"success\" && \"done\") ||\n                            (status == \"danger\" && \"error\") ||\n                            status) + \"messagelarge\"\n                    );\n                } else {\n                    this.$el.addClass(\"alert\").addClass(\"alert-\" + status);\n                }\n                if (this.model.get(\"message\")) {\n                    this.$el.html(this.messageForDisplay());\n                    this.$el[this.model.get(\"fade\") ? \"fadeIn\" : \"show\"]();\n                    this.timeout && window.clearTimeout(this.timeout);\n                    if (!this.model.get(\"persistent\")) {\n                        var self = this;\n                        this.timeout = window.setTimeout(function() {\n                            self.model.set(\"message\", \"\");\n                        }, 3000);\n                    }\n                } else {\n                    this.$el.fadeOut();\n                }\n                return this;\n            },\n            messageForDisplay: function() {\n                return _.escape(this.model.get(\"message\"));\n            }\n        });\n\n        var UnescapedMessage = Message.extend({\n            messageForDisplay: function() {\n                return this.model.get(\"message\");\n            }\n        });\n\n        /** Renders an input element used e.g. in the tool form */\n        var Input = Backbone.View.extend({\n            initialize: function(options) {\n                this.model =\n                    (options && options.model) ||\n                    new Backbone.Model({\n                        type: \"text\",\n                        placeholder: \"\",\n                        disabled: false,\n                        readonly: false,\n                        visible: true,\n                        cls: \"\",\n                        area: false,\n                        color: null,\n                        style: null\n                    }).set(options);\n                this.tagName = this.model.get(\"area\") ? \"textarea\" : \"input\";\n                this.setElement($(\"<\" + this.tagName + \"/>\"));\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            events: {\n                input: \"_onchange\"\n            },\n            value: function(new_val) {\n                new_val !== undefined &&\n                    this.model.set(\n                        \"value\",\n                        typeof new_val === \"string\" ? new_val : \"\"\n                    );\n                return this.model.get(\"value\");\n            },\n            render: function() {\n                var self = this;\n                this.$el\n                    .removeClass()\n                    .addClass(\"ui-\" + this.tagName)\n                    .addClass(this.model.get(\"cls\"))\n                    .addClass(this.model.get(\"style\"))\n                    .attr(\"id\", this.model.id)\n                    .attr(\"type\", this.model.get(\"type\"))\n                    .attr(\"placeholder\", this.model.get(\"placeholder\"))\n                    .css(\"color\", this.model.get(\"color\") || \"\")\n                    .css(\"border-color\", this.model.get(\"color\") || \"\");\n                var datalist = this.model.get(\"datalist\");\n                if ($.isArray(datalist) && datalist.length > 0) {\n                    this.$el.autocomplete({\n                        source: function(request, response) {\n                            response(self.model.get(\"datalist\"));\n                        },\n                        change: function() {\n                            self._onchange();\n                        }\n                    });\n                }\n                if (this.model.get(\"value\") !== this.$el.val()) {\n                    this.$el.val(this.model.get(\"value\"));\n                }\n                _.each([\"readonly\", \"disabled\"], function(attr_name) {\n                    self.model.get(attr_name)\n                        ? self.$el.attr(attr_name, true)\n                        : self.$el.removeAttr(attr_name);\n                });\n                this.$el[this.model.get(\"visible\") ? \"show\" : \"hide\"]();\n                return this;\n            },\n            _onchange: function() {\n                this.value(this.$el.val());\n                this.model.get(\"onchange\") &&\n                    this.model.get(\"onchange\")(this.model.get(\"value\"));\n            }\n        });\n\n        /** Creates a hidden element input field used e.g. in the tool form */\n        var Hidden = Backbone.View.extend({\n            initialize: function(options) {\n                this.model =\n                    (options && options.model) || new Backbone.Model(options);\n                this.setElement(\n                    $(\"<div/>\")\n                        .append((this.$info = $(\"<div/>\")))\n                        .append((this.$hidden = $(\"<div/>\")))\n                );\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.render();\n            },\n            value: function(new_val) {\n                new_val !== undefined && this.model.set(\"value\", new_val);\n                return this.model.get(\"value\");\n            },\n            render: function() {\n                this.$el.attr(\"id\", this.model.id);\n                this.$hidden.val(this.model.get(\"value\"));\n                this.model.get(\"info\")\n                    ? this.$info.show().text(this.model.get(\"info\"))\n                    : this.$info.hide();\n                return this;\n            }\n        });\n\n        /** Creates a upload element input field */\n        var Upload = Backbone.View.extend({\n            initialize: function(options) {\n                var self = this;\n                this.model =\n                    (options && options.model) || new Backbone.Model(options);\n                this.setElement(\n                    $(\"<div/>\")\n                        .append((this.$info = $(\"<div/>\")))\n                        .append(\n                            (this.$file = $(\"<input/>\")\n                                .attr(\"type\", \"file\")\n                                .addClass(\"ui-margin-bottom\"))\n                        )\n                        .append(\n                            (this.$text = $(\"<textarea/>\")\n                                .addClass(\"ui-textarea\")\n                                .attr(\"disabled\", true))\n                        )\n                        .append(\n                            (this.$wait = $(\"<i/>\").addClass(\n                                \"fa fa-spinner fa-spin\"\n                            ))\n                        )\n                );\n                this.listenTo(this.model, \"change\", this.render, this);\n                this.$file.on(\"change\", function(e) {\n                    self._readFile(e);\n                });\n                this.render();\n            },\n            value: function(new_val) {\n                new_val !== undefined && this.model.set(\"value\", new_val);\n                return this.model.get(\"value\");\n            },\n            render: function() {\n                this.$el.attr(\"id\", this.model.id);\n                this.model.get(\"info\")\n                    ? this.$info.show().text(this.model.get(\"info\"))\n                    : this.$info.hide();\n                this.model.get(\"value\")\n                    ? this.$text.text(this.model.get(\"value\")).show()\n                    : this.$text.hide();\n                this.model.get(\"wait\") ? this.$wait.show() : this.$wait.hide();\n                return this;\n            },\n            _readFile: function(e) {\n                var self = this;\n                var file = e.target.files && e.target.files[0];\n                if (file) {\n                    var reader = new FileReader();\n                    reader.onload = function() {\n                        self.model.set({ wait: false, value: this.result });\n                    };\n                    this.model.set({ wait: true, value: null });\n                    reader.readAsText(file);\n                }\n            }\n        });\n\n        return {\n            Button: Buttons.ButtonDefault,\n            ButtonIcon: Buttons.ButtonIcon,\n            ButtonCheck: Buttons.ButtonCheck,\n            ButtonMenu: Buttons.ButtonMenu,\n            ButtonLink: Buttons.ButtonLink,\n            Input: Input,\n            Label: Label,\n            Message: Message,\n            UnescapedMessage: UnescapedMessage,\n            Upload: Upload,\n            Modal: Modal,\n            RadioButton: Options.RadioButton,\n            Checkbox: Options.Checkbox,\n            Radio: Options.Radio,\n            Select: Select,\n            Hidden: Hidden,\n            Slider: Slider,\n            Drilldown: Drilldown\n        };\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-misc.js","/** Generic form view */\ndefine([\"mvc/form/form-view\", \"mvc/ui/ui-misc\"], function(Form, Ui) {\n    var View = Backbone.View.extend({\n        initialize: function(options) {\n            this.model = new Backbone.Model(options);\n            this.url = this.model.get(\"url\");\n            this.redirect = this.model.get(\"redirect\");\n            this.setElement(\"<div/>\");\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            $.ajax({\n                url: Galaxy.root + this.url,\n                type: \"GET\"\n            })\n                .done(function(response) {\n                    var options = $.extend({}, self.model.attributes, response);\n                    var form = new Form({\n                        title: options.title,\n                        message: options.message,\n                        status: options.status || \"warning\",\n                        icon: options.icon,\n                        inputs: options.inputs,\n                        buttons: {\n                            submit: new Ui.Button({\n                                tooltip: options.submit_tooltip,\n                                title: options.submit_title || \"Save\",\n                                icon: options.submit_icon || \"fa-save\",\n                                cls: \"btn btn-primary ui-clear-float\",\n                                onclick: function() {\n                                    self._submit(form);\n                                }\n                            })\n                        }\n                    });\n                    self.$el.empty().append(form.$el);\n                })\n                .fail(function(response) {\n                    self.$el.empty().append(\n                        new Ui.Message({\n                            message:\n                                \"Failed to load resource \" + self.url + \".\",\n                            status: \"danger\",\n                            persistent: true\n                        }).$el\n                    );\n                });\n        },\n\n        _submit: function(form) {\n            var self = this;\n            $.ajax({\n                url: Galaxy.root + self.url,\n                data: JSON.stringify(form.data.create()),\n                type: \"PUT\",\n                contentType: \"application/json\"\n            })\n                .done(function(response) {\n                    var success_message = {\n                        message: response.message,\n                        status: \"success\",\n                        persistent: false\n                    };\n                    if (self.redirect) {\n                        window.location =\n                            Galaxy.root +\n                            self.redirect +\n                            \"?\" +\n                            $.param(success_message);\n                    } else {\n                        form.data.matchModel(response, function(\n                            input,\n                            input_id\n                        ) {\n                            form.field_list[input_id].value(input.value);\n                        });\n                        self._showMessage(form, success_message);\n                    }\n                })\n                .fail(function(response) {\n                    self._showMessage(form, {\n                        message: response.responseJSON.err_msg,\n                        status: \"danger\",\n                        persistent: false\n                    });\n                });\n        },\n\n        _showMessage: function(form, options) {\n            var $panel = form.$el\n                .parents()\n                .filter(function() {\n                    return (\n                        [\"auto\", \"scroll\"].indexOf($(this).css(\"overflow\")) !=\n                        -1\n                    );\n                })\n                .first();\n            $panel.animate({ scrollTop: 0 }, 500);\n            form.message.update(options);\n        }\n    });\n\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-wrapper.js","define([\"utils/utils\", \"mvc/ui/ui-misc\"], function(Utils, Ui) {\n    var View = Backbone.View.extend({\n        visible: false,\n        initialize: function(options) {\n            var self = this;\n            this.model =\n                (options && options.model) ||\n                new Backbone.Model({\n                    id: Utils.uid(),\n                    cls: \"ui-portlet\",\n                    title: \"\",\n                    icon: \"\",\n                    buttons: null,\n                    body: null,\n                    scrollable: true,\n                    nopadding: false,\n                    operations: null,\n                    collapsible: false,\n                    collapsible_button: false,\n                    collapsed: false,\n                    onchange_title: null\n                }).set(options);\n            this.setElement(this._template());\n\n            // link all dom elements\n            this.$body = this.$(\".portlet-body\");\n            this.$title_text = this.$(\".portlet-title-text\");\n            this.$title_icon = this.$(\".portlet-title-icon\");\n            this.$header = this.$(\".portlet-header\");\n            this.$content = this.$(\".portlet-content\");\n            this.$backdrop = this.$(\".portlet-backdrop\");\n            this.$buttons = this.$(\".portlet-buttons\");\n            this.$operations = this.$(\".portlet-operations\");\n\n            // add body to component list\n            this.model.get(\"body\") && this.append(this.model.get(\"body\"));\n\n            // add icon for collapsible option\n            this.collapsible_button = new Ui.ButtonIcon({\n                icon: \"fa-eye\",\n                tooltip: \"Collapse/Expand\",\n                cls: \"ui-button-icon-plain\",\n                onclick: function() {\n                    self[self.collapsed ? \"expand\" : \"collapse\"]();\n                }\n            });\n            this.render();\n        },\n\n        render: function() {\n            var self = this;\n            var options = this.model.attributes;\n            this.$el\n                .removeClass()\n                .addClass(options.cls)\n                .attr(\"id\", options.id);\n            this.$header[options.title ? \"show\" : \"hide\"]();\n            this.$title_text.html(options.title);\n            _.each([this.$content, this.$body], function($el) {\n                $el[options.nopadding ? \"addClass\" : \"removeClass\"](\n                    \"no-padding\"\n                );\n            });\n\n            // render title icon\n            if (options.icon) {\n                this.$title_icon\n                    .removeClass()\n                    .addClass(\"portlet-title-icon fa\")\n                    .addClass(options.icon)\n                    .show();\n            } else {\n                this.$title_icon.hide();\n            }\n\n            // make portlet collapsible\n            this.$title_text\n                [options.collapsible ? \"addClass\" : \"removeClass\"](\n                    \"no-highlight collapsible\"\n                )\n                .off();\n            if (options.collapsible) {\n                this.$title_text.on(\"click\", function() {\n                    self[self.collapsed ? \"expand\" : \"collapse\"]();\n                });\n                options.collapsed ? this.collapse() : this.expand();\n            }\n\n            // allow title editing\n            this.$title_text.prop(\"disabled\", !options.onchange_title);\n            options.onchange_title &&\n                this.$title_text.make_text_editable({\n                    on_finish: function(new_title) {\n                        options.onchange_title(new_title);\n                    }\n                });\n\n            // render buttons\n            if (options.buttons) {\n                this.$buttons.empty().show();\n                $.each(this.model.get(\"buttons\"), function(name, item) {\n                    item.$el.prop(\"id\", name);\n                    self.$buttons.append(item.$el);\n                });\n            } else {\n                this.$buttons.hide();\n            }\n\n            // render operations\n            this.$operations.empty;\n            if (options.collapsible_button) {\n                this.$operations.append(this.collapsible_button.$el);\n            }\n            if (options.operations) {\n                $.each(options.operations, function(name, item) {\n                    item.$el.prop(\"id\", name);\n                    self.$operations.append(item.$el);\n                });\n            }\n            return this;\n        },\n\n        /** Append new doms to body */\n        append: function($el) {\n            this.$body.append($el);\n        },\n\n        /** Remove all content */\n        empty: function() {\n            this.$body.empty();\n        },\n\n        /** Return header element */\n        header: function() {\n            return this.$header;\n        },\n\n        /** Return body element */\n        body: function() {\n            return this.$body;\n        },\n\n        /** Show portlet */\n        show: function() {\n            this.visible = true;\n            this.$el.fadeIn(\"fast\");\n        },\n\n        /** Hide portlet */\n        hide: function() {\n            this.visible = false;\n            this.$el.hide();\n        },\n\n        /** Enable a particular button */\n        enableButton: function(id) {\n            this.$buttons.find(\"#\" + id).prop(\"disabled\", false);\n        },\n\n        /** Disable a particular button */\n        disableButton: function(id) {\n            this.$buttons.find(\"#\" + id).prop(\"disabled\", true);\n        },\n\n        /** Hide a particular operation */\n        hideOperation: function(id) {\n            this.$operations.find(\"#\" + id).hide();\n        },\n\n        /** Show a particular operation */\n        showOperation: function(id) {\n            this.$operations.find(\"#\" + id).show();\n        },\n\n        /** Replaces the event callback of an existing operation */\n        setOperation: function(id, callback) {\n            this.$operations\n                .find(\"#\" + id)\n                .off(\"click\")\n                .on(\"click\", callback);\n        },\n\n        /** Change title */\n        title: function(new_title) {\n            new_title && this.$title_text.html(new_title);\n            return this.$title_text.html();\n        },\n\n        /** Collapse portlet */\n        collapse: function() {\n            this.collapsed = true;\n            this.$content.height(\"0%\");\n            this.$body.hide();\n            this.collapsible_button.setIcon(\"fa-eye-slash\");\n        },\n\n        /** Expand portlet */\n        expand: function() {\n            this.collapsed = false;\n            this.$content.height(\"100%\");\n            this.$body.fadeIn(\"fast\");\n            this.collapsible_button.setIcon(\"fa-eye\");\n        },\n\n        /** Disable content access */\n        disable: function() {\n            this.$backdrop.show();\n        },\n\n        /** Enable content access */\n        enable: function() {\n            this.$backdrop.hide();\n        },\n\n        _template: function() {\n            return $(\"<div/>\")\n                .append(\n                    $(\"<div/>\")\n                        .addClass(\"portlet-header\")\n                        .append($(\"<div/>\").addClass(\"portlet-operations\"))\n                        .append(\n                            $(\"<div/>\")\n                                .addClass(\"portlet-title\")\n                                .append(\n                                    $(\"<i/>\").addClass(\"portlet-title-icon\")\n                                )\n                                .append(\n                                    $(\"<span/>\").addClass(\"portlet-title-text\")\n                                )\n                        )\n                )\n                .append(\n                    $(\"<div/>\")\n                        .addClass(\"portlet-content\")\n                        .append($(\"<div/>\").addClass(\"portlet-body\"))\n                        .append($(\"<div/>\").addClass(\"portlet-buttons\"))\n                )\n                .append($(\"<div/>\").addClass(\"portlet-backdrop\"));\n        }\n    });\n    return {\n        View: View\n    };\n});\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/ui/ui-portlet.js","/**\n    This is the main class of the form plugin. It is referenced as 'app' in lower level modules.\n*/\ndefine(\n    [\n        \"utils/utils\",\n        \"mvc/ui/ui-portlet\",\n        \"mvc/ui/ui-misc\",\n        \"mvc/form/form-section\",\n        \"mvc/form/form-data\"\n    ],\n    function(Utils, Portlet, Ui, FormSection, FormData) {\n        return Backbone.View.extend({\n            initialize: function(options) {\n                this.model = new Backbone.Model({\n                    initial_errors: false,\n                    cls: \"ui-portlet-limited\",\n                    icon: null,\n                    always_refresh: true,\n                    status: \"warning\",\n                    hide_operations: false,\n                    onchange: function() {}\n                }).set(options);\n                this.setElement(\"<div/>\");\n                this.render();\n            },\n\n            /** Update available options */\n            update: function(new_model) {\n                var self = this;\n                this.data.matchModel(new_model, function(node, input_id) {\n                    var input = self.input_list[input_id];\n                    if (input && input.options) {\n                        if (!_.isEqual(input.options, node.options)) {\n                            input.options = node.options;\n                            var field = self.field_list[input_id];\n                            if (field.update) {\n                                var new_options = [];\n                                if (\n                                    [\n                                        \"data\",\n                                        \"data_collection\",\n                                        \"drill_down\"\n                                    ].indexOf(input.type) != -1\n                                ) {\n                                    new_options = input.options;\n                                } else {\n                                    for (var i in node.options) {\n                                        var opt = node.options[i];\n                                        if (opt.length > 2) {\n                                            new_options.push({\n                                                label: opt[0],\n                                                value: opt[1]\n                                            });\n                                        }\n                                    }\n                                }\n                                field.update(new_options);\n                                field.trigger(\"change\");\n                                Galaxy.emit.debug(\n                                    \"form-view::update()\",\n                                    \"Updating options for \" + input_id\n                                );\n                            }\n                        }\n                    }\n                });\n            },\n\n            /** Set form into wait mode */\n            wait: function(active) {\n                for (var i in this.input_list) {\n                    var field = this.field_list[i];\n                    var input = this.input_list[i];\n                    if (input.is_dynamic && field.wait && field.unwait) {\n                        field[active ? \"wait\" : \"unwait\"]();\n                    }\n                }\n            },\n\n            /** Highlight and scroll to input element (currently only used for error notifications) */\n            highlight: function(input_id, message, silent) {\n                var input_element = this.element_list[input_id];\n                if (input_element) {\n                    input_element.error(\n                        message || \"Please verify this parameter.\"\n                    );\n                    this.portlet.expand();\n                    this.trigger(\"expand\", input_id);\n                    if (!silent) {\n                        var $panel = this.$el\n                            .parents()\n                            .filter(function() {\n                                return (\n                                    [\"auto\", \"scroll\"].indexOf(\n                                        $(this).css(\"overflow\")\n                                    ) != -1\n                                );\n                            })\n                            .first();\n                        $panel.animate(\n                            {\n                                scrollTop:\n                                    $panel.scrollTop() +\n                                    input_element.$el.offset().top -\n                                    120\n                            },\n                            500\n                        );\n                    }\n                }\n            },\n\n            /** Highlights errors */\n            errors: function(options) {\n                this.trigger(\"reset\");\n                if (options && options.errors) {\n                    var error_messages = this.data.matchResponse(\n                        options.errors\n                    );\n                    for (var input_id in this.element_list) {\n                        var input = this.element_list[input_id];\n                        if (error_messages[input_id]) {\n                            this.highlight(\n                                input_id,\n                                error_messages[input_id],\n                                true\n                            );\n                        }\n                    }\n                }\n            },\n\n            /** Render tool form */\n            render: function() {\n                var self = this;\n                this.off(\"change\");\n                this.off(\"reset\");\n                // contains the dom field elements as created by the parameter factory i.e. form-parameters\n                this.field_list = {};\n                // contains input definitions/dictionaries as provided by the parameters to_dict() function through the api\n                this.input_list = {};\n                // contains the dom elements of each input element i.e. form-input which wraps the actual input field\n                this.element_list = {};\n                // converts the form into a json data structure\n                this.data = new FormData.Manager(this);\n                this._renderForm();\n                this.data.create();\n                this.model.get(\"initial_errors\") &&\n                    this.errors(this.model.attributes);\n                // add listener which triggers on checksum change, and reset the form input wrappers\n                var current_check = this.data.checksum();\n                this.on(\"change\", function(input_id) {\n                    var input = self.input_list[input_id];\n                    if (\n                        !input ||\n                        input.refresh_on_change ||\n                        self.model.get(\"always_refresh\")\n                    ) {\n                        var new_check = self.data.checksum();\n                        if (new_check != current_check) {\n                            current_check = new_check;\n                            self.model.get(\"onchange\")();\n                        }\n                    }\n                });\n                this.on(\"reset\", function() {\n                    _.each(self.element_list, function(input_element) {\n                        input_element.reset();\n                    });\n                });\n                return this;\n            },\n\n            /** Renders/appends dom elements of the form */\n            _renderForm: function() {\n                $(\".tooltip\").remove();\n                var options = this.model.attributes;\n                this.message = new Ui.UnescapedMessage();\n                this.section = new FormSection.View(this, {\n                    inputs: options.inputs\n                });\n                this.portlet = new Portlet.View({\n                    icon: options.icon,\n                    title: options.title,\n                    cls: options.cls,\n                    operations: !options.hide_operations && options.operations,\n                    buttons: options.buttons,\n                    collapsible: options.collapsible,\n                    collapsed: options.collapsed,\n                    onchange_title: options.onchange_title\n                });\n                this.portlet.append(this.message.$el);\n                this.portlet.append(this.section.$el);\n                this.$el.empty();\n                options.inputs && this.$el.append(this.portlet.$el);\n                options.message &&\n                    this.message.update({\n                        persistent: true,\n                        status: options.status,\n                        message: options.message\n                    });\n                Galaxy.emit.debug(\"form-view::initialize()\", \"Completed\");\n            }\n        });\n    }\n);\n\n\n\n// WEBPACK FOOTER //\n// ./galaxy/scripts/mvc/form/form-view.js"],"sourceRoot":""}
>>>>>>> dev
