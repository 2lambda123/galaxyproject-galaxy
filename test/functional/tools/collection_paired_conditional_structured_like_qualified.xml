<!-- test that structured_like references need to be qualified 
     i.e. contain section and conditional names -->
<tool id="collection_paired_conditional_structured_like_qualified" name="collection_paired_conditional_structured_like_qualified" version="0.1.0" profile="21.01">
  <!-- You usually wouldn't want to do this - just write the operation for
       a single dataset and allow the user to map that tool over the whole
       collection. -->
  <command>
        cat '${cond.input1.forward}' > '${list_output.forward}';
        cat '${cond.input1.reverse}' > '${list_output.reverse}'
  </command>
  <inputs>
    
    <param name="input1" type="data" format="data" optional="true" label="Input" help="Input collection..."/>
    <conditional name="cond">
      <param name="cond_param" type="select">
        <option value="paired">Paired</option>
      </param>
      <when value="paired">
        <param name="input1" type="data_collection" collection_type="paired" label="Input" help="Input collection..." format="data" />
      </when>
    </conditional>
  </inputs>
  <outputs>
    <collection name="list_output" structured_like="cond|input1" type="paired" label="Duplicate List" inherit_format="true">
      <!-- inherit_format can be used in conjunction with structured_like
           to perserve format. -->
    </collection>
  </outputs>
  <tests>
    <test>
      <conditional name="cond">
        <param name="input1">
          <collection type="paired">
            <element name="forward" value="simple_line.txt" ftype="txt" />
            <element name="reverse" value="simple_line_alternative.txt" ftype="txt" />
          </collection>
        </param>
      </conditional>
      <output_collection name="list_output" type="paired">
          <element name="forward" file="simple_line.txt" ftype="txt"/>
          <element name="reverse" file="simple_line_alternative.txt" ftype="txt"/>
      </output_collection>
    </test>
  </tests>
</tool>
